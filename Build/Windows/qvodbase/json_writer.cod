; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	F:\Projects\Git\YFNet\trunk\Src\include\json\json_writer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@D@std@@2HB	; std::numeric_limits<char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_W@std@@2HB	; std::numeric_limits<wchar_t>::max_digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_N@std@@2HB	; std::numeric_limits<bool>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@C@std@@2HB	; std::numeric_limits<signed char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@E@std@@2HB	; std::numeric_limits<unsigned char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?max_digits10@?$numeric_limits@F@std@@2HB	; std::numeric_limits<short>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?max_digits10@?$numeric_limits@G@std@@2HB	; std::numeric_limits<unsigned short>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?max_digits10@?$numeric_limits@H@std@@2HB	; std::numeric_limits<int>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?max_digits10@?$numeric_limits@I@std@@2HB	; std::numeric_limits<unsigned int>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?max_digits10@?$numeric_limits@J@std@@2HB	; std::numeric_limits<long>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?max_digits10@?$numeric_limits@K@std@@2HB	; std::numeric_limits<unsigned long>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_J@std@@2HB	; std::numeric_limits<__int64>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_K@std@@2HB	; std::numeric_limits<unsigned __int64>::max_digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 08H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_K@std@@2HB DD 015H	; std::numeric_limits<unsigned __int64>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_J@std@@2HB DD 014H	; std::numeric_limits<__int64>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@K@std@@2HB DD 0bH	; std::numeric_limits<unsigned long>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@J@std@@2HB DD 0bH	; std::numeric_limits<long>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@I@std@@2HB DD 0bH	; std::numeric_limits<unsigned int>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@H@std@@2HB DD 0bH	; std::numeric_limits<int>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@G@std@@2HB DD 06H	; std::numeric_limits<unsigned short>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@F@std@@2HB DD 06H	; std::numeric_limits<short>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@E@std@@2HB DD 04H	; std::numeric_limits<unsigned char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@C@std@@2HB DD 04H	; std::numeric_limits<signed char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_N@std@@2HB DD 00H	; std::numeric_limits<bool>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_W@std@@2HB DD 06H	; std::numeric_limits<wchar_t>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@D@std@@2HB DD 04H	; std::numeric_limits<char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 01H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
EXTRN	_strlen:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 492  : 		}

  00003	5d		 pop	 ebp

; 491  : 		return (_CSTD strlen(_First));

  00004	e9 00 00 00 00	 jmp	 _strlen
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	_memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  : 		}

  00003	5d		 pop	 ebp

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
EXTRN	_memset:PROC
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 521  : 		{	// assign _Count * _Ch to [_First, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 522  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  00003	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00007	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 _memset
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH

; 523  : 		}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000b	88 01		 mov	 BYTE PTR [ecx], al

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
; Function compile flags: /Ogsp
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 546  : 		{	// convert character to metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 547  : 		return ((unsigned char)_Ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00006	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 548  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
; Function compile flags: /Ogsp
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 552  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 553  : 		return (_Left == _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000b	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000d	f7 d8		 neg	 eax
  0000f	1b c0		 sbb	 eax, eax
  00011	40		 inc	 eax

; 554  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
; Function compile flags: /Ogsp
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 563  : 		return (EOF);

  00000	83 c8 ff	 or	 eax, -1

; 564  : 		}

  00003	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??0runtime_error@std@@QAE@PBD@Z			; std::runtime_error::runtime_error
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0runtime_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@PBD@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 170  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 171  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@PBD@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
; Function compile flags: /Ogsp
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
PUBLIC	?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ	; std::_Locinfo::_Getctype
EXTRN	__Getctype:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
;	COMDAT ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
_TEXT	SEGMENT
$T40618 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ PROC	; std::_Locinfo::_Getctype, COMDAT
; _this$ = ecx

; 117  : 		{	// return ctype stuff

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 118  : 		return (::_Getctype());

  00007	8d 45 f0	 lea	 eax, DWORD PTR $T40618[ebp]
  0000a	57		 push	 edi
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Getctype
  00011	8b f0		 mov	 esi, eax
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00016	8b f8		 mov	 edi, eax
  00018	a5		 movsd
  00019	a5		 movsd
  0001a	a5		 movsd
  0001b	59		 pop	 ecx
  0001c	a5		 movsd
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi

; 119  : 		}

  0001f	c9		 leave
  00020	c2 04 00	 ret	 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ENDP	; std::_Locinfo::_Getctype
_TEXT	ENDS
PUBLIC	?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ	; std::_Locinfo::_Getcvt
EXTRN	__Getcvt:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ PROC		; std::_Locinfo::_Getcvt, COMDAT
; _this$ = ecx

; 122  : 		{	// return codecvt stuff

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 123  : 		return (::_Getcvt());

  00003	e8 00 00 00 00	 call	 __Getcvt
  00008	8b c8		 mov	 ecx, eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 124  : 		}

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ENDP		; std::_Locinfo::_Getcvt
_TEXT	ENDS
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 71   : 			{	// construct with specified stamp value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 72   : 			}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
PUBLIC	??Bid@locale@std@@QAEIXZ			; std::locale::id::operator unsigned int
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
; Function compile flags: /Ogsp
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$15096 = -4					; size = 4
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = ecx

; 75   : 			{	// get stamp, with lazy allocation

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 76   : 			if (_Id == 0)

  00007	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0000a	75 24		 jne	 SHORT $LN2@operator

; 77   : 				{	// still zero, allocate stamp
; 78   : 				_BEGIN_LOCK(_LOCK_LOCALE)

  0000c	6a 00		 push	 0
  0000e	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15096[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 79   : 					if (_Id == 0)

  00016	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00019	75 0d		 jne	 SHORT $LN1@operator

; 80   : 						_Id = ++_Id_cnt;

  0001b	ff 05 00 00 00
	00		 inc	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00026	89 06		 mov	 DWORD PTR [esi], eax
$LN1@operator:

; 81   : 				_END_LOCK()

  00028	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15096[ebp]
  0002b	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN2@operator:

; 82   : 				}
; 83   : 			return (_Id);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	5e		 pop	 esi

; 84   : 			}

  00033	c9		 leave
  00034	c3		 ret	 0
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
_TEXT	ENDS
PUBLIC	?_Incref@facet@locale@std@@QAEXXZ		; std::locale::facet::_Incref
; Function compile flags: /Ogsp
;	COMDAT ?_Incref@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
__Lock$15102 = -4					; size = 4
?_Incref@facet@locale@std@@QAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 111  : 			{	// safely increment the reference count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 112  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00007	6a 00		 push	 0
  00009	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15102[ebp]
  0000c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 113  : 				if (_Refs < (size_t)(-1))

  00011	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00014	83 f8 ff	 cmp	 eax, -1
  00017	73 04		 jae	 SHORT $LN1@Incref

; 114  : 					++_Refs;

  00019	40		 inc	 eax
  0001a	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@Incref:

; 115  : 			_END_LOCK()

  0001d	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15102[ebp]
  00020	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00025	5e		 pop	 esi

; 116  : 			}

  00026	c9		 leave
  00027	c3		 ret	 0
?_Incref@facet@locale@std@@QAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
PUBLIC	?_Decref@facet@locale@std@@QAEPAV123@XZ		; std::locale::facet::_Decref
; Function compile flags: /Ogsp
;	COMDAT ?_Decref@facet@locale@std@@QAEPAV123@XZ
_TEXT	SEGMENT
__Lock$15107 = -4					; size = 4
?_Decref@facet@locale@std@@QAEPAV123@XZ PROC		; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 119  : 			{	// safely decrement the reference count, return this when dead

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 120  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00008	6a 00		 push	 0
  0000a	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15107[ebp]
  0000d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 121  : 				if (0 < _Refs && _Refs < (size_t)(-1))

  00012	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $LN1@Decref
  00019	83 f8 ff	 cmp	 eax, -1
  0001c	73 04		 jae	 SHORT $LN1@Decref

; 122  : 					--_Refs;

  0001e	48		 dec	 eax
  0001f	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN1@Decref:

; 123  : 				return (_Refs == 0 ? this : 0);

  00022	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00025	f7 de		 neg	 esi
  00027	1b f6		 sbb	 esi, esi
  00029	f7 d6		 not	 esi
  0002b	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15107[ebp]
  0002e	23 f7		 and	 esi, edi
  00030	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00035	5f		 pop	 edi
  00036	8b c6		 mov	 eax, esi
  00038	5e		 pop	 esi

; 124  : 			_END_LOCK()
; 125  : 			}

  00039	c9		 leave
  0003a	c3		 ret	 0
?_Decref@facet@locale@std@@QAEPAV123@XZ ENDP		; std::locale::facet::_Decref
_TEXT	ENDS
PUBLIC	?_Register@facet@locale@std@@QAEXXZ		; std::locale::facet::_Register
EXTRN	?_Facet_Register@facet@locale@std@@CAXPAV123@@Z:PROC ; std::locale::facet::_Facet_Register
; Function compile flags: /Ogsp
;	COMDAT ?_Register@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
?_Register@facet@locale@std@@QAEXXZ PROC		; std::locale::facet::_Register, COMDAT
; _this$ = ecx

; 129  :  #if defined(_M_CEE)
; 130  : 			_Facet_Register_m(this);
; 131  : 
; 132  :  #else /* defined(_M_CEE) */
; 133  : 			_Facet_Register(this);

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 ?_Facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::_Facet_Register
  00006	59		 pop	 ecx

; 134  :  #endif /* defined(_M_CEE) */
; 135  : 			}

  00007	c3		 ret	 0
?_Register@facet@locale@std@@QAEXXZ ENDP		; std::locale::facet::_Register
_TEXT	ENDS
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??1facet@locale@std@@UAE@XZ			; std::locale::facet::~facet
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efacet@locale@std@@UAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1facet@locale@std@@UAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@UAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 164  : 			{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@

; 165  : 			}

  00006	c3		 ret	 0
??1facet@locale@std@@UAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
PUBLIC	??0facet@locale@std@@IAE@I@Z			; std::locale::facet::facet
; Function compile flags: /Ogsp
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 170  : 			{	// construct with initial reference count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Initrefs$[ebp]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@
  0000e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 171  : 			}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
; Function compile flags: /Ogsp
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 309  : 		{	// construct by copying

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	89 0e		 mov	 DWORD PTR [esi], ecx

; 310  : 		_Ptr->_Incref();

  0000d	e8 00 00 00 00	 call	 ?_Incref@facet@locale@std@@QAEXXZ ; std::locale::facet::_Incref

; 311  : 		}

  00012	8b c6		 mov	 eax, esi
  00014	5e		 pop	 esi
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@XZ				; std::locale::locale
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@XZ:PROC	; std::locale::_Init
; Function compile flags: /Ogsp
;	COMDAT ??0locale@std@@QAE@XZ
_TEXT	SEGMENT
??0locale@std@@QAE@XZ PROC				; std::locale::locale, COMDAT
; _this$ = ecx

; 315  : 		{	// construct from current locale

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  00008	89 06		 mov	 DWORD PTR [esi], eax

; 316  : 		_Getgloballocale()->_Incref();

  0000a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0000f	8b c8		 mov	 ecx, eax
  00011	e8 00 00 00 00	 call	 ?_Incref@facet@locale@std@@QAEXXZ ; std::locale::facet::_Incref

; 317  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??0locale@std@@QAE@XZ ENDP				; std::locale::locale
_TEXT	ENDS
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
; Function compile flags: /Ogsp
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 410  : 		if (_Ptr != 0)

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 11		 je	 SHORT $LN4@locale

; 411  : 			_DELETE_CRT(_Ptr->_Decref());

  00006	e8 00 00 00 00	 call	 ?_Decref@facet@locale@std@@QAEPAV123@XZ ; std::locale::facet::_Decref
  0000b	85 c0		 test	 eax, eax
  0000d	74 08		 je	 SHORT $LN4@locale
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	6a 01		 push	 1
  00013	8b c8		 mov	 ecx, eax
  00015	ff 12		 call	 DWORD PTR [edx]
$LN4@locale:

; 412  : 		}

  00017	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
; Function compile flags: /Ogsp
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 436  : 		{	// look up a facet in locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 437  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 438  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR __Id$[ebp]
  00009	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  0000c	73 08		 jae	 SHORT $LN6@Getfacet
  0000e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00011	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00014	eb 02		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  00016	33 c0		 xor	 eax, eax
$LN7@Getfacet:

; 439  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00018	85 c0		 test	 eax, eax
  0001a	75 19		 jne	 SHORT $LN1@Getfacet
  0001c	38 41 14	 cmp	 BYTE PTR [ecx+20], al
  0001f	74 14		 je	 SHORT $LN1@Getfacet

; 440  : 			return (_Facptr);	// found facet or not transparent
; 441  : 		else
; 442  : 			{	// look in current locale
; 443  : 			locale::_Locimp *_Ptr = _Getgloballocale();

  00021	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 444  : 			return (_Id < _Ptr->_Facetcount
; 445  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 446  : 				: 0);	// no entry in current locale

  00026	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00029	73 08		 jae	 SHORT $LN8@Getfacet
  0002b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002e	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00031	eb 02		 jmp	 SHORT $LN1@Getfacet
$LN8@Getfacet:
  00033	33 c0		 xor	 eax, eax
$LN1@Getfacet:
  00035	5e		 pop	 esi

; 447  : 			}
; 448  : 		}

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gfacet@locale@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@UAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar@2
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_Gfacet@locale@std@@UAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??0ctype_base@std@@QAE@I@Z			; std::ctype_base::ctype_base
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ctype_base@std@@QAE@I@Z
_TEXT	SEGMENT
__Refs$ = 8						; size = 4
??0ctype_base@std@@QAE@I@Z PROC				; std::ctype_base::ctype_base, COMDAT
; _this$ = ecx

; 2011 : 		{	// default constructor

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Refs$[ebp]
  00008	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ctype_base@std@@6B@

; 2012 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0ctype_base@std@@QAE@I@Z ENDP				; std::ctype_base::ctype_base
_TEXT	ENDS
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
; Function compile flags: /Ogsp
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx

; 2016 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00006	c3		 ret	 0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar@3
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@3:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?widen@?$ctype@D@std@@QBEDD@Z			; std::ctype<char>::widen
; Function compile flags: /Ogsp
;	COMDAT ?widen@?$ctype@D@std@@QBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?widen@?$ctype@D@std@@QBEDD@Z PROC			; std::ctype<char>::widen, COMDAT
; _this$ = ecx

; 2324 : 		{	// widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2325 : 		return (do_widen(_Byte));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2326 : 		}

  00005	5d		 pop	 ebp

; 2325 : 		return (do_widen(_Byte));

  00006	ff 60 18	 jmp	 DWORD PTR [eax+24]
?widen@?$ctype@D@std@@QBEDD@Z ENDP			; std::ctype<char>::widen
_TEXT	ENDS
PUBLIC	?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<char>::_Init
; Function compile flags: /Ogsp
;	COMDAT ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T40700 = -16						; size = 16
__Lobj$ = 8						; size = 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z PROC		; std::ctype<char>::_Init, COMDAT
; _this$ = ecx

; 2399 : 		{	// initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 2400 : 		_Ctype = _Lobj._Getctype();

  00008	8d 45 f0	 lea	 eax, DWORD PTR $T40700[ebp]
  0000b	50		 push	 eax
  0000c	8b f9		 mov	 edi, ecx
  0000e	e8 00 00 00 00	 call	 __Getctype
  00013	83 c7 08	 add	 edi, 8
  00016	8b f0		 mov	 esi, eax
  00018	a5		 movsd
  00019	a5		 movsd
  0001a	a5		 movsd
  0001b	59		 pop	 ecx
  0001c	a5		 movsd
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi

; 2401 : 		}

  0001f	c9		 leave
  00020	c2 04 00	 ret	 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ENDP		; std::ctype<char>::_Init
_TEXT	ENDS
PUBLIC	??0error_code@std@@QAE@HABVerror_category@1@@Z	; std::error_code::error_code
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
;	COMDAT ??0error_code@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_code@std@@QAE@HABVerror_category@1@@Z PROC	; std::error_code::error_code, COMDAT
; _this$ = ecx

; 204  : 		{	// construct from error code and category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Cat$[ebp]
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 205  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0error_code@std@@QAE@HABVerror_category@1@@Z ENDP	; std::error_code::error_code
_TEXT	ENDS
PUBLIC	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z ; std::make_error_code
EXTRN	?iostream_category@std@@YAABVerror_category@1@XZ:PROC ; std::iostream_category
; Function compile flags: /Ogsp
;	COMDAT ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errno$ = 12						; size = 4
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z PROC ; std::make_error_code, COMDAT

; 446  : 	{	// make an error_code

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	return (error_code(_Errno, iostream_category()));

  00003	e8 00 00 00 00	 call	 ?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
  00008	8b 55 0c	 mov	 edx, DWORD PTR __Errno$[ebp]
  0000b	8b c8		 mov	 ecx, eax
  0000d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00010	89 10		 mov	 DWORD PTR [eax], edx
  00012	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 448  : 	}

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z ENDP ; std::make_error_code
_TEXT	ENDS
PUBLIC	?_Makestr@system_error@std@@AAEXXZ		; std::system_error::_Makestr
; Function compile flags: /Ogsp
;	COMDAT ?_Makestr@system_error@std@@AAEXXZ
_TEXT	SEGMENT
?_Makestr@system_error@std@@AAEXXZ PROC			; std::system_error::_Makestr, COMDAT
; _this$ = ecx

; 563  : //		_Mymes = this->runtime_error::what();
; 564  : //		if (!_Mymes.empty())
; 565  : //			_Mymes.append(": ");
; 566  : //		_Mymes.append(_Mycode.message());
; 567  : 		}

  00000	c3		 ret	 0
?_Makestr@system_error@std@@AAEXXZ ENDP			; std::system_error::_Makestr
_TEXT	ENDS
PUBLIC	??1system_error@std@@UAE@XZ			; std::system_error::~system_error
; Function compile flags: /Ogsp
;	COMDAT ??1system_error@std@@UAE@XZ
_TEXT	SEGMENT
??1system_error@std@@UAE@XZ PROC			; std::system_error::~system_error, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1system_error@std@@UAE@XZ ENDP			; std::system_error::~system_error
_TEXT	ENDS
PUBLIC	?rdstate@ios_base@std@@QBEHXZ			; std::ios_base::rdstate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = ecx

; 336  : 		return (_Mystate);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 337  : 		}

  00003	c3		 ret	 0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
PUBLIC	?good@ios_base@std@@QBE_NXZ			; std::ios_base::good
; Function compile flags: /Ogsp
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 358  : 		return (rdstate() == goodbit);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 0c	 cmp	 DWORD PTR [ecx+12], eax
  00005	0f 94 c0	 sete	 al

; 359  : 		}

  00008	c3		 ret	 0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
PUBLIC	?fail@ios_base@std@@QBE_NXZ			; std::ios_base::fail
; Function compile flags: /Ogsp
;	COMDAT ?fail@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?fail@ios_base@std@@QBE_NXZ PROC			; std::ios_base::fail, COMDAT
; _this$ = ecx

; 368  : 		return (((int)rdstate()
; 369  : 			& ((int)badbit | (int)failbit)) != 0);

  00000	f6 41 0c 06	 test	 BYTE PTR [ecx+12], 6
  00004	6a 00		 push	 0
  00006	58		 pop	 eax
  00007	0f 95 c0	 setne	 al

; 370  : 		}

  0000a	c3		 ret	 0
?fail@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::fail
_TEXT	ENDS
PUBLIC	?flags@ios_base@std@@QBEHXZ			; std::ios_base::flags
; Function compile flags: /Ogsp
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = ecx

; 395  : 		return (_Fmtfl);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 396  : 		}

  00003	c3		 ret	 0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
PUBLIC	?setf@ios_base@std@@QAEHH@Z			; std::ios_base::setf
; Function compile flags: /Ogsp
;	COMDAT ?setf@ios_base@std@@QAEHH@Z
_TEXT	SEGMENT
__Newfmtflags$ = 8					; size = 4
?setf@ios_base@std@@QAEHH@Z PROC			; std::ios_base::setf, COMDAT
; _this$ = ecx

; 406  : 		{	// merge in format flags argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 407  : 		ios_base::fmtflags _Oldfmtflags = _Fmtfl;
; 408  : 		_Fmtfl = (fmtflags)((int)_Fmtfl
; 409  : 			| (int)_Newfmtflags & (int)_Fmtmask);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Newfmtflags$[ebp]
  00006	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00009	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0000f	0b d0		 or	 edx, eax
  00011	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 410  : 		return (_Oldfmtflags);
; 411  : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?setf@ios_base@std@@QAEHH@Z ENDP			; std::ios_base::setf
_TEXT	ENDS
PUBLIC	?setf@ios_base@std@@QAEHHH@Z			; std::ios_base::setf
; Function compile flags: /Ogsp
;	COMDAT ?setf@ios_base@std@@QAEHHH@Z
_TEXT	SEGMENT
__Newfmtflags$ = 8					; size = 4
__Mask$ = 12						; size = 4
?setf@ios_base@std@@QAEHHH@Z PROC			; std::ios_base::setf, COMDAT
; _this$ = ecx

; 414  : 		{	// merge in format flags argument under mask argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 415  : 		ios_base::fmtflags _Oldfmtflags = _Fmtfl;
; 416  : 		_Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
; 417  : 			| ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Mask$[ebp]
  00006	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR __Newfmtflags$[ebp]
  0000d	23 75 0c	 and	 esi, DWORD PTR __Mask$[ebp]
  00010	f7 d2		 not	 edx
  00012	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00018	23 d0		 and	 edx, eax
  0001a	0b d6		 or	 edx, esi
  0001c	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  0001f	5e		 pop	 esi

; 418  : 		return (_Oldfmtflags);
; 419  : 		}

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?setf@ios_base@std@@QAEHHH@Z ENDP			; std::ios_base::setf
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QBE_JXZ			; std::ios_base::width
; Function compile flags: /Ogsp
;	COMDAT ?width@ios_base@std@@QBE_JXZ
_TEXT	SEGMENT
?width@ios_base@std@@QBE_JXZ PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 440  : 		return (_Wide);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]

; 441  : 		}

  00006	c3		 ret	 0
?width@ios_base@std@@QBE_JXZ ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QAE_J_J@Z			; std::ios_base::width
; Function compile flags: /Ogsp
;	COMDAT ?width@ios_base@std@@QAE_J_J@Z
_TEXT	SEGMENT
__Newwidth$ = 8						; size = 8
?width@ios_base@std@@QAE_J_J@Z PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 444  : 		{	// set width to argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 445  : 		streamsize _Oldwidth = _Wide;

  00003	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00006	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00009	56		 push	 esi

; 446  : 		_Wide = _Newwidth;

  0000a	8b 75 08	 mov	 esi, DWORD PTR __Newwidth$[ebp]
  0000d	89 71 20	 mov	 DWORD PTR [ecx+32], esi
  00010	8b 75 0c	 mov	 esi, DWORD PTR __Newwidth$[ebp+4]
  00013	89 71 24	 mov	 DWORD PTR [ecx+36], esi
  00016	5e		 pop	 esi

; 447  : 		return (_Oldwidth);
; 448  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?width@ios_base@std@@QAE_J_J@Z ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
; Function compile flags: /Ogsp
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
$T40753 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = ecx

; 451  : 		{	// get locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 452  : 		return (*_Ploc);

  00004	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	83 65 fc 00	 and	 DWORD PTR $T40753[ebp], 0
  0000d	56		 push	 esi
  0000e	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00011	89 0e		 mov	 DWORD PTR [esi], ecx
  00013	e8 00 00 00 00	 call	 ?_Incref@facet@locale@std@@QAEXXZ ; std::locale::facet::_Incref
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi

; 453  : 		}

  0001b	c9		 leave
  0001c	c2 04 00	 ret	 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
_TEXT	ENDS
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	??1ios_base@std@@UAE@XZ				; std::ios_base::~ios_base
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	??_Eios_base@std@@UAEPAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
_DATA	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
_DATA	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 00H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVios_base@std@@@8
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DD FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DD	FLAT:??_Eios_base@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ios_base@std@@UAE@XZ PROC				; std::ios_base::~ios_base, COMDAT
; _this$ = ecx

; 541  : 		_Ios_base_dtor(this);

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx

; 542  : 		}

  0000d	c3		 ret	 0
??1ios_base@std@@UAE@XZ ENDP				; std::ios_base::~ios_base
_TEXT	ENDS
PUBLIC	??0ios_base@std@@IAE@XZ				; std::ios_base::ios_base
; Function compile flags: /Ogsp
;	COMDAT ??0ios_base@std@@IAE@XZ
_TEXT	SEGMENT
??0ios_base@std@@IAE@XZ PROC				; std::ios_base::ios_base, COMDAT
; _this$ = ecx

; 549  : 	__CLR_OR_THIS_CALL ios_base()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@

; 550  : 		{	// default constructor
; 551  : 		}

  00008	c3		 ret	 0
??0ios_base@std@@IAE@XZ ENDP				; std::ios_base::ios_base
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gios_base@std@@UAEPAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	56		 push	 esi
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000d	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	59		 pop	 ecx
  00017	74 07		 je	 SHORT $LN1@scalar@4
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	59		 pop	 ecx
$LN1@scalar@4:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gios_base@std@@UAEPAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?hex@std@@YAAAVios_base@1@AAV21@@Z		; std::hex
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?hex@std@@YAAAVios_base@1@AAV21@@Z
_TEXT	SEGMENT
__Iosbase$ = 8						; size = 4
?hex@std@@YAAAVios_base@1@AAV21@@Z PROC			; std::hex, COMDAT

; 219  : 	{	// set basefield to hex

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 220  : 	_Iosbase.setf(ios_base::hex, ios_base::basefield);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iosbase$[ebp]
  00006	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00009	81 e1 ff f9 ff
	ff		 and	 ecx, -1537		; fffff9ffH
  0000f	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  00015	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 221  : 	return (_Iosbase);
; 222  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?hex@std@@YAAAVios_base@1@AAV21@@Z ENDP			; std::hex
_TEXT	ENDS
PUBLIC	?uppercase@std@@YAAAVios_base@1@AAV21@@Z	; std::uppercase
; Function compile flags: /Ogsp
;	COMDAT ?uppercase@std@@YAAAVios_base@1@AAV21@@Z
_TEXT	SEGMENT
__Iosbase$ = 8						; size = 4
?uppercase@std@@YAAAVios_base@1@AAV21@@Z PROC		; std::uppercase, COMDAT

; 343  : 	{	// set uppercase

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 344  : 	_Iosbase.setf(ios_base::uppercase);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iosbase$[ebp]
  00006	83 48 14 04	 or	 DWORD PTR [eax+20], 4

; 345  : 	return (_Iosbase);
; 346  : 	}

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
?uppercase@std@@YAAAVios_base@1@AAV21@@Z ENDP		; std::uppercase
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
_TEXT	ENDS
;	COMDAT ?isControlCharacter@Json@@YA_ND@Z
_TEXT	SEGMENT
?isControlCharacter@Json@@YA_ND@Z PROC			; Json::isControlCharacter, COMDAT
; _ch$ = eax

; 18   :    return ch > 0 && ch <= 0x1F;

  00000	fe c8		 dec	 al
  00002	b1 1e		 mov	 cl, 30			; 0000001eH
  00004	3a c8		 cmp	 cl, al
  00006	1b c0		 sbb	 eax, eax
  00008	40		 inc	 eax

; 19   : }

  00009	c3		 ret	 0
?isControlCharacter@Json@@YA_ND@Z ENDP			; Json::isControlCharacter
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?containsControlCharacter@Json@@YA_NPBD@Z
_TEXT	SEGMENT
?containsControlCharacter@Json@@YA_NPBD@Z PROC		; Json::containsControlCharacter, COMDAT
; _str$ = ecx

; 23   :    while ( *str ) 

  00000	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00003	eb 10		 jmp	 SHORT $LN12@containsCo
$LL3@containsCo:

; 24   :    {
; 25   :       if ( isControlCharacter( *(str++) ) )

  00005	fe c8		 dec	 al
  00007	b2 1e		 mov	 dl, 30			; 0000001eH
  00009	3a d0		 cmp	 dl, al
  0000b	1b c0		 sbb	 eax, eax
  0000d	40		 inc	 eax
  0000e	41		 inc	 ecx
  0000f	84 c0		 test	 al, al
  00011	75 07		 jne	 SHORT $LN11@containsCo

; 23   :    while ( *str ) 

  00013	8a 01		 mov	 al, BYTE PTR [ecx]
$LN12@containsCo:
  00015	84 c0		 test	 al, al
  00017	75 ec		 jne	 SHORT $LL3@containsCo

; 27   :    }
; 28   :    return false;
; 29   : }

  00019	c3		 ret	 0
$LN11@containsCo:

; 26   :          return true;

  0001a	b0 01		 mov	 al, 1

; 27   :    }
; 28   :    return false;
; 29   : }

  0001c	c3		 ret	 0
?containsControlCharacter@Json@@YA_NPBD@Z ENDP		; Json::containsControlCharacter
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?uintToString@Json@@YAXIAAPAD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?uintToString@Json@@YAXIAAPAD@Z PROC			; Json::uintToString, COMDAT
; _current$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 33   :    *--current = 0;

  00003	ff 09		 dec	 DWORD PTR [ecx]
  00005	8b 01		 mov	 eax, DWORD PTR [ecx]
  00007	56		 push	 esi
  00008	c6 00 00	 mov	 BYTE PTR [eax], 0
  0000b	57		 push	 edi
$LL3@uintToStri:

; 34   :    do
; 35   :    {
; 36   :       *--current = (value % 10) + '0';

  0000c	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  0000f	33 d2		 xor	 edx, edx
  00011	6a 0a		 push	 10			; 0000000aH
  00013	5f		 pop	 edi
  00014	f7 f7		 div	 edi
  00016	ff 09		 dec	 DWORD PTR [ecx]
  00018	8b 31		 mov	 esi, DWORD PTR [ecx]
  0001a	80 c2 30	 add	 dl, 48			; 00000030H
  0001d	88 16		 mov	 BYTE PTR [esi], dl

; 37   :       value /= 10;

  0001f	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 38   :    }
; 39   :    while ( value != 0 );

  00022	85 c0		 test	 eax, eax
  00024	75 e6		 jne	 SHORT $LL3@uintToStri
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 40   : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?uintToString@Json@@YAXIAAPAD@Z ENDP			; Json::uintToString
_TEXT	ENDS
PUBLIC	??_7Writer@Json@@6B@				; Json::Writer::`vftable'
PUBLIC	??1Writer@Json@@UAE@XZ				; Json::Writer::~Writer
PUBLIC	??_R4Writer@Json@@6B@				; Json::Writer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVWriter@Json@@@8				; Json::Writer `RTTI Type Descriptor'
PUBLIC	??_R3Writer@Json@@8				; Json::Writer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Writer@Json@@8				; Json::Writer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Writer@Json@@8			; Json::Writer::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EWriter@Json@@UAEPAXI@Z:PROC			; Json::Writer::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@Writer@Json@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Writer@Json@@8 DD FLAT:??_R0?AVWriter@Json@@@8 ; Json::Writer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Writer@Json@@8
rdata$r	ENDS
;	COMDAT ??_R2Writer@Json@@8
rdata$r	SEGMENT
??_R2Writer@Json@@8 DD FLAT:??_R1A@?0A@EA@Writer@Json@@8 ; Json::Writer::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Writer@Json@@8
rdata$r	SEGMENT
??_R3Writer@Json@@8 DD 00H				; Json::Writer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Writer@Json@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVWriter@Json@@@8
_DATA	SEGMENT
??_R0?AVWriter@Json@@@8 DD FLAT:??_7type_info@@6B@	; Json::Writer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVWriter@Json@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Writer@Json@@6B@
rdata$r	SEGMENT
??_R4Writer@Json@@6B@ DD 00H				; Json::Writer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVWriter@Json@@@8
	DD	FLAT:??_R3Writer@Json@@8
rdata$r	ENDS
;	COMDAT ??_7Writer@Json@@6B@
CONST	SEGMENT
??_7Writer@Json@@6B@ DD FLAT:??_R4Writer@Json@@6B@	; Json::Writer::`vftable'
	DD	FLAT:??_EWriter@Json@@UAEPAXI@Z
	DD	FLAT:__purecall
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1Writer@Json@@UAE@XZ
_TEXT	SEGMENT
??1Writer@Json@@UAE@XZ PROC				; Json::Writer::~Writer, COMDAT
; _this$ = ecx

; 177  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Writer@Json@@6B@

; 178  : }

  00006	c3		 ret	 0
??1Writer@Json@@UAE@XZ ENDP				; Json::Writer::~Writer
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GWriter@Json@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GWriter@Json@@UAEPAXI@Z PROC				; Json::Writer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Writer@Json@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar@5
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@5:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GWriter@Json@@UAEPAXI@Z ENDP				; Json::Writer::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0Writer@Json@@QAE@XZ				; Json::Writer::Writer
; Function compile flags: /Ogsp
;	COMDAT ??0Writer@Json@@QAE@XZ
_TEXT	SEGMENT
??0Writer@Json@@QAE@XZ PROC				; Json::Writer::Writer, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Writer@Json@@6B@
  00008	c3		 ret	 0
??0Writer@Json@@QAE@XZ ENDP				; Json::Writer::Writer
_TEXT	ENDS
PUBLIC	?enableYAMLCompatibility@FastWriter@Json@@QAEXXZ ; Json::FastWriter::enableYAMLCompatibility
; Function compile flags: /Ogsp
;	COMDAT ?enableYAMLCompatibility@FastWriter@Json@@QAEXXZ
_TEXT	SEGMENT
?enableYAMLCompatibility@FastWriter@Json@@QAEXXZ PROC	; Json::FastWriter::enableYAMLCompatibility, COMDAT
; _this$ = ecx

; 193  :    yamlCompatiblityEnabled_ = true;

  00000	c6 41 20 01	 mov	 BYTE PTR [ecx+32], 1

; 194  : }

  00004	c3		 ret	 0
?enableYAMLCompatibility@FastWriter@Json@@QAEXXZ ENDP	; Json::FastWriter::enableYAMLCompatibility
_TEXT	ENDS
PUBLIC	?indent@StyledWriter@Json@@AAEXXZ		; Json::StyledWriter::indent
; Function compile flags: /Ogsp
;	COMDAT ?indent@StyledWriter@Json@@AAEXXZ
_TEXT	SEGMENT
?indent@StyledWriter@Json@@AAEXXZ PROC			; Json::StyledWriter::indent, COMDAT
; _this$ = ecx

; 471  :    //indentString_ += std::string( indentSize_, ' ' );
; 472  : }

  00000	c3		 ret	 0
?indent@StyledWriter@Json@@AAEXXZ ENDP			; Json::StyledWriter::indent
_TEXT	ENDS
PUBLIC	?unindent@StyledWriter@Json@@AAEXXZ		; Json::StyledWriter::unindent
; Function compile flags: /Ogsp
;	COMDAT ?unindent@StyledWriter@Json@@AAEXXZ
_TEXT	SEGMENT
?unindent@StyledWriter@Json@@AAEXXZ PROC		; Json::StyledWriter::unindent, COMDAT
; _this$ = ecx

; 478  :    //assert( int(indentString_.size()) >= indentSize_ );
; 479  :    //indentString_.resize( indentString_.size() - indentSize_ );
; 480  : }

  00000	c3		 ret	 0
?unindent@StyledWriter@Json@@AAEXXZ ENDP		; Json::StyledWriter::unindent
_TEXT	ENDS
PUBLIC	?hasCommentForValue@StyledWriter@Json@@AAE_NABVValue@2@@Z ; Json::StyledWriter::hasCommentForValue
EXTRN	?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z:PROC ; Json::Value::hasComment
; Function compile flags: /Ogsp
;	COMDAT ?hasCommentForValue@StyledWriter@Json@@AAE_NABVValue@2@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?hasCommentForValue@StyledWriter@Json@@AAE_NABVValue@2@@Z PROC ; Json::StyledWriter::hasCommentForValue, COMDAT
; _this$ = ecx

; 510  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 511  :    return value.hasComment( commentBefore )
; 512  :           ||  value.hasComment( commentAfterOnSameLine )
; 513  :           ||  value.hasComment( commentAfter );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  00006	6a 00		 push	 0
  00008	e8 00 00 00 00	 call	 ?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ; Json::Value::hasComment
  0000d	84 c0		 test	 al, al
  0000f	75 20		 jne	 SHORT $LN3@hasComment
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  00014	6a 01		 push	 1
  00016	e8 00 00 00 00	 call	 ?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ; Json::Value::hasComment
  0001b	84 c0		 test	 al, al
  0001d	75 12		 jne	 SHORT $LN3@hasComment
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  00022	6a 02		 push	 2
  00024	e8 00 00 00 00	 call	 ?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ; Json::Value::hasComment
  00029	84 c0		 test	 al, al
  0002b	75 04		 jne	 SHORT $LN3@hasComment
  0002d	33 c0		 xor	 eax, eax
  0002f	eb 03		 jmp	 SHORT $LN4@hasComment
$LN3@hasComment:
  00031	33 c0		 xor	 eax, eax
  00033	40		 inc	 eax
$LN4@hasComment:

; 514  : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?hasCommentForValue@StyledWriter@Json@@AAE_NABVValue@2@@Z ENDP ; Json::StyledWriter::hasCommentForValue
_TEXT	ENDS
PUBLIC	?hasCommentForValue@StyledStreamWriter@Json@@AAE_NABVValue@2@@Z ; Json::StyledStreamWriter::hasCommentForValue
; Function compile flags: /Ogsp
;	COMDAT ?hasCommentForValue@StyledStreamWriter@Json@@AAE_NABVValue@2@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?hasCommentForValue@StyledStreamWriter@Json@@AAE_NABVValue@2@@Z PROC ; Json::StyledStreamWriter::hasCommentForValue, COMDAT
; _this$ = ecx

; 791  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  :    return value.hasComment( commentBefore )
; 793  :           ||  value.hasComment( commentAfterOnSameLine )
; 794  :           ||  value.hasComment( commentAfter );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  00006	6a 00		 push	 0
  00008	e8 00 00 00 00	 call	 ?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ; Json::Value::hasComment
  0000d	84 c0		 test	 al, al
  0000f	75 20		 jne	 SHORT $LN3@hasComment@2
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  00014	6a 01		 push	 1
  00016	e8 00 00 00 00	 call	 ?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ; Json::Value::hasComment
  0001b	84 c0		 test	 al, al
  0001d	75 12		 jne	 SHORT $LN3@hasComment@2
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  00022	6a 02		 push	 2
  00024	e8 00 00 00 00	 call	 ?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ; Json::Value::hasComment
  00029	84 c0		 test	 al, al
  0002b	75 04		 jne	 SHORT $LN3@hasComment@2
  0002d	33 c0		 xor	 eax, eax
  0002f	eb 03		 jmp	 SHORT $LN4@hasComment@2
$LN3@hasComment@2:
  00031	33 c0		 xor	 eax, eax
  00033	40		 inc	 eax
$LN4@hasComment@2:

; 795  : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?hasCommentForValue@StyledStreamWriter@Json@@AAE_NABVValue@2@@Z ENDP ; Json::StyledStreamWriter::hasCommentForValue
_TEXT	ENDS
PUBLIC	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length, COMDAT
; _this$ = ecx

; 1506 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1507 : 		}

  00003	c3		 ret	 0
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1511 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1512 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
; Function compile flags: /Ogsp
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 1550 : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00005	0f 94 c0	 sete	 al

; 1551 : 		}

  00008	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
PUBLIC	??0?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::_Yarn<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??0?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::_Yarn<char>, COMDAT
; _this$ = ecx

; 3315 : 		{	// default construct

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0
  00005	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 3316 : 		}

  00009	c3		 ret	 0
??0?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::_Yarn<char>
_TEXT	ENDS
PUBLIC	?c_str@?$_Yarn@D@std@@QBEPBDXZ			; std::_Yarn<char>::c_str
; Function compile flags: /Ogsp
;	COMDAT ?c_str@?$_Yarn@D@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$_Yarn@D@std@@QBEPBDXZ PROC			; std::_Yarn<char>::c_str, COMDAT
; _this$ = ecx

; 3376 : 		return (_Myptr != 0 ? _Myptr : &_Nul);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	75 03		 jne	 SHORT $LN4@c_str
  00006	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
$LN4@c_str:

; 3377 : 		}

  00009	c3		 ret	 0
?c_str@?$_Yarn@D@std@@QBEPBDXZ ENDP			; std::_Yarn<char>::c_str
_TEXT	ENDS
PUBLIC	??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
EXTRN	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 79   : 		{	// destroy the object

  00000	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00003	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00006	c7 44 08 f8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@

; 80   : 		}

  0000e	c3		 ret	 0
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
; Function compile flags: /Ogsp
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z
_TEXT	SEGMENT
__Pfn$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 200  : 		{	// call ios_base manipulator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 201  : 		_DEBUG_POINTER(_Pfn);
; 202  : 		(*_Pfn)(*(ios_base *)this);

  00006	85 f6		 test	 esi, esi
  00008	75 04		 jne	 SHORT $LN3@operator@2
  0000a	33 c0		 xor	 eax, eax
  0000c	eb 07		 jmp	 SHORT $LN4@operator@2
$LN3@operator@2:
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00013	03 c6		 add	 eax, esi
$LN4@operator@2:
  00015	50		 push	 eax
  00016	ff 55 08	 call	 DWORD PTR __Pfn$[ebp]
  00019	59		 pop	 ecx

; 203  : 		return (*this);

  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 204  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
_TEXT	ENDS
PUBLIC	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
; Function compile flags: /Ogsp
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT
; _this$ = ecx

; 86   : 		return (_Mystrbuf);

  00000	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]

; 87   : 		}

  00003	c3		 ret	 0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
_TEXT	ENDS
PUBLIC	?empty@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::empty
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?empty@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE_NXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
_TEXT	ENDS
PUBLIC	??_Glocale@std@@QAEPAXI@Z			; std::locale::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_Glocale@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glocale@std@@QAEPAXI@Z PROC				; std::locale::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@6
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@6:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_Glocale@std@@QAEPAXI@Z ENDP				; std::locale::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	c7 44 01 f8 00
	00 00 00	 mov	 DWORD PTR [ecx+eax-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2003 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2004 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2005 : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 2003 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2004 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2005 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2009 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2010 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr@2
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2011 : 		}

  00008	c3		 ret	 0
$LN3@Myptr@2:

; 2009 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2010 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2011 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Yarn@D@std@@AAEXXZ			; std::_Yarn<char>::_Tidy
EXTRN	_free:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$_Yarn@D@std@@AAEXXZ PROC			; std::_Yarn<char>::_Tidy, COMDAT
; _this$ = ecx

; 3391 : 		{	// discard any string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3392 : 		if (_Myptr != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 07		 je	 SHORT $LN1@Tidy

; 3393 : 
; 3394 :  #ifdef _DEBUG
; 3395 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3396 : 
; 3397 :  #else /* _DEBUG */
; 3398 : 			_CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	59		 pop	 ecx
$LN1@Tidy:

; 3399 :  #endif /* _DEBUG */
; 3400 : 
; 3401 : 		_Myptr = 0;

  00010	83 26 00	 and	 DWORD PTR [esi], 0
  00013	5e		 pop	 esi

; 3402 : 		}

  00014	c3		 ret	 0
?_Tidy@?$_Yarn@D@std@@AAEXXZ ENDP			; std::_Yarn<char>::_Tidy
_TEXT	ENDS
PUBLIC	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
_TEXT	SEGMENT
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ PROC ; std::basic_ios<char,std::char_traits<char> >::fill, COMDAT
; _this$ = ecx

; 107  : 		return (_Fillch);

  00000	8a 41 40	 mov	 al, BYTE PTR [ecx+64]

; 108  : 		}

  00003	c3		 ret	 0
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::fill
_TEXT	ENDS
PUBLIC	??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
PUBLIC	??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
EXTRN	??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
CONST	ENDS
;	COMDAT ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 167  : 	__CLR_OR_THIS_CALL basic_ios()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 168  : 		{	// default constructor, do nothing
; 169  : 		}

  00008	c3		 ret	 0
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	56		 push	 esi
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000d	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	59		 pop	 ecx
  00017	74 07		 je	 SHORT $LN1@scalar@7
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	59		 pop	 ecx
$LN1@scalar@7:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT
; _this$ = ecx

; 141  : 		return (sync());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 34	 jmp	 DWORD PTR [eax+52]
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
_TEXT	ENDS
PUBLIC	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
; Function compile flags: /Ogsp
;	COMDAT ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::eback, COMDAT
; _this$ = ecx

; 218  : 		return (*_IGfirst);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 219  : 		}

  00005	c3		 ret	 0
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::eback
_TEXT	ENDS
PUBLIC	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
; Function compile flags: /Ogsp
;	COMDAT ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::gptr, COMDAT
; _this$ = ecx

; 223  : 		return (*_IGnext);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 224  : 		}

  00005	c3		 ret	 0
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gptr
_TEXT	ENDS
PUBLIC	?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
; Function compile flags: /Ogsp
;	COMDAT ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbase, COMDAT
; _this$ = ecx

; 228  : 		return (*_IPfirst);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 229  : 		}

  00005	c3		 ret	 0
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbase
_TEXT	ENDS
PUBLIC	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
; Function compile flags: /Ogsp
;	COMDAT ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pptr, COMDAT
; _this$ = ecx

; 233  : 		return (*_IPnext);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 234  : 		}

  00005	c3		 ret	 0
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pptr
_TEXT	ENDS
PUBLIC	?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
; Function compile flags: /Ogsp
;	COMDAT ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::egptr, COMDAT
; _this$ = ecx

; 238  : 		return (*_IGnext + *_IGcount);

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	03 01		 add	 eax, DWORD PTR [ecx]

; 239  : 		}

  0000a	c3		 ret	 0
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::egptr
_TEXT	ENDS
PUBLIC	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
; Function compile flags: /Ogsp
;	COMDAT ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setg, COMDAT
; _this$ = ecx

; 248  : 		{	// set pointers for read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 249  : 		*_IGfirst = _First;

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00009	89 10		 mov	 DWORD PTR [eax], edx

; 250  : 		*_IGnext = _Next;

  0000b	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Next$[ebp]
  00011	89 02		 mov	 DWORD PTR [edx], eax

; 251  : 		*_IGcount = (int)(_Last - _Next);

  00013	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0001b	89 10		 mov	 DWORD PTR [eax], edx

; 252  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 0c 00	 ret	 12			; 0000000cH
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setg
_TEXT	ENDS
PUBLIC	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
; Function compile flags: /Ogsp
;	COMDAT ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::epptr, COMDAT
; _this$ = ecx

; 256  : 		return (*_IPnext + *_IPcount);

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	03 01		 add	 eax, DWORD PTR [ecx]

; 257  : 		}

  0000a	c3		 ret	 0
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::epptr
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
; Function compile flags: /Ogsp
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 289  : 		{	// set pointers for write buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 290  : 		*_IPfirst = _First;

  00003	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 02		 mov	 DWORD PTR [edx], eax

; 291  : 		*_IPnext = _First;

  0000b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 292  : 		*_IPcount = (int)(_Last - _First);

  00010	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00013	2b d0		 sub	 edx, eax
  00015	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00018	89 10		 mov	 DWORD PTR [eax], edx

; 293  : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
; Function compile flags: /Ogsp
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 296  : 		{	// set pointers for write buffer, extended version

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 297  : 		*_IPfirst = _First;

  00003	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00006	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00009	89 10		 mov	 DWORD PTR [eax], edx

; 298  : 		*_IPnext = _Next;

  0000b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Next$[ebp]
  00011	89 02		 mov	 DWORD PTR [edx], eax

; 299  : 		*_IPcount = (int)(_Last - _Next);

  00013	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0001b	89 10		 mov	 DWORD PTR [eax], edx

; 300  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 0c 00	 ret	 12			; 0000000cH
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
PUBLIC	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
; Function compile flags: /Ogsp
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT
; _this$ = ecx

; 304  : 		--*_IPcount;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 305  : 		return ((*_IPnext)++);

  00005	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 306  : 		}

  0000f	c3		 ret	 0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
_TEXT	ENDS
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
; Function compile flags: /Ogsp
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT
; _this$ = ecx

; 310  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  00000	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00003	33 c0		 xor	 eax, eax
  00005	39 02		 cmp	 DWORD PTR [edx], eax
  00007	74 05		 je	 SHORT $LN3@Pnavail
  00009	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN3@Pnavail:
  0000e	99		 cdq

; 311  : 		}

  0000f	c3		 ret	 0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
PUBLIC	?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 1c		 push	 28			; 0000001cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 1c		 push	 28			; 0000001cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBE_NPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBE_NPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBE_NPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBE_NPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Inside
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 340  : 		{	// discard any allocated buffer and clear pointers

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 341  : 		if (_Mystate & _Allocated)

  00003	f6 46 40 01	 test	 BYTE PTR [esi+64], 1
  00007	74 0b		 je	 SHORT $LN16@Tidy@2

; 342  : 			_Al.deallocate(_Mysb::eback(),
; 343  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 344  : 					: _Mysb::egptr()) - _Mysb::eback());

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	ff 30		 push	 DWORD PTR [eax]
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00013	59		 pop	 ecx
$LN16@Tidy@2:

; 345  : 		_Mysb::setg(0, 0, 0);

  00014	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00017	33 c0		 xor	 eax, eax
  00019	89 01		 mov	 DWORD PTR [ecx], eax
  0001b	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0001e	89 01		 mov	 DWORD PTR [ecx], eax
  00020	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00023	89 01		 mov	 DWORD PTR [ecx], eax

; 346  : 		_Mysb::setp(0, 0);

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00028	89 01		 mov	 DWORD PTR [ecx], eax
  0002a	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0002d	89 01		 mov	 DWORD PTR [ecx], eax
  0002f	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00032	89 01		 mov	 DWORD PTR [ecx], eax

; 347  : 		_Seekhigh = 0;
; 348  : 		_Mystate &= ~_Allocated;

  00034	83 66 40 fe	 and	 DWORD PTR [esi+64], -2	; fffffffeH
  00038	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  0003b	5e		 pop	 esi

; 349  : 		}

  0003c	c3		 ret	 0
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 1c	 add	 DWORD PTR [eax], 28	; 0000001cH

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator++
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Compat
_TEXT	ENDS
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*, COMDAT
; _this$ = ecx

; 133  : 			return (_Ok ? _CONVERTIBLE_TO_TRUE : 0);

  00000	33 c0		 xor	 eax, eax
  00002	38 41 04	 cmp	 BYTE PTR [ecx+4], al
  00005	0f 95 c0	 setne	 al
  00008	48		 dec	 eax

; 134  : 			}

  00009	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
_TEXT	ENDS
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1098 : 		{	// put formatted long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1099 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00003	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0000b	ff 75 14	 push	 DWORD PTR __Iosbase$[ebp]
  0000e	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00011	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00014	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00017	ff 50 1c	 call	 DWORD PTR [eax+28]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1100 : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
PUBLIC	??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
__Sb$ = 8						; size = 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 613  : 		{	// construct from stream buffer _Sb

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Sb$[ebp]
  00008	c6 00 00	 mov	 BYTE PTR [eax], 0
  0000b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 614  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
; Function compile flags: /Ogsp
;	COMDAT ?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed, COMDAT
; _this$ = ecx

; 647  : 		return (_Failed);

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 648  : 		}

  00002	c3		 ret	 0
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 1905 : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1906 : 		return (this->_Alval);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1907 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
; Function compile flags: /Ogsp
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 1910 : 		{	// assign _Count copies of _Ch beginning at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1911 : 		if (_Count == 1)

  00003	83 7d 0c 01	 cmp	 DWORD PTR __Count$[ebp], 1
  00007	75 13		 jne	 SHORT $LN2@Chassign

; 1912 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

  00009	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  0000d	72 02		 jb	 SHORT $LN7@Chassign
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN7@Chassign:
  00011	8a 45 10	 mov	 al, BYTE PTR __Ch$[ebp]
  00014	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00017	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 1913 : 		else

  0001a	eb 1c		 jmp	 SHORT $LN15@Chassign
$LN2@Chassign:

; 1914 : 			_Traits::assign(_Myptr() + _Off, _Count, _Ch);

  0001c	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00020	72 02		 jb	 SHORT $LN13@Chassign
  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN13@Chassign:
  00024	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00028	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0002b	03 4d 08	 add	 ecx, DWORD PTR __Off$[ebp]
  0002e	50		 push	 eax
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _memset
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@Chassign:

; 1915 : 		}

  00038	5d		 pop	 ebp
  00039	c2 0c 00	 ret	 12			; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2015 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000a	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2020 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN4@Xran:
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT
; _this$ = ecx

; 74   : 		return (_Tiestr);

  00000	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]

; 75   : 		}

  00003	c3		 ret	 0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
_TEXT	ENDS
PUBLIC	??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size
_TEXT	ENDS
PUBLIC	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z
_TEXT	SEGMENT
__Mode$ = 8						; size = 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate, COMDAT
; _this$ = ecx

; 357  : 		{	// convert open mode to stream state bits

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 358  : 		_Strstate _State = (_Strstate)0;
; 359  : 		if (!(_Mode & ios_base::in))

  00003	8a 4d 08	 mov	 cl, BYTE PTR __Mode$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	f6 c1 01	 test	 cl, 1
  0000b	75 03		 jne	 SHORT $LN4@Getstate

; 360  : 			_State |= _Noread;

  0000d	6a 04		 push	 4
  0000f	58		 pop	 eax
$LN4@Getstate:

; 361  : 		if (!(_Mode & ios_base::out))

  00010	f6 c1 02	 test	 cl, 2
  00013	75 03		 jne	 SHORT $LN3@Getstate

; 362  : 			_State |= _Constant;

  00015	83 c8 02	 or	 eax, 2
$LN3@Getstate:

; 363  : 		if (_Mode & ios_base::app)

  00018	f6 c1 08	 test	 cl, 8
  0001b	74 03		 je	 SHORT $LN2@Getstate

; 364  : 			_State |= _Append;

  0001d	83 c8 08	 or	 eax, 8
$LN2@Getstate:

; 365  : 		if (_Mode & ios_base::ate)

  00020	f6 c1 04	 test	 cl, 4
  00023	74 03		 je	 SHORT $LN1@Getstate

; 366  : 			_State |= _Atend;

  00025	83 c8 10	 or	 eax, 16			; 00000010H
$LN1@Getstate:

; 367  : 		return (_State);
; 368  : 		}

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 91   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 92   : 			if (_Myostr.rdbuf() != 0)

  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	8b 44 01 38	 mov	 eax, DWORD PTR [ecx+eax+56]
  00014	85 c0		 test	 eax, eax
  00016	74 07		 je	 SHORT $LN1@Sentry_bas

; 93   : 				_Myostr.rdbuf()->_Lock();

  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	8b c8		 mov	 ecx, eax
  0001c	ff 52 04	 call	 DWORD PTR [edx+4]
$LN1@Sentry_bas:

; 94   : 			}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogsp
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 98   : 			if (_Myostr.rdbuf() != 0)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00007	8b 44 01 38	 mov	 eax, DWORD PTR [ecx+eax+56]
  0000b	85 c0		 test	 eax, eax
  0000d	74 07		 je	 SHORT $LN1@Sentry_bas@2

; 99   : 				_Myostr.rdbuf()->_Unlock();

  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	8b c8		 mov	 ecx, eax
  00013	ff 62 08	 jmp	 DWORD PTR [edx+8]
$LN1@Sentry_bas@2:

; 100  : 			}

  00016	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1972 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1973 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)

  00003	83 7d 08 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00007	74 2c		 je	 SHORT $LN2@Inside@2
  00009	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0000c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0000f	72 04		 jb	 SHORT $LN8@Inside@2
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	eb 02		 jmp	 SHORT $LN9@Inside@2
$LN8@Inside@2:
  00015	8b c1		 mov	 eax, ecx
$LN9@Inside@2:
  00017	39 45 08	 cmp	 DWORD PTR __Ptr$[ebp], eax
  0001a	72 19		 jb	 SHORT $LN2@Inside@2
  0001c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0001f	72 04		 jb	 SHORT $LN12@Inside@2
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	eb 02		 jmp	 SHORT $LN13@Inside@2
$LN12@Inside@2:
  00025	8b c1		 mov	 eax, ecx
$LN13@Inside@2:
  00027	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0002a	03 c8		 add	 ecx, eax
  0002c	3b 4d 08	 cmp	 ecx, DWORD PTR __Ptr$[ebp]
  0002f	76 04		 jbe	 SHORT $LN2@Inside@2

; 1975 : 		else
; 1976 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	eb 02		 jmp	 SHORT $LN1@Inside@2
$LN2@Inside@2:

; 1974 : 			return (false);	// don't ask

  00035	32 c0		 xor	 al, al
$LN1@Inside@2:

; 1977 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 220  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 315  : 		_IGfirst = &_Gfirst;
; 316  : 		_IPfirst = &_Pfirst;
; 317  : 		_IGnext = &_Gnext;

  00000	8d 51 18	 lea	 edx, DWORD PTR [ecx+24]
  00003	89 51 20	 mov	 DWORD PTR [ecx+32], edx

; 318  : 		_IPnext = &_Pnext;

  00006	8d 51 1c	 lea	 edx, DWORD PTR [ecx+28]
  00009	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 319  : 		_IGcount = &_Gcount;

  0000c	8d 51 28	 lea	 edx, DWORD PTR [ecx+40]
  0000f	89 51 30	 mov	 DWORD PTR [ecx+48], edx
  00012	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00015	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 320  : 		_IPcount = &_Pcount;

  00018	8d 51 2c	 lea	 edx, DWORD PTR [ecx+44]
  0001b	89 51 34	 mov	 DWORD PTR [ecx+52], edx

; 321  : 		setp(0, 0);

  0001e	33 d2		 xor	 edx, edx
  00020	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00023	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00026	89 10		 mov	 DWORD PTR [eax], edx
  00028	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0002b	89 10		 mov	 DWORD PTR [eax], edx
  0002d	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00030	89 10		 mov	 DWORD PTR [eax], edx

; 322  : 		setg(0, 0, 0);

  00032	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00035	89 10		 mov	 DWORD PTR [eax], edx
  00037	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0003a	89 10		 mov	 DWORD PTR [eax], edx
  0003c	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0003f	89 10		 mov	 DWORD PTR [eax], edx

; 323  : 		}

  00041	c3		 ret	 0
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
PUBLIC	??$?6DU?$char_traits@D@std@@_J@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char>,__int64>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iomanip
;	COMDAT ??$?6DU?$char_traits@D@std@@_J@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Smanip@_J@0@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
__Manip$ = 12						; size = 4
??$?6DU?$char_traits@D@std@@_J@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Smanip@_J@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,__int64>, COMDAT

; 255  : 	{	// insert by calling function with output stream and argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 256  : 	(*_Manip._Pfun)(_Ostr, _Manip._Manarg);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 04		 jne	 SHORT $LN3@operator@3
  0000b	33 c9		 xor	 ecx, ecx
  0000d	eb 07		 jmp	 SHORT $LN4@operator@3
$LN3@operator@3:
  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00014	03 ce		 add	 ecx, esi
$LN4@operator@3:
  00016	8b 45 0c	 mov	 eax, DWORD PTR __Manip$[ebp]
  00019	ff 70 0c	 push	 DWORD PTR [eax+12]
  0001c	ff 70 08	 push	 DWORD PTR [eax+8]
  0001f	51		 push	 ecx
  00020	ff 10		 call	 DWORD PTR [eax]
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 257  : 	return (_Ostr);

  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi

; 258  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$?6DU?$char_traits@D@std@@_J@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Smanip@_J@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,__int64>
_TEXT	ENDS
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T41167 = -12						; size = 12
$T41172 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;

  00003	33 c0		 xor	 eax, eax
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 32   : 
; 33   : 	if (_Count <= 0)

  00008	39 45 08	 cmp	 DWORD PTR __Count$[ebp], eax

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000b	76 38		 jbe	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000d	83 7d 08 ff	 cmp	 DWORD PTR __Count$[ebp], -1
  00011	77 0d		 ja	 SHORT $LN1@Allocate
  00013	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00016	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001b	59		 pop	 ecx
  0001c	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0001e	75 25		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00020	83 65 08 00	 and	 DWORD PTR $T41172[ebp], 0
  00024	8d 45 08	 lea	 eax, DWORD PTR $T41172[ebp]
  00027	50		 push	 eax
  00028	8d 4d f4	 lea	 ecx, DWORD PTR $T41167[ebp]
  0002b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00030	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00035	8d 45 f4	 lea	 eax, DWORD PTR $T41167[ebp]
  00038	50		 push	 eax
  00039	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T41167[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00040	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00045	c9		 leave
  00046	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z
_TEXT	SEGMENT
$T41177 = -12						; size = 12
$T41181 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z PROC ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3b		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 49 92 24
	09		 cmp	 ecx, 153391689		; 09249249H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@2
  00017	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 25		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T41181[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T41181[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T41177[ebp]
  00030	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00035	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003a	8d 45 f4	 lea	 eax, DWORD PTR $T41177[ebp]
  0003d	50		 push	 eax
  0003e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T41177[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00045	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  0004a	c9		 leave
  0004b	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ENDP ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEDD@Z ; std::basic_ios<char,std::char_traits<char> >::fill
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEDD@Z
_TEXT	SEGMENT
__Newfill$ = 8						; size = 1
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEDD@Z PROC ; std::basic_ios<char,std::char_traits<char> >::fill, COMDAT
; _this$ = ecx

; 111  : 		{	// set fill character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 112  : 		_Elem _Oldfill = _Fillch;
; 113  : 		_Fillch = _Newfill;

  00003	8a 55 08	 mov	 dl, BYTE PTR __Newfill$[ebp]
  00006	8a 41 40	 mov	 al, BYTE PTR [ecx+64]
  00009	88 51 40	 mov	 BYTE PTR [ecx+64], dl

; 114  : 		return (_Oldfill);
; 115  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEDD@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::fill
_TEXT	ENDS
PUBLIC	?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputn, COMDAT
; _this$ = ecx

; 201  : 		{	// put _Count characters from array beginning at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		return (xsputn(_Ptr, _Count));

  00003	ff 75 10	 push	 DWORD PTR __Count$[ebp+4]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0000e	ff 50 24	 call	 DWORD PTR [eax+36]

; 203  : 		}

  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputn
_TEXT	ENDS
PUBLIC	??0?$_Fillobj@D@std@@QAE@D@Z			; std::_Fillobj<char>::_Fillobj<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iomanip
;	COMDAT ??0?$_Fillobj@D@std@@QAE@D@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
??0?$_Fillobj@D@std@@QAE@D@Z PROC			; std::_Fillobj<char>::_Fillobj<char>, COMDAT
; _this$ = ecx

; 19   : 		{	// construct from fill character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8a 4d 08	 mov	 cl, BYTE PTR __Ch$[ebp]
  00008	88 08		 mov	 BYTE PTR [eax], cl

; 20   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0?$_Fillobj@D@std@@QAE@D@Z ENDP			; std::_Fillobj<char>::_Fillobj<char>
_TEXT	ENDS
PUBLIC	?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init, COMDAT
; _this$ = ecx

; 1066 : 		{	// initialize from _Locinfo object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1067 : 		_Cvt = _Lobj._Getcvt();

  00003	e8 00 00 00 00	 call	 __Getcvt
  00008	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0000b	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0000e	5e		 pop	 esi

; 1068 : 		}

  0000f	c2 04 00	 ret	 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
_TEXT	ENDS
PUBLIC	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
PUBLIC	??$forward@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
PUBLIC	??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
PUBLIC	??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator==<char,char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator==<char,char>, COMDAT

; 263  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 264  : 	}

  00002	c3		 ret	 0
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator==<char,char>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Val_type@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Val_type<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Val_type@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z PROC ; std::_Val_type<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ENDP ; std::_Val_type<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@8
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@8:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?c_str@locale@std@@QBEPBDXZ			; std::locale::c_str
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
;	COMDAT ?c_str@locale@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@locale@std@@QBEPBDXZ PROC			; std::locale::c_str, COMDAT
; _this$ = ecx

; 432  : 		return (_Ptr->_Name.c_str());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00005	85 c9		 test	 ecx, ecx
  00007	74 03		 je	 SHORT $LN5@c_str@2
  00009	8b c1		 mov	 eax, ecx

; 433  : 		}

  0000b	c3		 ret	 0

; 432  : 		return (_Ptr->_Name.c_str());

$LN5@c_str@2:
  0000c	83 c0 1c	 add	 eax, 28			; 0000001cH

; 433  : 		}

  0000f	c3		 ret	 0
?c_str@locale@std@@QBEPBDXZ ENDP			; std::locale::c_str
_TEXT	ENDS
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z		; std::ctype<char>::ctype<char>
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
CONST	ENDS
;	COMDAT ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
$T41257 = -16						; size = 16
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<char>::ctype<char>, COMDAT
; _this$ = ecx

; 2365 : 		{	// construct from current locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  00006	83 ec 10	 sub	 esp, 16			; 00000010H
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	56		 push	 esi
  0000d	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 2366 : 		_Init(_Lobj);

  00010	8d 45 f0	 lea	 eax, DWORD PTR $T41257[ebp]
  00013	57		 push	 edi
  00014	50		 push	 eax
  00015	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$ctype@D@std@@6B@
  0001b	e8 00 00 00 00	 call	 __Getctype
  00020	8d 7b 08	 lea	 edi, DWORD PTR [ebx+8]
  00023	8b f0		 mov	 esi, eax
  00025	a5		 movsd
  00026	a5		 movsd
  00027	a5		 movsd
  00028	59		 pop	 ecx
  00029	a5		 movsd
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi

; 2367 : 		}

  0002c	8b c3		 mov	 eax, ebx
  0002e	5b		 pop	 ebx
  0002f	c9		 leave
  00030	c2 08 00	 ret	 8
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<char>::ctype<char>
_TEXT	ENDS
PUBLIC	?_Tidy@?$ctype@D@std@@IAEXXZ			; std::ctype<char>::_Tidy
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$ctype@D@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$ctype@D@std@@IAEXXZ PROC			; std::ctype<char>::_Tidy, COMDAT
; _this$ = ecx

; 2405 : 		if (0 < _Ctype._Delfl)

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	85 c0		 test	 eax, eax
  00005	7e 0a		 jle	 SHORT $LN6@Tidy@3

; 2406 : 			free((void *)_Ctype._Table);

  00007	ff 71 10	 push	 DWORD PTR [ecx+16]
  0000a	e8 00 00 00 00	 call	 _free

; 2408 : 			delete[] (void *)_Ctype._Table;

  0000f	59		 pop	 ecx

; 2409 : 		}

  00010	c3		 ret	 0
$LN6@Tidy@3:

; 2407 : 		else if (_Ctype._Delfl < 0)

  00011	79 09		 jns	 SHORT $LN1@Tidy@3

; 2408 : 			delete[] (void *)_Ctype._Table;

  00013	ff 71 10	 push	 DWORD PTR [ecx+16]
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	59		 pop	 ecx
$LN1@Tidy@3:

; 2409 : 		}

  0001c	c3		 ret	 0
?_Tidy@?$ctype@D@std@@IAEXXZ ENDP			; std::ctype<char>::_Tidy
_TEXT	ENDS
EXTRN	__Tolower:PROC
; Function compile flags: /Ogsp
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2412 : 		{	// convert element to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2413 : 		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));

  00003	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00007	83 c1 08	 add	 ecx, 8
  0000a	51		 push	 ecx
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Tolower
  00011	59		 pop	 ecx
  00012	59		 pop	 ecx

; 2414 : 		}

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2418 : 		{	// convert [_First, _Last) in place to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2419 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2420 : 		for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0000a	74 19		 je	 SHORT $LN1@do_tolower
  0000c	57		 push	 edi
  0000d	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_tolower:

; 2421 : 			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);

  00010	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00013	57		 push	 edi
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __Tolower
  0001a	88 06		 mov	 BYTE PTR [esi], al
  0001c	46		 inc	 esi
  0001d	59		 pop	 ecx
  0001e	59		 pop	 ecx
  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 ec		 jne	 SHORT $LL3@do_tolower
  00024	5f		 pop	 edi
$LN1@do_tolower:

; 2422 : 		return ((const _Elem *)_First);

  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi

; 2423 : 		}

  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
EXTRN	__Toupper:PROC
; Function compile flags: /Ogsp
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2426 : 		{	// convert element to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2427 : 		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));

  00003	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00007	83 c1 08	 add	 ecx, 8
  0000a	51		 push	 ecx
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Toupper
  00011	59		 pop	 ecx
  00012	59		 pop	 ecx

; 2428 : 		}

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2432 : 		{	// convert [_First, _Last) in place to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2433 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2434 : 		for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0000a	74 19		 je	 SHORT $LN1@do_toupper
  0000c	57		 push	 edi
  0000d	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_toupper:

; 2435 : 			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);

  00010	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00013	57		 push	 edi
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __Toupper
  0001a	88 06		 mov	 BYTE PTR [esi], al
  0001c	46		 inc	 esi
  0001d	59		 pop	 ecx
  0001e	59		 pop	 ecx
  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 ec		 jne	 SHORT $LL3@do_toupper
  00024	5f		 pop	 edi
$LN1@do_toupper:

; 2436 : 		return ((const _Elem *)_First);

  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi

; 2437 : 		}

  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2440 : 		{	// widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2441 : 		return (_Byte);

  00003	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]

; 2442 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2446 : 		{	// widen chars in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2447 : 		_DEBUG_RANGE(_First, _Last);
; 2448 : 		_DEBUG_POINTER(_Dest);
; 2449 : 		_CSTD memcpy(_Dest, _First, _Last - _First);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00009	50		 push	 eax
  0000a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000d	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2450 : 		return (_Last);

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2451 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2454 : 		{	// narrow char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2455 : 		return (_Ch);

  00003	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]

; 2456 : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2460 : 		{	// narrow elements in [_First, _Last) to chars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2461 : 		_DEBUG_RANGE(_First, _Last);
; 2462 : 		_DEBUG_POINTER(_Dest);
; 2463 : 		_CSTD memcpy(_Dest, _First, _Last - _First);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00009	50		 push	 eax
  0000a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2464 : 		return (_Last);

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2465 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
_TEXT	ENDS
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
; Function compile flags: /Ogsp
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 2394 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@

; 2395 : 		_Tidy();

  00009	e8 00 00 00 00	 call	 ?_Tidy@?$ctype@D@std@@IAEXXZ ; std::ctype<char>::_Tidy

; 2396 : 		}

  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00014	5e		 pop	 esi
  00015	c3		 ret	 0
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  0000c	e8 00 00 00 00	 call	 ?_Tidy@?$ctype@D@std@@IAEXXZ ; std::ctype<char>::_Tidy
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0001b	74 07		 je	 SHORT $LN1@scalar@9
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00023	59		 pop	 ecx
$LN1@scalar@9:
  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7system_error@std@@6B@			; std::system_error::`vftable'
PUBLIC	??0system_error@std@@QAE@Verror_code@1@PBD@Z	; std::system_error::system_error
PUBLIC	??_R4system_error@std@@6B@			; std::system_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVsystem_error@std@@@8			; std::system_error `RTTI Type Descriptor'
PUBLIC	??_R3system_error@std@@8			; std::system_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2system_error@std@@8			; std::system_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@system_error@std@@8		; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Esystem_error@std@@UAEPAXI@Z:PROC		; std::system_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@system_error@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
rdata$r	SEGMENT
??_R1A@?0A@EA@system_error@std@@8 DD FLAT:??_R0?AVsystem_error@std@@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2system_error@std@@8
rdata$r	SEGMENT
??_R2system_error@std@@8 DD FLAT:??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3system_error@std@@8
rdata$r	SEGMENT
??_R3system_error@std@@8 DD 00H				; std::system_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVsystem_error@std@@@8
_DATA	SEGMENT
??_R0?AVsystem_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::system_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVsystem_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4system_error@std@@6B@
rdata$r	SEGMENT
??_R4system_error@std@@6B@ DD 00H			; std::system_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7system_error@std@@6B@
CONST	SEGMENT
??_7system_error@std@@6B@ DD FLAT:??_R4system_error@std@@6B@ ; std::system_error::`vftable'
	DD	FLAT:??_Esystem_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0system_error@std@@QAE@Verror_code@1@PBD@Z
_TEXT	SEGMENT
__Errcode$ = 8						; size = 8
$T41322 = 16						; size = 4
__Message$ = 16						; size = 4
??0system_error@std@@QAE@Verror_code@1@PBD@Z PROC	; std::system_error::system_error, COMDAT
; _this$ = ecx

; 516  : 		{	// construct from error code and message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 10	 mov	 eax, DWORD PTR __Message$[ebp]
  00006	56		 push	 esi
  00007	89 45 10	 mov	 DWORD PTR $T41322[ebp], eax
  0000a	8d 45 10	 lea	 eax, DWORD PTR $T41322[ebp]
  0000d	50		 push	 eax
  0000e	8b f1		 mov	 esi, ecx
  00010	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00015	8b 45 08	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00018	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0001b	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp+4]
  0001e	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00021	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7system_error@std@@6B@

; 517  : 		_Makestr();
; 518  : 		}

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
??0system_error@std@@QAE@Verror_code@1@PBD@Z ENDP	; std::system_error::system_error
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gsystem_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gsystem_error@std@@UAEPAXI@Z PROC			; std::system_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@10
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@10:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_Gsystem_error@std@@UAEPAXI@Z ENDP			; std::system_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@system_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
__Errcode$ = 12						; size = 4
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z PROC	; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 237  : 			{	// construct with message

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00006	56		 push	 esi
  00007	ff 75 08	 push	 DWORD PTR __Message$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	ff 70 04	 push	 DWORD PTR [eax+4]
  0000f	ff 30		 push	 DWORD PTR [eax]
  00011	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  00016	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@

; 238  : 			}

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ENDP	; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
; Function compile flags: /Ogsp
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
_TEXT	ENDS
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ ; `string'
PUBLIC	__TI4?AVfailure@ios_base@std@@
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@	; `string'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	__CTA4?AVfailure@ios_base@std@@
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
PUBLIC	??0system_error@std@@QAE@ABV01@@Z		; std::system_error::system_error
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0system_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT __CTA4?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA4?AVfailure@ios_base@std@@ DD 04H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
	DD	FLAT:__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ DB 'ios_base::failbit se'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT __TI4?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI4?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ DB 'ios_base::badbit set', 00H ; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	ENDS
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T41358 = -20						; size = 20
__State$ = 8						; size = 4
$T41453 = 12						; size = 4
$T41417 = 12						; size = 4
$T41381 = 12						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 310  : 		{	// set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 311  : 		_Mystate = (iostate)(_State & _Statmask);

  00003	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00006	83 e0 17	 and	 eax, 23			; 00000017H
  00009	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 312  : 		if ((_Mystate & _Except) == 0)

  0000c	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0000f	83 ec 14	 sub	 esp, 20			; 00000014H
  00012	23 c8		 and	 ecx, eax
  00014	74 6c		 je	 SHORT $LN1@clear

; 313  : 			;
; 314  : 		else if (_Reraise)

  00016	33 c0		 xor	 eax, eax
  00018	38 45 0c	 cmp	 BYTE PTR __Reraise$[ebp], al
  0001b	74 07		 je	 SHORT $LN6@clear

; 315  : 			_RERAISE;

  0001d	50		 push	 eax
$LN57@clear:
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN59@clear:
$LN6@clear:

; 316  : 		else if (_Mystate & _Except & badbit)
; 317  : 			_THROW_NCEE(failure, "ios_base::badbit set");

  00024	33 f6		 xor	 esi, esi
  00026	46		 inc	 esi
  00027	f6 c1 04	 test	 cl, 4
  0002a	74 31		 je	 SHORT $LN4@clear
  0002c	e8 00 00 00 00	 call	 ?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
  00031	8b f8		 mov	 edi, eax
  00033	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR $T41381[ebp], OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
$LN58@clear:
  0003a	8d 45 0c	 lea	 eax, DWORD PTR $T41381[ebp]
  0003d	50		 push	 eax
  0003e	8d 4d ec	 lea	 ecx, DWORD PTR $T41358[ebp]
  00041	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00046	89 75 f8	 mov	 DWORD PTR $T41358[ebp+12], esi
  00049	89 7d fc	 mov	 DWORD PTR $T41358[ebp+16], edi
  0004c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T41358[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  00053	68 00 00 00 00	 push	 OFFSET __TI4?AVfailure@ios_base@std@@
  00058	8d 45 ec	 lea	 eax, DWORD PTR $T41358[ebp]
  0005b	eb c1		 jmp	 SHORT $LN57@clear
$LN4@clear:

; 318  : 		else if (_Mystate & _Except & failbit)

  0005d	f6 c1 02	 test	 cl, 2
  00060	74 10		 je	 SHORT $LN2@clear

; 319  : 			_THROW_NCEE(failure, "ios_base::failbit set");

  00062	e8 00 00 00 00	 call	 ?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
  00067	8b f8		 mov	 edi, eax
  00069	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR $T41417[ebp], OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  00070	eb c8		 jmp	 SHORT $LN58@clear
$LN2@clear:

; 320  : 		else
; 321  : 			_THROW_NCEE(failure, "ios_base::eofbit set");

  00072	e8 00 00 00 00	 call	 ?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
  00077	8b f8		 mov	 edi, eax
  00079	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR $T41453[ebp], OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  00080	eb b8		 jmp	 SHORT $LN58@clear
$LN1@clear:

; 322  : 		}

  00082	c9		 leave
  00083	c2 08 00	 ret	 8
$LN56@clear:
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??0system_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0system_error@std@@QAE@ABV01@@Z PROC			; std::system_error::system_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7system_error@std@@6B@
  00016	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00019	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0001c	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0001f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00022	5f		 pop	 edi
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??0system_error@std@@QAE@ABV01@@Z ENDP			; std::system_error::system_error
_TEXT	ENDS
PUBLIC	?clear@ios_base@std@@QAEXH@Z			; std::ios_base::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@ios_base@std@@QAEXH@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
?clear@ios_base@std@@QAEXH@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 325  : 		{	// set state to argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 326  : 		clear(_State, false);

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __State$[ebp]
  00008	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 327  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?clear@ios_base@std@@QAEXH@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
PUBLIC	?_Init@ios_base@std@@IAEXXZ			; std::ios_base::_Init
; Function compile flags: /Ogsp
;	COMDAT ?_Init@ios_base@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@ios_base@std@@IAEXXZ PROC			; std::ios_base::_Init, COMDAT
; _this$ = ecx

; 554  : 		{	// initialize a new ios_base

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 555  : 		_Ploc = 0;

  00004	33 ff		 xor	 edi, edi

; 556  : 		_Stdstr = 0;
; 557  : 		_Except = goodbit;
; 558  : 		_Fmtfl = (fmtflags)(skipws | dec);
; 559  : 		_Prec = 6;
; 560  : 		_Wide = 0;
; 561  : 		_Arr = 0;
; 562  : 		_Calls = 0;
; 563  : 		clear(goodbit);

  00006	57		 push	 edi
  00007	57		 push	 edi
  00008	89 7e 30	 mov	 DWORD PTR [esi+48], edi
  0000b	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0000e	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00011	c7 46 14 01 02
	00 00		 mov	 DWORD PTR [esi+20], 513	; 00000201H
  00018	c7 46 18 06 00
	00 00		 mov	 DWORD PTR [esi+24], 6
  0001f	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  00022	89 7e 20	 mov	 DWORD PTR [esi+32], edi
  00025	89 7e 24	 mov	 DWORD PTR [esi+36], edi
  00028	89 7e 28	 mov	 DWORD PTR [esi+40], edi
  0002b	89 7e 2c	 mov	 DWORD PTR [esi+44], edi
  0002e	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 564  : 		_Ploc = _NEW_CRT locale;

  00033	6a 04		 push	 4
  00035	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003a	59		 pop	 ecx
  0003b	3b c7		 cmp	 eax, edi
  0003d	74 09		 je	 SHORT $LN3@Init
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 ??0locale@std@@QAE@XZ	; std::locale::locale
  00046	eb 02		 jmp	 SHORT $LN4@Init
$LN3@Init:
  00048	33 c0		 xor	 eax, eax
$LN4@Init:
  0004a	5f		 pop	 edi
  0004b	89 46 30	 mov	 DWORD PTR [esi+48], eax
  0004e	5e		 pop	 esi

; 565  : 		}

  0004f	c3		 ret	 0
?_Init@ios_base@std@@IAEXXZ ENDP			; std::ios_base::_Init
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@11
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@11:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@ABV01@@Z
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@
  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1435 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 
; 1438 : 		if (this->_Mysize <= _Off)
; 1439 : 
; 1440 : 			_DEBUG_ERROR("string subscript out of range");
; 1441 : 
; 1442 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1443 : 		_SCL_SECURE_VALIDATE_RANGE(_Off < this->_Mysize);
; 1444 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1445 : 
; 1446 : 		return (_Myptr()[_Off]);

  00005	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00009	72 02		 jb	 SHORT $LN5@operator@4
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@operator@4:
  0000d	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]

; 1447 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogsp
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1496 : 		return (_Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN5@c_str@3
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1497 : 		}

  00008	c3		 ret	 0

; 1496 : 		return (_Myptr());

$LN5@c_str@3:
  00009	8b c1		 mov	 eax, ecx

; 1497 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??1?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::~_Yarn<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??1?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT
; _this$ = ecx

; 3365 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3366 : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 07		 je	 SHORT $LN3@Yarn
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	59		 pop	 ecx
$LN3@Yarn:
  00010	83 26 00	 and	 DWORD PTR [esi], 0
  00013	5e		 pop	 esi

; 3367 : 		}

  00014	c3		 ret	 0
??1?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
_TEXT	ENDS
PUBLIC	??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char> >::imbue
EXTRN	??1_Mutex@std@@QAE@XZ:PROC			; std::_Mutex::~_Mutex
EXTRN	??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
CONST	ENDS
;	COMDAT ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 79   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 80   : 		_DELETE_CRT(_Plocale);

  00004	8b 7e 38	 mov	 edi, DWORD PTR [esi+56]
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0000d	85 ff		 test	 edi, edi
  0000f	74 0e		 je	 SHORT $LN6@basic_stre
  00011	8b cf		 mov	 ecx, edi
  00013	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00018	57		 push	 edi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN6@basic_stre:

; 81   : 		}

  0001f	5f		 pop	 edi
  00020	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00023	5e		 pop	 esi
  00024	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?to_char_type@?$char_traits@D@std@@SADABH@Z	; std::char_traits<char>::to_char_type
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 541  : 		{	// convert metacharacter to character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 542  : 		return ((_Elem)_Meta);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]

; 543  : 		}

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
_TEXT	ENDS
EXTRN	?_Lock@_Mutex@std@@QAEXXZ:PROC			; std::_Mutex::_Lock
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 207  : 		_Mylock._Lock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
EXTRN	?_Unlock@_Mutex@std@@QAEXXZ:PROC		; std::_Mutex::_Unlock
; Function compile flags: /Ogsp
;	COMDAT ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 212  : 		_Mylock._Unlock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 338  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 339  : 		}

  00003	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::overflow
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 343  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 344  : 		}

  00003	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc, COMDAT
; _this$ = ecx

; 348  : 		return (0);

  00000	33 c0		 xor	 eax, eax
  00002	33 d2		 xor	 edx, edx

; 349  : 		}

  00004	c3		 ret	 0
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 353  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 354  : 		}

  00003	c3		 ret	 0
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::underflow
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 434  : 		{	// offer buffer to external agent (do nothing)

  00000	8b c1		 mov	 eax, ecx

; 435  : 		return (this);
; 436  : 		}

  00002	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 440  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 441  : 		}

  00002	c3		 ret	 0
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sync
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 445  : 		}

  00000	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
PUBLIC	?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump
; Function compile flags: /Ogsp
;	COMDAT ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::gbump, COMDAT
; _this$ = ecx

; 242  : 		{	// alter current position in read buffer by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 243  : 		*_IGcount -= _Off;

  00003	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00009	29 10		 sub	 DWORD PTR [eax], edx

; 244  : 		*_IGnext += _Off;

  0000b	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0000e	01 10		 add	 DWORD PTR [eax], edx

; 245  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gbump
_TEXT	ENDS
PUBLIC	?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
; Function compile flags: /Ogsp
;	COMDAT ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc, COMDAT
; _this$ = ecx

; 267  : 		--*_IGcount;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 268  : 		return ((*_IGnext)++);

  00005	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 269  : 		}

  0000f	c3		 ret	 0
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
_TEXT	ENDS
PUBLIC	?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
; Function compile flags: /Ogsp
;	COMDAT ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail, COMDAT
; _this$ = ecx

; 279  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00000	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00003	33 c0		 xor	 eax, eax
  00005	39 02		 cmp	 DWORD PTR [edx], eax
  00007	74 05		 je	 SHORT $LN3@Gnavail
  00009	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN3@Gnavail:
  0000e	99		 cdq

; 280  : 		}

  0000f	c3		 ret	 0
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
_TEXT	ENDS
PUBLIC	?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump
; Function compile flags: /Ogsp
;	COMDAT ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbump, COMDAT
; _this$ = ecx

; 283  : 		{	// alter current position in write buffer by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 284  : 		*_IPcount -= _Off;

  00003	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00009	29 10		 sub	 DWORD PTR [eax], edx

; 285  : 		*_IPnext += _Off;

  0000b	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0000e	01 10		 add	 DWORD PTR [eax], edx

; 286  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbump
_TEXT	ENDS
PUBLIC	??0?$fpos@H@std@@QAE@_J@Z			; std::fpos<int>::fpos<int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@H@std@@QAE@_J@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 8
??0?$fpos@H@std@@QAE@_J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with stream offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp+4]
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00010	33 c9		 xor	 ecx, ecx
  00012	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00015	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00018	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 41   : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??0?$fpos@H@std@@QAE@_J@Z ENDP				; std::fpos<int>::fpos<int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 357  : 		{	// get a character from stream, point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 358  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 359  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 50 18	 call	 DWORD PTR [eax+24]
  00008	83 f8 ff	 cmp	 eax, -1
  0000b	75 04		 jne	 SHORT $LN3@uflow
  0000d	0b c0		 or	 eax, eax
  0000f	5e		 pop	 esi

; 360  : 		}

  00010	c3		 ret	 0
$LN3@uflow:

; 358  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 359  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00011	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00014	ff 08		 dec	 DWORD PTR [eax]
  00016	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0001e	89 10		 mov	 DWORD PTR [eax], edx
  00020	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00023	5e		 pop	 esi

; 360  : 		}

  00024	c3		 ret	 0
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::uflow
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
_TEXT	SEGMENT
__Copied$ = -8						; size = 8
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn, COMDAT
; _this$ = ecx

; 364  : 		{	// get _Count characters from stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 365  : 		int_type _Meta;
; 366  : 		streamsize _Size, _Copied;
; 367  : 
; 368  : 		for (_Copied = 0; 0 < _Count; )

  00005	33 c0		 xor	 eax, eax
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	89 45 f8	 mov	 DWORD PTR __Copied$[ebp], eax
  0000d	89 45 fc	 mov	 DWORD PTR __Copied$[ebp+4], eax
  00010	39 45 10	 cmp	 DWORD PTR __Count$[ebp+4], eax
  00013	0f 8c a3 00 00
	00		 jl	 $LN34@xsgetn
  00019	7f 09		 jg	 SHORT $LN28@xsgetn
  0001b	39 45 0c	 cmp	 DWORD PTR __Count$[ebp], eax
  0001e	0f 86 98 00 00
	00		 jbe	 $LN34@xsgetn
$LN28@xsgetn:
  00024	53		 push	 ebx
  00025	56		 push	 esi
  00026	eb 02		 jmp	 SHORT $LN7@xsgetn
$LL32@xsgetn:
  00028	33 c0		 xor	 eax, eax
$LN7@xsgetn:

; 369  : 			if (0 < (_Size = _Gnavail()))

  0002a	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  0002d	39 01		 cmp	 DWORD PTR [ecx], eax
  0002f	74 05		 je	 SHORT $LN12@xsgetn
  00031	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@xsgetn:
  00036	99		 cdq
  00037	8b da		 mov	 ebx, edx
  00039	8b f0		 mov	 esi, eax
  0003b	85 db		 test	 ebx, ebx
  0003d	7c 41		 jl	 SHORT $LN5@xsgetn
  0003f	7f 04		 jg	 SHORT $LN29@xsgetn
  00041	85 f6		 test	 esi, esi
  00043	74 3b		 je	 SHORT $LN5@xsgetn
$LN29@xsgetn:

; 370  : 				{	// copy from read buffer
; 371  : 				if (_Count < _Size)

  00045	39 5d 10	 cmp	 DWORD PTR __Count$[ebp+4], ebx
  00048	7f 0d		 jg	 SHORT $LN4@xsgetn
  0004a	7c 05		 jl	 SHORT $LN33@xsgetn
  0004c	39 75 0c	 cmp	 DWORD PTR __Count$[ebp], esi
  0004f	73 06		 jae	 SHORT $LN4@xsgetn
$LN33@xsgetn:

; 372  : 					_Size = _Count;

  00051	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  00054	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp+4]
$LN4@xsgetn:

; 373  : 				_Traits::copy(_Ptr, gptr(), (size_t)_Size);

  00057	56		 push	 esi
  00058	ff 31		 push	 DWORD PTR [ecx]
  0005a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0005d	e8 00 00 00 00	 call	 _memcpy

; 374  : 				_Ptr += _Size;

  00062	01 75 08	 add	 DWORD PTR __Ptr$[ebp], esi

; 375  : 				_Copied += _Size;
; 376  : 				_Count -= _Size;
; 377  : 				gbump((int)_Size);

  00065	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006b	01 75 f8	 add	 DWORD PTR __Copied$[ebp], esi
  0006e	11 5d fc	 adc	 DWORD PTR __Copied$[ebp+4], ebx
  00071	29 75 0c	 sub	 DWORD PTR __Count$[ebp], esi
  00074	19 5d 10	 sbb	 DWORD PTR __Count$[ebp+4], ebx
  00077	29 30		 sub	 DWORD PTR [eax], esi
  00079	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0007c	01 30		 add	 DWORD PTR [eax], esi
  0007e	eb 24		 jmp	 SHORT $LN1@xsgetn
$LN5@xsgetn:

; 378  : 				}
; 379  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  00080	8b 07		 mov	 eax, DWORD PTR [edi]
  00082	8b cf		 mov	 ecx, edi
  00084	ff 50 1c	 call	 DWORD PTR [eax+28]
  00087	83 f8 ff	 cmp	 eax, -1
  0008a	74 2e		 je	 SHORT $LN35@xsgetn

; 380  : 				break;	// end of file, quit
; 381  : 			else
; 382  : 				{	// get a single character
; 383  : 				*_Ptr++ = _Traits::to_char_type(_Meta);

  0008c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0008f	ff 45 08	 inc	 DWORD PTR __Ptr$[ebp]

; 384  : 				++_Copied;

  00092	83 45 f8 01	 add	 DWORD PTR __Copied$[ebp], 1
  00096	88 01		 mov	 BYTE PTR [ecx], al
  00098	83 55 fc 00	 adc	 DWORD PTR __Copied$[ebp+4], 0

; 385  : 				--_Count;

  0009c	83 45 0c ff	 add	 DWORD PTR __Count$[ebp], -1
  000a0	83 55 10 ff	 adc	 DWORD PTR __Count$[ebp+4], -1
$LN1@xsgetn:

; 365  : 		int_type _Meta;
; 366  : 		streamsize _Size, _Copied;
; 367  : 
; 368  : 		for (_Copied = 0; 0 < _Count; )

  000a4	83 7d 10 00	 cmp	 DWORD PTR __Count$[ebp+4], 0
  000a8	0f 8f 7a ff ff
	ff		 jg	 $LL32@xsgetn
  000ae	7c 0a		 jl	 SHORT $LN35@xsgetn
  000b0	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  000b4	0f 87 6e ff ff
	ff		 ja	 $LL32@xsgetn
$LN35@xsgetn:
  000ba	5e		 pop	 esi
  000bb	5b		 pop	 ebx
$LN34@xsgetn:

; 386  : 				}
; 387  : 
; 388  : 		return (_Copied);

  000bc	8b 45 f8	 mov	 eax, DWORD PTR __Copied$[ebp]
  000bf	8b 55 fc	 mov	 edx, DWORD PTR __Copied$[ebp+4]
  000c2	5f		 pop	 edi

; 389  : 		}

  000c3	c9		 leave
  000c4	c2 0c 00	 ret	 12			; 0000000cH
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
_TEXT	SEGMENT
__Copied$ = -8						; size = 8
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn, COMDAT
; _this$ = ecx

; 393  : 		{	// put _Count characters to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 394  : 		streamsize _Size, _Copied;
; 395  : 
; 396  : 		for (_Copied = 0; 0 < _Count; )

  00005	33 c0		 xor	 eax, eax
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	89 45 f8	 mov	 DWORD PTR __Copied$[ebp], eax
  0000d	89 45 fc	 mov	 DWORD PTR __Copied$[ebp+4], eax
  00010	39 45 10	 cmp	 DWORD PTR __Count$[ebp+4], eax
  00013	0f 8c a5 00 00
	00		 jl	 $LN34@xsputn
  00019	7f 09		 jg	 SHORT $LN28@xsputn
  0001b	39 45 0c	 cmp	 DWORD PTR __Count$[ebp], eax
  0001e	0f 86 9a 00 00
	00		 jbe	 $LN34@xsputn
$LN28@xsputn:
  00024	53		 push	 ebx
  00025	56		 push	 esi
  00026	eb 02		 jmp	 SHORT $LN7@xsputn
$LL32@xsputn:
  00028	33 c0		 xor	 eax, eax
$LN7@xsputn:

; 397  : 			if (0 < (_Size = _Pnavail()))

  0002a	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  0002d	39 01		 cmp	 DWORD PTR [ecx], eax
  0002f	74 05		 je	 SHORT $LN12@xsputn
  00031	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@xsputn:
  00036	99		 cdq
  00037	8b da		 mov	 ebx, edx
  00039	8b f0		 mov	 esi, eax
  0003b	85 db		 test	 ebx, ebx
  0003d	7c 41		 jl	 SHORT $LN5@xsputn
  0003f	7f 04		 jg	 SHORT $LN29@xsputn
  00041	85 f6		 test	 esi, esi
  00043	74 3b		 je	 SHORT $LN5@xsputn
$LN29@xsputn:

; 398  : 				{	// copy to write buffer
; 399  : 				if (_Count < _Size)

  00045	39 5d 10	 cmp	 DWORD PTR __Count$[ebp+4], ebx
  00048	7f 0d		 jg	 SHORT $LN4@xsputn
  0004a	7c 05		 jl	 SHORT $LN33@xsputn
  0004c	39 75 0c	 cmp	 DWORD PTR __Count$[ebp], esi
  0004f	73 06		 jae	 SHORT $LN4@xsputn
$LN33@xsputn:

; 400  : 					_Size = _Count;

  00051	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  00054	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp+4]
$LN4@xsputn:

; 401  : 				_Traits::copy(pptr(), _Ptr, (size_t)_Size);

  00057	56		 push	 esi
  00058	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0005b	ff 31		 push	 DWORD PTR [ecx]
  0005d	e8 00 00 00 00	 call	 _memcpy

; 402  : 				_Ptr += _Size;

  00062	01 75 08	 add	 DWORD PTR __Ptr$[ebp], esi

; 403  : 				_Copied += _Size;
; 404  : 				_Count -= _Size;
; 405  : 				pbump((int)_Size);

  00065	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006b	01 75 f8	 add	 DWORD PTR __Copied$[ebp], esi
  0006e	11 5d fc	 adc	 DWORD PTR __Copied$[ebp+4], ebx
  00071	29 75 0c	 sub	 DWORD PTR __Count$[ebp], esi
  00074	19 5d 10	 sbb	 DWORD PTR __Count$[ebp+4], ebx
  00077	29 30		 sub	 DWORD PTR [eax], esi
  00079	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  0007c	01 30		 add	 DWORD PTR [eax], esi

; 406  : 				}
; 407  : 			else if (_Traits::eq_int_type(_Traits::eof(),

  0007e	eb 26		 jmp	 SHORT $LN1@xsputn
$LN5@xsputn:

; 408  : 				overflow(_Traits::to_int_type(*_Ptr))))

  00080	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00083	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00086	8b 17		 mov	 edx, DWORD PTR [edi]
  00088	50		 push	 eax
  00089	8b cf		 mov	 ecx, edi
  0008b	ff 52 0c	 call	 DWORD PTR [edx+12]
  0008e	83 f8 ff	 cmp	 eax, -1
  00091	74 29		 je	 SHORT $LN35@xsputn

; 409  : 				break;	// single character put failed, quit
; 410  : 			else
; 411  : 				{	// count character successfully put
; 412  : 				++_Ptr;

  00093	ff 45 08	 inc	 DWORD PTR __Ptr$[ebp]

; 413  : 				++_Copied;

  00096	83 45 f8 01	 add	 DWORD PTR __Copied$[ebp], 1
  0009a	83 55 fc 00	 adc	 DWORD PTR __Copied$[ebp+4], 0

; 414  : 				--_Count;

  0009e	83 45 0c ff	 add	 DWORD PTR __Count$[ebp], -1
  000a2	83 55 10 ff	 adc	 DWORD PTR __Count$[ebp+4], -1
$LN1@xsputn:

; 394  : 		streamsize _Size, _Copied;
; 395  : 
; 396  : 		for (_Copied = 0; 0 < _Count; )

  000a6	83 7d 10 00	 cmp	 DWORD PTR __Count$[ebp+4], 0
  000aa	0f 8f 78 ff ff
	ff		 jg	 $LL32@xsputn
  000b0	7c 0a		 jl	 SHORT $LN35@xsputn
  000b2	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  000b6	0f 87 6c ff ff
	ff		 ja	 $LL32@xsputn
$LN35@xsputn:
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
$LN34@xsputn:

; 415  : 				}
; 416  : 
; 417  : 		return (_Copied);

  000be	8b 45 f8	 mov	 eax, DWORD PTR __Copied$[ebp]
  000c1	8b 55 fc	 mov	 edx, DWORD PTR __Copied$[ebp+4]
  000c4	5f		 pop	 edi

; 418  : 		}

  000c5	c9		 leave
  000c6	c2 0c 00	 ret	 12			; 0000000cH
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
_TEXT	ENDS
EXTRN	?_BADOFF@std@@3_JB:QWORD			; std::_BADOFF
; Function compile flags: /Ogsp
;	COMDAT ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 8
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 423  : 		{	// change position by offset, according to way and mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 424  : 		return (streampos(_BADOFF));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3_JB
  0000c	89 08		 mov	 DWORD PTR [eax], ecx
  0000e	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3_JB+4
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00017	33 c9		 xor	 ecx, ecx
  00019	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0001f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 425  : 		}

  00022	5d		 pop	 ebp
  00023	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 429  : 		{	// change to specified position, according to mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 430  : 		return (streampos(_BADOFF));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3_JB
  0000c	89 08		 mov	 DWORD PTR [eax], ecx
  0000e	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3_JB+4
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00017	33 c9		 xor	 ecx, ecx
  00019	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0001f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 431  : 		}

  00022	5d		 pop	 ebp
  00023	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\sstream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 75   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 76   : 		_Tidy();

  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 77   : 		}

  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?eq@?$char_traits@D@std@@SA_NABD0@Z		; std::char_traits<char>::eq
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?eq@?$char_traits@D@std@@SA_NABD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@D@std@@SA_NABD0@Z PROC		; std::char_traits<char>::eq, COMDAT

; 531  : 		{	// test for element equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 532  : 		return (_Left == _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  0000b	33 c9		 xor	 ecx, ecx
  0000d	3a 02		 cmp	 al, BYTE PTR [edx]
  0000f	0f 94 c0	 sete	 al

; 533  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?eq@?$char_traits@D@std@@SA_NABD0@Z ENDP		; std::char_traits<char>::eq
_TEXT	ENDS
PUBLIC	??B?$fpos@H@std@@QBE_JXZ			; std::fpos<int>::operator __int64
; Function compile flags: /Ogsp
;	COMDAT ??B?$fpos@H@std@@QBE_JXZ
_TEXT	SEGMENT
??B?$fpos@H@std@@QBE_JXZ PROC				; std::fpos<int>::operator __int64, COMDAT
; _this$ = ecx

; 65   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	99		 cdq
  00004	03 01		 add	 eax, DWORD PTR [ecx]
  00006	13 51 04	 adc	 edx, DWORD PTR [ecx+4]

; 66   : 		}

  00009	c3		 ret	 0
??B?$fpos@H@std@@QBE_JXZ ENDP				; std::fpos<int>::operator __int64
_TEXT	ENDS
PUBLIC	?not_eof@?$char_traits@D@std@@SAHABH@Z		; std::char_traits<char>::not_eof
; Function compile flags: /Ogsp
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 557  : 		{	// return anything but EOF

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 558  : 		return (_Meta != eof() ? _Meta : !eof());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0000b	f7 d8		 neg	 eax
  0000d	1b c0		 sbb	 eax, eax
  0000f	23 c1		 and	 eax, ecx

; 559  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\sstream
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT
; _this$ = ecx

; 189  : 		{	// put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 190  : 		if (_Mysb::gptr() == 0
; 191  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 192  : 			|| !_Traits::eq_int_type(_Traits::eof(), _Meta)
; 193  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 194  : 			&& _Mystate & _Constant)

  00003	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	85 c0		 test	 eax, eax
  0000a	74 38		 je	 SHORT $LN3@pbackfail
  0000c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0000f	3b 02		 cmp	 eax, DWORD PTR [edx]
  00011	76 31		 jbe	 SHORT $LN3@pbackfail
  00013	8b 55 08	 mov	 edx, DWORD PTR __Meta$[ebp]
  00016	83 fa ff	 cmp	 edx, -1
  00019	74 0b		 je	 SHORT $LN4@pbackfail
  0001b	3a 50 ff	 cmp	 dl, BYTE PTR [eax-1]
  0001e	74 06		 je	 SHORT $LN4@pbackfail
  00020	f6 41 40 02	 test	 BYTE PTR [ecx+64], 2
  00024	75 1e		 jne	 SHORT $LN3@pbackfail
$LN4@pbackfail:

; 196  : 		else
; 197  : 			{	// back up one position and store put-back character
; 198  : 			_Mysb::gbump(-1);

  00026	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00029	ff 00		 inc	 DWORD PTR [eax]
  0002b	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0002e	ff 08		 dec	 DWORD PTR [eax]

; 199  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  00030	83 fa ff	 cmp	 edx, -1
  00033	74 0b		 je	 SHORT $LN37@pbackfail

; 200  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  00035	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00038	8b 00		 mov	 eax, DWORD PTR [eax]
  0003a	88 10		 mov	 BYTE PTR [eax], dl

; 201  : 			return (_Traits::not_eof(_Meta));

  0003c	8b c2		 mov	 eax, edx
  0003e	eb 07		 jmp	 SHORT $LN2@pbackfail
$LN37@pbackfail:
  00040	33 c0		 xor	 eax, eax
  00042	eb 03		 jmp	 SHORT $LN2@pbackfail
$LN3@pbackfail:

; 195  : 			return (_Traits::eof());	// can't put back, fail

  00044	83 c8 ff	 or	 eax, -1
$LN2@pbackfail:

; 202  : 			}
; 203  : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT
; _this$ = ecx

; 207  : 		if (_Mysb::gptr() == 0)

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	57		 push	 edi
  00004	8b 38		 mov	 edi, DWORD PTR [eax]
  00006	85 ff		 test	 edi, edi
  00008	75 05		 jne	 SHORT $LN8@underflow

; 208  : 			return (_Traits::eof());	// no character buffer, fail

  0000a	83 c8 ff	 or	 eax, -1
  0000d	5f		 pop	 edi

; 220  : 			}
; 221  : 		}

  0000e	c3		 ret	 0
$LN8@underflow:

; 209  : 		else if (_Mysb::gptr() < _Mysb::egptr())

  0000f	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00012	53		 push	 ebx
  00013	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00015	56		 push	 esi
  00016	8b f7		 mov	 esi, edi
  00018	03 de		 add	 ebx, esi
  0001a	3b f3		 cmp	 esi, ebx
  0001c	73 05		 jae	 SHORT $LN6@underflow

; 210  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  0001e	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00021	eb 36		 jmp	 SHORT $LN47@underflow
$LN6@underflow:

; 211  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0
; 212  : 			|| _Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr())

  00023	f6 41 40 04	 test	 BYTE PTR [ecx+64], 4
  00027	75 2d		 jne	 SHORT $LN3@underflow
  00029	8b 71 24	 mov	 esi, DWORD PTR [ecx+36]
  0002c	8b 36		 mov	 esi, DWORD PTR [esi]
  0002e	85 f6		 test	 esi, esi
  00030	74 24		 je	 SHORT $LN3@underflow
  00032	3b f7		 cmp	 esi, edi
  00034	77 05		 ja	 SHORT $LN4@underflow
  00036	39 79 3c	 cmp	 DWORD PTR [ecx+60], edi
  00039	76 1b		 jbe	 SHORT $LN3@underflow
$LN4@underflow:

; 214  : 		else
; 215  : 			{	// extend read buffer into written area, then return buffered
; 216  : 			if (_Seekhigh < _Mysb::pptr())

  0003b	39 71 3c	 cmp	 DWORD PTR [ecx+60], esi
  0003e	73 03		 jae	 SHORT $LN1@underflow

; 217  : 				_Seekhigh = _Mysb::pptr();

  00040	89 71 3c	 mov	 DWORD PTR [ecx+60], esi
$LN1@underflow:

; 218  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

  00043	8b 30		 mov	 esi, DWORD PTR [eax]
  00045	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00048	2b c6		 sub	 eax, esi
  0004a	89 02		 mov	 DWORD PTR [edx], eax

; 219  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

  0004c	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0004f	8b 00		 mov	 eax, DWORD PTR [eax]
  00051	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00054	eb 03		 jmp	 SHORT $LN47@underflow
$LN3@underflow:

; 213  : 			return (_Traits::eof());	// can't read, fail

  00056	83 c8 ff	 or	 eax, -1
$LN47@underflow:
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	5f		 pop	 edi

; 220  : 			}
; 221  : 		}

  0005c	c3		 ret	 0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z
_TEXT	SEGMENT
tv400 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Way$ = 20						; size = 4
tv388 = 24						; size = 4
__Which$ = 24						; size = 4
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT
; _this$ = ecx

; 226  : 		{	// change position by _Off, according to _Way, _Mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 227  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00004	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00007	8b 02		 mov	 eax, DWORD PTR [edx]
  00009	85 c0		 test	 eax, eax
  0000b	74 08		 je	 SHORT $LN21@seekoff
  0000d	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00010	73 03		 jae	 SHORT $LN21@seekoff

; 228  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  00012	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN21@seekoff:

; 229  : 
; 230  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

  00015	f6 45 18 01	 test	 BYTE PTR __Which$[ebp], 1
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	0f 84 c0 00 00
	00		 je	 $LN20@seekoff
  00022	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00025	8b 30		 mov	 esi, DWORD PTR [eax]
  00027	89 75 fc	 mov	 DWORD PTR tv400[ebp], esi
  0002a	85 f6		 test	 esi, esi
  0002c	0f 84 b0 00 00
	00		 je	 $LN20@seekoff

; 231  : 			{	// position within read buffer
; 232  : 			if (_Way == ios_base::end)

  00032	83 7d 14 02	 cmp	 DWORD PTR __Way$[ebp], 2
  00036	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3_JB+4
  0003c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_BADOFF@std@@3_JB
  00042	75 05		 jne	 SHORT $LN19@seekoff

; 233  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  00044	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]

; 234  : 			else if (_Way == ios_base::cur

  00047	eb 0e		 jmp	 SHORT $LN89@seekoff
$LN19@seekoff:

; 235  : 				&& (_Which & ios_base::out) == 0)

  00049	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  0004d	75 16		 jne	 SHORT $LN17@seekoff
  0004f	f6 45 18 02	 test	 BYTE PTR __Which$[ebp], 2
  00053	75 16		 jne	 SHORT $LN86@seekoff

; 236  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

  00055	8b c6		 mov	 eax, esi
$LN89@seekoff:
  00057	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0005a	2b 02		 sub	 eax, DWORD PTR [edx]
  0005c	99		 cdq
  0005d	01 45 0c	 add	 DWORD PTR __Off$[ebp], eax
  00060	11 55 10	 adc	 DWORD PTR __Off$[ebp+4], edx
  00063	eb 0c		 jmp	 SHORT $LN79@seekoff
$LN17@seekoff:

; 237  : 			else if (_Way != ios_base::beg)

  00065	83 7d 14 00	 cmp	 DWORD PTR __Way$[ebp], 0
  00069	74 06		 je	 SHORT $LN79@seekoff
$LN86@seekoff:

; 238  : 				_Off = _BADOFF;

  0006b	89 5d 0c	 mov	 DWORD PTR __Off$[ebp], ebx
  0006e	89 7d 10	 mov	 DWORD PTR __Off$[ebp+4], edi
$LN79@seekoff:

; 239  : 
; 240  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00071	83 7d 10 00	 cmp	 DWORD PTR __Off$[ebp+4], 0
  00075	7c 60		 jl	 SHORT $LN81@seekoff
  00077	7f 06		 jg	 SHORT $LN75@seekoff
  00079	83 7d 0c 00	 cmp	 DWORD PTR __Off$[ebp], 0
  0007d	72 58		 jb	 SHORT $LN81@seekoff
$LN75@seekoff:
  0007f	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00082	8b 30		 mov	 esi, DWORD PTR [eax]
  00084	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00087	2b c6		 sub	 eax, esi
  00089	99		 cdq
  0008a	39 55 10	 cmp	 DWORD PTR __Off$[ebp+4], edx
  0008d	7f 48		 jg	 SHORT $LN81@seekoff
  0008f	7c 05		 jl	 SHORT $LN85@seekoff
  00091	39 45 0c	 cmp	 DWORD PTR __Off$[ebp], eax
  00094	77 41		 ja	 SHORT $LN81@seekoff
$LN85@seekoff:

; 241  : 				{	// change read position
; 242  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00096	2b 75 fc	 sub	 esi, DWORD PTR tv400[ebp]
  00099	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0009c	03 75 0c	 add	 esi, DWORD PTR __Off$[ebp]
  0009f	29 30		 sub	 DWORD PTR [eax], esi
  000a1	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  000a4	01 30		 add	 DWORD PTR [eax], esi

; 243  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000a6	f6 45 18 02	 test	 BYTE PTR __Which$[ebp], 2
  000aa	0f 84 c7 00 00
	00		 je	 $LN83@seekoff
  000b0	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000b3	8b 3a		 mov	 edi, DWORD PTR [edx]
  000b5	85 ff		 test	 edi, edi
  000b7	0f 84 ba 00 00
	00		 je	 $LN83@seekoff

; 244  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 245  : 						_Mysb::epptr());	// change write position to match

  000bd	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  000c0	8b 30		 mov	 esi, DWORD PTR [eax]
  000c2	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  000c5	8b 00		 mov	 eax, DWORD PTR [eax]
  000c7	03 c7		 add	 eax, edi
  000c9	89 32		 mov	 DWORD PTR [edx], esi
  000cb	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  000ce	2b c6		 sub	 eax, esi
  000d0	89 01		 mov	 DWORD PTR [ecx], eax

; 246  : 				}
; 247  : 			else

  000d2	e9 a0 00 00 00	 jmp	 $LN83@seekoff
$LN81@seekoff:

; 248  : 				_Off = _BADOFF;

  000d7	89 5d 0c	 mov	 DWORD PTR __Off$[ebp], ebx
  000da	89 7d 10	 mov	 DWORD PTR __Off$[ebp+4], edi
  000dd	e9 95 00 00 00	 jmp	 $LN83@seekoff
$LN20@seekoff:

; 249  : 			}
; 250  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000e2	f6 45 18 02	 test	 BYTE PTR __Which$[ebp], 2
  000e6	74 77		 je	 SHORT $LN10@seekoff
  000e8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ea	89 45 18	 mov	 DWORD PTR tv388[ebp], eax
  000ed	85 c0		 test	 eax, eax
  000ef	74 6e		 je	 SHORT $LN10@seekoff

; 251  : 			{	// position within write buffer
; 252  : 			if (_Way == ios_base::end)

  000f1	83 7d 14 02	 cmp	 DWORD PTR __Way$[ebp], 2
  000f5	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3_JB+4
  000fb	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_BADOFF@std@@3_JB
  00101	75 05		 jne	 SHORT $LN9@seekoff

; 253  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  00103	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00106	eb 06		 jmp	 SHORT $LN90@seekoff
$LN9@seekoff:

; 254  : 			else if (_Way == ios_base::cur)

  00108	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  0010c	75 0e		 jne	 SHORT $LN7@seekoff
$LN90@seekoff:

; 255  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

  0010e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00111	2b 02		 sub	 eax, DWORD PTR [edx]
  00113	99		 cdq
  00114	01 45 0c	 add	 DWORD PTR __Off$[ebp], eax
  00117	11 55 10	 adc	 DWORD PTR __Off$[ebp+4], edx
  0011a	eb 0c		 jmp	 SHORT $LN80@seekoff
$LN7@seekoff:

; 256  : 			else if (_Way != ios_base::beg)

  0011c	83 7d 14 00	 cmp	 DWORD PTR __Way$[ebp], 0
  00120	74 06		 je	 SHORT $LN80@seekoff

; 257  : 				_Off = _BADOFF;

  00122	89 5d 0c	 mov	 DWORD PTR __Off$[ebp], ebx
  00125	89 7d 10	 mov	 DWORD PTR __Off$[ebp+4], edi
$LN80@seekoff:

; 258  : 
; 259  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00128	83 7d 10 00	 cmp	 DWORD PTR __Off$[ebp+4], 0
  0012c	7c a9		 jl	 SHORT $LN81@seekoff
  0012e	7f 06		 jg	 SHORT $LN77@seekoff
  00130	83 7d 0c 00	 cmp	 DWORD PTR __Off$[ebp], 0
  00134	72 a1		 jb	 SHORT $LN81@seekoff
$LN77@seekoff:
  00136	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00139	8b 30		 mov	 esi, DWORD PTR [eax]
  0013b	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0013e	2b c6		 sub	 eax, esi
  00140	99		 cdq
  00141	39 55 10	 cmp	 DWORD PTR __Off$[ebp+4], edx
  00144	7f 91		 jg	 SHORT $LN81@seekoff
  00146	7c 05		 jl	 SHORT $LN78@seekoff
  00148	39 45 0c	 cmp	 DWORD PTR __Off$[ebp], eax
  0014b	77 8a		 ja	 SHORT $LN81@seekoff
$LN78@seekoff:

; 260  : 				_Mysb::pbump((int)(_Mysb::eback()
; 261  : 					- _Mysb::pptr() + _Off));	// change write position

  0014d	2b 75 18	 sub	 esi, DWORD PTR tv388[ebp]
  00150	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00153	03 75 0c	 add	 esi, DWORD PTR __Off$[ebp]
  00156	29 30		 sub	 DWORD PTR [eax], esi
  00158	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0015b	01 31		 add	 DWORD PTR [ecx], esi

; 262  : 			else

  0015d	eb 18		 jmp	 SHORT $LN83@seekoff
$LN10@seekoff:

; 263  : 				_Off = _BADOFF;
; 264  : 			}
; 265  : 
; 266  :  #if _HAS_CPP0X
; 267  : 		else if (_Off != 0)

  0015f	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00162	0b 45 10	 or	 eax, DWORD PTR __Off$[ebp+4]
  00165	74 10		 je	 SHORT $LN83@seekoff

; 268  : 
; 269  :  #else /* _HAS_CPP0X */
; 270  : 		else
; 271  :  #endif /* _HAS_CPP0X */
; 272  : 
; 273  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  00167	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_BADOFF@std@@3_JB
  0016c	89 45 0c	 mov	 DWORD PTR __Off$[ebp], eax
  0016f	a1 04 00 00 00	 mov	 eax, DWORD PTR ?_BADOFF@std@@3_JB+4
  00174	89 45 10	 mov	 DWORD PTR __Off$[ebp+4], eax
$LN83@seekoff:

; 274  : 		return (pos_type(_Off));

  00177	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0017a	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  0017d	89 08		 mov	 DWORD PTR [eax], ecx
  0017f	8b 4d 10	 mov	 ecx, DWORD PTR __Off$[ebp+4]
  00182	5f		 pop	 edi
  00183	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00186	33 c9		 xor	 ecx, ecx
  00188	5e		 pop	 esi
  00189	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0018c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0018f	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00192	5b		 pop	 ebx

; 275  : 		}

  00193	c9		 leave
  00194	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
tv339 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 24
tv326 = 36						; size = 4
$T42058 = 36						; size = 4
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT
; _this$ = ecx

; 279  : 		{	// change position to _Pos, according to _Mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 280  : 		streamoff _Off = (streamoff)_Ptr;

  00004	8b 45 14	 mov	 eax, DWORD PTR __Ptr$[ebp+8]
  00007	53		 push	 ebx
  00008	99		 cdq
  00009	56		 push	 esi

; 281  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  0000a	8b 71 24	 mov	 esi, DWORD PTR [ecx+36]
  0000d	57		 push	 edi
  0000e	8b f8		 mov	 edi, eax
  00010	03 7d 0c	 add	 edi, DWORD PTR __Ptr$[ebp]
  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	8b da		 mov	 ebx, edx
  00017	13 5d 10	 adc	 ebx, DWORD PTR __Ptr$[ebp+4]
  0001a	85 c0		 test	 eax, eax
  0001c	74 08		 je	 SHORT $LN12@seekpos
  0001e	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00021	73 03		 jae	 SHORT $LN12@seekpos

; 282  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  00023	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN12@seekpos:

; 283  : 
; 284  : 		if (_Off == _BADOFF)

  00026	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?_BADOFF@std@@3_JB
  0002c	3b fa		 cmp	 edi, edx
  0002e	75 0c		 jne	 SHORT $LN60@seekpos
  00030	3b 1d 04 00 00
	00		 cmp	 ebx, DWORD PTR ?_BADOFF@std@@3_JB+4
  00036	0f 84 bb 00 00
	00		 je	 $LN63@seekpos
$LN60@seekpos:

; 285  : 			;
; 286  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

  0003c	f6 45 24 01	 test	 BYTE PTR __Mode$[ebp], 1
  00040	74 6e		 je	 SHORT $LN64@seekpos
  00042	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	89 45 fc	 mov	 DWORD PTR tv339[ebp], eax
  0004a	85 c0		 test	 eax, eax
  0004c	74 62		 je	 SHORT $LN64@seekpos

; 287  : 			{	// position within read buffer
; 288  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0004e	85 db		 test	 ebx, ebx
  00050	7c 56		 jl	 SHORT $LN61@seekpos
  00052	7f 04		 jg	 SHORT $LN56@seekpos
  00054	85 ff		 test	 edi, edi
  00056	72 50		 jb	 SHORT $LN61@seekpos
$LN56@seekpos:
  00058	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0005b	8b 30		 mov	 esi, DWORD PTR [eax]
  0005d	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00060	2b c6		 sub	 eax, esi
  00062	99		 cdq
  00063	3b da		 cmp	 ebx, edx
  00065	7f 41		 jg	 SHORT $LN61@seekpos
  00067	7c 04		 jl	 SHORT $LN57@seekpos
  00069	3b f8		 cmp	 edi, eax
  0006b	77 3b		 ja	 SHORT $LN61@seekpos
$LN57@seekpos:

; 289  : 				{	// change read position
; 290  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  0006d	2b 75 fc	 sub	 esi, DWORD PTR tv339[ebp]
  00070	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00073	03 f7		 add	 esi, edi
  00075	29 30		 sub	 DWORD PTR [eax], esi
  00077	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0007a	01 30		 add	 DWORD PTR [eax], esi

; 291  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  0007c	f6 45 24 02	 test	 BYTE PTR __Mode$[ebp], 2
  00080	74 75		 je	 SHORT $LN63@seekpos
  00082	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00085	8b 32		 mov	 esi, DWORD PTR [edx]
  00087	85 f6		 test	 esi, esi
  00089	74 6c		 je	 SHORT $LN63@seekpos

; 292  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 293  : 						_Mysb::epptr());	// change write position to match

  0008b	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0008e	8b 00		 mov	 eax, DWORD PTR [eax]
  00090	89 45 24	 mov	 DWORD PTR $T42058[ebp], eax
  00093	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	03 c6		 add	 eax, esi
  0009a	8b 75 24	 mov	 esi, DWORD PTR $T42058[ebp]
  0009d	89 32		 mov	 DWORD PTR [edx], esi
  0009f	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  000a2	2b c6		 sub	 eax, esi
  000a4	89 01		 mov	 DWORD PTR [ecx], eax

; 294  : 				}
; 295  : 			else

  000a6	eb 4f		 jmp	 SHORT $LN63@seekpos
$LN61@seekpos:

; 296  : 				_Off = _BADOFF;

  000a8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3_JB
  000ae	eb 41		 jmp	 SHORT $LN66@seekpos
$LN64@seekpos:

; 297  : 			}
; 298  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  000b0	f6 45 24 02	 test	 BYTE PTR __Mode$[ebp], 2
  000b4	74 39		 je	 SHORT $LN4@seekpos
  000b6	8b 36		 mov	 esi, DWORD PTR [esi]
  000b8	89 75 24	 mov	 DWORD PTR tv326[ebp], esi
  000bb	85 f6		 test	 esi, esi
  000bd	74 30		 je	 SHORT $LN4@seekpos

; 299  : 			{	// position within write buffer
; 300  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  000bf	85 db		 test	 ebx, ebx
  000c1	7c e5		 jl	 SHORT $LN61@seekpos
  000c3	7f 04		 jg	 SHORT $LN58@seekpos
  000c5	85 ff		 test	 edi, edi
  000c7	72 df		 jb	 SHORT $LN61@seekpos
$LN58@seekpos:
  000c9	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  000cc	8b 30		 mov	 esi, DWORD PTR [eax]
  000ce	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  000d1	2b c6		 sub	 eax, esi
  000d3	99		 cdq
  000d4	3b da		 cmp	 ebx, edx
  000d6	7f d0		 jg	 SHORT $LN61@seekpos
  000d8	7c 04		 jl	 SHORT $LN59@seekpos
  000da	3b f8		 cmp	 edi, eax
  000dc	77 ca		 ja	 SHORT $LN61@seekpos
$LN59@seekpos:

; 301  : 				_Mysb::pbump((int)(_Mysb::eback()
; 302  : 					- _Mysb::pptr() + _Off));	// change write position

  000de	2b 75 24	 sub	 esi, DWORD PTR tv326[ebp]
  000e1	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  000e4	03 f7		 add	 esi, edi
  000e6	29 30		 sub	 DWORD PTR [eax], esi
  000e8	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000eb	01 31		 add	 DWORD PTR [ecx], esi

; 303  : 			else

  000ed	eb 08		 jmp	 SHORT $LN63@seekpos
$LN4@seekpos:

; 304  : 				_Off = _BADOFF;
; 305  : 			}
; 306  : 		else
; 307  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  000ef	8b fa		 mov	 edi, edx
$LN66@seekpos:
  000f1	8b 1d 04 00 00
	00		 mov	 ebx, DWORD PTR ?_BADOFF@std@@3_JB+4
$LN63@seekpos:

; 308  : 		return (streampos(_Off));

  000f7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000fa	89 38		 mov	 DWORD PTR [eax], edi
  000fc	5f		 pop	 edi
  000fd	33 c9		 xor	 ecx, ecx
  000ff	5e		 pop	 esi
  00100	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  00103	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00106	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00109	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0010c	5b		 pop	 ebx

; 309  : 		}

  0010d	c9		 leave
  0010e	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 1c	 add	 DWORD PTR [eax], 28	; 0000001cH

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator==
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator!=
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 71 f8	 lea	 esi, DWORD PTR [ecx-8]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00012	74 07		 je	 SHORT $LN1@scalar@12
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001a	59		 pop	 ecx
$LN1@scalar@12:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@13
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@13:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@14
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@14:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1952 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1953 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1954 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1987 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1988 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 20		 je	 SHORT $LN9@Tidy@4

; 1989 : 			;
; 1990 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1a		 jb	 SHORT $LN9@Tidy@4

; 1991 : 			{	// copy any leftovers to small buffer and deallocate
; 1992 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1993 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy@4

; 1994 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy@4:

; 1995 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	59		 pop	 ecx
  0002f	5b		 pop	 ebx
$LN9@Tidy@4:

; 1996 : 			}
; 1997 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1998 : 		_Eos(_Newsize);

  00030	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00033	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 1999 : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT
; _this$ = ecx

; 42   : 		{	// set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		ios_base::clear((iostate)(_Mystrbuf == 0
; 44   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00003	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00007	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  0000a	75 03		 jne	 SHORT $LN4@clear@2
  0000c	83 c8 04	 or	 eax, 4
$LN4@clear@2:
  0000f	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 45   : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
_TEXT	ENDS
PUBLIC	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputc, COMDAT
; _this$ = ecx

; 193  : 		{	// put a character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 194  : 		return (0 < _Pnavail()
; 195  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 196  : 			: overflow(_Traits::to_int_type(_Ch)));

  00003	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00006	83 38 00	 cmp	 DWORD PTR [eax], 0
  00009	74 07		 je	 SHORT $LN7@sputc
  0000b	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	eb 02		 jmp	 SHORT $LN8@sputc
$LN7@sputc:
  00012	33 c0		 xor	 eax, eax
$LN8@sputc:
  00014	85 c0		 test	 eax, eax
  00016	7e 19		 jle	 SHORT $LN3@sputc
  00018	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0001b	ff 08		 dec	 DWORD PTR [eax]
  0001d	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00025	89 10		 mov	 DWORD PTR [eax], edx
  00027	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  0002a	88 01		 mov	 BYTE PTR [ecx], al
  0002c	0f b6 c0	 movzx	 eax, al
  0002f	eb 0a		 jmp	 SHORT $LN4@sputc
$LN3@sputc:
  00031	0f b6 55 08	 movzx	 edx, BYTE PTR __Ch$[ebp]
  00035	8b 01		 mov	 eax, DWORD PTR [ecx]
  00037	52		 push	 edx
  00038	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN4@sputc:

; 197  : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputc
_TEXT	ENDS
PUBLIC	?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1108 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1109 : 		if (this->_Mysize < _Off)

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000d	3b c1		 cmp	 eax, ecx
  0000f	73 0a		 jae	 SHORT $LN3@erase

; 1110 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN28@erase:
$LN3@erase:

; 1111 : 		if (this->_Mysize - _Off < _Count)

  0001b	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0001e	2b c1		 sub	 eax, ecx
  00020	3b c3		 cmp	 eax, ebx
  00022	73 02		 jae	 SHORT $LN2@erase

; 1112 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00024	8b d8		 mov	 ebx, eax
$LN2@erase:

; 1113 : 		if (0 < _Count)

  00026	85 db		 test	 ebx, ebx
  00028	74 46		 je	 SHORT $LN25@erase

; 1114 : 			{	// move elements down
; 1115 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1116 : 				this->_Mysize - _Off - _Count);

  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	57		 push	 edi
  0002e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00031	72 04		 jb	 SHORT $LN11@erase
  00033	8b 3e		 mov	 edi, DWORD PTR [esi]
  00035	eb 02		 jmp	 SHORT $LN12@erase
$LN11@erase:
  00037	8b fe		 mov	 edi, esi
$LN12@erase:
  00039	83 fa 10	 cmp	 edx, 16			; 00000010H
  0003c	72 04		 jb	 SHORT $LN15@erase
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	eb 02		 jmp	 SHORT $LN16@erase
$LN15@erase:
  00042	8b d6		 mov	 edx, esi
$LN16@erase:
  00044	2b c3		 sub	 eax, ebx
  00046	03 f9		 add	 edi, ecx
  00048	50		 push	 eax
  00049	03 fb		 add	 edi, ebx
  0004b	03 d1		 add	 edx, ecx
  0004d	57		 push	 edi
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 _memmove

; 1117 : 			size_type _Newsize = this->_Mysize - _Count;

  00054	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	2b c3		 sub	 eax, ebx

; 1118 : 			_Eos(_Newsize);

  0005c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00060	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00063	5f		 pop	 edi
  00064	72 04		 jb	 SHORT $LN23@erase
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	eb 02		 jmp	 SHORT $LN24@erase
$LN23@erase:
  0006a	8b ce		 mov	 ecx, esi
$LN24@erase:
  0006c	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN25@erase:

; 1119 : 			}
; 1120 : 		return (*this);

  00070	8b c6		 mov	 eax, esi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx

; 1121 : 		}

  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1516 : 		size_type _Num = this->_Alval.max_size();
; 1517 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	6a fe		 push	 -2			; fffffffeH
  00002	58		 pop	 eax

; 1518 : 		}

  00003	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
tv296 = -20						; size = 4
__Newres$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1918 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 1919 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00014	83 cf 0f	 or	 edi, 15			; 0000000fH

; 1920 : 		if (max_size() < _Newres)

  00017	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0001a	76 05		 jbe	 SHORT $LN9@Copy

; 1921 : 			_Newres = _Newsize;	// undo roundup if too big

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0001f	eb 27		 jmp	 SHORT $LN5@Copy
$LN9@Copy:

; 1922 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00021	33 d2		 xor	 edx, edx
  00023	6a 03		 push	 3
  00025	8b c7		 mov	 eax, edi
  00027	5b		 pop	 ebx
  00028	f7 f3		 div	 ebx
  0002a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002d	89 4d ec	 mov	 DWORD PTR tv296[ebp], ecx
  00030	d1 6d ec	 shr	 DWORD PTR tv296[ebp], 1
  00033	8b 55 ec	 mov	 edx, DWORD PTR tv296[ebp]
  00036	3b d0		 cmp	 edx, eax
  00038	76 0e		 jbe	 SHORT $LN5@Copy

; 1923 : 			;
; 1924 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  0003a	6a fe		 push	 -2			; fffffffeH
  0003c	5f		 pop	 edi
  0003d	8b c7		 mov	 eax, edi
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	77 03		 ja	 SHORT $LN5@Copy

; 1925 : 			_Newres = this->_Myres
; 1926 : 				+ this->_Myres / 2;	// grow exponentially if possible

  00045	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]
$LN5@Copy:

; 1927 : 		else
; 1928 : 			_Newres = max_size();	// settle for max_size()
; 1929 : 
; 1930 : 		_Elem *_Ptr;
; 1931 : 		_TRY_BEGIN

  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1932 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  0004c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0004f	6a 00		 push	 0
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00057	59		 pop	 ecx
  00058	59		 pop	 ecx
  00059	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0005c	eb 27		 jmp	 SHORT $LN19@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1933 : 		_CATCH_ALL
; 1934 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0005e	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00061	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00064	89 45 ec	 mov	 DWORD PTR __Newres$[ebp], eax

; 1935 : 			_TRY_BEGIN
; 1936 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  00067	40		 inc	 eax
  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00074	59		 pop	 ecx
  00075	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00078	59		 pop	 ecx

; 1940 : 			_CATCH_END
; 1941 : 		_CATCH_END

  00079	b8 00 00 00 00	 mov	 eax, $LN63@Copy
  0007e	c3		 ret	 0
$LN63@Copy:
  0007f	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00082	8b 7d ec	 mov	 edi, DWORD PTR __Newres$[ebp]
$LN19@Copy:

; 1942 : 
; 1943 : 		if (0 < _Oldlen)

  00085	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  00088	85 db		 test	 ebx, ebx
  0008a	74 19		 je	 SHORT $LN52@Copy

; 1944 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  0008c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00090	72 04		 jb	 SHORT $LN50@Copy
  00092	8b 06		 mov	 eax, DWORD PTR [esi]
  00094	eb 02		 jmp	 SHORT $LN51@Copy
$LN50@Copy:
  00096	8b c6		 mov	 eax, esi
$LN51@Copy:
  00098	53		 push	 ebx
  00099	50		 push	 eax
  0009a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0009d	e8 00 00 00 00	 call	 _memcpy
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@Copy:

; 1945 : 		_Tidy(true);

  000a5	6a 00		 push	 0
  000a7	6a 01		 push	 1
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1946 : 		this->_Bx._Ptr = _Ptr;

  000b0	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b3	89 06		 mov	 DWORD PTR [esi], eax

; 1947 : 		this->_Myres = _Newres;

  000b5	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 1948 : 		_Eos(_Oldlen);

  000b8	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000bb	83 ff 10	 cmp	 edi, 16			; 00000010H
  000be	73 02		 jae	 SHORT $LN59@Copy
  000c0	8b c6		 mov	 eax, esi
$LN59@Copy:
  000c2	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 1949 : 		}

  000c6	e8 00 00 00 00	 call	 __EH_epilog3
  000cb	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1937 : 			_CATCH_ALL
; 1938 : 			_Tidy(true);	// failed again, discard storage and reraise

  000ce	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	33 f6		 xor	 esi, esi
  000d3	56		 push	 esi
  000d4	6a 01		 push	 1
  000d6	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1939 : 			_RERAISE;

  000db	56		 push	 esi
  000dc	56		 push	 esi
  000dd	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN67@Copy:
$LN66@Copy:
  000e2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
EXTRN	??0_Mutex@std@@QAE@XZ:PROC			; std::_Mutex::_Mutex
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ$0
__ehfuncinfo$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 25   : 		{	// construct with no buffers

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0001a	e8 00 00 00 00	 call	 ??0_Mutex@std@@QAE@XZ	; std::_Mutex::_Mutex
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00023	6a 04		 push	 4
  00025	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002a	59		 pop	 ecx
  0002b	85 c0		 test	 eax, eax
  0002d	74 09		 je	 SHORT $LN3@basic_stre@2
  0002f	8b c8		 mov	 ecx, eax
  00031	e8 00 00 00 00	 call	 ??0locale@std@@QAE@XZ	; std::locale::locale
  00036	eb 02		 jmp	 SHORT $LN4@basic_stre@2
$LN3@basic_stre@2:
  00038	33 c0		 xor	 eax, eax
$LN4@basic_stre@2:

; 26   : 		_Init();

  0003a	8b ce		 mov	 ecx, esi
  0003c	89 46 38	 mov	 DWORD PTR [esi+56], eax
  0003f	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init

; 27   : 		}

  00044	8b c6		 mov	 eax, esi
  00046	e8 00 00 00 00	 call	 __EH_epilog3
  0004b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
__ehhandler$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
PUBLIC	?_Make_iter@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Make_iter
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 1c		 push	 28			; 0000001cH
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba 49 92 24 09	 mov	 edx, 153391689		; 09249249H
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00026	73 03		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
$LN1@Grow_to:

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Grow_to
_TEXT	ENDS
PUBLIC	?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\sstream
;	COMDAT ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__State$ = 16						; size = 4
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init, COMDAT
; _this$ = ecx

; 313  : 		{	// initialize buffer to [_Ptr, _Ptr + _Count), set state

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 314  : 		_Seekhigh = 0;
; 315  : 		_Mystate = _State;

  00003	8b 45 10	 mov	 eax, DWORD PTR __State$[ebp]
  00006	53		 push	 ebx

; 316  : 
; 317  : 		if (_Count != 0
; 318  : 			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	83 66 3c 00	 and	 DWORD PTR [esi+60], 0
  00011	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00014	85 db		 test	 ebx, ebx
  00016	74 7b		 je	 SHORT $LN4@Init@2
  00018	83 e0 06	 and	 eax, 6
  0001b	3c 06		 cmp	 al, 6
  0001d	74 74		 je	 SHORT $LN4@Init@2

; 319  : 			{	// finite buffer that can be read or written, set it up
; 320  : 			_Elem *_Pnew = _Al.allocate(_Count);

  0001f	57		 push	 edi
  00020	6a 00		 push	 0
  00022	53		 push	 ebx
  00023	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>

; 321  : 			_Traits::copy(_Pnew, _Ptr, _Count);

  00028	53		 push	 ebx
  00029	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0002c	8b f8		 mov	 edi, eax
  0002e	57		 push	 edi
  0002f	e8 00 00 00 00	 call	 _memcpy
  00034	83 c4 14	 add	 esp, 20			; 00000014H

; 322  : 			_Seekhigh = _Pnew + _Count;
; 323  : 
; 324  : 			if (!(_Mystate & _Noread))

  00037	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  0003b	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  0003e	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00041	75 0f		 jne	 SHORT $LN13@Init@2

; 325  : 				_Mysb::setg(_Pnew, _Pnew,
; 326  : 					_Pnew + _Count);	// setup read buffer

  00043	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00046	89 39		 mov	 DWORD PTR [ecx], edi
  00048	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0004b	89 39		 mov	 DWORD PTR [ecx], edi
  0004d	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00050	89 19		 mov	 DWORD PTR [ecx], ebx
$LN13@Init@2:

; 327  : 			if (!(_Mystate & _Constant))

  00052	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00055	f6 c1 02	 test	 cl, 2
  00058	75 34		 jne	 SHORT $LN19@Init@2

; 328  : 				{	// setup write buffer, and maybe read buffer
; 329  : 				_Mysb::setp(_Pnew,
; 330  : 					(_Mystate & _Atend) ? _Pnew + _Count : _Pnew,
; 331  : 					_Pnew + _Count);

  0005a	f6 c1 10	 test	 cl, 16			; 00000010H
  0005d	75 02		 jne	 SHORT $LN8@Init@2
  0005f	8b c7		 mov	 eax, edi
$LN8@Init@2:
  00061	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00064	89 39		 mov	 DWORD PTR [ecx], edi
  00066	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00069	89 01		 mov	 DWORD PTR [ecx], eax
  0006b	8b cf		 mov	 ecx, edi
  0006d	2b c8		 sub	 ecx, eax
  0006f	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00072	03 cb		 add	 ecx, ebx
  00074	89 08		 mov	 DWORD PTR [eax], ecx

; 332  : 				if (_Mysb::gptr() == 0)

  00076	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00079	83 38 00	 cmp	 DWORD PTR [eax], 0
  0007c	75 10		 jne	 SHORT $LN19@Init@2

; 333  : 					_Mysb::setg(_Pnew, 0, _Pnew);

  0007e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00081	89 38		 mov	 DWORD PTR [eax], edi
  00083	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00086	83 20 00	 and	 DWORD PTR [eax], 0
  00089	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0008c	89 38		 mov	 DWORD PTR [eax], edi
$LN19@Init@2:

; 334  : 				}
; 335  : 			_Mystate |= _Allocated;

  0008e	83 4e 40 01	 or	 DWORD PTR [esi+64], 1
  00092	5f		 pop	 edi
$LN4@Init@2:
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx

; 336  : 			}
; 337  : 		}

  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
_TEXT	ENDS
PUBLIC	??$setfill@D@std@@YA?AU?$_Fillobj@D@0@D@Z	; std::setfill<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iomanip
;	COMDAT ??$setfill@D@std@@YA?AU?$_Fillobj@D@0@D@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Ch$ = 12						; size = 1
??$setfill@D@std@@YA?AU?$_Fillobj@D@0@D@Z PROC		; std::setfill<char>, COMDAT

; 28   : 	{	// return a _Fillobj manipulator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 29   : 	return (_Fillobj<_Elem>(_Ch));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8a 4d 0c	 mov	 cl, BYTE PTR __Ch$[ebp]
  00009	88 08		 mov	 BYTE PTR [eax], cl

; 30   : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$setfill@D@std@@YA?AU?$_Fillobj@D@0@D@Z ENDP		; std::setfill<char>
_TEXT	ENDS
PUBLIC	??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Fillobj@D@0@@Z ; std::operator<<<char,std::char_traits<char> >
; Function compile flags: /Ogsp
;	COMDAT ??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Fillobj@D@0@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
__Manip$ = 12						; size = 4
??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Fillobj@D@0@@Z PROC ; std::operator<<<char,std::char_traits<char> >, COMDAT

; 47   : 	{	// set fill character in output stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   : 	_Ostr.fill(_Manip._Fill);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 55 0c	 mov	 edx, DWORD PTR __Manip$[ebp]
  0000b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000e	8a 12		 mov	 dl, BYTE PTR [edx]
  00010	88 54 01 40	 mov	 BYTE PTR [ecx+eax+64], dl

; 49   : 	return (_Ostr);
; 50   : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Fillobj@D@0@@Z ENDP ; std::operator<<<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator!=<char,char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT

; 271  : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 272  : 	}

  00002	c3		 ret	 0
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
_TEXT	ENDS
PUBLIC	??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
PUBLIC	??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
EXTRN	??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@'
	DB	'std@@@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD FLAT:??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
	DD	FLAT:??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1083 : 		{	// construct from specified locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 1084 : 		_Init(_Lobj);

  00012	e8 00 00 00 00	 call	 __Getcvt
  00017	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0001a	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 1085 : 		}

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
PUBLIC	?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ	; std::_Locinfo::_Getlconv
EXTRN	_localeconv:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
;	COMDAT ?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ
_TEXT	SEGMENT
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ PROC		; std::_Locinfo::_Getlconv, COMDAT
; _this$ = ecx

; 128  : 		return (localeconv());

  00000	e9 00 00 00 00	 jmp	 _localeconv
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ ENDP		; std::_Locinfo::_Getlconv
_TEXT	ENDS
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	?_Getfalse@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Getfalse
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Getfalse@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Getfalse@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Getfalse, COMDAT
; _this$ = ecx

; 166  : 		return ("false");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05LAPONLG@false?$AA@

; 167  : 		}

  00005	c3		 ret	 0
?_Getfalse@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Getfalse
_TEXT	ENDS
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	?_Gettrue@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Gettrue
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Gettrue@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Gettrue@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Gettrue, COMDAT
; _this$ = ecx

; 171  : 		return ("true");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04LOAJBDKD@true?$AA@

; 172  : 		}

  00005	c3		 ret	 0
?_Gettrue@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Gettrue
_TEXT	ENDS
PUBLIC	?precision@ios_base@std@@QBE_JXZ		; std::ios_base::precision
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
;	COMDAT ?precision@ios_base@std@@QBE_JXZ
_TEXT	SEGMENT
?precision@ios_base@std@@QBE_JXZ PROC			; std::ios_base::precision, COMDAT
; _this$ = ecx

; 428  : 		return (_Prec);

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]

; 429  : 		}

  00006	c3		 ret	 0
?precision@ios_base@std@@QBE_JXZ ENDP			; std::ios_base::precision
_TEXT	ENDS
PUBLIC	??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1063 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00006	c3		 ret	 0
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar@15
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@15:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
; Function compile flags: /Ogsp
;	COMDAT ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 1
__Flags$ = 20						; size = 4
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt, COMDAT

; 1308 : 		{	// generate sprintf format for floating-point

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1309 : 		char *_Ptr = _Fmt;
; 1310 : 		*_Ptr++ = '%';

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Fmt$[ebp]
  00006	53		 push	 ebx

; 1311 : 
; 1312 : 		if (_Flags & ios_base::showpos)

  00007	8b 5d 14	 mov	 ebx, DWORD PTR __Flags$[ebp]
  0000a	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000d	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00010	f6 c3 20	 test	 bl, 32			; 00000020H
  00013	74 04		 je	 SHORT $LN3@Ffmt

; 1313 : 			*_Ptr++ = '+';

  00015	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00018	41		 inc	 ecx
$LN3@Ffmt:

; 1314 : 		if (_Flags & ios_base::showpoint)

  00019	f6 c3 10	 test	 bl, 16			; 00000010H
  0001c	74 04		 je	 SHORT $LN2@Ffmt

; 1315 : 			*_Ptr++ = '#';

  0001e	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  00021	41		 inc	 ecx
$LN2@Ffmt:

; 1316 : 		*_Ptr++ = '.';
; 1317 : 		*_Ptr++ = '*';	// for precision argument
; 1318 : 		if (_Spec != '\0')

  00022	8a 55 10	 mov	 dl, BYTE PTR __Spec$[ebp]
  00025	66 c7 01 2e 2a	 mov	 WORD PTR [ecx], 10798	; 00002a2eH
  0002a	83 c1 02	 add	 ecx, 2
  0002d	84 d2		 test	 dl, dl
  0002f	74 03		 je	 SHORT $LN1@Ffmt

; 1319 : 			*_Ptr++ = _Spec;	// 'L' qualifier for long double only

  00031	88 11		 mov	 BYTE PTR [ecx], dl
  00033	41		 inc	 ecx
$LN1@Ffmt:

; 1320 : 
; 1321 : 		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

  00034	ba 00 30 00 00	 mov	 edx, 12288		; 00003000H
  00039	23 da		 and	 ebx, edx

; 1322 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1323 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1324 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0003b	81 fb 00 20 00
	00		 cmp	 ebx, 8192		; 00002000H
  00041	75 04		 jne	 SHORT $LN8@Ffmt
  00043	b2 66		 mov	 dl, 102			; 00000066H
  00045	eb 15		 jmp	 SHORT $LN7@Ffmt
$LN8@Ffmt:
  00047	3b da		 cmp	 ebx, edx
  00049	75 04		 jne	 SHORT $LN6@Ffmt
  0004b	b2 61		 mov	 dl, 97			; 00000061H
  0004d	eb 0d		 jmp	 SHORT $LN7@Ffmt
$LN6@Ffmt:
  0004f	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00055	0f 95 c2	 setne	 dl
  00058	8d 54 12 65	 lea	 edx, DWORD PTR [edx+edx+101]
$LN7@Ffmt:
  0005c	88 11		 mov	 BYTE PTR [ecx], dl

; 1325 : 		*_Ptr = '\0';

  0005e	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00062	5b		 pop	 ebx

; 1326 : 		return (_Fmt);
; 1327 : 		}

  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
_TEXT	ENDS
PUBLIC	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
; Function compile flags: /Ogsp
;	COMDAT ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 4
__Flags$ = 20						; size = 4
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt, COMDAT

; 1451 : 		{	// generate sprintf format for integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1452 : 		char *_Ptr = _Fmt;
; 1453 : 		*_Ptr++ = '%';

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Fmt$[ebp]

; 1454 : 
; 1455 : 		if (_Flags & ios_base::showpos)

  00006	8b 55 14	 mov	 edx, DWORD PTR __Flags$[ebp]
  00009	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000c	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000f	f6 c2 20	 test	 dl, 32			; 00000020H
  00012	74 04		 je	 SHORT $LN4@Ifmt

; 1456 : 			*_Ptr++ = '+';

  00014	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00017	41		 inc	 ecx
$LN4@Ifmt:

; 1457 : 		if (_Flags & ios_base::showbase)

  00018	f6 c2 08	 test	 dl, 8
  0001b	74 04		 je	 SHORT $LN3@Ifmt

; 1458 : 			*_Ptr++ = '#';

  0001d	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  00020	41		 inc	 ecx
$LN3@Ifmt:

; 1459 : 		if (_Spec[0] != 'L')

  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	8b 7d 10	 mov	 edi, DWORD PTR __Spec$[ebp]
  00027	8a 1f		 mov	 bl, BYTE PTR [edi]
  00029	80 fb 4c	 cmp	 bl, 76			; 0000004cH
  0002c	74 05		 je	 SHORT $LN2@Ifmt

; 1460 : 			*_Ptr++ = _Spec[0];	// qualifier

  0002e	88 19		 mov	 BYTE PTR [ecx], bl
  00030	41		 inc	 ecx

; 1461 : 		else

  00031	eb 0c		 jmp	 SHORT $LN1@Ifmt
$LN2@Ifmt:

; 1462 : 
; 1463 : 			{	/* change L to I64 */
; 1464 : 			*_Ptr++ = 'I';

  00033	66 c7 01 49 36	 mov	 WORD PTR [ecx], 13897	; 00003649H

; 1465 : 			*_Ptr++ = '6';
; 1466 : 			*_Ptr++ = '4';

  00038	c6 41 02 34	 mov	 BYTE PTR [ecx+2], 52	; 00000034H
  0003c	83 c1 03	 add	 ecx, 3
$LN1@Ifmt:

; 1467 : 			}
; 1468 : 
; 1469 : 		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  0003f	8b f2		 mov	 esi, edx
  00041	81 e6 00 0e 00
	00		 and	 esi, 3584		; 00000e00H

; 1470 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1471 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1472 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  00047	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  0004d	75 04		 jne	 SHORT $LN9@Ifmt
  0004f	b2 6f		 mov	 dl, 111			; 0000006fH
  00051	eb 18		 jmp	 SHORT $LN8@Ifmt
$LN9@Ifmt:
  00053	81 fe 00 08 00
	00		 cmp	 esi, 2048		; 00000800H
  00059	74 05		 je	 SHORT $LN7@Ifmt
  0005b	8a 57 01	 mov	 dl, BYTE PTR [edi+1]
  0005e	eb 0b		 jmp	 SHORT $LN8@Ifmt
$LN7@Ifmt:
  00060	c0 e2 03	 shl	 dl, 3
  00063	f6 d2		 not	 dl
  00065	80 e2 20	 and	 dl, 32			; 00000020H
  00068	80 ca 58	 or	 dl, 88			; 00000058H
$LN8@Ifmt:
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	88 11		 mov	 BYTE PTR [ecx], dl

; 1473 : 		*_Ptr = '\0';

  0006f	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00073	5b		 pop	 ebx

; 1474 : 		return (_Fmt);
; 1475 : 		}

  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
_TEXT	ENDS
PUBLIC	??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*, COMDAT
; _this$ = ecx

; 631  : 		{	// pretend to get designated element

  00000	8b c1		 mov	 eax, ecx

; 632  : 		return (*this);
; 633  : 		}

  00002	c3		 ret	 0
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
_TEXT	ENDS
PUBLIC	??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++, COMDAT
; _this$ = ecx

; 636  : 		{	// pretend to preincrement

  00000	8b c1		 mov	 eax, ecx

; 637  : 		return (*this);
; 638  : 		}

  00002	c3		 ret	 0
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
_TEXT	ENDS
PUBLIC	?decimal_point@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::decimal_point
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?decimal_point@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?decimal_point@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::decimal_point, COMDAT
; _this$ = ecx

; 69   : 		return (do_decimal_point());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 04	 jmp	 DWORD PTR [eax+4]
?decimal_point@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::decimal_point
_TEXT	ENDS
PUBLIC	?thousands_sep@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::thousands_sep
; Function compile flags: /Ogsp
;	COMDAT ?thousands_sep@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?thousands_sep@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::thousands_sep, COMDAT
; _this$ = ecx

; 74   : 		return (do_thousands_sep());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 08	 jmp	 DWORD PTR [eax+8]
?thousands_sep@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::thousands_sep
_TEXT	ENDS
PUBLIC	?_Tidy@?$numpunct@D@std@@AAEXXZ			; std::numpunct<char>::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$numpunct@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$numpunct@D@std@@AAEXXZ PROC			; std::numpunct<char>::_Tidy, COMDAT
; _this$ = ecx

; 189  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 190  : 		_DELETE_CRT_VEC((void *)_Grouping);

  00003	ff 76 08	 push	 DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 191  : 		_DELETE_CRT_VEC((void *)_Falsename);

  0000b	ff 76 10	 push	 DWORD PTR [esi+16]
  0000e	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 192  : 		_DELETE_CRT_VEC((void *)_Truename);

  00013	ff 76 14	 push	 DWORD PTR [esi+20]
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001e	5e		 pop	 esi

; 193  : 		}

  0001f	c3		 ret	 0
?_Tidy@?$numpunct@D@std@@AAEXXZ ENDP			; std::numpunct<char>::_Tidy
_TEXT	ENDS
PUBLIC	??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z	; std::_Maklocchr<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z PROC		; std::_Maklocchr<char>, COMDAT

; 625  : 	{	// convert char to _Elem using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 626  : 	return ((_Elem)(unsigned char)_Byte);

  00003	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]

; 627  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z ENDP		; std::_Maklocchr<char>
_TEXT	ENDS
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Ogsp
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 658  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 659  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00008	57		 push	 edi
  00009	e8 00 00 00 00	 call	 _strlen
  0000e	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 660  : 	_Elem *_Ptrdest = _NEW_CRT _Elem[_Count];

  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00017	59		 pop	 ecx
  00018	59		 pop	 ecx

; 661  : 
; 662  :  #pragma warning(push)
; 663  :  #pragma warning(disable: 6011)	/* quiet prefast noise */
; 664  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00019	85 f6		 test	 esi, esi
  0001b	74 0d		 je	 SHORT $LN1@Maklocstr
  0001d	8b c8		 mov	 ecx, eax
  0001f	2b cf		 sub	 ecx, edi
$LL3@Maklocstr:

; 665  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  00021	8a 17		 mov	 dl, BYTE PTR [edi]
  00023	88 14 39	 mov	 BYTE PTR [ecx+edi], dl
  00026	47		 inc	 edi
  00027	4e		 dec	 esi
  00028	75 f7		 jne	 SHORT $LL3@Maklocstr
$LN1@Maklocstr:
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi

; 666  :  #pragma warning(pop)
; 667  : 
; 668  : 	return (_Ptrdest);
; 669  : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
PUBLIC	??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 1
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=, COMDAT
; _this$ = ecx

; 622  : 		{	// store element and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 623  : 		if (_Strbuf == 0
; 624  : 			|| traits_type::eq_int_type(_Traits::eof(),
; 625  : 				_Strbuf->sputc(_Right)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 0d		 je	 SHORT $LN1@operator@5
  0000d	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00010	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  00015	83 f8 ff	 cmp	 eax, -1
  00018	75 03		 jne	 SHORT $LN2@operator@5
$LN1@operator@5:

; 626  : 			_Failed = true;

  0001a	c6 06 01	 mov	 BYTE PTR [esi], 1
$LN2@operator@5:

; 627  : 		return (*this);

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 628  : 		}

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z	; std::numpunct<char>::_Init
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0
__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2
__ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
_TEXT	SEGMENT
$T42634 = -28						; size = 8
$T42633 = -28						; size = 8
$T42630 = -28						; size = 8
_this$ = -24						; size = 4
tv79 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Lobj$ = 8						; size = 4
__Isdef$ = 12						; size = 1
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z PROC	; std::numpunct<char>::_Init, COMDAT
; _this$ = ecx

; 133  : 		{	// initialize from _Lobj

  00000	6a 10		 push	 16			; 00000010H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 134  : 		const lconv *_Ptr = _Lobj._Getlconv();

  00011	e8 00 00 00 00	 call	 _localeconv

; 135  : 
; 136  : 		_Grouping = 0;

  00016	33 db		 xor	 ebx, ebx
  00018	8b f8		 mov	 edi, eax
  0001a	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 137  : 		_Falsename = 0;

  0001d	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 138  : 		_Truename = 0;

  00020	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 139  : 
; 140  : 		_TRY_BEGIN

  00023	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 141  : 		_Grouping = _MAKLOCSTR(char, _Isdef ? "" : _Ptr->grouping,

  00026	38 5d 0c	 cmp	 BYTE PTR __Isdef$[ebp], bl
  00029	74 09		 je	 SHORT $LN5@Init@3
  0002b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
  00032	eb 06		 jmp	 SHORT $LN6@Init@3
$LN5@Init@3:
  00034	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00037	89 45 ec	 mov	 DWORD PTR tv79[ebp], eax
$LN6@Init@3:
  0003a	e8 00 00 00 00	 call	 __Getcvt
  0003f	8d 45 e4	 lea	 eax, DWORD PTR $T42630[ebp]
  00042	50		 push	 eax
  00043	53		 push	 ebx
  00044	ff 75 ec	 push	 DWORD PTR tv79[ebp]
  00047	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 142  : 			_Lobj._Getcvt());
; 143  : 		_Falsename = _MAKLOCSTR(_Elem, _Lobj._Getfalse(), _Lobj._Getcvt());

  00052	e8 00 00 00 00	 call	 __Getcvt
  00057	8d 45 e4	 lea	 eax, DWORD PTR $T42633[ebp]
  0005a	50		 push	 eax
  0005b	53		 push	 ebx
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_05LAPONLG@false?$AA@
  00061	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 144  : 		_Truename = _MAKLOCSTR(_Elem, _Lobj._Gettrue(), _Lobj._Getcvt());

  0006c	e8 00 00 00 00	 call	 __Getcvt
  00071	8d 45 e4	 lea	 eax, DWORD PTR $T42634[ebp]
  00074	50		 push	 eax
  00075	53		 push	 ebx
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_04LOAJBDKD@true?$AA@
  0007b	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH
  00083	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 148  : 		_CATCH_END
; 149  : 
; 150  : 		_Dp = _MAKLOCCHR(_Elem, _Ptr->decimal_point[0], _Lobj._Getcvt());

  00086	e8 00 00 00 00	 call	 __Getcvt
  0008b	8b 07		 mov	 eax, DWORD PTR [edi]
  0008d	8a 00		 mov	 al, BYTE PTR [eax]
  0008f	88 46 0c	 mov	 BYTE PTR [esi+12], al

; 151  : 		_Kseparator =
; 152  : 			_MAKLOCCHR(_Elem, _Ptr->thousands_sep[0], _Lobj._Getcvt());

  00092	e8 00 00 00 00	 call	 __Getcvt
  00097	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0009a	8a 00		 mov	 al, BYTE PTR [eax]
  0009c	88 46 0d	 mov	 BYTE PTR [esi+13], al

; 153  : 
; 154  : 		if (_Isdef)

  0009f	38 5d 0c	 cmp	 BYTE PTR __Isdef$[ebp], bl
  000a2	74 12		 je	 SHORT $LN1@Init@3

; 155  : 			{	// apply defaults for required facets
; 156  : //			_Grouping = _MAKLOCSTR(char, "", _Lobj._Getcvt());
; 157  : 			_Dp = _MAKLOCCHR(_Elem, '.', _Lobj._Getcvt());

  000a4	e8 00 00 00 00	 call	 __Getcvt
  000a9	c6 46 0c 2e	 mov	 BYTE PTR [esi+12], 46	; 0000002eH

; 158  : 			_Kseparator = _MAKLOCCHR(_Elem, ',', _Lobj._Getcvt());

  000ad	e8 00 00 00 00	 call	 __Getcvt
  000b2	c6 46 0d 2c	 mov	 BYTE PTR [esi+13], 44	; 0000002cH
$LN1@Init@3:

; 159  : 			}
; 160  : 		}

  000b6	e8 00 00 00 00	 call	 __EH_epilog3
  000bb	c2 08 00	 ret	 8
__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0:

; 145  : 		_CATCH_ALL
; 146  : 		_Tidy();

  000be	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AAEXXZ ; std::numpunct<char>::_Tidy

; 147  : 		_RERAISE;

  000c6	33 db		 xor	 ebx, ebx
  000c8	53		 push	 ebx
  000c9	53		 push	 ebx
  000ca	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN42@Init@3:
$LN41@Init@3:
  000cf	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ENDP	; std::numpunct<char>::_Init
PUBLIC	__TI2?AVruntime_error@std@@
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@	; `string'
PUBLIC	??0_Locinfo@std@@QAE@PBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	__CTA2?AVruntime_error@std@@
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
;	COMDAT __CTA2?AVruntime_error@std@@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\stdexcept
xdata$x	SEGMENT
__CTA2?AVruntime_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT
__TI2?AVruntime_error@std@@ DD 00H
	DD	FLAT:??1runtime_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??0_Locinfo@std@@QAE@PBD@Z
_TEXT	SEGMENT
$T42714 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T42740 = 8						; size = 4
__Pch$ = 8						; size = 4
??0_Locinfo@std@@QAE@PBD@Z PROC				; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 76   :         {	// construct from NTBS

  00000	6a 10		 push	 16			; 00000010H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	33 db		 xor	 ebx, ebx
  00013	53		 push	 ebx
  00014	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00019	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0001c	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001f	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  00022	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  00025	88 5e 10	 mov	 BYTE PTR [esi+16], bl
  00028	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0002b	88 5e 18	 mov	 BYTE PTR [esi+24], bl
  0002e	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
  00031	88 5e 20	 mov	 BYTE PTR [esi+32], bl
  00034	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 77   :         if (_Pch == 0)

  00038	39 5d 08	 cmp	 DWORD PTR __Pch$[ebp], ebx
  0003b	75 28		 jne	 SHORT $LN1@Locinfo

; 78   :             _THROW_NCEE(runtime_error, "bad locale name");

  0003d	8d 45 08	 lea	 eax, DWORD PTR $T42740[ebp]
  00040	50		 push	 eax
  00041	8d 4d e4	 lea	 ecx, DWORD PTR $T42714[ebp]
  00044	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T42740[ebp], OFFSET ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
  0004b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00050	68 00 00 00 00	 push	 OFFSET __TI2?AVruntime_error@std@@
  00055	8d 45 e4	 lea	 eax, DWORD PTR $T42714[ebp]
  00058	50		 push	 eax
  00059	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T42714[ebp], OFFSET ??_7runtime_error@std@@6B@
  00060	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN22@Locinfo:
$LN1@Locinfo:

; 79   :         _Locinfo_ctor(this, _Pch);

  00065	ff 75 08	 push	 DWORD PTR __Pch$[ebp]
  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor
  0006e	59		 pop	 ecx
  0006f	59		 pop	 ecx

; 80   :         }

  00070	8b c6		 mov	 eax, esi
  00072	e8 00 00 00 00	 call	 __EH_epilog3
  00077	c2 04 00	 ret	 4
$LN21@Locinfo:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__ehhandler$??0_Locinfo@std@@QAE@PBD@Z:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003b	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@PBD@Z ENDP				; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1_Locinfo@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1_Locinfo@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 93   :         {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1_Locinfo@std@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 94   :         _Locinfo_dtor(this);

  00011	56		 push	 esi
  00012	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00019	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 95   :         }

  0001e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00021	59		 pop	 ecx
  00022	85 c0		 test	 eax, eax
  00024	74 07		 je	 SHORT $LN10@Locinfo@2
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _free
  0002c	59		 pop	 ecx
$LN10@Locinfo@2:
  0002d	83 66 1c 00	 and	 DWORD PTR [esi+28], 0
  00031	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00034	85 c0		 test	 eax, eax
  00036	74 07		 je	 SHORT $LN15@Locinfo@2
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _free
  0003e	59		 pop	 ecx
$LN15@Locinfo@2:
  0003f	83 66 14 00	 and	 DWORD PTR [esi+20], 0
  00043	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00046	85 c0		 test	 eax, eax
  00048	74 07		 je	 SHORT $LN20@Locinfo@2
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _free
  00050	59		 pop	 ecx
$LN20@Locinfo@2:
  00051	83 66 0c 00	 and	 DWORD PTR [esi+12], 0
  00055	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00058	85 c0		 test	 eax, eax
  0005a	74 07		 je	 SHORT $LN25@Locinfo@2
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 _free
  00062	59		 pop	 ecx
$LN25@Locinfo@2:
  00063	83 66 04 00	 and	 DWORD PTR [esi+4], 0
  00067	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0006b	8b ce		 mov	 ecx, esi
  0006d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00072	e8 00 00 00 00	 call	 __EH_epilog3
  00077	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003b	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
PUBLIC	?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
xdata$x	ENDS
;	COMDAT ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T42810 = -52						; size = 36
$T42814 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T42809 = 8						; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<char>::_Getcat, COMDAT

; 2371 : 		{	// return locale category mask and construct standard facet

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 2372 : 		if (_Ppf != 0 && *_Ppf == 0)

  0000c	8b 7d 08	 mov	 edi, DWORD PTR __Ppf$[ebp]
  0000f	83 65 f0 00	 and	 DWORD PTR $T42814[ebp], 0
  00013	85 ff		 test	 edi, edi
  00015	74 5a		 je	 SHORT $LN9@Getcat
  00017	83 3f 00	 cmp	 DWORD PTR [edi], 0
  0001a	75 55		 jne	 SHORT $LN9@Getcat

; 2373 : 			*_Ppf = _NEW_CRT ctype<_Elem>(
; 2374 : 				_Locinfo(_Ploc->c_str()));

  0001c	6a 18		 push	 24			; 00000018H
  0001e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00023	59		 pop	 ecx
  00024	89 45 08	 mov	 DWORD PTR $T42809[ebp], eax
  00027	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002b	85 c0		 test	 eax, eax
  0002d	74 2c		 je	 SHORT $LN4@Getcat
  0002f	8b 45 0c	 mov	 eax, DWORD PTR __Ploc$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00037	85 c9		 test	 ecx, ecx
  00039	75 03		 jne	 SHORT $LN15@Getcat
  0003b	8d 48 1c	 lea	 ecx, DWORD PTR [eax+28]
$LN15@Getcat:
  0003e	51		 push	 ecx
  0003f	8d 4d cc	 lea	 ecx, DWORD PTR $T42810[ebp]
  00042	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00047	8b 4d 08	 mov	 ecx, DWORD PTR $T42809[ebp]
  0004a	6a 00		 push	 0
  0004c	50		 push	 eax
  0004d	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T42814[ebp], 1
  00054	e8 00 00 00 00	 call	 ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ; std::ctype<char>::ctype<char>
  00059	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  0005b	33 c0		 xor	 eax, eax
$LN5@Getcat:
  0005d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00061	f6 45 f0 01	 test	 BYTE PTR $T42814[ebp], 1
  00065	89 07		 mov	 DWORD PTR [edi], eax
  00067	74 08		 je	 SHORT $LN9@Getcat
  00069	8d 4d cc	 lea	 ecx, DWORD PTR $T42810[ebp]
  0006c	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN9@Getcat:

; 2375 : 		return (_X_CTYPE);

  00071	6a 02		 push	 2
  00073	58		 pop	 eax

; 2376 : 		}

  00074	e8 00 00 00 00	 call	 __EH_epilog3
  00079	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR $T42809[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<char>::_Getcat
PUBLIC	?writeIndent@StyledWriter@Json@@AAEXXZ		; Json::StyledWriter::writeIndent
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
;	COMDAT ?writeIndent@StyledWriter@Json@@AAEXXZ
_TEXT	SEGMENT
?writeIndent@StyledWriter@Json@@AAEXXZ PROC		; Json::StyledWriter::writeIndent, COMDAT
; _this$ = ecx

; 448  :    if ( !document_.empty() )
; 449  :    {
; 450  :       char last = document_[document_.length()-1];
; 451  :       if ( last == ' ' )     // already indented
; 452  :          return;
; 453  :      // if ( last != '\n' )    // Comments may add new-line
; 454  :         //document_ += '\n';
; 455  :    }
; 456  :    //document_ += indentString_;
; 457  : }

  00000	c3		 ret	 0
?writeIndent@StyledWriter@Json@@AAEXXZ ENDP		; Json::StyledWriter::writeIndent
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 550  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 551  : 		_Tidy();

  00002	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00006	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
  0000d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 552  : 		}

  00010	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 753  : 		_Tidy(true);

  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 754  : 		}

  00009	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 54   : 		{	// merge _State into state, possible reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 		if (_State != goodbit)

  00003	83 7d 08 00	 cmp	 DWORD PTR __State$[ebp], 0
  00007	74 18		 je	 SHORT $LN6@setstate

; 56   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00009	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000c	0b 45 08	 or	 eax, DWORD PTR __State$[ebp]
  0000f	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00013	75 03		 jne	 SHORT $LN8@setstate
  00015	83 c8 04	 or	 eax, 4
$LN8@setstate:
  00018	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN6@setstate:

; 57   : 		}

  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
PUBLIC	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
_TEXT	ENDS
PUBLIC	??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allo'
	DB	'cator@D@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	050H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 583  : 		{	// destroy the object

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	c7 44 30 b0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-80], OFFSET ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 584  : 		}

  00023	8d 4e b4	 lea	 ecx, DWORD PTR [esi-76]
  00026	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  0002b	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]
  0002e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00031	c7 44 30 b0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-80], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00039	e8 00 00 00 00	 call	 __EH_epilog3
  0003e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 e9 48	 sub	 ecx, 72			; 00000048H
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
__ehhandler$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Oldptr$36477 = -8					; size = 4
__Newsize$36470 = -4					; size = 4
__Meta$ = 8						; size = 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT
; _this$ = ecx

; 120  : 		{	// put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 121  : 		if (_Mystate & _Append
; 122  : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

  00008	f6 46 40 08	 test	 BYTE PTR [esi+64], 8
  0000c	57		 push	 edi
  0000d	74 20		 je	 SHORT $LN104@overflow
  0000f	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00012	8b 39		 mov	 edi, DWORD PTR [ecx]
  00014	85 ff		 test	 edi, edi
  00016	74 17		 je	 SHORT $LN104@overflow
  00018	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
  0001b	3b fa		 cmp	 edi, edx
  0001d	73 10		 jae	 SHORT $LN104@overflow

; 123  : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  0001f	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00022	8b 00		 mov	 eax, DWORD PTR [eax]
  00024	03 c7		 add	 eax, edi
  00026	89 11		 mov	 DWORD PTR [ecx], edx
  00028	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  0002b	2b c2		 sub	 eax, edx
  0002d	89 01		 mov	 DWORD PTR [ecx], eax
$LN104@overflow:

; 124  : 
; 125  : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0002f	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00032	83 f8 ff	 cmp	 eax, -1
  00035	75 07		 jne	 SHORT $LN17@overflow

; 126  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  00037	33 c0		 xor	 eax, eax
  00039	e9 56 01 00 00	 jmp	 $LN12@overflow
$LN17@overflow:

; 127  : 		else if (_Mysb::pptr() != 0
; 128  : 			&& _Mysb::pptr() < _Mysb::epptr())

  0003e	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00041	8b 3a		 mov	 edi, DWORD PTR [edx]
  00043	53		 push	 ebx
  00044	85 ff		 test	 edi, edi
  00046	74 1e		 je	 SHORT $LN105@overflow
  00048	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  0004b	8b 19		 mov	 ebx, DWORD PTR [ecx]
  0004d	8b d7		 mov	 edx, edi
  0004f	03 da		 add	 ebx, edx
  00051	3b d3		 cmp	 edx, ebx
  00053	73 11		 jae	 SHORT $LN105@overflow

; 129  : 			{	// room in buffer, store it
; 130  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  00055	ff 09		 dec	 DWORD PTR [ecx]
  00057	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  0005a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005c	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0005f	89 16		 mov	 DWORD PTR [esi], edx

; 131  : 			return (_Meta);

  00061	e9 2b 01 00 00	 jmp	 $LN109@overflow
$LN105@overflow:

; 132  : 			}
; 133  : 		else if (_Mystate & _Constant)

  00066	f6 46 40 02	 test	 BYTE PTR [esi+64], 2

; 134  : 			return (_Traits::eof());	// array nonmutable, fail

  0006a	75 39		 jne	 SHORT $LN111@overflow

; 135  : 		else
; 136  : 			{	// grow buffer and store element
; 137  : 			size_t _Oldsize = _Mysb::pptr() == 0
; 138  : 				? 0 : _Mysb::epptr() - _Mysb::eback();

  0006c	85 ff		 test	 edi, edi
  0006e	75 04		 jne	 SHORT $LN21@overflow
  00070	33 db		 xor	 ebx, ebx
  00072	eb 0c		 jmp	 SHORT $LN22@overflow
$LN21@overflow:
  00074	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00077	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0007a	8b 18		 mov	 ebx, DWORD PTR [eax]
  0007c	2b 19		 sub	 ebx, DWORD PTR [ecx]
  0007e	03 df		 add	 ebx, edi
$LN22@overflow:

; 139  : 			size_t _Newsize = _Oldsize;
; 140  : 			size_t _Inc = _Newsize / 2 < _MINSIZE
; 141  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent

  00080	8b c3		 mov	 eax, ebx
  00082	d1 e8		 shr	 eax, 1
  00084	83 f8 20	 cmp	 eax, 32			; 00000020H
  00087	73 05		 jae	 SHORT $LN23@overflow
  00089	6a 20		 push	 32			; 00000020H
  0008b	58		 pop	 eax
  0008c	eb 04		 jmp	 SHORT $LL11@overflow
$LN23@overflow:

; 142  : 
; 143  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  0008e	85 c0		 test	 eax, eax
  00090	74 13		 je	 SHORT $LN111@overflow
$LL11@overflow:
  00092	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00097	2b c8		 sub	 ecx, eax
  00099	3b cb		 cmp	 ecx, ebx
  0009b	73 04		 jae	 SHORT $LN106@overflow

; 144  : 				_Inc /= 2;	// increment causes overflow, halve it

  0009d	d1 e8		 shr	 eax, 1

; 142  : 
; 143  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  0009f	75 f1		 jne	 SHORT $LL11@overflow
$LN106@overflow:

; 145  : 			if (_Inc == 0)

  000a1	85 c0		 test	 eax, eax
  000a3	75 08		 jne	 SHORT $LN9@overflow
$LN111@overflow:

; 146  : 				return (_Traits::eof());	// buffer can't grow, fail

  000a5	83 c8 ff	 or	 eax, -1
  000a8	e9 e6 00 00 00	 jmp	 $LN108@overflow
$LN9@overflow:

; 147  : 
; 148  : 			_Newsize += _Inc;

  000ad	03 c3		 add	 eax, ebx

; 149  : 
; 150  : 			_Elem *_Newptr = _Al.allocate(_Newsize);

  000af	6a 00		 push	 0
  000b1	50		 push	 eax
  000b2	89 45 fc	 mov	 DWORD PTR __Newsize$36470[ebp], eax
  000b5	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  000ba	8b f8		 mov	 edi, eax

; 151  : 			_Elem *_Oldptr = _Mysb::eback();

  000bc	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000bf	8b 10		 mov	 edx, DWORD PTR [eax]
  000c1	59		 pop	 ecx
  000c2	59		 pop	 ecx
  000c3	89 55 f8	 mov	 DWORD PTR __Oldptr$36477[ebp], edx

; 152  : 
; 153  : 			if (0 < _Oldsize)

  000c6	85 db		 test	 ebx, ebx
  000c8	74 12		 je	 SHORT $LN113@overflow

; 154  : 				_Traits::copy(_Newptr, _Oldptr, _Oldsize);

  000ca	53		 push	 ebx
  000cb	52		 push	 edx
  000cc	57		 push	 edi
  000cd	e8 00 00 00 00	 call	 _memcpy
  000d2	8b 55 f8	 mov	 edx, DWORD PTR __Oldptr$36477[ebp]
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 155  : 
; 156  : 			if (_Oldsize == 0)

  000d8	85 db		 test	 ebx, ebx
  000da	75 30		 jne	 SHORT $LN7@overflow
$LN113@overflow:

; 157  : 				{	// first growth, set up pointers
; 158  : 				_Seekhigh = _Newptr;
; 159  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

  000dc	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000df	8b 4d fc	 mov	 ecx, DWORD PTR __Newsize$36470[ebp]
  000e2	89 7e 3c	 mov	 DWORD PTR [esi+60], edi
  000e5	89 38		 mov	 DWORD PTR [eax], edi
  000e7	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  000ea	89 38		 mov	 DWORD PTR [eax], edi
  000ec	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  000ef	89 08		 mov	 DWORD PTR [eax], ecx

; 160  : 				if (_Mystate & _Noread)
; 161  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  000f1	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000f4	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  000f8	89 38		 mov	 DWORD PTR [eax], edi
  000fa	8b 46 20	 mov	 eax, DWORD PTR [esi+32]

; 162  : 				else

  000fd	75 45		 jne	 SHORT $LN114@overflow

; 163  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

  000ff	89 38		 mov	 DWORD PTR [eax], edi
  00101	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00104	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 164  : 				}
; 165  : 			else

  0010a	eb 62		 jmp	 SHORT $LN91@overflow
$LN7@overflow:

; 166  : 				{	// not first growth, adjust pointers
; 167  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);
; 168  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
; 169  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 170  : 					_Newptr + _Newsize);

  0010c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0010f	8b c7		 mov	 eax, edi
  00111	2b c2		 sub	 eax, edx
  00113	01 46 3c	 add	 DWORD PTR [esi+60], eax
  00116	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00119	8b 00		 mov	 eax, DWORD PTR [eax]
  0011b	8b df		 mov	 ebx, edi
  0011d	2b c2		 sub	 eax, edx
  0011f	2b da		 sub	 ebx, edx
  00121	01 19		 add	 DWORD PTR [ecx], ebx
  00123	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00126	03 c7		 add	 eax, edi
  00128	89 01		 mov	 DWORD PTR [ecx], eax
  0012a	8b cf		 mov	 ecx, edi
  0012c	2b c8		 sub	 ecx, eax
  0012e	03 4d fc	 add	 ecx, DWORD PTR __Newsize$36470[ebp]
  00131	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00134	89 08		 mov	 DWORD PTR [eax], ecx

; 171  : 				if (_Mystate & _Noread)

  00136	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  0013a	74 12		 je	 SHORT $LN3@overflow

; 172  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  0013c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0013f	89 38		 mov	 DWORD PTR [eax], edi
  00141	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
$LN114@overflow:
  00144	83 20 00	 and	 DWORD PTR [eax], 0
  00147	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0014a	89 38		 mov	 DWORD PTR [eax], edi

; 173  : 				else

  0014c	eb 20		 jmp	 SHORT $LN91@overflow
$LN3@overflow:

; 174  : 					_Mysb::setg(_Newptr,
; 175  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 176  : 						_Mysb::pptr() + 1);

  0014e	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00151	8b 08		 mov	 ecx, DWORD PTR [eax]
  00153	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00156	8b 00		 mov	 eax, DWORD PTR [eax]
  00158	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0015b	2b c2		 sub	 eax, edx
  0015d	03 c7		 add	 eax, edi
  0015f	89 3b		 mov	 DWORD PTR [ebx], edi
  00161	8b 7e 20	 mov	 edi, DWORD PTR [esi+32]
  00164	2b c8		 sub	 ecx, eax
  00166	89 07		 mov	 DWORD PTR [edi], eax
  00168	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0016b	41		 inc	 ecx
  0016c	89 08		 mov	 DWORD PTR [eax], ecx
$LN91@overflow:

; 177  : 				}
; 178  : 
; 179  : 			if (_Mystate & _Allocated)

  0016e	f6 46 40 01	 test	 BYTE PTR [esi+64], 1
  00172	74 07		 je	 SHORT $LN93@overflow

; 180  : 				_Al.deallocate(_Oldptr, _Oldsize);

  00174	52		 push	 edx
  00175	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0017a	59		 pop	 ecx
$LN93@overflow:

; 181  : 			_Mystate |= _Allocated;
; 182  : 
; 183  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0017b	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0017e	83 4e 40 01	 or	 DWORD PTR [esi+64], 1
  00182	ff 08		 dec	 DWORD PTR [eax]
  00184	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  00187	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00189	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0018c	89 06		 mov	 DWORD PTR [esi], eax
  0018e	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
$LN109@overflow:
  00191	88 01		 mov	 BYTE PTR [ecx], al
$LN108@overflow:
  00193	5b		 pop	 ebx
$LN12@overflow:
  00194	5f		 pop	 edi
  00195	5e		 pop	 esi

; 184  : 			return (_Meta);
; 185  : 			}
; 186  : 		}

  00196	c9		 leave
  00197	c2 04 00	 ret	 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1958 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1959 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0000a	76 0a		 jbe	 SHORT $LN6@Grow

; 1960 : 			_Xlen();	// result too long

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN31@Grow:
$LN6@Grow:

; 1961 : 		if (this->_Myres < _Newsize)

  00016	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00019	3b c6		 cmp	 eax, esi
  0001b	73 0b		 jae	 SHORT $LN5@Grow

; 1962 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0001d	ff 71 10	 push	 DWORD PTR [ecx+16]
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00026	eb 2f		 jmp	 SHORT $LN28@Grow
$LN5@Grow:

; 1963 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00028	33 d2		 xor	 edx, edx
  0002a	38 55 0c	 cmp	 BYTE PTR __Trim$[ebp], dl
  0002d	74 18		 je	 SHORT $LN3@Grow
  0002f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00032	73 13		 jae	 SHORT $LN3@Grow

; 1964 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1965 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00034	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00037	3b f0		 cmp	 esi, eax
  00039	73 02		 jae	 SHORT $LN9@Grow
  0003b	8b c6		 mov	 eax, esi
$LN9@Grow:
  0003d	50		 push	 eax
  0003e	6a 01		 push	 1
  00040	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00045	eb 10		 jmp	 SHORT $LN28@Grow
$LN3@Grow:

; 1966 : 		else if (_Newsize == 0)

  00047	3b f2		 cmp	 esi, edx
  00049	75 0c		 jne	 SHORT $LN28@Grow

; 1967 : 			_Eos(0);	// new size is zero, just null terminate

  0004b	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0004e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00051	72 02		 jb	 SHORT $LN26@Grow
  00053	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN26@Grow:
  00055	88 11		 mov	 BYTE PTR [ecx], dl
$LN28@Grow:

; 1968 : 		return (0 < _Newsize);	// return true only if more work to do

  00057	33 c0		 xor	 eax, eax
  00059	3b c6		 cmp	 eax, esi
  0005b	1b c0		 sbb	 eax, eax
  0005d	f7 d8		 neg	 eax
  0005f	5e		 pop	 esi

; 1969 : 		}

  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN30@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
__ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__Mode$ = 8						; size = 4
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 26   : 	explicit basic_stringbuf(ios_base::openmode _Mode =

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >

; 27   : 		ios_base::in | ios_base::out)
; 28   : 		{	// construct empty character buffer from mode
; 29   : 		_Init(0, 0, _Getstate(_Mode));

  00013	ff 75 08	 push	 DWORD PTR __Mode$[ebp]
  00016	83 66 3c 00	 and	 DWORD PTR [esi+60], 0
  0001a	8b ce		 mov	 ecx, esi
  0001c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00022	e8 00 00 00 00	 call	 ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
  00027	89 46 40	 mov	 DWORD PTR [esi+64], eax

; 30   : 		}

  0002a	8b c6		 mov	 eax, esi
  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 798  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 799  : 		if (_Right.size() < _Roff)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	3b 45 0c	 cmp	 eax, DWORD PTR __Roff$[ebp]
  00010	73 0a		 jae	 SHORT $LN4@append

; 800  : 			_Xran();	// _Roff off end

  00012	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00017	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN36@append:
$LN4@append:

; 801  : 		size_type _Num = _Right.size() - _Roff;

  0001c	2b 45 0c	 sub	 eax, DWORD PTR __Roff$[ebp]

; 802  : 		if (_Num < _Count)

  0001f	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp]
  00022	3b c3		 cmp	 eax, ebx
  00024	73 02		 jae	 SHORT $LN3@append

; 803  : 			_Count = _Num;	// trim _Count to size

  00026	8b d8		 mov	 ebx, eax
$LN3@append:

; 804  : 		if (npos - this->_Mysize <= _Count)

  00028	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002b	83 c9 ff	 or	 ecx, -1
  0002e	2b c8		 sub	 ecx, eax
  00030	3b cb		 cmp	 ecx, ebx
  00032	77 0a		 ja	 SHORT $LN2@append

; 805  : 			_Xlen();	// result too long

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00039	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN37@append:
$LN2@append:

; 806  : 
; 807  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  0003e	85 db		 test	 ebx, ebx
  00040	74 50		 je	 SHORT $LN32@append
  00042	57		 push	 edi
  00043	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  00046	6a 00		 push	 0
  00048	57		 push	 edi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00050	84 c0		 test	 al, al
  00052	74 3d		 je	 SHORT $LN34@append

; 808  : 			{	// make room and append new stuff
; 809  : 			_Traits::copy(_Myptr() + this->_Mysize,
; 810  : 				_Right._Myptr() + _Roff, _Count);

  00054	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00057	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0005b	72 02		 jb	 SHORT $LN18@append
  0005d	8b 00		 mov	 eax, DWORD PTR [eax]
$LN18@append:
  0005f	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00063	72 04		 jb	 SHORT $LN22@append
  00065	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00067	eb 02		 jmp	 SHORT $LN23@append
$LN22@append:
  00069	8b ce		 mov	 ecx, esi
$LN23@append:
  0006b	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  0006e	53		 push	 ebx
  0006f	50		 push	 eax
  00070	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00073	03 c1		 add	 eax, ecx
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _memcpy
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 811  : 			_Eos(_Num);

  0007e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00082	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00085	72 04		 jb	 SHORT $LN30@append
  00087	8b 06		 mov	 eax, DWORD PTR [esi]
  00089	eb 02		 jmp	 SHORT $LN31@append
$LN30@append:
  0008b	8b c6		 mov	 eax, esi
$LN31@append:
  0008d	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN34@append:
  00091	5f		 pop	 edi
$LN32@append:

; 812  : 			}
; 813  : 		return (*this);

  00092	8b c6		 mov	 eax, esi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx

; 814  : 		}

  00096	5d		 pop	 ebp
  00097	c2 0c 00	 ret	 12			; 0000000cH
$LN35@append:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 817  : 		{	// append [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 818  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 819  : 		if (_Count != 0)
; 820  : 			_DEBUG_POINTER(_Ptr);
; 821  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 822  : 
; 823  : 		if (_Inside(_Ptr))

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 1c		 je	 SHORT $LN3@append@2

; 824  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN8@append@2
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN9@append@2
$LN8@append@2:
  0001e	8b c6		 mov	 eax, esi
$LN9@append@2:
  00020	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00023	2b f8		 sub	 edi, eax
  00025	57		 push	 edi
  00026	56		 push	 esi
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0002e	eb 63		 jmp	 SHORT $LN4@append@2
$LN3@append@2:

; 825  : 		if (npos - this->_Mysize <= _Count)

  00030	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00033	83 c9 ff	 or	 ecx, -1
  00036	53		 push	 ebx
  00037	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0003a	2b c8		 sub	 ecx, eax
  0003c	3b cb		 cmp	 ecx, ebx
  0003e	77 0a		 ja	 SHORT $LN2@append@2

; 826  : 			_Xlen();	// result too long

  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00045	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN28@append@2:
$LN2@append@2:

; 827  : 
; 828  : 		size_type _Num;
; 829  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  0004a	85 db		 test	 ebx, ebx
  0004c	74 42		 je	 SHORT $LN25@append@2
  0004e	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  00051	6a 00		 push	 0
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0005b	84 c0		 test	 al, al
  0005d	74 31		 je	 SHORT $LN25@append@2

; 830  : 			{	// make room and append new stuff
; 831  : 			_Traits::copy(_Myptr() + this->_Mysize, _Ptr, _Count);

  0005f	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00063	72 04		 jb	 SHORT $LN15@append@2
  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	eb 02		 jmp	 SHORT $LN16@append@2
$LN15@append@2:
  00069	8b c6		 mov	 eax, esi
$LN16@append@2:
  0006b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0006e	53		 push	 ebx
  0006f	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00072	03 c8		 add	 ecx, eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memcpy
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 832  : 			_Eos(_Num);

  0007d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00081	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00084	72 04		 jb	 SHORT $LN23@append@2
  00086	8b 06		 mov	 eax, DWORD PTR [esi]
  00088	eb 02		 jmp	 SHORT $LN24@append@2
$LN23@append@2:
  0008a	8b c6		 mov	 eax, esi
$LN24@append@2:
  0008c	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN25@append@2:

; 833  : 			}
; 834  : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5b		 pop	 ebx
$LN4@append@2:
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi

; 835  : 		}

  00095	5d		 pop	 ebp
  00096	c2 08 00	 ret	 8
$LN27@append@2:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogsp
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1040 : 		{	// insert _Count * _Ch at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1041 : 		if (this->_Mysize < _Off)

  00007	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR __Off$[ebp]
  0000e	3b df		 cmp	 ebx, edi
  00010	73 0a		 jae	 SHORT $LN3@insert

; 1042 : 			_Xran();	// _Off off end

  00012	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00017	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN30@insert:
$LN3@insert:

; 1043 : 		if (npos - this->_Mysize <= _Count)

  0001c	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0001f	83 c9 ff	 or	 ecx, -1
  00022	2b cb		 sub	 ecx, ebx
  00024	3b c8		 cmp	 ecx, eax
  00026	77 0a		 ja	 SHORT $LN2@insert

; 1044 : 			_Xlen();	// result too long

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0002d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN31@insert:
$LN2@insert:

; 1045 : 		size_type _Num;
; 1046 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00032	85 c0		 test	 eax, eax
  00034	74 61		 je	 SHORT $LN27@insert
  00036	03 d8		 add	 ebx, eax
  00038	6a 00		 push	 0
  0003a	53		 push	 ebx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00042	84 c0		 test	 al, al
  00044	74 51		 je	 SHORT $LN27@insert

; 1047 : 			{	// make room and insert new stuff
; 1048 : 			_Traits::move(_Myptr() + _Off + _Count,
; 1049 : 				_Myptr() + _Off, this->_Mysize - _Off);	// empty out hole

  00046	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 04		 jb	 SHORT $LN13@insert
  0004e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00050	eb 02		 jmp	 SHORT $LN14@insert
$LN13@insert:
  00052	8b ce		 mov	 ecx, esi
$LN14@insert:
  00054	83 f8 10	 cmp	 eax, 16			; 00000010H
  00057	72 04		 jb	 SHORT $LN17@insert
  00059	8b 06		 mov	 eax, DWORD PTR [esi]
  0005b	eb 02		 jmp	 SHORT $LN18@insert
$LN17@insert:
  0005d	8b c6		 mov	 eax, esi
$LN18@insert:
  0005f	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00062	2b d7		 sub	 edx, edi
  00064	52		 push	 edx
  00065	03 c7		 add	 eax, edi
  00067	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  0006a	03 cf		 add	 ecx, edi
  0006c	51		 push	 ecx
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 _memmove
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1050 : 			_Chassign(_Off, _Count, _Ch);	// fill hole

  00076	ff 75 10	 push	 DWORD PTR __Ch$[ebp]
  00079	8b ce		 mov	 ecx, esi
  0007b	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0007e	57		 push	 edi
  0007f	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1051 : 			_Eos(_Num);

  00084	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00088	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0008b	72 04		 jb	 SHORT $LN25@insert
  0008d	8b 06		 mov	 eax, DWORD PTR [esi]
  0008f	eb 02		 jmp	 SHORT $LN26@insert
$LN25@insert:
  00091	8b c6		 mov	 eax, esi
$LN26@insert:
  00093	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
$LN27@insert:

; 1052 : 			}
; 1053 : 		return (*this);

  00097	5f		 pop	 edi
  00098	8b c6		 mov	 eax, esi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx

; 1054 : 		}

  0009c	5d		 pop	 ebp
  0009d	c2 0c 00	 ret	 12			; 0000000cH
$LN29@insert:
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put, COMDAT

; 1533 : 		{	// put [_Ptr, _Ptr + _Count) to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1534 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00003	83 7d 1c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00007	76 1b		 jbe	 SHORT $LN1@Put
  00009	56		 push	 esi
  0000a	8b 75 18	 mov	 esi, DWORD PTR __Ptr$[ebp]
$LL3@Put:

; 1535 : 			*_Dest = *_Ptr;

  0000d	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00010	50		 push	 eax
  00011	8d 4d 10	 lea	 ecx, DWORD PTR __Dest$[ebp]
  00014	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
  00019	ff 4d 1c	 dec	 DWORD PTR __Count$[ebp]
  0001c	46		 inc	 esi
  0001d	83 7d 1c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00021	77 ea		 ja	 SHORT $LL3@Put
  00023	5e		 pop	 esi
$LN1@Put:

; 1536 : 		return (_Dest);

  00024	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00027	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	89 08		 mov	 DWORD PTR [eax], ecx
  0002c	8b 4d 14	 mov	 ecx, DWORD PTR __Dest$[ebp+4]
  0002f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1537 : 		}

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
_TEXT	ENDS
PUBLIC	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
; Function compile flags: /Ogsp
;	COMDAT ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ch$ = 24						; size = 1
__Count$ = 28						; size = 4
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep, COMDAT

; 1568 : 		{	// put _Count * _Ch to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1569 : 		for (; 0 < _Count; --_Count, ++_Dest)

  00003	83 7d 1c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00007	76 10		 jbe	 SHORT $LN1@Rep
$LL6@Rep:

; 1570 : 			*_Dest = _Ch;

  00009	ff 75 18	 push	 DWORD PTR __Ch$[ebp]
  0000c	8d 4d 10	 lea	 ecx, DWORD PTR __Dest$[ebp]
  0000f	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
  00014	ff 4d 1c	 dec	 DWORD PTR __Count$[ebp]
  00017	75 f0		 jne	 SHORT $LL6@Rep
$LN1@Rep:

; 1571 : 		return (_Dest);

  00019	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0001c	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	89 08		 mov	 DWORD PTR [eax], ecx
  00021	8b 4d 14	 mov	 ecx, DWORD PTR __Dest$[ebp+4]
  00024	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1572 : 		}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
_TEXT	ENDS
PUBLIC	?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
; Function compile flags: /Ogsp
;	COMDAT ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T43463 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::falsename, COMDAT
; _this$ = ecx

; 83   : 		{	// return name for false

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 84   : 		return (do_falsename());

  00004	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	83 65 fc 00	 and	 DWORD PTR $T43463[ebp], 0
  0000d	ff 50 10	 call	 DWORD PTR [eax+16]
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 85   : 		}

  00013	c9		 leave
  00014	c2 04 00	 ret	 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::falsename
_TEXT	ENDS
PUBLIC	?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
; Function compile flags: /Ogsp
;	COMDAT ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T43468 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::truename, COMDAT
; _this$ = ecx

; 88   : 		{	// return name for true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 89   : 		return (do_truename());

  00004	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	83 65 fc 00	 and	 DWORD PTR $T43468[ebp], 0
  0000d	ff 50 14	 call	 DWORD PTR [eax+20]
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 90   : 		}

  00013	c9		 leave
  00014	c2 04 00	 ret	 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::truename
_TEXT	ENDS
PUBLIC	?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
; Function compile flags: /Ogsp
;	COMDAT ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc, COMDAT

; 1541 : 		{	// put char sequence [_Ptr, _Ptr + _Count) to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1542 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00003	83 7d 1c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00007	76 1b		 jbe	 SHORT $LN1@Putc
  00009	56		 push	 esi
  0000a	8b 75 18	 mov	 esi, DWORD PTR __Ptr$[ebp]
$LL3@Putc:

; 1543 : 			*_Dest = _MAKLOCCHR(_Elem, *_Ptr, _Cvt);

  0000d	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00010	50		 push	 eax
  00011	8d 4d 10	 lea	 ecx, DWORD PTR __Dest$[ebp]
  00014	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
  00019	ff 4d 1c	 dec	 DWORD PTR __Count$[ebp]
  0001c	46		 inc	 esi
  0001d	83 7d 1c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00021	77 ea		 ja	 SHORT $LL3@Putc
  00023	5e		 pop	 esi
$LN1@Putc:

; 1544 : 		return (_Dest);

  00024	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00027	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	89 08		 mov	 DWORD PTR [eax], ecx
  0002c	8b 4d 14	 mov	 ecx, DWORD PTR __Dest$[ebp+4]
  0002f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1545 : 		}

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
_TEXT	ENDS
PUBLIC	?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
EXTRN	_memchr:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z
_TEXT	SEGMENT
$T43488 = -16						; size = 8
$T43506 = -8						; size = 8
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
__Kseparator$ = 32					; size = 1
?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped, COMDAT

; 1549 : 		{	// put char sequence [_Ptr, _Ptr + _Count) to _Dest with commas

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b 5d 1c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 18	 mov	 edi, DWORD PTR __Ptr$[ebp]
$LL5@Putgrouped:

; 1551 : 			{	// put field with thousands separators for NULs
; 1552 : 			const char *_Pend =
; 1553 : 				(const char *)_CSTD memchr(_Ptr, '\0', _Count);

  0000f	53		 push	 ebx
  00010	6a 00		 push	 0
  00012	57		 push	 edi
  00013	e8 00 00 00 00	 call	 _memchr
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1554 : 			size_t _Groupsize = _Pend != 0 ? _Pend - _Ptr : _Count;

  0001b	85 c0		 test	 eax, eax
  0001d	74 06		 je	 SHORT $LN8@Putgrouped
  0001f	2b c7		 sub	 eax, edi
  00021	8b f0		 mov	 esi, eax
  00023	eb 02		 jmp	 SHORT $LN9@Putgrouped
$LN8@Putgrouped:
  00025	8b f3		 mov	 esi, ebx
$LN9@Putgrouped:

; 1555 : 
; 1556 : 			_Dest = _Putc(_Dest, _Ptr, _Groupsize);

  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  0002c	8d 45 f0	 lea	 eax, DWORD PTR $T43488[ebp]
  0002f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00032	50		 push	 eax
  00033	ff 75 08	 push	 DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 1557 : 			_Ptr += _Groupsize, _Count -= _Groupsize;

  00046	03 fe		 add	 edi, esi
  00048	2b de		 sub	 ebx, esi
  0004a	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx

; 1558 : 			if (_Count == 0)

  0004d	74 2c		 je	 SHORT $LN22@Putgrouped

; 1559 : 				break;
; 1560 : 			if (_Kseparator != (_Elem)0)

  0004f	80 7d 20 00	 cmp	 BYTE PTR __Kseparator$[ebp], 0
  00053	74 22		 je	 SHORT $LN4@Putgrouped

; 1561 : 				_Dest = _Rep(_Dest, _Kseparator, 1);

  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005a	ff 75 20	 push	 DWORD PTR __Kseparator$[ebp]
  0005d	89 4d f8	 mov	 DWORD PTR $T43506[ebp], ecx
  00060	8d 4d f8	 lea	 ecx, DWORD PTR $T43506[ebp]
  00063	89 45 fc	 mov	 DWORD PTR $T43506[ebp+4], eax
  00066	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
  0006b	8b 45 f8	 mov	 eax, DWORD PTR $T43506[ebp]
  0006e	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00071	8b 45 fc	 mov	 eax, DWORD PTR $T43506[ebp+4]
  00074	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
$LN4@Putgrouped:

; 1550 : 		for (; ; ++_Ptr, --_Count)

  00077	47		 inc	 edi
  00078	4b		 dec	 ebx
  00079	eb 94		 jmp	 SHORT $LL5@Putgrouped
$LN22@Putgrouped:

; 1562 : 			}
; 1563 : 		return (_Dest);

  0007b	8b 10		 mov	 edx, DWORD PTR [eax]
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00080	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00088	89 11		 mov	 DWORD PTR [ecx], edx
  0008a	8b c1		 mov	 eax, ecx
  0008c	5b		 pop	 ebx

; 1564 : 		}

  0008d	c9		 leave
  0008e	c3		 ret	 0
?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
_TEXT	ENDS
PUBLIC	?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
; Function compile flags: /Ogsp
;	COMDAT ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T43516 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::grouping, COMDAT
; _this$ = ecx

; 78   : 		{	// return grouping string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 79   : 		return (do_grouping());

  00004	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	83 65 fc 00	 and	 DWORD PTR $T43516[ebp], 0
  0000d	ff 50 0c	 call	 DWORD PTR [eax+12]
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 80   : 		}

  00013	c9		 leave
  00014	c2 04 00	 ret	 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::grouping
_TEXT	ENDS
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
EXTRN	??0bad_cast@std@@QAE@PBD@Z:PROC			; std::bad_cast::bad_cast
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	??1bad_cast@std@@UAE@XZ:PROC			; std::bad_cast::~bad_cast
EXTRN	??0bad_cast@std@@QAE@ABV01@@Z:PROC		; std::bad_cast::bad_cast
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T43520 = -32						; size = 12
__Lock$37862 = -20					; size = 4
__Psave$37863 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 504  : 	{	// get facet reference from locale

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 505  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  0000c	6a 00		 push	 0
  0000e	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$37862[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 506  : 		const locale::facet *_Psave =
; 507  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00016	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 508  : 
; 509  : 		size_t _Id = _Facet::id;

  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
  00025	89 75 f0	 mov	 DWORD PTR __Psave$37863[ebp], esi
  00028	e8 00 00 00 00	 call	 ??Bid@locale@std@@QAEIXZ ; std::locale::id::operator unsigned int

; 510  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  00036	8b f8		 mov	 edi, eax

; 511  : 
; 512  : 		if (_Pf != 0)

  00038	85 ff		 test	 edi, edi
  0003a	75 4d		 jne	 SHORT $LN10@use_facet

; 513  : 			;	// got facet from locale
; 514  : 		else if (_Psave != 0)

  0003c	85 f6		 test	 esi, esi
  0003e	74 04		 je	 SHORT $LN4@use_facet

; 515  : 			_Pf = _Psave;	// lazy facet already allocated

  00040	8b fe		 mov	 edi, esi
  00042	eb 45		 jmp	 SHORT $LN10@use_facet
$LN4@use_facet:

; 516  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  00044	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  00047	8d 45 f0	 lea	 eax, DWORD PTR __Psave$37863[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
  00050	59		 pop	 ecx
  00051	59		 pop	 ecx
  00052	83 f8 ff	 cmp	 eax, -1
  00055	75 1b		 jne	 SHORT $LN2@use_facet

; 517  : 
; 518  :  #if _HAS_EXCEPTIONS
; 519  : 
; 520  : 			_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  00057	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  0005c	8d 4d e0	 lea	 ecx, DWORD PTR $T43520[ebp]
  0005f	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  00064	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  00069	8d 45 e0	 lea	 eax, DWORD PTR $T43520[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@use_facet:
$LN2@use_facet:

; 521  : 
; 522  :  #else /* _HAS_EXCEPTIONS */
; 523  : 			abort();	// lazy disallowed
; 524  :  #endif /* _HAS_EXCEPTIONS */
; 525  : 
; 526  : 		else
; 527  : 			{	// queue up lazy facet for destruction
; 528  : 			_Pf = _Psave;

  00072	8b 7d f0	 mov	 edi, DWORD PTR __Psave$37863[ebp]

; 529  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 530  : 
; 531  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 532  : 			_Pfmod->_Incref();

  00075	8b cf		 mov	 ecx, edi
  00077	89 3d 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, edi ; std::_Facetptr<std::ctype<char> >::_Psave
  0007d	e8 00 00 00 00	 call	 ?_Incref@facet@locale@std@@QAEXXZ ; std::locale::facet::_Incref

; 533  : 			_Pfmod->_Register();

  00082	57		 push	 edi
  00083	e8 00 00 00 00	 call	 ?_Facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::_Facet_Register
  00088	59		 pop	 ecx
$LN10@use_facet:

; 534  : 			}
; 535  : 
; 536  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00089	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$37862[ebp]
  00090	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00095	8b c7		 mov	 eax, edi

; 537  : 	_END_LOCK()
; 538  : 	}

  00097	e8 00 00 00 00	 call	 __EH_epilog3
  0009c	c3		 ret	 0
$LN13@use_facet:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$37862[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
PUBLIC	?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T43539 = -52						; size = 36
$T43543 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T43538 = 8						; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat, COMDAT

; 1051 : 		{	// return locale category mask and construct standard facet

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 1052 : 		if (_Ppf != 0 && *_Ppf == 0)

  0000c	8b 5d 08	 mov	 ebx, DWORD PTR __Ppf$[ebp]
  0000f	83 65 f0 00	 and	 DWORD PTR $T43543[ebp], 0
  00013	85 db		 test	 ebx, ebx
  00015	74 6a		 je	 SHORT $LN9@Getcat@2
  00017	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  0001a	75 65		 jne	 SHORT $LN9@Getcat@2

; 1053 : 			*_Ppf = _NEW_CRT num_put<_Elem, _OutIt>(
; 1054 : 				_Locinfo(_Ploc->c_str()));

  0001c	6a 10		 push	 16			; 00000010H
  0001e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00023	8b f0		 mov	 esi, eax
  00025	59		 pop	 ecx
  00026	89 75 08	 mov	 DWORD PTR $T43538[ebp], esi
  00029	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	85 f6		 test	 esi, esi
  0002f	74 3a		 je	 SHORT $LN4@Getcat@2
  00031	8b 45 0c	 mov	 eax, DWORD PTR __Ploc$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00039	85 c9		 test	 ecx, ecx
  0003b	74 04		 je	 SHORT $LN14@Getcat@2
  0003d	8b c1		 mov	 eax, ecx
  0003f	eb 03		 jmp	 SHORT $LN15@Getcat@2
$LN14@Getcat@2:
  00041	83 c0 1c	 add	 eax, 28			; 0000001cH
$LN15@Getcat@2:
  00044	50		 push	 eax
  00045	8d 4d cc	 lea	 ecx, DWORD PTR $T43539[ebp]
  00048	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  0004d	83 66 04 00	 and	 DWORD PTR [esi+4], 0
  00051	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T43543[ebp], 1
  00058	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
  0005e	e8 00 00 00 00	 call	 __Getcvt
  00063	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00066	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  00069	eb 02		 jmp	 SHORT $LN5@Getcat@2
$LN4@Getcat@2:
  0006b	33 f6		 xor	 esi, esi
$LN5@Getcat@2:
  0006d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	f6 45 f0 01	 test	 BYTE PTR $T43543[ebp], 1
  00075	89 33		 mov	 DWORD PTR [ebx], esi
  00077	74 08		 je	 SHORT $LN9@Getcat@2
  00079	8d 4d cc	 lea	 ecx, DWORD PTR $T43539[ebp]
  0007c	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN9@Getcat@2:

; 1055 : 		return (_X_NUMERIC);

  00081	6a 04		 push	 4
  00083	58		 pop	 eax

; 1056 : 		}

  00084	e8 00 00 00 00	 call	 __EH_epilog3
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR $T43538[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
PUBLIC	??_7?$numpunct@D@std@@6B@			; std::numpunct<char>::`vftable'
PUBLIC	??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z	; std::numpunct<char>::numpunct<char>
PUBLIC	??_R4?$numpunct@D@std@@6B@			; std::numpunct<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$numpunct@D@std@@@8			; std::numpunct<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@D@std@@8		; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_decimal_point@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_grouping
PUBLIC	?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_falsename
PUBLIC	?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_truename
EXTRN	??_E?$numpunct@D@std@@MAEPAXI@Z:PROC		; std::numpunct<char>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$numpunct@D@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@D@std@@8 DD FLAT:??_R0?AV?$numpunct@D@std@@@8 ; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$numpunct@D@std@@8 ; std::numpunct<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@D@std@@8 DD 00H				; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT
??_R0?AV?$numpunct@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::numpunct<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$numpunct@D@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@D@std@@6B@ DD 00H			; std::numpunct<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$numpunct@D@std@@@8
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$numpunct@D@std@@6B@
CONST	SEGMENT
??_7?$numpunct@D@std@@6B@ DD FLAT:??_R4?$numpunct@D@std@@6B@ ; std::numpunct<char>::`vftable'
	DD	FLAT:??_E?$numpunct@D@std@@MAEPAXI@Z
	DD	FLAT:?do_decimal_point@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0
__ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
__Isdef$ = 16						; size = 1
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z PROC	; std::numpunct<char>::numpunct<char>, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from specified locale

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  00014	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 106  : 		_Init(_Lobj, _Isdef);

  00017	ff 75 10	 push	 DWORD PTR __Isdef$[ebp]
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	ff 75 08	 push	 DWORD PTR __Lobj$[ebp]
  00021	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  00027	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init

; 107  : 		}

  0002c	8b c6		 mov	 eax, esi
  0002e	e8 00 00 00 00	 call	 __EH_epilog3
  00033	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@UAE@XZ ; std::locale::facet::~facet
__ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ENDP	; std::numpunct<char>::numpunct<char>
; Function compile flags: /Ogsp
;	COMDAT ?do_decimal_point@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_decimal_point@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_decimal_point, COMDAT
; _this$ = ecx

; 164  : 		return (_Dp);

  00000	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]

; 165  : 		}

  00003	c3		 ret	 0
?do_decimal_point@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_decimal_point
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_thousands_sep, COMDAT
; _this$ = ecx

; 169  : 		return (_Kseparator);

  00000	8a 41 0d	 mov	 al, BYTE PTR [ecx+13]

; 170  : 		}

  00003	c3		 ret	 0
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_thousands_sep
_TEXT	ENDS
PUBLIC	??1?$numpunct@D@std@@MAE@XZ			; std::numpunct<char>::~numpunct<char>
; Function compile flags: /Ogsp
;	COMDAT ??1?$numpunct@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$numpunct@D@std@@MAE@XZ PROC			; std::numpunct<char>::~numpunct<char>, COMDAT
; _this$ = ecx

; 120  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@

; 121  : 		_Tidy();

  00009	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AAEXXZ ; std::numpunct<char>::_Tidy

; 122  : 		}

  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00014	5e		 pop	 esi
  00015	c3		 ret	 0
??1?$numpunct@D@std@@MAE@XZ ENDP			; std::numpunct<char>::~numpunct<char>
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$numpunct@D@std@@MAEPAXI@Z PROC			; std::numpunct<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  0000c	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AAEXXZ ; std::numpunct<char>::_Tidy
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0001b	74 07		 je	 SHORT $LN1@scalar@16
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00023	59		 pop	 ecx
$LN1@scalar@16:
  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_G?$numpunct@D@std@@MAEPAXI@Z ENDP			; std::numpunct<char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z
_TEXT	SEGMENT
__Num$ = 8						; size = 4
__Off$ = 8						; size = 4
__Right$ = 12						; size = 4
__Roff$ = 16						; size = 4
__Count$ = 20						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 981  : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 982  : 		if (this->_Mysize < _Off || _Right.size() < _Roff)

  00007	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR __Off$[ebp]
  0000e	3b cf		 cmp	 ecx, edi
  00010	0f 82 fb 00 00
	00		 jb	 $LN6@insert@2
  00016	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00019	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0001c	3b 45 10	 cmp	 eax, DWORD PTR __Roff$[ebp]
  0001f	0f 82 ec 00 00
	00		 jb	 $LN6@insert@2

; 984  : 		size_type _Num = _Right.size() - _Roff;

  00025	2b 45 10	 sub	 eax, DWORD PTR __Roff$[ebp]

; 985  : 		if (_Num < _Count)

  00028	8b 5d 14	 mov	 ebx, DWORD PTR __Count$[ebp]
  0002b	3b c3		 cmp	 eax, ebx
  0002d	73 05		 jae	 SHORT $LN5@insert@2

; 986  : 			_Count = _Num;	// trim _Count to size

  0002f	8b d8		 mov	 ebx, eax
  00031	89 5d 14	 mov	 DWORD PTR __Count$[ebp], ebx
$LN5@insert@2:

; 987  : 		if (npos - this->_Mysize <= _Count)

  00034	83 c8 ff	 or	 eax, -1
  00037	2b c1		 sub	 eax, ecx
  00039	3b c3		 cmp	 eax, ebx
  0003b	77 0a		 ja	 SHORT $LN4@insert@2

; 988  : 			_Xlen();	// result too long

  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00042	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN61@insert@2:
$LN4@insert@2:

; 989  : 
; 990  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00047	85 db		 test	 ebx, ebx
  00049	0f 84 b9 00 00
	00		 je	 $LN57@insert@2
  0004f	03 cb		 add	 ecx, ebx
  00051	6a 00		 push	 0
  00053	89 4d 08	 mov	 DWORD PTR __Num$[ebp], ecx
  00056	51		 push	 ecx
  00057	8b ce		 mov	 ecx, esi
  00059	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0005e	84 c0		 test	 al, al
  00060	0f 84 a2 00 00
	00		 je	 $LN57@insert@2

; 991  : 			{	// make room and insert new stuff
; 992  : 			_Traits::move(_Myptr() + _Off + _Count,
; 993  : 				_Myptr() + _Off, this->_Mysize - _Off);	// empty out hole

  00066	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00069	83 f8 10	 cmp	 eax, 16			; 00000010H
  0006c	72 04		 jb	 SHORT $LN23@insert@2
  0006e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00070	eb 02		 jmp	 SHORT $LN24@insert@2
$LN23@insert@2:
  00072	8b ce		 mov	 ecx, esi
$LN24@insert@2:
  00074	83 f8 10	 cmp	 eax, 16			; 00000010H
  00077	72 04		 jb	 SHORT $LN27@insert@2
  00079	8b 06		 mov	 eax, DWORD PTR [esi]
  0007b	eb 02		 jmp	 SHORT $LN28@insert@2
$LN27@insert@2:
  0007d	8b c6		 mov	 eax, esi
$LN28@insert@2:
  0007f	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00082	2b d7		 sub	 edx, edi
  00084	52		 push	 edx
  00085	03 cf		 add	 ecx, edi
  00087	03 c7		 add	 eax, edi
  00089	51		 push	 ecx
  0008a	03 c3		 add	 eax, ebx
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _memmove

; 994  : 			if (this == &_Right)

  00092	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH
  00098	3b f1		 cmp	 esi, ecx
  0009a	75 32		 jne	 SHORT $LN2@insert@2

; 995  : 				_Traits::move(_Myptr() + _Off,
; 996  : 					_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 997  : 						_Count);	// substring

  0009c	8b 55 10	 mov	 edx, DWORD PTR __Roff$[ebp]
  0009f	3b fa		 cmp	 edi, edx
  000a1	73 02		 jae	 SHORT $LN10@insert@2
  000a3	03 d3		 add	 edx, ebx
$LN10@insert@2:
  000a5	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000a8	83 f8 10	 cmp	 eax, 16			; 00000010H
  000ab	72 04		 jb	 SHORT $LN33@insert@2
  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000af	eb 02		 jmp	 SHORT $LN34@insert@2
$LN33@insert@2:
  000b1	8b ce		 mov	 ecx, esi
$LN34@insert@2:
  000b3	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b6	72 04		 jb	 SHORT $LN37@insert@2
  000b8	8b 06		 mov	 eax, DWORD PTR [esi]
  000ba	eb 02		 jmp	 SHORT $LN38@insert@2
$LN37@insert@2:
  000bc	8b c6		 mov	 eax, esi
$LN38@insert@2:
  000be	ff 75 14	 push	 DWORD PTR __Count$[ebp]
  000c1	03 ca		 add	 ecx, edx
  000c3	51		 push	 ecx
  000c4	03 c7		 add	 eax, edi
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 _memmove

; 998  : 			else

  000cc	eb 21		 jmp	 SHORT $LN60@insert@2
$LN2@insert@2:

; 999  : 				_Traits::copy(_Myptr() + _Off,
; 1000 : 					_Right._Myptr() + _Roff, _Count);	// fill hole

  000ce	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  000d2	72 02		 jb	 SHORT $LN43@insert@2
  000d4	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN43@insert@2:
  000d6	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000da	72 04		 jb	 SHORT $LN47@insert@2
  000dc	8b 06		 mov	 eax, DWORD PTR [esi]
  000de	eb 02		 jmp	 SHORT $LN48@insert@2
$LN47@insert@2:
  000e0	8b c6		 mov	 eax, esi
$LN48@insert@2:
  000e2	03 4d 10	 add	 ecx, DWORD PTR __Roff$[ebp]
  000e5	53		 push	 ebx
  000e6	51		 push	 ecx
  000e7	03 c7		 add	 eax, edi
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 _memcpy
$LN60@insert@2:

; 1001 : 			_Eos(_Num);

  000ef	8b 4d 08	 mov	 ecx, DWORD PTR __Num$[ebp]
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f5	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000f9	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  000fc	72 04		 jb	 SHORT $LN55@insert@2
  000fe	8b 06		 mov	 eax, DWORD PTR [esi]
  00100	eb 02		 jmp	 SHORT $LN56@insert@2
$LN55@insert@2:
  00102	8b c6		 mov	 eax, esi
$LN56@insert@2:
  00104	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
$LN57@insert@2:

; 1002 : 			}
; 1003 : 		return (*this);

  00108	5f		 pop	 edi
  00109	8b c6		 mov	 eax, esi
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx

; 1004 : 		}

  0010d	5d		 pop	 ebp
  0010e	c2 10 00	 ret	 16			; 00000010H
$LN6@insert@2:

; 983  : 			_Xran();	// _Off or _Roff off end

  00111	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00116	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN62@insert@2:
$LN59@insert@2:
  0011b	cc		 int	 3
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	6a 00		 push	 0
  00006	6a 01		 push	 1
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	74 07		 je	 SHORT $LN1@scalar@17
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	59		 pop	 ecx
$LN1@scalar@17:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 50	 lea	 esi, DWORD PTR [ecx+80]
  00004	8b ce		 mov	 ecx, esi
  00006	e8 00 00 00 00	 call	 ??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
  0000b	56		 push	 esi
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00012	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00017	59		 pop	 ecx
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_7FastWriter@Json@@6B@			; Json::FastWriter::`vftable'
PUBLIC	??0FastWriter@Json@@QAE@XZ			; Json::FastWriter::FastWriter
PUBLIC	??_R4FastWriter@Json@@6B@			; Json::FastWriter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFastWriter@Json@@@8			; Json::FastWriter `RTTI Type Descriptor'
PUBLIC	??_R3FastWriter@Json@@8				; Json::FastWriter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FastWriter@Json@@8				; Json::FastWriter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FastWriter@Json@@8		; Json::FastWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?write@FastWriter@Json@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@@Z ; Json::FastWriter::write
EXTRN	??_EFastWriter@Json@@UAEPAXI@Z:PROC		; Json::FastWriter::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@FastWriter@Json@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@FastWriter@Json@@8 DD FLAT:??_R0?AVFastWriter@Json@@@8 ; Json::FastWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FastWriter@Json@@8
rdata$r	ENDS
;	COMDAT ??_R2FastWriter@Json@@8
rdata$r	SEGMENT
??_R2FastWriter@Json@@8 DD FLAT:??_R1A@?0A@EA@FastWriter@Json@@8 ; Json::FastWriter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Writer@Json@@8
rdata$r	ENDS
;	COMDAT ??_R3FastWriter@Json@@8
rdata$r	SEGMENT
??_R3FastWriter@Json@@8 DD 00H				; Json::FastWriter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FastWriter@Json@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFastWriter@Json@@@8
_DATA	SEGMENT
??_R0?AVFastWriter@Json@@@8 DD FLAT:??_7type_info@@6B@	; Json::FastWriter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFastWriter@Json@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FastWriter@Json@@6B@
rdata$r	SEGMENT
??_R4FastWriter@Json@@6B@ DD 00H			; Json::FastWriter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFastWriter@Json@@@8
	DD	FLAT:??_R3FastWriter@Json@@8
rdata$r	ENDS
;	COMDAT ??_7FastWriter@Json@@6B@
CONST	SEGMENT
??_7FastWriter@Json@@6B@ DD FLAT:??_R4FastWriter@Json@@6B@ ; Json::FastWriter::`vftable'
	DD	FLAT:??_EFastWriter@Json@@UAEPAXI@Z
	DD	FLAT:?write@FastWriter@Json@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@@Z
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
CONST	ENDS
;	COMDAT ??0FastWriter@Json@@QAE@XZ
_TEXT	SEGMENT
??0FastWriter@Json@@QAE@XZ PROC				; Json::FastWriter::FastWriter, COMDAT
; _this$ = ecx

; 186  : {

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7FastWriter@Json@@6B@
  0000a	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH
  00011	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00014	88 48 04	 mov	 BYTE PTR [eax+4], cl
  00017	88 48 20	 mov	 BYTE PTR [eax+32], cl

; 187  : }

  0001a	c3		 ret	 0
??0FastWriter@Json@@QAE@XZ ENDP				; Json::FastWriter::FastWriter
_TEXT	ENDS
PUBLIC	??1FastWriter@Json@@UAE@XZ			; Json::FastWriter::~FastWriter
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\writer.h
;	COMDAT ??1FastWriter@Json@@UAE@XZ
_TEXT	SEGMENT
??1FastWriter@Json@@UAE@XZ PROC				; Json::FastWriter::~FastWriter, COMDAT
; _this$ = ecx

; 33   :       virtual ~FastWriter(){}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	6a 00		 push	 0
  00005	6a 01		 push	 1
  00007	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7FastWriter@Json@@6B@
  00010	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00015	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Writer@Json@@6B@
  0001b	5e		 pop	 esi
  0001c	c3		 ret	 0
??1FastWriter@Json@@UAE@XZ ENDP				; Json::FastWriter::~FastWriter
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GFastWriter@Json@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GFastWriter@Json@@UAEPAXI@Z PROC			; Json::FastWriter::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1FastWriter@Json@@UAE@XZ ; Json::FastWriter::~FastWriter
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@18
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@18:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GFastWriter@Json@@UAEPAXI@Z ENDP			; Json::FastWriter::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newcap$ = 8						; size = 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve, COMDAT
; _this$ = ecx

; 1539 : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1540 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Newcap$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi
  0000a	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0000d	3b f8		 cmp	 edi, eax
  0000f	77 20		 ja	 SHORT $LN11@reserve
  00011	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  00014	74 1b		 je	 SHORT $LN11@reserve

; 1541 : 			{	// change reservation
; 1542 : 			size_type _Size = this->_Mysize;
; 1543 : 			if (_Grow(_Newcap, true))

  00016	6a 01		 push	 1
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0001e	84 c0		 test	 al, al
  00020	74 0f		 je	 SHORT $LN11@reserve

; 1544 : 				_Eos(_Size);

  00022	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00026	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00029	72 02		 jb	 SHORT $LN9@reserve
  0002b	8b 36		 mov	 esi, DWORD PTR [esi]
$LN9@reserve:
  0002d	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
$LN11@reserve:
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi

; 1545 : 			}
; 1546 : 		}

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
_TEXT	ENDS
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = ecx

; 570  : 		{	// flush output stream

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 571  : 		ios_base::iostate _State = ios_base::goodbit;
; 572  : 		if (!ios_base::fail() && _Myios::rdbuf()->pubsync() == -1)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	f6 44 30 0c 06	 test	 BYTE PTR [eax+esi+12], 6
  00010	75 13		 jne	 SHORT $LN1@flush
  00012	8b 44 30 38	 mov	 eax, DWORD PTR [eax+esi+56]
  00016	8b 10		 mov	 edx, DWORD PTR [eax]
  00018	8b c8		 mov	 ecx, eax
  0001a	ff 52 34	 call	 DWORD PTR [edx+52]
  0001d	83 f8 ff	 cmp	 eax, -1
  00020	75 03		 jne	 SHORT $LN1@flush

; 573  : 			_State |= ios_base::badbit;	// sync failed

  00022	6a 04		 push	 4
  00024	5f		 pop	 edi
$LN1@flush:

; 574  : 		_Myios::setstate(_State);

  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002a	6a 00		 push	 0
  0002c	57		 push	 edi
  0002d	03 ce		 add	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00034	5f		 pop	 edi

; 575  : 		return (*this);

  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi

; 576  : 		}

  00038	c3		 ret	 0
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 71 b0	 lea	 esi, DWORD PTR [ecx-80]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  0000e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00012	74 07		 je	 SHORT $LN1@scalar@19
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001a	59		 pop	 ecx
$LN1@scalar@19:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 792  : 		{	// append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 793  : 		return (append(_Right, 0, npos));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 794  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 838  : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 839  : 		_DEBUG_POINTER(_Ptr);
; 840  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 _strlen
  0000e	59		 pop	 ecx
  0000f	50		 push	 eax
  00010	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0001a	5e		 pop	 esi

; 841  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 844  : 		{	// append _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 845  : 		if (npos - this->_Mysize <= _Count)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000d	83 c9 ff	 or	 ecx, -1
  00010	2b c8		 sub	 ecx, eax
  00012	3b cb		 cmp	 ecx, ebx
  00014	77 0a		 ja	 SHORT $LN2@append@3

; 846  : 			_Xlen();	// result too long

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0001b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN18@append@3:
$LN2@append@3:

; 847  : 
; 848  : 		size_type _Num;
; 849  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00020	85 db		 test	 ebx, ebx
  00022	74 34		 je	 SHORT $LN14@append@3
  00024	57		 push	 edi
  00025	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  00028	6a 00		 push	 0
  0002a	57		 push	 edi
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00032	84 c0		 test	 al, al
  00034	74 21		 je	 SHORT $LN16@append@3

; 850  : 			{	// make room and append new stuff using assign
; 851  : 			_Chassign(this->_Mysize, _Count, _Ch);

  00036	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  00039	8b ce		 mov	 ecx, esi
  0003b	53		 push	 ebx
  0003c	ff 76 10	 push	 DWORD PTR [esi+16]
  0003f	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 852  : 			_Eos(_Num);

  00044	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00048	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0004b	72 04		 jb	 SHORT $LN12@append@3
  0004d	8b 06		 mov	 eax, DWORD PTR [esi]
  0004f	eb 02		 jmp	 SHORT $LN13@append@3
$LN12@append@3:
  00051	8b c6		 mov	 eax, esi
$LN13@append@3:
  00053	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN16@append@3:
  00057	5f		 pop	 edi
$LN14@append@3:

; 853  : 			}
; 854  : 		return (*this);

  00058	8b c6		 mov	 eax, esi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx

; 855  : 		}

  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
$LN17@append@3:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 892  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 893  : 		if (_Right.size() < _Roff)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00010	57		 push	 edi
  00011	3b c1		 cmp	 eax, ecx
  00013	73 0a		 jae	 SHORT $LN5@assign

; 894  : 			_Xran();	// _Roff off end

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0001a	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN34@assign:
$LN5@assign:

; 895  : 		size_type _Num = _Right.size() - _Roff;

  0001f	2b c1		 sub	 eax, ecx
  00021	8b f8		 mov	 edi, eax

; 896  : 		if (_Count < _Num)

  00023	39 7d 10	 cmp	 DWORD PTR __Count$[ebp], edi
  00026	73 03		 jae	 SHORT $LN4@assign

; 897  : 			_Num = _Count;	// trim _Num to size

  00028	8b 7d 10	 mov	 edi, DWORD PTR __Count$[ebp]
$LN4@assign:

; 898  : 
; 899  : 		if (this == &_Right)

  0002b	3b f3		 cmp	 esi, ebx
  0002d	75 1a		 jne	 SHORT $LN3@assign

; 900  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002f	03 f9		 add	 edi, ecx
  00031	6a ff		 push	 -1
  00033	57		 push	 edi
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0003b	ff 75 0c	 push	 DWORD PTR __Roff$[ebp]
  0003e	8b ce		 mov	 ecx, esi
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00047	eb 47		 jmp	 SHORT $LN31@assign
$LN3@assign:

; 901  : 		else if (_Grow(_Num))

  00049	6a 00		 push	 0
  0004b	57		 push	 edi
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00053	84 c0		 test	 al, al
  00055	74 39		 je	 SHORT $LN31@assign

; 902  : 			{	// make room and assign new stuff
; 903  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  00057	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  0005b	72 04		 jb	 SHORT $LN17@assign
  0005d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005f	eb 02		 jmp	 SHORT $LN18@assign
$LN17@assign:
  00061	8b c3		 mov	 eax, ebx
$LN18@assign:
  00063	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00067	72 04		 jb	 SHORT $LN21@assign
  00069	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0006b	eb 02		 jmp	 SHORT $LN22@assign
$LN21@assign:
  0006d	8b ce		 mov	 ecx, esi
$LN22@assign:
  0006f	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memcpy
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 904  : 			_Eos(_Num);

  0007d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00081	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00084	72 04		 jb	 SHORT $LN29@assign
  00086	8b 06		 mov	 eax, DWORD PTR [esi]
  00088	eb 02		 jmp	 SHORT $LN30@assign
$LN29@assign:
  0008a	8b c6		 mov	 eax, esi
$LN30@assign:
  0008c	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN31@assign:

; 905  : 			}
; 906  : 		return (*this);

  00090	5f		 pop	 edi
  00091	8b c6		 mov	 eax, esi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx

; 907  : 		}

  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN33@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
; Function compile flags: /Ogsp
;	COMDAT ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Ch$ = 12						; size = 1
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize, COMDAT
; _this$ = ecx

; 1526 : 		{	// determine new length, padding with _Ch elements as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1527 : 		if (_Newsize <= this->_Mysize)

  00003	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00009	3b c2		 cmp	 eax, edx
  0000b	77 0a		 ja	 SHORT $LN2@resize

; 1528 : 			erase(_Newsize);

  0000d	6a ff		 push	 -1
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1529 : 		else

  00015	eb 0b		 jmp	 SHORT $LN1@resize
$LN2@resize:

; 1530 : 			append(_Newsize - this->_Mysize, _Ch);

  00017	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  0001a	2b c2		 sub	 eax, edx
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN1@resize:

; 1531 : 		}

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
_TEXT	ENDS
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 114  : 			{	// construct locking and testing stream

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base

; 115  : 			if (_Ostr.good() && _Ostr.tie() != 0)

  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00023	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  00028	75 0f		 jne	 SHORT $LN1@sentry
  0002a	8b 44 30 3c	 mov	 eax, DWORD PTR [eax+esi+60]
  0002e	85 c0		 test	 eax, eax
  00030	74 07		 je	 SHORT $LN1@sentry

; 116  : 				_Ostr.tie()->flush();

  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN1@sentry:

; 117  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00039	8b 06		 mov	 eax, DWORD PTR [esi]
  0003b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003e	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  00043	0f 94 c0	 sete	 al
  00046	88 47 04	 mov	 BYTE PTR [edi+4], al

; 118  : 			}

  00049	8b c7		 mov	 eax, edi
  0004b	e8 00 00 00 00	 call	 __EH_epilog3
  00050	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 910  : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 911  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 912  : 		if (_Count != 0)
; 913  : 			_DEBUG_POINTER(_Ptr);
; 914  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 915  : 
; 916  : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	53		 push	 ebx
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 1c		 je	 SHORT $LN2@assign@2

; 917  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN7@assign@2
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN8@assign@2
$LN7@assign@2:
  0001e	8b c6		 mov	 eax, esi
$LN8@assign@2:
  00020	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00023	2b d8		 sub	 ebx, eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002e	eb 3f		 jmp	 SHORT $LN3@assign@2
$LN2@assign@2:
  00030	57		 push	 edi

; 918  : 
; 919  : 		if (_Grow(_Count))

  00031	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00034	6a 00		 push	 0
  00036	57		 push	 edi
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0003e	84 c0		 test	 al, al
  00040	74 2a		 je	 SHORT $LN21@assign@2

; 920  : 			{	// make room and assign new stuff
; 921  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

  00042	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00046	72 04		 jb	 SHORT $LN11@assign@2
  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	eb 02		 jmp	 SHORT $LN12@assign@2
$LN11@assign@2:
  0004c	8b c6		 mov	 eax, esi
$LN12@assign@2:
  0004e	57		 push	 edi
  0004f	53		 push	 ebx
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _memcpy
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 922  : 			_Eos(_Count);

  00059	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0005d	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00060	72 04		 jb	 SHORT $LN19@assign@2
  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	eb 02		 jmp	 SHORT $LN20@assign@2
$LN19@assign@2:
  00066	8b c6		 mov	 eax, esi
$LN20@assign@2:
  00068	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN21@assign@2:

; 923  : 			}
; 924  : 		return (*this);

  0006c	8b c6		 mov	 eax, esi
  0006e	5f		 pop	 edi
$LN3@assign@2:
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 925  : 		}

  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 156  : 		{	// perform any wrapup

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 157  : 		_TRY_BEGIN
; 158  : 		if (ios_base::flags() & ios_base::unitbuf)

  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00011	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00015	f6 44 08 14 02	 test	 BYTE PTR [eax+ecx+20], 2
  0001a	74 05		 je	 SHORT $LN8@Osfx

; 159  : 			flush();	// flush stream as needed

  0001c	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN8@Osfx:

; 162  : 		}

  00021	e8 00 00 00 00	 call	 __EH_epilog3
  00026	c3		 ret	 0
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:

; 160  : 		_CATCH_ALL
; 161  : 		_CATCH_END

  00027	b8 00 00 00 00	 mov	 eax, $LN8@Osfx
  0002c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 886  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 887  : 		return (assign(_Right, 0, npos));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 888  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0
__ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
xdata$x	ENDS
;	COMDAT ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
_TEXT	SEGMENT
$T44107 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Byte$ = 8						; size = 1
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z PROC ; std::basic_ios<char,std::char_traits<char> >::widen, COMDAT
; _this$ = ecx

; 124  : 		{	// convert _Byte to character using imbued locale

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 125  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  0000c	8d 45 f0	 lea	 eax, DWORD PTR $T44107[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  0001f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00023	59		 pop	 ecx
  00024	8d 4d f0	 lea	 ecx, DWORD PTR $T44107[ebp]
  00027	8b f0		 mov	 esi, eax
  00029	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 126  : 		return (_Ctype_fac.widen(_Byte));

  0002e	ff 75 08	 push	 DWORD PTR __Byte$[ebp]
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b ce		 mov	 ecx, esi
  00035	ff 50 18	 call	 DWORD PTR [eax+24]

; 127  : 		}

  00038	e8 00 00 00 00	 call	 __EH_epilog3
  0003d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR $T44107[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::widen
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
PUBLIC	??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T44120 = -32						; size = 12
__Lock$38142 = -20					; size = 4
__Psave$38143 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >, COMDAT

; 504  : 	{	// get facet reference from locale

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 505  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  0000c	6a 00		 push	 0
  0000e	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$38142[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 506  : 		const locale::facet *_Psave =
; 507  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00016	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 508  : 
; 509  : 		size_t _Id = _Facet::id;

  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00025	89 75 f0	 mov	 DWORD PTR __Psave$38143[ebp], esi
  00028	e8 00 00 00 00	 call	 ??Bid@locale@std@@QAEIXZ ; std::locale::id::operator unsigned int

; 510  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  00036	8b f8		 mov	 edi, eax

; 511  : 
; 512  : 		if (_Pf != 0)

  00038	85 ff		 test	 edi, edi
  0003a	75 4d		 jne	 SHORT $LN10@use_facet@2

; 513  : 			;	// got facet from locale
; 514  : 		else if (_Psave != 0)

  0003c	85 f6		 test	 esi, esi
  0003e	74 04		 je	 SHORT $LN4@use_facet@2

; 515  : 			_Pf = _Psave;	// lazy facet already allocated

  00040	8b fe		 mov	 edi, esi
  00042	eb 45		 jmp	 SHORT $LN10@use_facet@2
$LN4@use_facet@2:

; 516  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  00044	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  00047	8d 45 f0	 lea	 eax, DWORD PTR __Psave$38143[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
  00050	59		 pop	 ecx
  00051	59		 pop	 ecx
  00052	83 f8 ff	 cmp	 eax, -1
  00055	75 1b		 jne	 SHORT $LN2@use_facet@2

; 517  : 
; 518  :  #if _HAS_EXCEPTIONS
; 519  : 
; 520  : 			_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  00057	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  0005c	8d 4d e0	 lea	 ecx, DWORD PTR $T44120[ebp]
  0005f	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  00064	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  00069	8d 45 e0	 lea	 eax, DWORD PTR $T44120[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@use_facet@2:
$LN2@use_facet@2:

; 521  : 
; 522  :  #else /* _HAS_EXCEPTIONS */
; 523  : 			abort();	// lazy disallowed
; 524  :  #endif /* _HAS_EXCEPTIONS */
; 525  : 
; 526  : 		else
; 527  : 			{	// queue up lazy facet for destruction
; 528  : 			_Pf = _Psave;

  00072	8b 7d f0	 mov	 edi, DWORD PTR __Psave$38143[ebp]

; 529  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 530  : 
; 531  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 532  : 			_Pfmod->_Incref();

  00075	8b cf		 mov	 ecx, edi
  00077	89 3d 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, edi ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  0007d	e8 00 00 00 00	 call	 ?_Incref@facet@locale@std@@QAEXXZ ; std::locale::facet::_Incref

; 533  : 			_Pfmod->_Register();

  00082	57		 push	 edi
  00083	e8 00 00 00 00	 call	 ?_Facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::_Facet_Register
  00088	59		 pop	 ecx
$LN10@use_facet@2:

; 534  : 			}
; 535  : 
; 536  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00089	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$38142[ebp]
  00090	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00095	8b c7		 mov	 eax, edi

; 537  : 	_END_LOCK()
; 538  : 	}

  00097	e8 00 00 00 00	 call	 __EH_epilog3
  0009c	c3		 ret	 0
$LN13@use_facet@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$38142[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T44139 = -52						; size = 36
$T44143 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T44138 = 8						; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::numpunct<char>::_Getcat, COMDAT

; 111  : 		{	// return locale category mask and construct standard facet

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	83 65 f0 00	 and	 DWORD PTR $T44143[ebp], 0

; 112  : 		if (_Ppf != 0 && *_Ppf == 0)

  00010	8b 5d 08	 mov	 ebx, DWORD PTR __Ppf$[ebp]
  00013	85 db		 test	 ebx, ebx
  00015	74 6a		 je	 SHORT $LN9@Getcat@3
  00017	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  0001a	75 65		 jne	 SHORT $LN9@Getcat@3

; 113  : 			*_Ppf = _NEW_CRT numpunct<_Elem>(
; 114  : 				_Locinfo(_Ploc->c_str()), 0, true);

  0001c	6a 18		 push	 24			; 00000018H
  0001e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00023	8b f0		 mov	 esi, eax
  00025	59		 pop	 ecx
  00026	89 75 08	 mov	 DWORD PTR $T44138[ebp], esi
  00029	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	85 f6		 test	 esi, esi
  0002f	74 3a		 je	 SHORT $LN4@Getcat@3
  00031	8b 45 0c	 mov	 eax, DWORD PTR __Ploc$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00039	85 c9		 test	 ecx, ecx
  0003b	75 03		 jne	 SHORT $LN15@Getcat@3
  0003d	8d 48 1c	 lea	 ecx, DWORD PTR [eax+28]
$LN15@Getcat@3:
  00040	51		 push	 ecx
  00041	8d 4d cc	 lea	 ecx, DWORD PTR $T44139[ebp]
  00044	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00049	83 66 04 00	 and	 DWORD PTR [esi+4], 0
  0004d	33 c9		 xor	 ecx, ecx
  0004f	41		 inc	 ecx
  00050	89 4d f0	 mov	 DWORD PTR $T44143[ebp], ecx
  00053	51		 push	 ecx
  00054	50		 push	 eax
  00055	8b ce		 mov	 ecx, esi
  00057	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0005e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  00064	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init
  00069	eb 02		 jmp	 SHORT $LN5@Getcat@3
$LN4@Getcat@3:
  0006b	33 f6		 xor	 esi, esi
$LN5@Getcat@3:
  0006d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	f6 45 f0 01	 test	 BYTE PTR $T44143[ebp], 1
  00075	89 33		 mov	 DWORD PTR [ebx], esi
  00077	74 08		 je	 SHORT $LN9@Getcat@3
  00079	8d 4d cc	 lea	 ecx, DWORD PTR $T44139[ebp]
  0007c	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN9@Getcat@3:

; 115  : 		return (_X_NUMERIC);

  00081	6a 04		 push	 4
  00083	58		 pop	 eax

; 116  : 		}

  00084	e8 00 00 00 00	 call	 __EH_epilog3
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR $T44138[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000a	8b 45 f0	 mov	 eax, DWORD PTR $T44143[ebp]
  0000d	83 e0 01	 and	 eax, 1
  00010	0f 84 0c 00 00
	00		 je	 $LN8@Getcat@3
  00016	83 65 f0 fe	 and	 DWORD PTR $T44143[ebp], -2 ; fffffffeH
  0001a	8d 4d cc	 lea	 ecx, DWORD PTR $T44139[ebp]
  0001d	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN8@Getcat@3:
  00022	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  00023	8b 4d 08	 mov	 ecx, DWORD PTR $T44138[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@UAE@XZ ; std::locale::facet::~facet
__ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::numpunct<char>::_Getcat
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1008 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1009 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1010 : 		if (_Count != 0)
; 1011 : 			_DEBUG_POINTER(_Ptr);
; 1012 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1013 : 
; 1014 : 		if (_Inside(_Ptr))

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 22		 je	 SHORT $LN4@insert@3

; 1015 : 			return (insert(_Off, *this,
; 1016 : 				_Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN9@insert@3
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN10@insert@3
$LN9@insert@3:
  0001e	8b c6		 mov	 eax, esi
$LN10@insert@3:
  00020	ff 75 10	 push	 DWORD PTR __Count$[ebp]
  00023	2b f8		 sub	 edi, eax
  00025	57		 push	 edi
  00026	56		 push	 esi
  00027	ff 75 08	 push	 DWORD PTR __Off$[ebp]
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  00031	e9 a3 00 00 00	 jmp	 $LN5@insert@3
$LN4@insert@3:

; 1017 : 		if (this->_Mysize < _Off)

  00036	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00039	8b 7d 08	 mov	 edi, DWORD PTR __Off$[ebp]
  0003c	3b c7		 cmp	 eax, edi
  0003e	73 0a		 jae	 SHORT $LN3@insert@3

; 1018 : 			_Xran();	// _Off off end

  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00045	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN42@insert@3:
$LN3@insert@3:

; 1019 : 		if (npos - this->_Mysize <= _Count)

  0004a	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  0004d	83 ca ff	 or	 edx, -1
  00050	2b d0		 sub	 edx, eax
  00052	3b d1		 cmp	 edx, ecx
  00054	77 0a		 ja	 SHORT $LN2@insert@3

; 1020 : 			_Xlen();	// result too long

  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0005b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN43@insert@3:
$LN2@insert@3:

; 1021 : 		size_type _Num;
; 1022 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00060	85 c9		 test	 ecx, ecx
  00062	74 73		 je	 SHORT $LN38@insert@3
  00064	53		 push	 ebx
  00065	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]
  00068	6a 00		 push	 0
  0006a	53		 push	 ebx
  0006b	8b ce		 mov	 ecx, esi
  0006d	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00072	84 c0		 test	 al, al
  00074	74 60		 je	 SHORT $LN40@insert@3

; 1023 : 			{	// make room and insert new stuff
; 1024 : 			_Traits::move(_Myptr() + _Off + _Count,
; 1025 : 				_Myptr() + _Off, this->_Mysize - _Off);	// empty out hole

  00076	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00079	83 f8 10	 cmp	 eax, 16			; 00000010H
  0007c	72 04		 jb	 SHORT $LN18@insert@3
  0007e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00080	eb 02		 jmp	 SHORT $LN19@insert@3
$LN18@insert@3:
  00082	8b ce		 mov	 ecx, esi
$LN19@insert@3:
  00084	83 f8 10	 cmp	 eax, 16			; 00000010H
  00087	72 04		 jb	 SHORT $LN22@insert@3
  00089	8b 06		 mov	 eax, DWORD PTR [esi]
  0008b	eb 02		 jmp	 SHORT $LN23@insert@3
$LN22@insert@3:
  0008d	8b c6		 mov	 eax, esi
$LN23@insert@3:
  0008f	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00092	2b d7		 sub	 edx, edi
  00094	52		 push	 edx
  00095	03 c7		 add	 eax, edi
  00097	03 45 10	 add	 eax, DWORD PTR __Count$[ebp]
  0009a	03 cf		 add	 ecx, edi
  0009c	51		 push	 ecx
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 _memmove
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1026 : 			_Traits::copy(_Myptr() + _Off, _Ptr, _Count);	// fill hole

  000a6	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000aa	72 04		 jb	 SHORT $LN28@insert@3
  000ac	8b 06		 mov	 eax, DWORD PTR [esi]
  000ae	eb 02		 jmp	 SHORT $LN29@insert@3
$LN28@insert@3:
  000b0	8b c6		 mov	 eax, esi
$LN29@insert@3:
  000b2	ff 75 10	 push	 DWORD PTR __Count$[ebp]
  000b5	03 c7		 add	 eax, edi
  000b7	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _memcpy
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1027 : 			_Eos(_Num);

  000c3	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000c7	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000ca	72 04		 jb	 SHORT $LN36@insert@3
  000cc	8b 06		 mov	 eax, DWORD PTR [esi]
  000ce	eb 02		 jmp	 SHORT $LN37@insert@3
$LN36@insert@3:
  000d0	8b c6		 mov	 eax, esi
$LN37@insert@3:
  000d2	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
$LN40@insert@3:
  000d6	5b		 pop	 ebx
$LN38@insert@3:

; 1028 : 			}
; 1029 : 		return (*this);

  000d7	8b c6		 mov	 eax, esi
$LN5@insert@3:
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi

; 1030 : 		}

  000db	5d		 pop	 ebp
  000dc	c2 0c 00	 ret	 12			; 0000000cH
$LN41@insert@3:
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	6a 00		 push	 0
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 64   : 	}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 543  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 544  : 		_Tidy();

  00004	33 c0		 xor	 eax, eax

; 545  : 		assign(_Right, 0, npos);

  00006	6a ff		 push	 -1
  00008	8b f1		 mov	 esi, ecx
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00015	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00018	88 06		 mov	 BYTE PTR [esi], al
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 546  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 777  : 		{	// append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 778  : 		return (append(_Right));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 779  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 782  : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 783  : 		return (append(_Ptr));

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 _strlen
  0000e	59		 pop	 ecx
  0000f	50		 push	 eax
  00010	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0001a	5e		 pop	 esi

; 784  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 787  : 		{	// append 1 * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 788  : 		return (append((size_type)1, _Ch));

  00003	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00006	6a 01		 push	 1
  00008	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 789  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
; Function compile flags: /Ogsp
;	COMDAT ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize, COMDAT
; _this$ = ecx

; 1521 : 		{	// determine new length, padding with null elements as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1522 : 		resize(_Newsize, _Elem());

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Newsize$[ebp]
  00008	e8 00 00 00 00	 call	 ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

; 1523 : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 928  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 929  : 		_DEBUG_POINTER(_Ptr);
; 930  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 _strlen
  0000e	59		 pop	 ecx
  0000f	50		 push	 eax
  00010	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0001a	5e		 pop	 esi

; 931  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 121  : 			{	// destroy the object

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 122  :  #if _HAS_EXCEPTIONS
; 123  : 			if (!uncaught_exception())

  00015	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0001a	84 c0		 test	 al, al
  0001c	75 07		 jne	 SHORT $LN1@sentry@2

; 124  : 				this->_Myostr._Osfx();

  0001e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00020	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN1@sentry@2:

; 125  : 
; 126  :  #else /* _HAS_EXCEPTIONS */
; 127  : 			this->_Myostr._Osfx();
; 128  :  #endif /* _HAS_EXCEPTIONS */
; 129  : 			}

  00025	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00030	e8 00 00 00 00	 call	 __EH_epilog3
  00035	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 578  : 		{	// construct from [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 579  : 		_Tidy();
; 580  : 		assign(_Ptr, _Count);

  00004	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00010	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00017	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 581  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 762  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 763  : 		return (assign(_Right));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 764  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
EXTRN	?_Addstd@ios_base@std@@SAXPAV12@@Z:PROC		; std::ios_base::_Addstd
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
_TEXT	SEGMENT
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::init, COMDAT
; _this$ = ecx

; 154  : 		{	// initialize with stream buffer pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 155  : 		_Init();	// initialize ios_base

  00006	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init

; 156  : 		_Mystrbuf = _Strbuf;

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Strbuf$[ebp]

; 157  : 		_Tiestr = 0;

  0000e	83 66 3c 00	 and	 DWORD PTR [esi+60], 0

; 158  : 		_Fillch = widen(' ');

  00012	6a 20		 push	 32			; 00000020H
  00014	8b ce		 mov	 ecx, esi
  00016	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00019	e8 00 00 00 00	 call	 ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen

; 159  : 
; 160  : 		if (_Mystrbuf == 0)

  0001e	83 7e 38 00	 cmp	 DWORD PTR [esi+56], 0
  00022	88 46 40	 mov	 BYTE PTR [esi+64], al
  00025	75 10		 jne	 SHORT $LN10@init

; 161  : 			setstate(badbit);

  00027	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0002a	83 c8 04	 or	 eax, 4
  0002d	6a 00		 push	 0
  0002f	50		 push	 eax
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN10@init:

; 162  : 
; 163  : 		if (_Isstd)

  00037	80 7d 0c 00	 cmp	 BYTE PTR __Isstd$[ebp], 0
  0003b	74 07		 je	 SHORT $LN1@init

; 164  : 			_Addstd(this);	// special handling for standard streams

  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  00043	59		 pop	 ecx
$LN1@init:
  00044	5e		 pop	 esi

; 165  : 		}

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::init
_TEXT	ENDS
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$12
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -40						; size = 8
__Pad$ = -32						; size = 8
$T44519 = -24						; size = 1
$T44498 = -24						; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 767  : 	{	// insert NTBS into char stream

  00000	6a 1c		 push	 28			; 0000001cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 768  : 	typedef char _Elem;
; 769  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 770  : 	ios_base::iostate _State = ios_base::goodbit;
; 771  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  0000c	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0000f	33 ff		 xor	 edi, edi
  00011	89 7d ec	 mov	 DWORD PTR __State$[ebp], edi
  00014	e8 00 00 00 00	 call	 _strlen

; 772  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 773  : 		? 0 : _Ostr.width() - _Count;

  00019	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0001c	8b d8		 mov	 ebx, eax
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00023	59		 pop	 ecx
  00024	8b 4c 30 20	 mov	 ecx, DWORD PTR [eax+esi+32]
  00028	8b 44 30 24	 mov	 eax, DWORD PTR [eax+esi+36]
  0002c	85 c0		 test	 eax, eax
  0002e	7c 1c		 jl	 SHORT $LN17@operator@6
  00030	7f 04		 jg	 SHORT $LN130@operator@6
  00032	85 c9		 test	 ecx, ecx
  00034	74 16		 je	 SHORT $LN17@operator@6
$LN130@operator@6:
  00036	3b c7		 cmp	 eax, edi
  00038	7c 12		 jl	 SHORT $LN17@operator@6
  0003a	7f 04		 jg	 SHORT $LN131@operator@6
  0003c	3b cb		 cmp	 ecx, ebx
  0003e	76 0c		 jbe	 SHORT $LN17@operator@6
$LN131@operator@6:
  00040	2b cb		 sub	 ecx, ebx
  00042	1b c7		 sbb	 eax, edi
  00044	89 4d e0	 mov	 DWORD PTR __Pad$[ebp], ecx
  00047	89 45 e4	 mov	 DWORD PTR __Pad$[ebp+4], eax
  0004a	eb 06		 jmp	 SHORT $LN18@operator@6
$LN17@operator@6:
  0004c	21 7d e0	 and	 DWORD PTR __Pad$[ebp], edi
  0004f	21 7d e4	 and	 DWORD PTR __Pad$[ebp+4], edi
$LN18@operator@6:

; 774  : 	const typename _Myos::sentry _Ok(_Ostr);

  00052	56		 push	 esi
  00053	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00056	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0005b	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 775  : 
; 776  : 	if (!_Ok)

  0005f	80 7d dc 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00063	75 0c		 jne	 SHORT $LN14@operator@6

; 777  : 		_State |= ios_base::badbit;

  00065	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4

; 778  : 	else

  0006c	e9 80 00 00 00	 jmp	 $LN22@operator@6
$LN14@operator@6:

; 779  : 		{	// state okay, insert
; 780  : 		_TRY_IO_BEGIN
; 781  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00071	8b 06		 mov	 eax, DWORD PTR [esi]
  00073	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00076	8b 44 30 14	 mov	 eax, DWORD PTR [eax+esi+20]
  0007a	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0007f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00083	83 f8 40	 cmp	 eax, 64			; 00000040H
  00086	74 35		 je	 SHORT $LN128@operator@6
$LL10@operator@6:

; 782  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00088	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  0008c	7c 29		 jl	 SHORT $LN8@operator@6
  0008e	7f 06		 jg	 SHORT $LN132@operator@6
  00090	83 7d e0 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00094	76 21		 jbe	 SHORT $LN8@operator@6
$LN132@operator@6:

; 783  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 784  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00096	8b 06		 mov	 eax, DWORD PTR [esi]
  00098	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0009b	8a 4c 30 40	 mov	 cl, BYTE PTR [eax+esi+64]
  0009f	88 4d e8	 mov	 BYTE PTR $T44498[ebp], cl
  000a2	ff 75 e8	 push	 DWORD PTR $T44498[ebp]
  000a5	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  000a9	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  000ae	83 f8 ff	 cmp	 eax, -1
  000b1	75 63		 jne	 SHORT $LN9@operator@6

; 785  : 					{	// insertion failed, quit
; 786  : 					_State |= ios_base::badbit;

  000b3	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN8@operator@6:

; 787  : 					break;
; 788  : 					}
; 789  : 
; 790  : 		if (_State == ios_base::goodbit
; 791  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  000b7	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  000bb	75 22		 jne	 SHORT $LN2@operator@6
$LN128@operator@6:
  000bd	8b 06		 mov	 eax, DWORD PTR [esi]
  000bf	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000c2	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  000c6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c8	57		 push	 edi
  000c9	53		 push	 ebx
  000ca	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  000cd	ff 50 24	 call	 DWORD PTR [eax+36]
  000d0	3b c3		 cmp	 eax, ebx
  000d2	75 04		 jne	 SHORT $LN133@operator@6
  000d4	3b d7		 cmp	 edx, edi
  000d6	74 4b		 je	 SHORT $LL129@operator@6
$LN133@operator@6:

; 792  : 			_State |= ios_base::badbit;

  000d8	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN2@operator@6:

; 801  : 					}
; 802  : 		_Ostr.width(0);

  000df	8b 06		 mov	 eax, DWORD PTR [esi]
  000e1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000e4	33 c9		 xor	 ecx, ecx
  000e6	89 4c 30 20	 mov	 DWORD PTR [eax+esi+32], ecx
  000ea	89 4c 30 24	 mov	 DWORD PTR [eax+esi+36], ecx
  000ee	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
$LN22@operator@6:

; 804  : 		}
; 805  : 
; 806  : 	_Ostr.setstate(_State);

  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
  000f3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f6	6a 00		 push	 0
  000f8	ff 75 ec	 push	 DWORD PTR __State$[ebp]
  000fb	03 ce		 add	 ecx, esi
  000fd	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 807  : 	return (_Ostr);

  00102	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00106	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00109	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0010e	8b c6		 mov	 eax, esi

; 808  : 	}

  00110	e8 00 00 00 00	 call	 __EH_epilog3
  00115	c3		 ret	 0
$LN9@operator@6:

; 782  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00116	83 45 e0 ff	 add	 DWORD PTR __Pad$[ebp], -1
  0011a	83 55 e4 ff	 adc	 DWORD PTR __Pad$[ebp+4], -1
  0011e	e9 65 ff ff ff	 jmp	 $LL10@operator@6
$LL129@operator@6:

; 793  : 
; 794  : 		if (_State == ios_base::goodbit)
; 795  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00123	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00127	7c b6		 jl	 SHORT $LN2@operator@6
  00129	7f 06		 jg	 SHORT $LN134@operator@6
  0012b	83 7d e0 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  0012f	76 ae		 jbe	 SHORT $LN2@operator@6
$LN134@operator@6:

; 796  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 797  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00131	8b 06		 mov	 eax, DWORD PTR [esi]
  00133	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00136	8a 4c 30 40	 mov	 cl, BYTE PTR [eax+esi+64]
  0013a	88 4d e8	 mov	 BYTE PTR $T44519[ebp], cl
  0013d	ff 75 e8	 push	 DWORD PTR $T44519[ebp]
  00140	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00144	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  00149	83 f8 ff	 cmp	 eax, -1
  0014c	75 06		 jne	 SHORT $LN3@operator@6

; 798  : 					{	// insertion failed, quit
; 799  : 					_State |= ios_base::badbit;

  0014e	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4

; 800  : 					break;

  00152	eb 8b		 jmp	 SHORT $LN2@operator@6
$LN3@operator@6:

; 793  : 
; 794  : 		if (_State == ios_base::goodbit)
; 795  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00154	83 45 e0 ff	 add	 DWORD PTR __Pad$[ebp], -1
  00158	83 55 e4 ff	 adc	 DWORD PTR __Pad$[ebp+4], -1
  0015c	eb c5		 jmp	 SHORT $LL129@operator@6
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 803  : 		_CATCH_IO_(_Ostr)

  0015e	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00161	8b 01		 mov	 eax, DWORD PTR [ecx]
  00163	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00166	03 c1		 add	 eax, ecx
  00168	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0016b	33 d2		 xor	 edx, edx
  0016d	83 c9 04	 or	 ecx, 4
  00170	39 50 38	 cmp	 DWORD PTR [eax+56], edx
  00173	75 03		 jne	 SHORT $LN65@operator@6
  00175	83 c9 04	 or	 ecx, 4
$LN65@operator@6:
  00178	83 e1 17	 and	 ecx, 23			; 00000017H
  0017b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0017e	85 48 10	 test	 DWORD PTR [eax+16], ecx
  00181	75 11		 jne	 SHORT $LN74@operator@6
  00183	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edx
  00186	b8 00 00 00 00	 mov	 eax, $LN23@operator@6
  0018b	c3		 ret	 0
$LN23@operator@6:
  0018c	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0018f	e9 5d ff ff ff	 jmp	 $LN22@operator@6
$LN74@operator@6:
  00194	52		 push	 edx
  00195	52		 push	 edx
  00196	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN142@operator@6:
$LN141@operator@6:
  0019b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__catchsym$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0
__tryblocktable$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$12
__unwindtable$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
$T44886 = -32						; size = 8
$T44882 = -32						; size = 8
__Ok$ = -32						; size = 8
$T44933 = -24						; size = 1
$T44897 = -24						; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Pad$ = 12						; size = 4
__Str$ = 12						; size = 4
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 492  : 	{	// insert a string

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 493  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 494  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 495  : 	typedef typename _Mystr::size_type _Mysizt;
; 496  : 
; 497  : 	ios_base::iostate _State = ios_base::goodbit;
; 498  : 	_Mysizt _Size = _Str.size();
; 499  : 	_Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
; 500  : 		? 0 : (_Mysizt)_Ostr.width() - _Size;

  0000c	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00014	8b 4c 30 20	 mov	 ecx, DWORD PTR [eax+esi+32]
  00018	8b 44 30 24	 mov	 eax, DWORD PTR [eax+esi+36]
  0001c	83 65 ec 00	 and	 DWORD PTR __State$[ebp], 0
  00020	8b 5d 0c	 mov	 ebx, DWORD PTR __Str$[ebp]
  00023	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  00026	85 c0		 test	 eax, eax
  00028	7c 17		 jl	 SHORT $LN17@operator@7
  0002a	7f 04		 jg	 SHORT $LN136@operator@7
  0002c	85 c9		 test	 ecx, ecx
  0002e	74 11		 je	 SHORT $LN17@operator@7
$LN136@operator@7:
  00030	89 45 e4	 mov	 DWORD PTR $T44882[ebp+4], eax
  00033	3b cf		 cmp	 ecx, edi
  00035	76 0a		 jbe	 SHORT $LN17@operator@7
  00037	2b cf		 sub	 ecx, edi
  00039	89 45 e4	 mov	 DWORD PTR $T44886[ebp+4], eax
  0003c	89 4d 0c	 mov	 DWORD PTR __Pad$[ebp], ecx
  0003f	eb 04		 jmp	 SHORT $LN18@operator@7
$LN17@operator@7:
  00041	83 65 0c 00	 and	 DWORD PTR __Pad$[ebp], 0
$LN18@operator@7:

; 501  : 	const typename _Myos::sentry _Ok(_Ostr);

  00045	56		 push	 esi
  00046	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00049	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0004e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 502  : 
; 503  : 	if (!_Ok)

  00052	80 7d e4 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00056	75 0c		 jne	 SHORT $LN14@operator@7

; 504  : 		_State |= ios_base::badbit;

  00058	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4

; 505  : 	else

  0005f	e9 89 00 00 00	 jmp	 $LN22@operator@7
$LN14@operator@7:

; 506  : 		{	// state okay, insert characters
; 507  : 	_TRY_IO_BEGIN
; 508  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00064	8b 06		 mov	 eax, DWORD PTR [esi]
  00066	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00069	8b 44 30 14	 mov	 eax, DWORD PTR [eax+esi+20]
  0006d	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00072	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00076	83 f8 40	 cmp	 eax, 64			; 00000040H
  00079	74 2d		 je	 SHORT $LN134@operator@7
$LL10@operator@7:

; 509  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  0007b	83 7d 0c 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  0007f	76 21		 jbe	 SHORT $LN8@operator@7

; 510  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 511  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00081	8b 06		 mov	 eax, DWORD PTR [esi]
  00083	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00086	8a 4c 30 40	 mov	 cl, BYTE PTR [eax+esi+64]
  0008a	88 4d e8	 mov	 BYTE PTR $T44897[ebp], cl
  0008d	ff 75 e8	 push	 DWORD PTR $T44897[ebp]
  00090	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00094	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  00099	83 f8 ff	 cmp	 eax, -1
  0009c	75 14		 jne	 SHORT $LN9@operator@7

; 512  : 					{	// insertion failed, quit
; 513  : 					_State |= ios_base::badbit;

  0009e	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN8@operator@7:

; 514  : 					break;
; 515  : 					}
; 516  : 
; 517  : 		if (_State == ios_base::goodbit
; 518  : 			&& _Ostr.rdbuf()->sputn(_Str.c_str(), _Size) != (streamsize)_Size)

  000a2	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  000a6	75 6a		 jne	 SHORT $LL135@operator@7
$LN134@operator@7:
  000a8	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  000ac	72 09		 jb	 SHORT $LN48@operator@7
  000ae	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b0	eb 07		 jmp	 SHORT $LN49@operator@7
$LN9@operator@7:

; 509  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  000b2	ff 4d 0c	 dec	 DWORD PTR __Pad$[ebp]
  000b5	eb c4		 jmp	 SHORT $LL10@operator@7

; 514  : 					break;
; 515  : 					}
; 516  : 
; 517  : 		if (_State == ios_base::goodbit
; 518  : 			&& _Ostr.rdbuf()->sputn(_Str.c_str(), _Size) != (streamsize)_Size)

$LN48@operator@7:
  000b7	8b c3		 mov	 eax, ebx
$LN49@operator@7:
  000b9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000bb	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000be	8b 4c 31 38	 mov	 ecx, DWORD PTR [ecx+esi+56]
  000c2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c4	33 db		 xor	 ebx, ebx
  000c6	53		 push	 ebx
  000c7	57		 push	 edi
  000c8	50		 push	 eax
  000c9	ff 52 24	 call	 DWORD PTR [edx+36]
  000cc	3b c7		 cmp	 eax, edi
  000ce	75 04		 jne	 SHORT $LN137@operator@7
  000d0	3b d3		 cmp	 edx, ebx
  000d2	74 3e		 je	 SHORT $LL135@operator@7
$LN137@operator@7:

; 519  : 				_State |= ios_base::badbit;

  000d4	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN2@operator@7:

; 527  : 					}
; 528  : 		_Ostr.width(0);

  000db	8b 06		 mov	 eax, DWORD PTR [esi]
  000dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000e0	33 c9		 xor	 ecx, ecx
  000e2	89 4c 30 20	 mov	 DWORD PTR [eax+esi+32], ecx
  000e6	89 4c 30 24	 mov	 DWORD PTR [eax+esi+36], ecx
  000ea	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
$LN22@operator@7:

; 530  : 		}
; 531  : 
; 532  : 	_Ostr.setstate(_State);

  000ed	8b 06		 mov	 eax, DWORD PTR [esi]
  000ef	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f2	6a 00		 push	 0
  000f4	ff 75 ec	 push	 DWORD PTR __State$[ebp]
  000f7	03 ce		 add	 ecx, esi
  000f9	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 533  : 	return (_Ostr);

  000fe	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00102	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00105	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0010a	8b c6		 mov	 eax, esi

; 534  : 	}

  0010c	e8 00 00 00 00	 call	 __EH_epilog3
  00111	c3		 ret	 0
$LL135@operator@7:

; 520  : 		else
; 521  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00112	83 7d 0c 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00116	76 c3		 jbe	 SHORT $LN2@operator@7

; 522  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 523  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00118	8b 06		 mov	 eax, DWORD PTR [esi]
  0011a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0011d	8a 4c 30 40	 mov	 cl, BYTE PTR [eax+esi+64]
  00121	88 4d e8	 mov	 BYTE PTR $T44933[ebp], cl
  00124	ff 75 e8	 push	 DWORD PTR $T44933[ebp]
  00127	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  0012b	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  00130	83 f8 ff	 cmp	 eax, -1
  00133	75 06		 jne	 SHORT $LN3@operator@7

; 524  : 					{	// insertion failed, quit
; 525  : 					_State |= ios_base::badbit;

  00135	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4

; 526  : 					break;

  00139	eb a0		 jmp	 SHORT $LN2@operator@7
$LN3@operator@7:

; 520  : 		else
; 521  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  0013b	ff 4d 0c	 dec	 DWORD PTR __Pad$[ebp]
  0013e	eb d2		 jmp	 SHORT $LL135@operator@7
__catch$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0:

; 529  : 		_CATCH_IO_(_Ostr)

  00140	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00143	8b 01		 mov	 eax, DWORD PTR [ecx]
  00145	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00148	03 c1		 add	 eax, ecx
  0014a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0014d	33 d2		 xor	 edx, edx
  0014f	83 c9 04	 or	 ecx, 4
  00152	39 50 38	 cmp	 DWORD PTR [eax+56], edx
  00155	75 03		 jne	 SHORT $LN71@operator@7
  00157	83 c9 04	 or	 ecx, 4
$LN71@operator@7:
  0015a	83 e1 17	 and	 ecx, 23			; 00000017H
  0015d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00160	85 48 10	 test	 DWORD PTR [eax+16], ecx
  00163	75 11		 jne	 SHORT $LN80@operator@7
  00165	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edx
  00168	b8 00 00 00 00	 mov	 eax, $LN23@operator@7
  0016d	c3		 ret	 0
$LN23@operator@7:
  0016e	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00171	e9 77 ff ff ff	 jmp	 $LN22@operator@7
$LN80@operator@7:
  00176	52		 push	 edx
  00177	52		 push	 edx
  00178	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN144@operator@7:
$LN143@operator@7:
  0017d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
PUBLIC	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::numpunct<char> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T45270 = -32						; size = 12
__Lock$38508 = -20					; size = 4
__Psave$38509 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::numpunct<char> >, COMDAT

; 504  : 	{	// get facet reference from locale

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 505  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  0000c	6a 00		 push	 0
  0000e	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$38508[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 506  : 		const locale::facet *_Psave =
; 507  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00016	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 508  : 
; 509  : 		size_t _Id = _Facet::id;

  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
  00025	89 75 f0	 mov	 DWORD PTR __Psave$38509[ebp], esi
  00028	e8 00 00 00 00	 call	 ??Bid@locale@std@@QAEIXZ ; std::locale::id::operator unsigned int

; 510  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  00036	8b f8		 mov	 edi, eax

; 511  : 
; 512  : 		if (_Pf != 0)

  00038	85 ff		 test	 edi, edi
  0003a	75 4d		 jne	 SHORT $LN10@use_facet@3

; 513  : 			;	// got facet from locale
; 514  : 		else if (_Psave != 0)

  0003c	85 f6		 test	 esi, esi
  0003e	74 04		 je	 SHORT $LN4@use_facet@3

; 515  : 			_Pf = _Psave;	// lazy facet already allocated

  00040	8b fe		 mov	 edi, esi
  00042	eb 45		 jmp	 SHORT $LN10@use_facet@3
$LN4@use_facet@3:

; 516  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  00044	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  00047	8d 45 f0	 lea	 eax, DWORD PTR __Psave$38509[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
  00050	59		 pop	 ecx
  00051	59		 pop	 ecx
  00052	83 f8 ff	 cmp	 eax, -1
  00055	75 1b		 jne	 SHORT $LN2@use_facet@3

; 517  : 
; 518  :  #if _HAS_EXCEPTIONS
; 519  : 
; 520  : 			_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  00057	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  0005c	8d 4d e0	 lea	 ecx, DWORD PTR $T45270[ebp]
  0005f	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  00064	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  00069	8d 45 e0	 lea	 eax, DWORD PTR $T45270[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@use_facet@3:
$LN2@use_facet@3:

; 521  : 
; 522  :  #else /* _HAS_EXCEPTIONS */
; 523  : 			abort();	// lazy disallowed
; 524  :  #endif /* _HAS_EXCEPTIONS */
; 525  : 
; 526  : 		else
; 527  : 			{	// queue up lazy facet for destruction
; 528  : 			_Pf = _Psave;

  00072	8b 7d f0	 mov	 edi, DWORD PTR __Psave$38509[ebp]

; 529  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 530  : 
; 531  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 532  : 			_Pfmod->_Incref();

  00075	8b cf		 mov	 ecx, edi
  00077	89 3d 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B, edi ; std::_Facetptr<std::numpunct<char> >::_Psave
  0007d	e8 00 00 00 00	 call	 ?_Incref@facet@locale@std@@QAEXXZ ; std::locale::facet::_Incref

; 533  : 			_Pfmod->_Register();

  00082	57		 push	 edi
  00083	e8 00 00 00 00	 call	 ?_Facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::_Facet_Register
  00088	59		 pop	 ecx
$LN10@use_facet@3:

; 534  : 			}
; 535  : 
; 536  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00089	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$38508[ebp]
  00090	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00095	8b c7		 mov	 eax, edi

; 537  : 	_END_LOCK()
; 538  : 	}

  00097	e8 00 00 00 00	 call	 __EH_epilog3
  0009c	c3		 ret	 0
$LN13@use_facet@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$38508[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<char> >
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Ptr$ = 12						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1033 : 		{	// insert [_Ptr, <null>) at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1034 : 		_DEBUG_POINTER(_Ptr);
; 1035 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));

  00004	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 _strlen
  0000e	59		 pop	 ecx
  0000f	50		 push	 eax
  00010	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  00013	8b ce		 mov	 ecx, esi
  00015	ff 75 08	 push	 DWORD PTR __Off$[ebp]
  00018	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  0001d	5e		 pop	 esi

; 1036 : 		}

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	??$construct@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV21@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV21@@Z$0
__ehfuncinfo$??$construct@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV21@@Z
_TEXT	SEGMENT
$T45294 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV21@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV21@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T45294[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN3@construct:

; 209  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV21@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T45294[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV21@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV21@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV21@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
PUBLIC	??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z$0
__ehfuncinfo$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
_TEXT	SEGMENT
$T45313 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z PROC ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T45313[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN3@Construct:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T45313[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ENDP ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	6a 00		 push	 0
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 214  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy
_TEXT	ENDS
PUBLIC	?writeWithIndent@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledWriter::writeWithIndent
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
;	COMDAT ?writeWithIndent@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?writeWithIndent@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::StyledWriter::writeWithIndent, COMDAT
; _this$ = ecx

; 462  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 463  :    writeIndent();
; 464  :    document_ += value;

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR _value$[ebp]
  0000a	83 c1 14	 add	 ecx, 20			; 00000014H
  0000d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 465  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?writeWithIndent@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::StyledWriter::writeWithIndent
_TEXT	ENDS
PUBLIC	?writeIndent@StyledStreamWriter@Json@@AAEXXZ	; Json::StyledStreamWriter::writeIndent
; Function compile flags: /Ogsp
;	COMDAT ?writeIndent@StyledStreamWriter@Json@@AAEXXZ
_TEXT	SEGMENT
?writeIndent@StyledStreamWriter@Json@@AAEXXZ PROC	; Json::StyledStreamWriter::writeIndent, COMDAT
; _this$ = ecx

; 724  :   /*
; 725  :     Some comments in this method would have been nice. ;-)
; 726  : 
; 727  :    if ( !document_.empty() )
; 728  :    {
; 729  :       char last = document_[document_.length()-1];
; 730  :       if ( last == ' ' )     // already indented
; 731  :          return;
; 732  :       if ( last != '\n' )    // Comments may add new-line
; 733  :          *document_ << '\n';
; 734  :    }
; 735  :   */
; 736  : 	//*document_ << '\n' << indentString_;
; 737  : 	*document_ << indentString_;

  00000	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  00003	50		 push	 eax
  00004	ff 71 10	 push	 DWORD PTR [ecx+16]
  00007	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  0000c	59		 pop	 ecx
  0000d	59		 pop	 ecx

; 738  : }

  0000e	c3		 ret	 0
?writeIndent@StyledStreamWriter@Json@@AAEXXZ ENDP	; Json::StyledStreamWriter::writeIndent
_TEXT	ENDS
PUBLIC	?writeWithIndent@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::writeWithIndent
; Function compile flags: /Ogsp
;	COMDAT ?writeWithIndent@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?writeWithIndent@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::StyledStreamWriter::writeWithIndent, COMDAT
; _this$ = ecx

; 743  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 744  :    writeIndent();

  00006	e8 00 00 00 00	 call	 ?writeIndent@StyledStreamWriter@Json@@AAEXXZ ; Json::StyledStreamWriter::writeIndent

; 745  :    *document_ << value;

  0000b	ff 75 08	 push	 DWORD PTR _value$[ebp]
  0000e	ff 76 10	 push	 DWORD PTR [esi+16]
  00011	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00016	59		 pop	 ecx
  00017	59		 pop	 ecx
  00018	5e		 pop	 esi

; 746  : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?writeWithIndent@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::StyledStreamWriter::writeWithIndent
_TEXT	ENDS
PUBLIC	?indent@StyledStreamWriter@Json@@AAEXXZ		; Json::StyledStreamWriter::indent
; Function compile flags: /Ogsp
;	COMDAT ?indent@StyledStreamWriter@Json@@AAEXXZ
_TEXT	SEGMENT
?indent@StyledStreamWriter@Json@@AAEXXZ PROC		; Json::StyledStreamWriter::indent, COMDAT
; _this$ = ecx

; 752  :    indentString_ += indentation_;

  00000	6a ff		 push	 -1
  00002	8d 41 34	 lea	 eax, DWORD PTR [ecx+52]
  00005	6a 00		 push	 0
  00007	50		 push	 eax
  00008	83 c1 14	 add	 ecx, 20			; 00000014H
  0000b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 753  : }

  00010	c3		 ret	 0
?indent@StyledStreamWriter@Json@@AAEXXZ ENDP		; Json::StyledStreamWriter::indent
_TEXT	ENDS
PUBLIC	?unindent@StyledStreamWriter@Json@@AAEXXZ	; Json::StyledStreamWriter::unindent
; Function compile flags: /Ogsp
;	COMDAT ?unindent@StyledStreamWriter@Json@@AAEXXZ
_TEXT	SEGMENT
?unindent@StyledStreamWriter@Json@@AAEXXZ PROC		; Json::StyledStreamWriter::unindent, COMDAT
; _this$ = ecx

; 759  :    assert( indentString_.size() >= indentation_.size() );
; 760  :    indentString_.resize( indentString_.size() - indentation_.size() );

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	2b 41 44	 sub	 eax, DWORD PTR [ecx+68]
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	83 c1 14	 add	 ecx, 20			; 00000014H
  0000c	e8 00 00 00 00	 call	 ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

; 761  : }

  00011	c3		 ret	 0
?unindent@StyledStreamWriter@Json@@AAEXXZ ENDP		; Json::StyledStreamWriter::unindent
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 592  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 593  : 		_Tidy();
; 594  : 		assign(_Ptr);

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	e8 00 00 00 00	 call	 _strlen
  0001c	59		 pop	 ecx
  0001d	50		 push	 eax
  0001e	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 595  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 767  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 768  : 		return (assign(_Ptr));

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 _strlen
  0000e	59		 pop	 ecx
  0000f	50		 push	 eax
  00010	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0001a	5e		 pop	 esi

; 769  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$13 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$13
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
$T45528 = -48						; size = 8
$T45527 = -48						; size = 8
__Ok$ = -40						; size = 8
$T45546 = -32						; size = 1
$T45522 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 281  : 		{	// insert an int

  00000	6a 24		 push	 36			; 00000024H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 282  : 		ios_base::iostate _State = ios_base::goodbit;

  00011	33 db		 xor	 ebx, ebx

; 283  : 		const sentry _Ok(*this);

  00013	56		 push	 esi
  00014	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00017	89 5d e8	 mov	 DWORD PTR __State$[ebp], ebx
  0001a	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0001f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 284  : 
; 285  : 		if (_Ok)

  00022	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00025	74 66		 je	 SHORT $LN14@operator@8

; 286  : 			{	// state okay, use facet to insert
; 287  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00027	8d 45 e4	 lea	 eax, DWORD PTR $T45522[ebp]
  0002a	50		 push	 eax
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00030	03 ce		 add	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00037	50		 push	 eax
  00038	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0003c	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00041	59		 pop	 ecx
  00042	8d 4d e4	 lea	 ecx, DWORD PTR $T45522[ebp]
  00045	8b f8		 mov	 edi, eax
  00047	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 288  : 			ios_base::fmtflags _Bfl =
; 289  : 				ios_base::flags() & ios_base::basefield;

  0004c	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 290  : 			long _Tmp = (_Bfl == ios_base::oct
; 291  : 				|| _Bfl == ios_base::hex)
; 292  : 				? (long)(unsigned int)_Val : (long)_Val;
; 293  : 
; 294  : 			_TRY_IO_BEGIN
; 295  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 296  : 				_Myios::fill(), _Tmp).failed())

  0004e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00051	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00054	8a 54 31 40	 mov	 dl, BYTE PTR [ecx+esi+64]
  00058	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  0005b	8b 4c 31 38	 mov	 ecx, DWORD PTR [ecx+esi+56]
  0005f	88 55 e0	 mov	 BYTE PTR $T45546[ebp], dl
  00062	ff 75 e0	 push	 DWORD PTR $T45546[ebp]
  00065	8b 17		 mov	 edx, DWORD PTR [edi]
  00067	03 c6		 add	 eax, esi
  00069	50		 push	 eax
  0006a	51		 push	 ecx
  0006b	88 5d d0	 mov	 BYTE PTR $T45527[ebp], bl
  0006e	ff 75 d0	 push	 DWORD PTR $T45527[ebp]
  00071	8d 45 d0	 lea	 eax, DWORD PTR $T45528[ebp]
  00074	50		 push	 eax
  00075	8b cf		 mov	 ecx, edi
  00077	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0007b	ff 52 1c	 call	 DWORD PTR [edx+28]
  0007e	38 5d d0	 cmp	 BYTE PTR $T45528[ebp], bl
  00081	74 07		 je	 SHORT $LN1@operator@8

; 297  : 				_State |= ios_base::badbit;

  00083	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN1@operator@8:
  0008a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
$LN14@operator@8:

; 299  : 			}
; 300  : 
; 301  : 		_Myios::setstate(_State);

  0008d	8b 06		 mov	 eax, DWORD PTR [esi]
  0008f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00092	53		 push	 ebx
  00093	ff 75 e8	 push	 DWORD PTR __State$[ebp]
  00096	03 ce		 add	 ecx, esi
  00098	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 302  : 		return (*this);

  0009d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  000a1	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000a4	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000a9	8b c6		 mov	 eax, esi

; 303  : 		}

  000ab	e8 00 00 00 00	 call	 __EH_epilog3
  000b0	c2 04 00	 ret	 4
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0:

; 298  : 			_CATCH_IO_END

  000b3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000bb	03 c1		 add	 eax, ecx
  000bd	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000c0	33 db		 xor	 ebx, ebx
  000c2	83 c9 04	 or	 ecx, 4
  000c5	39 58 38	 cmp	 DWORD PTR [eax+56], ebx
  000c8	75 03		 jne	 SHORT $LN37@operator@8
  000ca	83 c9 04	 or	 ecx, 4
$LN37@operator@8:
  000cd	83 e1 17	 and	 ecx, 23			; 00000017H
  000d0	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000d3	85 48 10	 test	 DWORD PTR [eax+16], ecx
  000d6	75 10		 jne	 SHORT $LN46@operator@8
  000d8	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  000db	b8 00 00 00 00	 mov	 eax, $LN15@operator@8
  000e0	c3		 ret	 0
$LN15@operator@8:
  000e1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000e4	33 db		 xor	 ebx, ebx
  000e6	eb a5		 jmp	 SHORT $LN14@operator@8
$LN46@operator@8:
  000e8	53		 push	 ebx
  000e9	53		 push	 ebx
  000ea	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN100@operator@8:
$LN99@operator@8:
  000ef	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T45522[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 713  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 714  : 		if (this == &_Right)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	3b fe		 cmp	 edi, esi
  0000c	74 41		 je	 SHORT $LN43@assign@3

; 715  : 			;
; 716  : 		else if (get_allocator() != _Right.get_allocator()
; 717  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 718  : 			*this = _Right;
; 719  : 		else
; 720  : 			{	// not same, clear this and steal from _Right
; 721  : 			_Tidy(true);

  0000e	6a 00		 push	 0
  00010	6a 01		 push	 1
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 722  : 			if (_Right._Myres < this->_BUF_SIZE)

  00017	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0001b	73 11		 jae	 SHORT $LN2@assign@3

; 723  : 				_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 724  : 					_Right._Mysize + 1);

  0001d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00020	40		 inc	 eax
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	e8 00 00 00 00	 call	 _memmove
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 725  : 			else

  0002c	eb 07		 jmp	 SHORT $LN1@assign@3
$LN2@assign@3:

; 726  : 				{	// copy pointer
; 727  : 				this->_Bx._Ptr = _Right._Bx._Ptr;

  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	89 07		 mov	 DWORD PTR [edi], eax

; 728  : 				_Right._Bx._Ptr = 0;

  00032	83 26 00	 and	 DWORD PTR [esi], 0
$LN1@assign@3:

; 729  : 				}
; 730  : 			this->_Mysize = _Right._Mysize;

  00035	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00038	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 731  : 			this->_Myres = _Right._Myres;

  0003b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003e	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 732  : 
; 733  : 			_Right._Tidy();

  00041	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  00045	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0004c	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN43@assign@3:

; 734  : 			}
; 735  : 		return (*this);

  0004f	8b c7		 mov	 eax, edi
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi

; 736  : 		}

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
;	COMDAT ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0
__ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T45962 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 46   : 	explicit __CLR_OR_THIS_CALL basic_ostream(

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00011	33 c0		 xor	 eax, eax
  00013	89 45 f0	 mov	 DWORD PTR $T45962[ebp], eax
  00016	39 45 10	 cmp	 DWORD PTR _$initVBases$[ebp], eax
  00019	74 17		 je	 SHORT $LN1@basic_ostr
  0001b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
  00021	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  00028	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  0002b	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T45962[ebp], 1
$LN1@basic_ostr:
  00032	8b 06		 mov	 eax, DWORD PTR [esi]
  00034	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 47   : 		basic_streambuf<_Elem, _Traits> *_Strbuf,
; 48   : 
; 49   : 		bool _Isstd = false)
; 50   : 		{	// construct from a stream buffer pointer
; 51   : 		_Myios::init(_Strbuf, _Isstd);

  00037	ff 75 0c	 push	 DWORD PTR __Isstd$[ebp]
  0003a	c7 04 06 00 00
	00 00		 mov	 DWORD PTR [esi+eax], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00041	8b 06		 mov	 eax, DWORD PTR [esi]
  00043	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00046	ff 75 08	 push	 DWORD PTR __Strbuf$[ebp]
  00049	03 ce		 add	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init

; 52   : 		}

  00050	8b c6		 mov	 eax, esi
  00052	e8 00 00 00 00	 call	 __EH_epilog3
  00057	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T45962[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_ostr
  0000c	83 65 f0 fe	 and	 DWORD PTR $T45962[ebp], -2 ; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_ostr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00023	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
PUBLIC	__Fill$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	_this$GSCopy$
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$3
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
_TEXT	SEGMENT
$T45986 = -100						; size = 8
$T45983 = -96						; size = 4
$T45987 = -92						; size = 8
__Punct_fac$37180 = -88					; size = 4
___$ReturnUdt$GSCopy$ = -84				; size = 4
__Fill$GSCopy$ = -80					; size = 1
_this$GSCopy$ = -76					; size = 4
$T37246 = -72						; size = 28
$T37244 = -72						; size = 28
__Str$37187 = -44					; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 1
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1143 : 		{	// put formatted bool to _Dest

  00000	6a 58		 push	 88			; 00000058H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1144 : 		_DEBUG_POINTER(_Dest);
; 1145 : 		if (!(_Iosbase.flags() & ios_base::boolalpha))

  0000f	f7 46 14 00 40
	00 00		 test	 DWORD PTR [esi+20], 16384 ; 00004000H
  00016	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00019	8a 45 18	 mov	 al, BYTE PTR __Fill$[ebp]

; 1164 : 				}
; 1165 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  0001c	89 4d b4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001f	89 7d ac	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], edi
  00022	88 45 b0	 mov	 BYTE PTR __Fill$GSCopy$[ebp], al
  00025	75 1c		 jne	 SHORT $LN5@do_put

; 1146 : 			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));

  00027	0f b6 55 1c	 movzx	 edx, BYTE PTR __Val$[ebp]
  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	52		 push	 edx
  0002e	ff 75 b0	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00031	56		 push	 esi
  00032	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00035	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00038	57		 push	 edi
  00039	ff 50 1c	 call	 DWORD PTR [eax+28]
  0003c	8b c7		 mov	 eax, edi
  0003e	e9 10 01 00 00	 jmp	 $LN4@do_put
$LN5@do_put:

; 1147 : 		else
; 1148 : 			{	// put "false" or "true"
; 1149 : 			const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  00043	8d 45 a0	 lea	 eax, DWORD PTR $T45983[ebp]
  00046	50		 push	 eax
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  0004e	33 db		 xor	 ebx, ebx
  00050	50		 push	 eax
  00051	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00054	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  00059	59		 pop	 ecx
  0005a	8d 4d a0	 lea	 ecx, DWORD PTR $T45983[ebp]
  0005d	89 45 a8	 mov	 DWORD PTR __Punct_fac$37180[ebp], eax
  00060	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 1150 : 			_Mystr _Str;

  00065	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR __Str$37187[ebp+20], 15 ; 0000000fH
  0006c	89 5d e4	 mov	 DWORD PTR __Str$37187[ebp+16], ebx
  0006f	88 5d d4	 mov	 BYTE PTR __Str$37187[ebp], bl

; 1151 : 			if (_Val)
; 1152 : 				_Str.assign(_Punct_fac.truename());

  00072	8b 4d a8	 mov	 ecx, DWORD PTR __Punct_fac$37180[ebp]
  00075	33 ff		 xor	 edi, edi
  00077	47		 inc	 edi
  00078	8d 45 b8	 lea	 eax, DWORD PTR $T37244[ebp]
  0007b	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  0007e	50		 push	 eax
  0007f	38 5d 1c	 cmp	 BYTE PTR __Val$[ebp], bl
  00082	74 0b		 je	 SHORT $LN3@do_put
  00084	e8 00 00 00 00	 call	 ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
  00089	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 1153 : 			else

  0008d	eb 09		 jmp	 SHORT $LN79@do_put
$LN3@do_put:

; 1154 : 				_Str.assign(_Punct_fac.falsename());

  0008f	e8 00 00 00 00	 call	 ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
  00094	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
$LN79@do_put:
  00098	50		 push	 eax
  00099	8d 4d d4	 lea	 ecx, DWORD PTR __Str$37187[ebp]
  0009c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000a1	53		 push	 ebx
  000a2	57		 push	 edi
  000a3	8d 4d b8	 lea	 ecx, DWORD PTR $T37246[ebp]
  000a6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000aa	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1155 : 
; 1156 : 			size_t _Fillcount = _Iosbase.width() <= 0
; 1157 : 				|| (size_t)_Iosbase.width() <= _Str.size()
; 1158 : 					? 0 : (size_t)_Iosbase.width() - _Str.size();

  000af	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000b2	39 5e 24	 cmp	 DWORD PTR [esi+36], ebx
  000b5	7c 12		 jl	 SHORT $LN8@do_put
  000b7	7f 04		 jg	 SHORT $LN76@do_put
  000b9	3b c3		 cmp	 eax, ebx
  000bb	76 0c		 jbe	 SHORT $LN8@do_put
$LN76@do_put:
  000bd	3b 45 e4	 cmp	 eax, DWORD PTR __Str$37187[ebp+16]
  000c0	76 07		 jbe	 SHORT $LN8@do_put
  000c2	2b 45 e4	 sub	 eax, DWORD PTR __Str$37187[ebp+16]
  000c5	8b f8		 mov	 edi, eax
  000c7	eb 02		 jmp	 SHORT $LN9@do_put
$LN8@do_put:
  000c9	33 ff		 xor	 edi, edi
$LN9@do_put:

; 1159 : 
; 1160 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

  000cb	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000ce	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000d3	83 f8 40	 cmp	 eax, 64			; 00000040H
  000d6	74 26		 je	 SHORT $LN1@do_put

; 1161 : 				{	// put leading fill
; 1162 : 				_Dest = _Rep(_Dest, _Fill, _Fillcount);

  000d8	57		 push	 edi
  000d9	ff 75 b0	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  000dc	8d 45 9c	 lea	 eax, DWORD PTR $T45986[ebp]
  000df	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  000e2	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  000e5	50		 push	 eax
  000e6	ff 75 b4	 push	 DWORD PTR _this$GSCopy$[ebp]
  000e9	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  000ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f0	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  000f3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f6	83 c4 18	 add	 esp, 24			; 00000018H
  000f9	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax

; 1163 : 				_Fillcount = 0;

  000fc	33 ff		 xor	 edi, edi
$LN1@do_put:

; 1164 : 				}
; 1165 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  000fe	83 7d e8 10	 cmp	 DWORD PTR __Str$37187[ebp+20], 16 ; 00000010H
  00102	8b 45 d4	 mov	 eax, DWORD PTR __Str$37187[ebp]
  00105	73 03		 jae	 SHORT $LN69@do_put
  00107	8d 45 d4	 lea	 eax, DWORD PTR __Str$37187[ebp]
$LN69@do_put:
  0010a	ff 75 e4	 push	 DWORD PTR __Str$37187[ebp+16]
  0010d	50		 push	 eax
  0010e	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00111	8d 45 a4	 lea	 eax, DWORD PTR $T45987[ebp]
  00114	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00117	50		 push	 eax
  00118	ff 75 b4	 push	 DWORD PTR _this$GSCopy$[ebp]
  0011b	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00120	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1166 : 			_Iosbase.width(0);
; 1167 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00122	57		 push	 edi
  00123	ff 75 b0	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00126	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  00129	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0012c	50		 push	 eax
  0012d	51		 push	 ecx
  0012e	ff 75 ac	 push	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00131	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00134	ff 75 b4	 push	 DWORD PTR _this$GSCopy$[ebp]
  00137	89 5e 20	 mov	 DWORD PTR [esi+32], ebx
  0013a	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  0013d	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00142	83 c4 30	 add	 esp, 48			; 00000030H
  00145	53		 push	 ebx
  00146	6a 01		 push	 1
  00148	8d 4d d4	 lea	 ecx, DWORD PTR __Str$37187[ebp]
  0014b	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00150	8b 45 ac	 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
$LN4@do_put:

; 1168 : 			}
; 1169 : 		}

  00153	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00158	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0:
  00000	8d 4d a0	 lea	 ecx, DWORD PTR $T45983[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Str$37187[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$2:
  00010	8d 4d b8	 lea	 ecx, DWORD PTR $T37244[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$3:
  00018	8d 4d b8	 lea	 ecx, DWORD PTR $T37246[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	??_C@_01KGKMHCOC@e?$AA@				; `string'
PUBLIC	??_C@_01DDCIFGEA@E?$AA@				; `string'
PUBLIC	__Count$GSCopy$
PUBLIC	__Trailing$GSCopy$
PUBLIC	__Afterpoint$GSCopy$
PUBLIC	__Beforepoint$GSCopy$
PUBLIC	__Fill$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
EXTRN	_strcspn:PROC
;	COMDAT ??_C@_01KGKMHCOC@e?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_01KGKMHCOC@e?$AA@ DB 'e', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT
??_C@_01DDCIFGEA@E?$AA@ DB 'E', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$2
__ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -140				; size = 4
$T46407 = -136						; size = 8
$T46177 = -132						; size = 4
__Kseparator$ = -128					; size = 1
__Fill$GSCopy$ = -124					; size = 1
__Prefix$ = -120					; size = 4
$T46195 = -116						; size = 8
$T46186 = -116						; size = 8
$T46185 = -116						; size = 8
$T46184 = -116						; size = 8
$T46183 = -116						; size = 8
__Eptr$ = -112						; size = 4
$T46194 = -108						; size = 8
$T46193 = -108						; size = 8
$T46190 = -108						; size = 8
$T46189 = -108						; size = 8
$T46188 = -108						; size = 8
$T46390 = -104						; size = 1
__Punct_fac$ = -104					; size = 4
__Afterpoint$GSCopy$ = -100				; size = 4
__Enders$ = -96						; size = 3
__Beforepoint$GSCopy$ = -92				; size = 4
__Trailing$GSCopy$ = -88				; size = 4
_this$GSCopy$ = -84					; size = 4
__Count$GSCopy$ = -80					; size = 4
__Fillcount$ = -76					; size = 4
__Off$37572 = -76					; size = 4
__Pointptr$ = -76					; size = 4
__Grouping$ = -72					; size = 28
__Groupstring$ = -44					; size = 28
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Beforepoint$ = 36					; size = 4
__Afterpoint$ = 40					; size = 4
__Trailing$ = 44					; size = 4
__Count$ = 48						; size = 4
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput, COMDAT

; 1333 : 		{	// put formatted floating-point to _Dest

  00000	68 80 00 00 00	 push	 128			; 00000080H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 1445 : 		_Iosbase.width(0);
; 1446 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 7d 18	 mov	 edi, DWORD PTR __Iosbase$[ebp]
  00015	8b 75 20	 mov	 esi, DWORD PTR __Buf$[ebp]
  00018	89 45 ac	 mov	 DWORD PTR _this$GSCopy$[ebp], eax
  0001b	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	89 85 74 ff ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  00024	8a 45 1c	 mov	 al, BYTE PTR __Fill$[ebp]
  00027	88 45 84	 mov	 BYTE PTR __Fill$GSCopy$[ebp], al
  0002a	8b 45 24	 mov	 eax, DWORD PTR __Beforepoint$[ebp]
  0002d	89 45 a4	 mov	 DWORD PTR __Beforepoint$GSCopy$[ebp], eax
  00030	8b 45 28	 mov	 eax, DWORD PTR __Afterpoint$[ebp]
  00033	89 45 9c	 mov	 DWORD PTR __Afterpoint$GSCopy$[ebp], eax
  00036	8b 45 2c	 mov	 eax, DWORD PTR __Trailing$[ebp]
  00039	89 45 a8	 mov	 DWORD PTR __Trailing$GSCopy$[ebp], eax
  0003c	8b 45 30	 mov	 eax, DWORD PTR __Count$[ebp]
  0003f	89 45 b0	 mov	 DWORD PTR __Count$GSCopy$[ebp], eax
  00042	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR $T46177[ebp]
  00048	50		 push	 eax
  00049	8b cf		 mov	 ecx, edi
  0004b	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00050	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0005a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0005e	59		 pop	 ecx
  0005f	8b d8		 mov	 ebx, eax
  00061	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T46177[ebp]
  00067	89 5d 98	 mov	 DWORD PTR __Punct_fac$[ebp], ebx
  0006a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  0006f	8d 45 b8	 lea	 eax, DWORD PTR __Grouping$[ebp]
  00072	50		 push	 eax
  00073	8b cb		 mov	 ecx, ebx
  00075	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
  0007a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0007c	8b cb		 mov	 ecx, ebx
  0007e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00085	ff 50 08	 call	 DWORD PTR [eax+8]
  00088	33 db		 xor	 ebx, ebx
  0008a	88 45 80	 mov	 BYTE PTR __Kseparator$[ebp], al
  0008d	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH
  00094	89 5d e4	 mov	 DWORD PTR __Groupstring$[ebp+16], ebx
  00097	88 5d d4	 mov	 BYTE PTR __Groupstring$[ebp], bl
  0009a	8a 06		 mov	 al, BYTE PTR [esi]
  0009c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000a0	3c 2b		 cmp	 al, 43			; 0000002bH
  000a2	74 07		 je	 SHORT $LN19@Fput

; 1334 : 		_DEBUG_POINTER(_Dest);
; 1335 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);
; 1336 : 		const string _Grouping = _Punct_fac.grouping();
; 1337 : 		const _Elem _Kseparator = _Punct_fac.thousands_sep();
; 1338 : 		string _Groupstring;
; 1339 : 		const _Elem _E0 = _MAKLOCCHR(_Elem, '0', _Cvt);
; 1340 : 		size_t _Prefix = _Buf[0] == '+' || _Buf[0] == '-' ? 1 : 0;

  000a4	89 5d 88	 mov	 DWORD PTR __Prefix$[ebp], ebx
  000a7	3c 2d		 cmp	 al, 45			; 0000002dH
  000a9	75 07		 jne	 SHORT $LN20@Fput
$LN19@Fput:
  000ab	c7 45 88 01 00
	00 00		 mov	 DWORD PTR __Prefix$[ebp], 1
$LN20@Fput:

; 1341 : 
; 1342 : 		char _Enders[3];
; 1343 : 		_Enders[0] = _CSTD localeconv()->decimal_point[0];

  000b2	e8 00 00 00 00	 call	 _localeconv
  000b7	8b 00		 mov	 eax, DWORD PTR [eax]

; 1344 : 		_Enders[1] = 'e';
; 1345 : 		_Enders[2] = '\0';
; 1346 : 
; 1347 : 		const char *_Eptr = (const char *)_CSTD memchr(_Buf,
; 1348 : 			'e', _Count);	// find exponent

  000b9	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  000bc	8a 00		 mov	 al, BYTE PTR [eax]
  000be	6a 65		 push	 101			; 00000065H
  000c0	56		 push	 esi
  000c1	88 45 a0	 mov	 BYTE PTR __Enders$[ebp], al
  000c4	66 c7 45 a1 65
	00		 mov	 WORD PTR __Enders$[ebp+1], 101 ; 00000065H
  000ca	e8 00 00 00 00	 call	 _memchr

; 1349 : 		const char *_Pointptr = (const char *)_CSTD memchr(_Buf,
; 1350 : 			_Enders[0], _Count);	// find decimal point

  000cf	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  000d2	89 45 90	 mov	 DWORD PTR __Eptr$[ebp], eax
  000d5	0f be 45 a0	 movsx	 eax, BYTE PTR __Enders$[ebp]
  000d9	50		 push	 eax
  000da	56		 push	 esi
  000db	e8 00 00 00 00	 call	 _memchr
  000e0	83 c4 18	 add	 esp, 24			; 00000018H
  000e3	89 45 b4	 mov	 DWORD PTR __Pointptr$[ebp], eax

; 1351 : 		if (_Pointptr == 0)

  000e6	3b c3		 cmp	 eax, ebx
  000e8	75 03		 jne	 SHORT $LN16@Fput

; 1352 : 			_Trailing = 0;

  000ea	89 5d a8	 mov	 DWORD PTR __Trailing$GSCopy$[ebp], ebx
$LN16@Fput:

; 1353 : 
; 1354 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  000ed	83 7d cc 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  000f1	8b 45 b8	 mov	 eax, DWORD PTR __Grouping$[ebp]
  000f4	73 03		 jae	 SHORT $LN63@Fput
  000f6	8d 45 b8	 lea	 eax, DWORD PTR __Grouping$[ebp]
$LN63@Fput:
  000f9	80 38 7f	 cmp	 BYTE PTR [eax], 127	; 0000007fH
  000fc	0f 84 0b 01 00
	00		 je	 $LN88@Fput
  00102	83 7d cc 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  00106	8b 45 b8	 mov	 eax, DWORD PTR __Grouping$[ebp]
  00109	73 03		 jae	 SHORT $LN69@Fput
  0010b	8d 45 b8	 lea	 eax, DWORD PTR __Grouping$[ebp]
$LN69@Fput:
  0010e	80 38 00	 cmp	 BYTE PTR [eax], 0
  00111	0f 8e f6 00 00
	00		 jle	 $LN88@Fput

; 1355 : 			{	// grouping specified, add thousands separators
; 1356 : 			_Groupstring.append(_Buf, _Count);	// assemble field into string

  00117	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  0011a	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0011d	56		 push	 esi
  0011e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1357 : 			if (_Eptr == 0)

  00123	8b 45 90	 mov	 eax, DWORD PTR __Eptr$[ebp]
  00126	3b c3		 cmp	 eax, ebx
  00128	75 0f		 jne	 SHORT $LN14@Fput

; 1358 : 				_Groupstring.append(_Trailing, '0');

  0012a	6a 30		 push	 48			; 00000030H
  0012c	ff 75 a8	 push	 DWORD PTR __Trailing$GSCopy$[ebp]
  0012f	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00132	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1359 : 			else

  00137	eb 28		 jmp	 SHORT $LN13@Fput
$LN14@Fput:

; 1360 : 				{	/* dispose of any zeros before exponent */
; 1361 : 				if (_Pointptr == 0)

  00139	39 5d b4	 cmp	 DWORD PTR __Pointptr$[ebp], ebx
  0013c	75 13		 jne	 SHORT $LN12@Fput

; 1362 : 					{	/* no point but exponent, put scaling zeros */
; 1363 : 					_Groupstring.append(_Beforepoint, '0');

  0013e	6a 30		 push	 48			; 00000030H
  00140	ff 75 a4	 push	 DWORD PTR __Beforepoint$GSCopy$[ebp]
  00143	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00146	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1364 : 					_Beforepoint = 0;

  0014b	8b 45 90	 mov	 eax, DWORD PTR __Eptr$[ebp]
  0014e	89 5d a4	 mov	 DWORD PTR __Beforepoint$GSCopy$[ebp], ebx
$LN12@Fput:

; 1365 : 					}
; 1366 : 				_Groupstring.insert(_Eptr - _Buf, _Trailing, '0');

  00151	6a 30		 push	 48			; 00000030H
  00153	ff 75 a8	 push	 DWORD PTR __Trailing$GSCopy$[ebp]
  00156	2b c6		 sub	 eax, esi
  00158	50		 push	 eax
  00159	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0015c	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
$LN13@Fput:

; 1367 : 				}
; 1368 : 			_Trailing = 0;
; 1369 : 
; 1370 : 			if (_Pointptr == 0)
; 1371 : 				_Groupstring.append(_Beforepoint, '0');

  00161	6a 30		 push	 48			; 00000030H
  00163	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00166	39 5d b4	 cmp	 DWORD PTR __Pointptr$[ebp], ebx
  00169	75 0a		 jne	 SHORT $LN11@Fput
  0016b	ff 75 a4	 push	 DWORD PTR __Beforepoint$GSCopy$[ebp]
  0016e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1372 : 			else

  00173	eb 25		 jmp	 SHORT $LN10@Fput
$LN11@Fput:

; 1373 : 				{	// fill in zeros around decimal point
; 1374 : 				_Groupstring.insert(_Pointptr - _Buf + 1, _Afterpoint, '0');

  00175	8b 5d b4	 mov	 ebx, DWORD PTR __Pointptr$[ebp]
  00178	ff 75 9c	 push	 DWORD PTR __Afterpoint$GSCopy$[ebp]
  0017b	2b de		 sub	 ebx, esi
  0017d	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1375 : 				_Groupstring.insert(_Pointptr - _Buf, _Beforepoint, '0');

  00186	6a 30		 push	 48			; 00000030H
  00188	ff 75 a4	 push	 DWORD PTR __Beforepoint$GSCopy$[ebp]
  0018b	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0018e	53		 push	 ebx
  0018f	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1376 : 				_Afterpoint = 0;

  00194	83 65 9c 00	 and	 DWORD PTR __Afterpoint$GSCopy$[ebp], 0
  00198	33 db		 xor	 ebx, ebx
$LN10@Fput:

; 1377 : 				}
; 1378 : 			_Beforepoint = 0;
; 1379 : 
; 1380 : 			const char *_Pg = _Grouping.c_str();

  0019a	83 7d cc 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  0019e	8b 75 b8	 mov	 esi, DWORD PTR __Grouping$[ebp]
  001a1	89 5d a4	 mov	 DWORD PTR __Beforepoint$GSCopy$[ebp], ebx
  001a4	73 03		 jae	 SHORT $LN75@Fput
  001a6	8d 75 b8	 lea	 esi, DWORD PTR __Grouping$[ebp]
$LN75@Fput:

; 1381 : 			size_t _Off = _CSTD strcspn(&_Groupstring[0], &_Enders[0]);

  001a9	83 7d e8 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
  001ad	8b 45 d4	 mov	 eax, DWORD PTR __Groupstring$[ebp]
  001b0	73 03		 jae	 SHORT $LN81@Fput
  001b2	8d 45 d4	 lea	 eax, DWORD PTR __Groupstring$[ebp]
$LN81@Fput:
  001b5	8d 4d a0	 lea	 ecx, DWORD PTR __Enders$[ebp]
  001b8	51		 push	 ecx
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 _strcspn
  001bf	59		 pop	 ecx
  001c0	59		 pop	 ecx
  001c1	89 45 b4	 mov	 DWORD PTR __Off$37572[ebp], eax

; 1382 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1383 : 				&& (size_t)*_Pg < _Off - _Prefix)

  001c4	eb 2c		 jmp	 SHORT $LN7@Fput
$LN9@Fput:
  001c6	84 c0		 test	 al, al
  001c8	7e 2e		 jle	 SHORT $LN8@Fput
  001ca	8b 4d b4	 mov	 ecx, DWORD PTR __Off$37572[ebp]
  001cd	2b 4d 88	 sub	 ecx, DWORD PTR __Prefix$[ebp]
  001d0	0f be c0	 movsx	 eax, al
  001d3	3b c1		 cmp	 eax, ecx
  001d5	73 21		 jae	 SHORT $LN8@Fput

; 1384 : 				{	// add a NUL to mark thousands separator
; 1385 : 				_Groupstring.insert(_Off -= *_Pg, (size_t)1, '\0');

  001d7	29 45 b4	 sub	 DWORD PTR __Off$37572[ebp], eax
  001da	53		 push	 ebx
  001db	6a 01		 push	 1
  001dd	ff 75 b4	 push	 DWORD PTR __Off$37572[ebp]
  001e0	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  001e3	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1386 : 				if ('\0' < _Pg[1])

  001e8	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  001eb	80 38 00	 cmp	 BYTE PTR [eax], 0
  001ee	7e 02		 jle	 SHORT $LN7@Fput

; 1387 : 					++_Pg;	// not last group, advance

  001f0	8b f0		 mov	 esi, eax
$LN7@Fput:

; 1382 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1383 : 				&& (size_t)*_Pg < _Off - _Prefix)

  001f2	8a 06		 mov	 al, BYTE PTR [esi]
  001f4	3c 7f		 cmp	 al, 127			; 0000007fH
  001f6	75 ce		 jne	 SHORT $LN9@Fput
$LN8@Fput:

; 1388 : 				}
; 1389 : 
; 1390 : 			_Buf = &_Groupstring[0];

  001f8	83 7d e8 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
  001fc	8b 75 d4	 mov	 esi, DWORD PTR __Groupstring$[ebp]
  001ff	73 03		 jae	 SHORT $LN87@Fput
  00201	8d 75 d4	 lea	 esi, DWORD PTR __Groupstring$[ebp]
$LN87@Fput:

; 1391 : 			_Trailing = 0;
; 1392 : 			_Count = _Groupstring.size();

  00204	8b 45 e4	 mov	 eax, DWORD PTR __Groupstring$[ebp+16]
  00207	89 5d a8	 mov	 DWORD PTR __Trailing$GSCopy$[ebp], ebx
  0020a	89 45 b0	 mov	 DWORD PTR __Count$GSCopy$[ebp], eax
$LN88@Fput:

; 1393 : 			}
; 1394 : 
; 1395 : 		size_t _Fillcount = _Beforepoint + _Afterpoint + _Trailing + _Count;

  0020d	8b 45 a8	 mov	 eax, DWORD PTR __Trailing$GSCopy$[ebp]
  00210	03 45 b0	 add	 eax, DWORD PTR __Count$GSCopy$[ebp]

; 1396 : 		_Fillcount = _Iosbase.width() <= 0
; 1397 : 			|| (size_t)_Iosbase.width() <= _Fillcount
; 1398 : 				? 0 : (size_t)_Iosbase.width() - _Fillcount;

  00213	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  00216	03 45 9c	 add	 eax, DWORD PTR __Afterpoint$GSCopy$[ebp]
  00219	03 45 a4	 add	 eax, DWORD PTR __Beforepoint$GSCopy$[ebp]
  0021c	39 5f 24	 cmp	 DWORD PTR [edi+36], ebx
  0021f	7c 11		 jl	 SHORT $LN21@Fput
  00221	7f 04		 jg	 SHORT $LN125@Fput
  00223	3b cb		 cmp	 ecx, ebx
  00225	76 0b		 jbe	 SHORT $LN21@Fput
$LN125@Fput:
  00227	3b c8		 cmp	 ecx, eax
  00229	76 07		 jbe	 SHORT $LN21@Fput
  0022b	2b c8		 sub	 ecx, eax
  0022d	89 4d b4	 mov	 DWORD PTR __Fillcount$[ebp], ecx
  00230	eb 03		 jmp	 SHORT $LN22@Fput
$LN21@Fput:
  00232	89 5d b4	 mov	 DWORD PTR __Fillcount$[ebp], ebx
$LN22@Fput:

; 1399 : 		ios_base::fmtflags _Adjustfield =
; 1400 : 			_Iosbase.flags() & ios_base::adjustfield;

  00235	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00238	25 c0 01 00 00	 and	 eax, 448		; 000001c0H

; 1401 : 		if (_Adjustfield != ios_base::left
; 1402 : 			&& _Adjustfield != ios_base::internal)

  0023d	83 f8 40	 cmp	 eax, 64			; 00000040H
  00240	74 5c		 je	 SHORT $LN4@Fput
  00242	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H

; 1403 : 			{	// put leading fill
; 1404 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);
; 1405 : 			_Fillcount = 0;

  00247	75 2c		 jne	 SHORT $LN3@Fput

; 1406 : 			}
; 1407 : 		else if (_Adjustfield == ios_base::internal)
; 1408 : 			{	// put internal fill
; 1409 : 			if (0 < _Prefix)

  00249	39 5d 88	 cmp	 DWORD PTR __Prefix$[ebp], ebx
  0024c	76 27		 jbe	 SHORT $LN3@Fput

; 1410 : 				{	// but first put sign
; 1411 : 				_Dest = _Putc(_Dest, _Buf, 1);

  0024e	6a 01		 push	 1
  00250	56		 push	 esi
  00251	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00254	8d 45 8c	 lea	 eax, DWORD PTR $T46183[ebp]
  00257	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0025a	50		 push	 eax
  0025b	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  0025e	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  00263	8b 08		 mov	 ecx, DWORD PTR [eax]
  00265	83 c4 18	 add	 esp, 24			; 00000018H
  00268	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  0026b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1412 : 				++_Buf, --_Count;

  0026e	46		 inc	 esi
  0026f	ff 4d b0	 dec	 DWORD PTR __Count$GSCopy$[ebp]
  00272	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
$LN3@Fput:

; 1413 : 				}
; 1414 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00275	ff 75 b4	 push	 DWORD PTR __Fillcount$[ebp]
  00278	8d 45 8c	 lea	 eax, DWORD PTR $T46184[ebp]
  0027b	ff 75 84	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  0027e	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00281	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00284	50		 push	 eax
  00285	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  00288	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0028d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0028f	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00292	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1415 : 			_Fillcount = 0;

  00295	89 5d b4	 mov	 DWORD PTR __Fillcount$[ebp], ebx
  00298	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  0029b	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@Fput:

; 1416 : 			}
; 1417 : 
; 1418 : 		_Pointptr = (const char *)_CSTD memchr(_Buf,
; 1419 : 			_Enders[0], _Count);	// find decimal point again

  0029e	0f be 45 a0	 movsx	 eax, BYTE PTR __Enders$[ebp]
  002a2	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  002a5	50		 push	 eax
  002a6	56		 push	 esi
  002a7	e8 00 00 00 00	 call	 _memchr
  002ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1420 : 		if (_Pointptr != 0)

  002af	3b c3		 cmp	 eax, ebx
  002b1	0f 84 b3 00 00
	00		 je	 $LN2@Fput

; 1421 : 			{	// has decimal point, put pieces and zero fills
; 1422 : 			size_t _Fracoffset = _Pointptr - _Buf + 1;
; 1423 : 			_Dest = _Putgrouped(_Dest, _Buf, _Fracoffset - 1, _Kseparator);

  002b7	ff 75 80	 push	 DWORD PTR __Kseparator$[ebp]
  002ba	2b c6		 sub	 eax, esi
  002bc	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
  002bf	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  002c2	50		 push	 eax
  002c3	56		 push	 esi
  002c4	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  002c7	8d 45 8c	 lea	 eax, DWORD PTR $T46185[ebp]
  002ca	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  002cd	50		 push	 eax
  002ce	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  002d1	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  002d6	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1424 : 			_Dest = _Rep(_Dest, _E0, _Beforepoint);

  002d8	ff 75 a4	 push	 DWORD PTR __Beforepoint$GSCopy$[ebp]
  002db	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  002de	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002e1	6a 30		 push	 48			; 00000030H
  002e3	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  002e6	ff 70 04	 push	 DWORD PTR [eax+4]
  002e9	ff 30		 push	 DWORD PTR [eax]
  002eb	8d 45 8c	 lea	 eax, DWORD PTR $T46186[ebp]
  002ee	50		 push	 eax
  002ef	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  002f2	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  002f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f9	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  002fc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1425 : 			_Dest = _Rep(_Dest, _Punct_fac.decimal_point(), 1);

  002ff	8b 4d 98	 mov	 ecx, DWORD PTR __Punct_fac$[ebp]
  00302	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00305	8b 01		 mov	 eax, DWORD PTR [ecx]
  00307	83 c4 34	 add	 esp, 52			; 00000034H
  0030a	ff 50 04	 call	 DWORD PTR [eax+4]
  0030d	88 45 98	 mov	 BYTE PTR $T46390[ebp], al
  00310	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00313	ff 75 98	 push	 DWORD PTR $T46390[ebp]
  00316	89 85 78 ff ff
	ff		 mov	 DWORD PTR $T46407[ebp], eax
  0031c	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  0031f	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T46407[ebp]
  00325	89 85 7c ff ff
	ff		 mov	 DWORD PTR $T46407[ebp+4], eax
  0032b	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=

; 1426 : 			_Dest = _Rep(_Dest, _E0, _Afterpoint);

  00330	ff 75 9c	 push	 DWORD PTR __Afterpoint$GSCopy$[ebp]
  00333	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR $T46407[ebp+4]
  00339	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR $T46407[ebp]
  0033f	6a 30		 push	 48			; 00000030H
  00341	51		 push	 ecx
  00342	50		 push	 eax
  00343	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00346	8d 45 94	 lea	 eax, DWORD PTR $T46188[ebp]
  00349	50		 push	 eax
  0034a	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  0034d	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  00350	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00355	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1427 : 			_Buf += _Fracoffset, _Count -= _Fracoffset;

  00357	29 5d b0	 sub	 DWORD PTR __Count$GSCopy$[ebp], ebx
  0035a	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  0035d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00360	83 c4 18	 add	 esp, 24			; 00000018H
  00363	03 f3		 add	 esi, ebx
  00365	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00368	33 db		 xor	 ebx, ebx
$LN2@Fput:

; 1428 : 			}
; 1429 : 
; 1430 : 		_Eptr = (const char *)_CSTD memchr(_Buf,
; 1431 : 			'e', _Count);	// find exponent again

  0036a	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  0036d	6a 65		 push	 101			; 00000065H
  0036f	56		 push	 esi
  00370	e8 00 00 00 00	 call	 _memchr
  00375	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1432 : 		if (_Eptr != 0)

  00378	3b c3		 cmp	 eax, ebx
  0037a	0f 84 8b 00 00
	00		 je	 $LN1@Fput

; 1433 : 			{	// has exponent field, put it out
; 1434 : 			size_t _Expoffset = _Eptr - _Buf + 1;
; 1435 : 			_Dest = _Putgrouped(_Dest, _Buf, _Expoffset - 1, _Kseparator);

  00380	ff 75 80	 push	 DWORD PTR __Kseparator$[ebp]
  00383	2b c6		 sub	 eax, esi
  00385	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
  00388	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  0038b	50		 push	 eax
  0038c	56		 push	 esi
  0038d	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00390	8d 45 94	 lea	 eax, DWORD PTR $T46189[ebp]
  00393	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00396	50		 push	 eax
  00397	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  0039a	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  0039f	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1436 : 			_Dest = _Rep(_Dest, _E0, _Trailing), _Trailing = 0;

  003a1	ff 75 a8	 push	 DWORD PTR __Trailing$GSCopy$[ebp]
  003a4	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  003a7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003aa	6a 30		 push	 48			; 00000030H
  003ac	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  003af	ff 70 04	 push	 DWORD PTR [eax+4]
  003b2	ff 30		 push	 DWORD PTR [eax]
  003b4	8d 45 94	 lea	 eax, DWORD PTR $T46190[ebp]
  003b7	50		 push	 eax
  003b8	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  003bb	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  003c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c2	83 65 a8 00	 and	 DWORD PTR __Trailing$GSCopy$[ebp], 0
  003c6	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  003c9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003cc	83 c4 34	 add	 esp, 52			; 00000034H

; 1437 : 			_Dest = _Putc(_Dest, _Iosbase.flags() & ios_base::uppercase
; 1438 : 				? "E" : "e", 1);

  003cf	f6 47 14 04	 test	 BYTE PTR [edi+20], 4
  003d3	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  003d6	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01DDCIFGEA@E?$AA@
  003db	75 05		 jne	 SHORT $LN24@Fput
  003dd	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01KGKMHCOC@e?$AA@
$LN24@Fput:
  003e2	6a 01		 push	 1
  003e4	51		 push	 ecx
  003e5	ff 70 04	 push	 DWORD PTR [eax+4]
  003e8	ff 30		 push	 DWORD PTR [eax]
  003ea	8d 45 94	 lea	 eax, DWORD PTR $T46193[ebp]
  003ed	50		 push	 eax
  003ee	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  003f1	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  003f6	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1439 : 			_Buf += _Expoffset, _Count -= _Expoffset;

  003f8	29 5d b0	 sub	 DWORD PTR __Count$GSCopy$[ebp], ebx
  003fb	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  003fe	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00401	83 c4 18	 add	 esp, 24			; 00000018H
  00404	03 f3		 add	 esi, ebx
  00406	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00409	33 db		 xor	 ebx, ebx
$LN1@Fput:

; 1440 : 			}
; 1441 : 
; 1442 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1443 : 			_Kseparator);	// put leftover field

  0040b	ff 75 80	 push	 DWORD PTR __Kseparator$[ebp]
  0040e	8d 45 94	 lea	 eax, DWORD PTR $T46194[ebp]
  00411	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  00414	56		 push	 esi
  00415	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00418	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0041b	50		 push	 eax
  0041c	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  0041f	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  00424	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1444 : 		_Dest = _Rep(_Dest, _E0, _Trailing);	// put trailing zeros

  00426	ff 75 a8	 push	 DWORD PTR __Trailing$GSCopy$[ebp]
  00429	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  0042c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0042f	6a 30		 push	 48			; 00000030H
  00431	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  00434	ff 70 04	 push	 DWORD PTR [eax+4]
  00437	ff 30		 push	 DWORD PTR [eax]
  00439	8d 45 8c	 lea	 eax, DWORD PTR $T46195[ebp]
  0043c	50		 push	 eax
  0043d	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  00440	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00445	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1445 : 		_Iosbase.width(0);
; 1446 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00447	ff 75 b4	 push	 DWORD PTR __Fillcount$[ebp]
  0044a	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  0044d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00450	ff 75 84	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00453	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00456	50		 push	 eax
  00457	51		 push	 ecx
  00458	ff b5 74 ff ff
	ff		 push	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0045e	89 5f 20	 mov	 DWORD PTR [edi+32], ebx
  00461	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  00464	89 5f 24	 mov	 DWORD PTR [edi+36], ebx
  00467	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0046c	83 c4 4c	 add	 esp, 76			; 0000004cH
  0046f	53		 push	 ebx
  00470	6a 01		 push	 1
  00472	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00475	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0047a	53		 push	 ebx
  0047b	6a 01		 push	 1
  0047d	8d 4d b8	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  00480	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00485	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]

; 1447 : 		}

  0048b	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00490	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$0:
  00000	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T46177[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$1:
  0000b	8d 4d b8	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$2:
  00013	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 8a 70 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-144]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
PUBLIC	__Count$GSCopy$
PUBLIC	__Fill$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
EXTRN	_memmove_s:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1
__ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
_TEXT	SEGMENT
$T46464 = -88						; size = 4
__Punct_fac$ = -84					; size = 4
___$ReturnUdt$GSCopy$ = -80				; size = 4
$T46475 = -76						; size = 8
__Pg$37626 = -72					; size = 4
$T46474 = -68						; size = 8
$T46472 = -68						; size = 8
tv379 = -64						; size = 4
$T46539 = -64						; size = 1
__Fill$GSCopy$ = -60					; size = 1
_this$GSCopy$ = -56					; size = 4
__Prefix$ = -52						; size = 4
__Count$GSCopy$ = -48					; size = 4
__Grouping$ = -44					; size = 28
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput, COMDAT

; 1479 : 		{	// put formatted integer to _Dest

  00000	6a 4c		 push	 76			; 0000004cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 1527 : 		_Iosbase.width(0);
; 1528 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0000c	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 5d 18	 mov	 ebx, DWORD PTR __Iosbase$[ebp]
  00012	8b 7d 24	 mov	 edi, DWORD PTR __Count$[ebp]
  00015	8b 75 20	 mov	 esi, DWORD PTR __Buf$[ebp]
  00018	89 45 c8	 mov	 DWORD PTR _this$GSCopy$[ebp], eax
  0001b	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	89 45 b0	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  00021	8a 45 1c	 mov	 al, BYTE PTR __Fill$[ebp]
  00024	88 45 c4	 mov	 BYTE PTR __Fill$GSCopy$[ebp], al
  00027	8d 45 a8	 lea	 eax, DWORD PTR $T46464[ebp]
  0002a	50		 push	 eax
  0002b	8b cb		 mov	 ecx, ebx
  0002d	89 7d d0	 mov	 DWORD PTR __Count$GSCopy$[ebp], edi
  00030	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00035	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0003f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00043	59		 pop	 ecx
  00044	8d 4d a8	 lea	 ecx, DWORD PTR $T46464[ebp]
  00047	89 45 ac	 mov	 DWORD PTR __Punct_fac$[ebp], eax
  0004a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  0004f	8b 4d ac	 mov	 ecx, DWORD PTR __Punct_fac$[ebp]
  00052	8d 45 d4	 lea	 eax, DWORD PTR __Grouping$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
  0005b	8a 06		 mov	 al, BYTE PTR [esi]
  0005d	33 c9		 xor	 ecx, ecx
  0005f	41		 inc	 ecx
  00060	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ecx
  00063	3c 2b		 cmp	 al, 43			; 0000002bH
  00065	74 22		 je	 SHORT $LN10@Iput

; 1480 : 		_DEBUG_POINTER(_Dest);
; 1481 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);
; 1482 : 		const string _Grouping = _Punct_fac.grouping();
; 1483 : 		const size_t _Prefix = *_Buf == '+' || *_Buf == '-' ? 1
; 1484 : 			: *_Buf == '0' && (_Buf[1] == 'x' || _Buf[1] == 'X') ? 2
; 1485 : 			: 0;

  00067	3c 2d		 cmp	 al, 45			; 0000002dH
  00069	74 1e		 je	 SHORT $LN10@Iput
  0006b	3c 30		 cmp	 al, 48			; 00000030H
  0006d	75 14		 jne	 SHORT $LN12@Iput
  0006f	8a 46 01	 mov	 al, BYTE PTR [esi+1]
  00072	3c 78		 cmp	 al, 120			; 00000078H
  00074	74 04		 je	 SHORT $LN11@Iput
  00076	3c 58		 cmp	 al, 88			; 00000058H
  00078	75 09		 jne	 SHORT $LN12@Iput
$LN11@Iput:
  0007a	c7 45 cc 02 00
	00 00		 mov	 DWORD PTR __Prefix$[ebp], 2
  00081	eb 09		 jmp	 SHORT $LN14@Iput
$LN12@Iput:
  00083	83 65 cc 00	 and	 DWORD PTR __Prefix$[ebp], 0
  00087	eb 03		 jmp	 SHORT $LN14@Iput
$LN10@Iput:
  00089	89 4d cc	 mov	 DWORD PTR __Prefix$[ebp], ecx
$LN14@Iput:

; 1486 : 
; 1487 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  0008c	83 7d e8 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  00090	8b 4d d4	 mov	 ecx, DWORD PTR __Grouping$[ebp]
  00093	8b c1		 mov	 eax, ecx
  00095	73 03		 jae	 SHORT $LN24@Iput
  00097	8d 45 d4	 lea	 eax, DWORD PTR __Grouping$[ebp]
$LN24@Iput:
  0009a	80 38 7f	 cmp	 BYTE PTR [eax], 127	; 0000007fH
  0009d	74 6c		 je	 SHORT $LN5@Iput
  0009f	83 7d e8 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  000a3	8b c1		 mov	 eax, ecx
  000a5	73 03		 jae	 SHORT $LN30@Iput
  000a7	8d 45 d4	 lea	 eax, DWORD PTR __Grouping$[ebp]
$LN30@Iput:
  000aa	80 38 00	 cmp	 BYTE PTR [eax], 0
  000ad	7e 5c		 jle	 SHORT $LN5@Iput

; 1488 : 			{	// grouping specified, add thousands separators
; 1489 : 			const char *_Pg = _Grouping.c_str();

  000af	83 7d e8 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  000b3	72 05		 jb	 SHORT $LN35@Iput
  000b5	89 4d b8	 mov	 DWORD PTR __Pg$37626[ebp], ecx
  000b8	eb 48		 jmp	 SHORT $LN4@Iput
$LN35@Iput:
  000ba	8d 45 d4	 lea	 eax, DWORD PTR __Grouping$[ebp]

; 1490 : 			size_t _Off = _Count;
; 1491 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1492 : 				&& (size_t)*_Pg < _Off - _Prefix)

  000bd	eb 40		 jmp	 SHORT $LN59@Iput
$LL6@Iput:
  000bf	84 c0		 test	 al, al
  000c1	7e 48		 jle	 SHORT $LN5@Iput
  000c3	8b cf		 mov	 ecx, edi
  000c5	2b 4d cc	 sub	 ecx, DWORD PTR __Prefix$[ebp]
  000c8	0f be c0	 movsx	 eax, al
  000cb	3b c1		 cmp	 eax, ecx
  000cd	73 3c		 jae	 SHORT $LN5@Iput

; 1493 : 				{	// add a NUL to mark thousands separator
; 1494 : 				_Off -= *_Pg;

  000cf	2b f8		 sub	 edi, eax

; 1495 : 
; 1496 : 				__analysis_assume(_Count + 1 > _Off);
; 1497 : 				_CRT_SECURE_MEMMOVE(&_Buf[_Off + 1], _Count + 1 - _Off,

  000d1	8b 45 d0	 mov	 eax, DWORD PTR __Count$GSCopy$[ebp]
  000d4	2b c7		 sub	 eax, edi
  000d6	40		 inc	 eax
  000d7	50		 push	 eax
  000d8	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
  000db	51		 push	 ecx
  000dc	50		 push	 eax
  000dd	8d 44 3e 01	 lea	 eax, DWORD PTR [esi+edi+1]
  000e1	50		 push	 eax
  000e2	89 4d c0	 mov	 DWORD PTR tv379[ebp], ecx
  000e5	e8 00 00 00 00	 call	 _memmove_s

; 1498 : 					&_Buf[_Off], _Count + 1 - _Off);
; 1499 : 
; 1500 : 				_Buf[_Off] = '\0', ++_Count;

  000ea	8b 45 c0	 mov	 eax, DWORD PTR tv379[ebp]
  000ed	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1501 : 				if ('\0' < _Pg[1])

  000f0	8b 45 b8	 mov	 eax, DWORD PTR __Pg$37626[ebp]
  000f3	83 c4 10	 add	 esp, 16			; 00000010H
  000f6	ff 45 d0	 inc	 DWORD PTR __Count$GSCopy$[ebp]
  000f9	40		 inc	 eax
  000fa	80 38 00	 cmp	 BYTE PTR [eax], 0
  000fd	7e 03		 jle	 SHORT $LN4@Iput
$LN59@Iput:

; 1502 : 					++_Pg;	// not last group, advance

  000ff	89 45 b8	 mov	 DWORD PTR __Pg$37626[ebp], eax
$LN4@Iput:

; 1490 : 			size_t _Off = _Count;
; 1491 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1492 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00102	8b 45 b8	 mov	 eax, DWORD PTR __Pg$37626[ebp]
  00105	8a 00		 mov	 al, BYTE PTR [eax]
  00107	3c 7f		 cmp	 al, 127			; 0000007fH
  00109	75 b4		 jne	 SHORT $LL6@Iput
$LN5@Iput:

; 1503 : 				}
; 1504 : 			}
; 1505 : 
; 1506 : 		size_t _Fillcount = _Iosbase.width() <= 0
; 1507 : 			|| (size_t)_Iosbase.width() <= _Count
; 1508 : 				? 0 : (size_t)_Iosbase.width() - _Count;

  0010b	83 7b 24 00	 cmp	 DWORD PTR [ebx+36], 0
  0010f	8b 7b 20	 mov	 edi, DWORD PTR [ebx+32]
  00112	7c 10		 jl	 SHORT $LN15@Iput
  00114	7f 04		 jg	 SHORT $LN55@Iput
  00116	85 ff		 test	 edi, edi
  00118	74 0a		 je	 SHORT $LN15@Iput
$LN55@Iput:
  0011a	3b 7d d0	 cmp	 edi, DWORD PTR __Count$GSCopy$[ebp]
  0011d	76 05		 jbe	 SHORT $LN15@Iput
  0011f	2b 7d d0	 sub	 edi, DWORD PTR __Count$GSCopy$[ebp]
  00122	eb 02		 jmp	 SHORT $LN16@Iput
$LN15@Iput:
  00124	33 ff		 xor	 edi, edi
$LN16@Iput:

; 1509 : 
; 1510 : 		ios_base::fmtflags _Adjustfield =
; 1511 : 			_Iosbase.flags() & ios_base::adjustfield;

  00126	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00129	25 c0 01 00 00	 and	 eax, 448		; 000001c0H

; 1512 : 		if (_Adjustfield != ios_base::left
; 1513 : 			&& _Adjustfield != ios_base::internal)

  0012e	83 f8 40	 cmp	 eax, 64			; 00000040H
  00131	74 6e		 je	 SHORT $LN1@Iput
  00133	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H

; 1514 : 			{	// put leading fill
; 1515 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00138	8d 45 bc	 lea	 eax, DWORD PTR $T46472[ebp]
  0013b	74 18		 je	 SHORT $LN54@Iput
  0013d	57		 push	 edi
  0013e	ff 75 c4	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00141	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00144	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00147	50		 push	 eax
  00148	ff 75 c8	 push	 DWORD PTR _this$GSCopy$[ebp]
  0014b	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00150	83 c4 18	 add	 esp, 24			; 00000018H

; 1516 : 			_Fillcount = 0;

  00153	eb 3f		 jmp	 SHORT $LN60@Iput
$LN54@Iput:

; 1517 : 			}
; 1518 : 		else if (_Adjustfield == ios_base::internal)
; 1519 : 			{	// put internal fill
; 1520 : 			_Dest = _Putc(_Dest, _Buf, _Prefix);	// put prefix

  00155	ff 75 cc	 push	 DWORD PTR __Prefix$[ebp]
  00158	56		 push	 esi
  00159	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  0015c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0015f	50		 push	 eax
  00160	ff 75 c8	 push	 DWORD PTR _this$GSCopy$[ebp]
  00163	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  00168	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1521 : 			_Buf += _Prefix, _Count -= _Prefix;

  0016a	03 75 cc	 add	 esi, DWORD PTR __Prefix$[ebp]

; 1522 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount), _Fillcount = 0;

  0016d	57		 push	 edi
  0016e	ff 75 c4	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00171	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00174	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00177	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  0017a	ff 70 04	 push	 DWORD PTR [eax+4]
  0017d	8b 4d cc	 mov	 ecx, DWORD PTR __Prefix$[ebp]
  00180	ff 30		 push	 DWORD PTR [eax]
  00182	29 4d d0	 sub	 DWORD PTR __Count$GSCopy$[ebp], ecx
  00185	8d 45 bc	 lea	 eax, DWORD PTR $T46474[ebp]
  00188	50		 push	 eax
  00189	ff 75 c8	 push	 DWORD PTR _this$GSCopy$[ebp]
  0018c	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00191	83 c4 30	 add	 esp, 48			; 00000030H
$LN60@Iput:
  00194	8b 08		 mov	 ecx, DWORD PTR [eax]
  00196	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00199	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019c	33 ff		 xor	 edi, edi
  0019e	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
$LN1@Iput:

; 1523 : 			}
; 1524 : 
; 1525 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1526 : 			_Punct_fac.thousands_sep());	// put field

  001a1	8b 4d ac	 mov	 ecx, DWORD PTR __Punct_fac$[ebp]
  001a4	8b 01		 mov	 eax, DWORD PTR [ecx]
  001a6	ff 50 08	 call	 DWORD PTR [eax+8]
  001a9	88 45 c0	 mov	 BYTE PTR $T46539[ebp], al
  001ac	ff 75 c0	 push	 DWORD PTR $T46539[ebp]
  001af	8d 45 b4	 lea	 eax, DWORD PTR $T46475[ebp]
  001b2	ff 75 d0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  001b5	56		 push	 esi
  001b6	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  001b9	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  001bc	50		 push	 eax
  001bd	ff 75 c8	 push	 DWORD PTR _this$GSCopy$[ebp]
  001c0	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  001c5	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1527 : 		_Iosbase.width(0);
; 1528 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  001c7	57		 push	 edi
  001c8	ff 75 c4	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  001cb	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  001ce	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001d1	50		 push	 eax
  001d2	51		 push	 ecx
  001d3	ff 75 b0	 push	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  001d6	33 f6		 xor	 esi, esi
  001d8	ff 75 c8	 push	 DWORD PTR _this$GSCopy$[ebp]
  001db	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  001de	89 73 20	 mov	 DWORD PTR [ebx+32], esi
  001e1	89 73 24	 mov	 DWORD PTR [ebx+36], esi
  001e4	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  001e9	83 c4 34	 add	 esp, 52			; 00000034H
  001ec	56		 push	 esi
  001ed	6a 01		 push	 1
  001ef	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  001f2	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  001f7	8b 45 b0	 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]

; 1529 : 		}

  001fa	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001ff	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR $T46464[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
; Function compile flags: /Ogsp
;	COMDAT ?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T46574 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_grouping, COMDAT
; _this$ = ecx

; 173  : 		{	// return grouping string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 174  : 		return (string(_Grouping));

  00004	ff 71 08	 push	 DWORD PTR [ecx+8]
  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	83 65 fc 00	 and	 DWORD PTR $T46574[ebp], 0
  0000e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 175  : 		}

  00016	c9		 leave
  00017	c2 04 00	 ret	 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_grouping
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T46579 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_falsename, COMDAT
; _this$ = ecx

; 178  : 		{	// return name for false

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 179  : 		return (string_type(_Falsename));

  00004	ff 71 10	 push	 DWORD PTR [ecx+16]
  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	83 65 fc 00	 and	 DWORD PTR $T46579[ebp], 0
  0000e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 180  : 		}

  00016	c9		 leave
  00017	c2 04 00	 ret	 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_falsename
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T46584 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_truename, COMDAT
; _this$ = ecx

; 183  : 		{	// return name for true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 184  : 		return (string_type(_Truename));

  00004	ff 71 14	 push	 DWORD PTR [ecx+20]
  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	83 65 fc 00	 and	 DWORD PTR $T46584[ebp], 0
  0000e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 185  : 		}

  00016	c9		 leave
  00017	c2 04 00	 ret	 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_truename
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@AAV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV20@@Z ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@AAV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV20@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@AAV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV20@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@AAV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV20@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@AAV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV20@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@AAV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV20@@Z
_TEXT	SEGMENT
$T46605 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@AAV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV20@@Z PROC ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@AAV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV20@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T46605[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN7@Cons_val:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@AAV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV20@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T46605[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@AAV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV20@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@AAV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV20@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@AAV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV20@@Z ENDP ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
PUBLIC	?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 708  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 710  : 		}

  00003	5d		 pop	 ebp

; 709  : 		return (assign(_STD forward<_Myt>(_Right)));

  00004	e9 00 00 00 00	 jmp	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Dest_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Dest_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	6a 00		 push	 0
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 288  : 	}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??$_Dest_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; Json::valueToString
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
;	COMDAT ?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
_TEXT	SEGMENT
$T46672 = -40						; size = 4
_current$ = -40						; size = 4
_buffer$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_value$ = 12						; size = 4
?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z PROC ; Json::valueToString, COMDAT

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	83 65 d8 00	 and	 DWORD PTR $T46672[ebp], 0

; 44   :    char buffer[32];
; 45   :    char *current = buffer + sizeof(buffer);
; 46   :    bool isNegative = value < 0;

  00014	83 7d 0c 00	 cmp	 DWORD PTR _value$[ebp], 0
  00018	53		 push	 ebx
  00019	0f 9c c3	 setl	 bl
  0001c	8d 45 fc	 lea	 eax, DWORD PTR _buffer$[ebp+32]
  0001f	56		 push	 esi
  00020	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00023	89 45 d8	 mov	 DWORD PTR _current$[ebp], eax

; 47   :    if ( isNegative )

  00026	84 db		 test	 bl, bl
  00028	74 03		 je	 SHORT $LN2@valueToStr

; 48   :       value = -value;

  0002a	f7 5d 0c	 neg	 DWORD PTR _value$[ebp]
$LN2@valueToStr:

; 49   :    uintToString( UInt(value), current );

  0002d	ff 75 0c	 push	 DWORD PTR _value$[ebp]
  00030	8d 4d d8	 lea	 ecx, DWORD PTR _current$[ebp]
  00033	e8 00 00 00 00	 call	 ?uintToString@Json@@YAXIAAPAD@Z ; Json::uintToString
  00038	83 c4 04	 add	 esp, 4

; 50   :    if ( isNegative )

  0003b	84 db		 test	 bl, bl
  0003d	74 09		 je	 SHORT $LN7@valueToStr

; 51   :       *--current = '-';

  0003f	ff 4d d8	 dec	 DWORD PTR _current$[ebp]
  00042	8b 45 d8	 mov	 eax, DWORD PTR _current$[ebp]
  00045	c6 00 2d	 mov	 BYTE PTR [eax], 45	; 0000002dH
$LN7@valueToStr:

; 52   :    assert( current >= buffer );
; 53   :    return current;

  00048	ff 75 d8	 push	 DWORD PTR _current$[ebp]
  0004b	8b ce		 mov	 ecx, esi
  0004d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 54   : }

  00052	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	33 cd		 xor	 ecx, ebp
  0005a	5b		 pop	 ebx
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	c9		 leave
  00061	c3		 ret	 0
?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ENDP ; Json::valueToString
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; Json::valueToString
; Function compile flags: /Ogsp
;	COMDAT ?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
_TEXT	SEGMENT
$T46681 = -40						; size = 4
_current$ = -40						; size = 4
_buffer$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_value$ = 12						; size = 4
?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z PROC ; Json::valueToString, COMDAT

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	83 65 d8 00	 and	 DWORD PTR $T46681[ebp], 0
  00014	56		 push	 esi

; 59   :    char buffer[32];
; 60   :    char *current = buffer + sizeof(buffer);
; 61   :    uintToString( value, current );

  00015	ff 75 0c	 push	 DWORD PTR _value$[ebp]
  00018	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	8d 45 fc	 lea	 eax, DWORD PTR _buffer$[ebp+32]
  0001e	8d 4d d8	 lea	 ecx, DWORD PTR _current$[ebp]
  00021	89 45 d8	 mov	 DWORD PTR _current$[ebp], eax
  00024	e8 00 00 00 00	 call	 ?uintToString@Json@@YAXIAAPAD@Z ; Json::uintToString
  00029	83 c4 04	 add	 esp, 4

; 62   :    assert( current >= buffer );
; 63   :    return current;

  0002c	ff 75 d8	 push	 DWORD PTR _current$[ebp]
  0002f	8b ce		 mov	 ecx, esi
  00031	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 64   : }

  00036	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00039	8b c6		 mov	 eax, esi
  0003b	33 cd		 xor	 ecx, ebp
  0003d	5e		 pop	 esi
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	c9		 leave
  00044	c3		 ret	 0
?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ENDP ; Json::valueToString
_TEXT	ENDS
PUBLIC	??_C@_06ECBCCLMB@?$CF?$CD?416g?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z ; Json::valueToString
EXTRN	_sprintf_s:PROC
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_06ECBCCLMB@?$CF?$CD?416g?$AA@
CONST	SEGMENT
??_C@_06ECBCCLMB@?$CF?$CD?416g?$AA@ DB '%#.16g', 00H	; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z
_TEXT	SEGMENT
$T46688 = -40						; size = 4
_buffer$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_value$ = 12						; size = 8
?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z PROC ; Json::valueToString, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 68   :    char buffer[32];
; 69   : #if defined(_MSC_VER) && defined(__STDC_SECURE_LIB__) // Use secure version with visual studio 2005 to avoid warning. 
; 70   :    sprintf_s(buffer, sizeof(buffer), "%#.16g", value); 

  00010	dd 45 0c	 fld	 QWORD PTR _value$[ebp]
  00013	83 65 d8 00	 and	 DWORD PTR $T46688[ebp], 0
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	51		 push	 ecx
  0001c	51		 push	 ecx
  0001d	dd 1c 24	 fstp	 QWORD PTR [esp]
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06ECBCCLMB@?$CF?$CD?416g?$AA@
  00025	8d 45 dc	 lea	 eax, DWORD PTR _buffer$[ebp]
  00028	6a 20		 push	 32			; 00000020H
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _sprintf_s

; 71   : #else	
; 72   :    sprintf(buffer, "%#.16g", value); 
; 73   : #endif
; 74   :    char* ch = buffer + strlen(buffer) - 1;

  00030	8d 45 dc	 lea	 eax, DWORD PTR _buffer$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _strlen
  00039	83 c4 18	 add	 esp, 24			; 00000018H
  0003c	8d 4d dc	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0003f	49		 dec	 ecx
  00040	03 c1		 add	 eax, ecx

; 75   :    if (*ch != '0') return buffer; // nothing to truncate, so save time

  00042	80 38 30	 cmp	 BYTE PTR [eax], 48	; 00000030H
  00045	75 30		 jne	 SHORT $LN6@valueToStr@2

; 76   :    while(ch > buffer && *ch == '0'){

  00047	eb 06		 jmp	 SHORT $LN21@valueToStr@2
$LL9@valueToStr@2:
  00049	80 38 30	 cmp	 BYTE PTR [eax], 48	; 00000030H
  0004c	75 08		 jne	 SHORT $LN8@valueToStr@2

; 77   :      --ch;

  0004e	48		 dec	 eax
$LN21@valueToStr@2:

; 76   :    while(ch > buffer && *ch == '0'){

  0004f	8d 4d dc	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00052	3b c1		 cmp	 eax, ecx
  00054	77 f3		 ja	 SHORT $LL9@valueToStr@2
$LN8@valueToStr@2:

; 78   :    }
; 79   :    char* last_nonzero = ch;

  00056	8b d0		 mov	 edx, eax

; 80   :    while(ch >= buffer){

  00058	eb 10		 jmp	 SHORT $LN23@valueToStr@2
$LL7@valueToStr@2:

; 81   :      switch(*ch){

  0005a	8a 08		 mov	 cl, BYTE PTR [eax]
  0005c	80 f9 2e	 cmp	 cl, 46			; 0000002eH
  0005f	74 12		 je	 SHORT $LN2@valueToStr@2
  00061	80 e9 30	 sub	 cl, 48			; 00000030H
  00064	80 f9 09	 cmp	 cl, 9
  00067	77 0e		 ja	 SHORT $LN6@valueToStr@2

; 82   :      case '0':
; 83   :      case '1':
; 84   :      case '2':
; 85   :      case '3':
; 86   :      case '4':
; 87   :      case '5':
; 88   :      case '6':
; 89   :      case '7':
; 90   :      case '8':
; 91   :      case '9':
; 92   :        --ch;

  00069	48		 dec	 eax
$LN23@valueToStr@2:

; 80   :    while(ch >= buffer){

  0006a	8d 4d dc	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006d	3b c1		 cmp	 eax, ecx
  0006f	73 e9		 jae	 SHORT $LL7@valueToStr@2

; 81   :      switch(*ch){

  00071	eb 04		 jmp	 SHORT $LN6@valueToStr@2
$LN2@valueToStr@2:

; 93   :        continue;
; 94   :      case '.':
; 95   :        // Truncate zeroes to save bytes in output, but keep one.
; 96   :        *(last_nonzero+2) = '\0';

  00073	c6 42 02 00	 mov	 BYTE PTR [edx+2], 0
$LN6@valueToStr@2:

; 97   :        return buffer;
; 98   :      default:
; 99   :        return buffer;
; 100  :      }
; 101  :    }
; 102  :    return buffer;

  00077	8d 45 dc	 lea	 eax, DWORD PTR _buffer$[ebp]
  0007a	50		 push	 eax
  0007b	8b ce		 mov	 ecx, esi
  0007d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 103  : }

  00082	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00085	8b c6		 mov	 eax, esi
  00087	33 cd		 xor	 ecx, ebp
  00089	5e		 pop	 esi
  0008a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008f	c9		 leave
  00090	c3		 ret	 0
?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z ENDP ; Json::valueToString
_TEXT	ENDS
PUBLIC	?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; Json::valueToString
; Function compile flags: /Ogsp
;	COMDAT ?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
_TEXT	SEGMENT
$T46706 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_value$ = 12						; size = 1
?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z PROC ; Json::valueToString, COMDAT

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	83 65 fc 00	 and	 DWORD PTR $T46706[ebp], 0

; 108  :    return value ? "true" : "false";

  00008	80 7d 0c 00	 cmp	 BYTE PTR _value$[ebp], 0
  0000c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04LOAJBDKD@true?$AA@
  00011	75 05		 jne	 SHORT $LN4@valueToStr@3
  00013	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05LAPONLG@false?$AA@
$LN4@valueToStr@3:
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00021	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 109  : }

  00024	c9		 leave
  00025	c3		 ret	 0
?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ENDP ; Json::valueToString
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 702  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 703  : 		_Tidy();
; 704  : 		assign(_STD forward<_Myt>(_Right));

  00004	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 705  : 		}

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT ??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	050H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1
__ehfuncinfo$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T46781 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 537  : 		{	// construct empty writable character buffer

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00011	33 ff		 xor	 edi, edi
  00013	33 c0		 xor	 eax, eax
  00015	47		 inc	 edi
  00016	89 45 f0	 mov	 DWORD PTR $T46781[ebp], eax
  00019	39 45 0c	 cmp	 DWORD PTR _$initVBases$[ebp], eax
  0001c	74 13		 je	 SHORT $LN1@basic_ostr@2
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
  00024	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  0002b	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  0002e	89 7d f0	 mov	 DWORD PTR $T46781[ebp], edi
$LN1@basic_ostr@2:
  00031	50		 push	 eax
  00032	50		 push	 eax
  00033	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00036	53		 push	 ebx
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
  0003e	8b 06		 mov	 eax, DWORD PTR [esi]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	c7 04 06 00 00
	00 00		 mov	 DWORD PTR [esi+eax], OFFSET ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0004a	8b 45 08	 mov	 eax, DWORD PTR __Mode$[ebp]
  0004d	83 c8 02	 or	 eax, 2
  00050	50		 push	 eax
  00051	8b cb		 mov	 ecx, ebx
  00053	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00056	e8 00 00 00 00	 call	 ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >

; 538  : 		}

  0005b	8b c6		 mov	 eax, esi
  0005d	e8 00 00 00 00	 call	 __EH_epilog3
  00062	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T46781[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_ostr@2
  0000c	83 65 f0 fe	 and	 DWORD PTR $T46781[ebp], -2 ; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 50	 add	 ecx, 80			; 00000050H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_ostr@2:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1:
  0001c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 08	 add	 ecx, 8
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
__ehhandler$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$3
__ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T46808 = -76						; size = 4
__Nul$37147 = -72					; size = 28
__Str$37145 = -44					; size = 28
__Str$37142 = -44					; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 93   : 		{	// return string copy of character array

  00000	6a 40		 push	 64			; 00000040H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 94   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)

  0000c	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00012	33 db		 xor	 ebx, ebx
  00014	89 5d b4	 mov	 DWORD PTR $T46808[ebp], ebx
  00017	a8 02		 test	 al, 2
  00019	75 4a		 jne	 SHORT $LN4@str
  0001b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0001e	39 1a		 cmp	 DWORD PTR [edx], ebx
  00020	74 43		 je	 SHORT $LN4@str

; 95   : 			{	// writable, make string from write buffer
; 96   : 			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
; 97   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());

  00022	8b 12		 mov	 edx, DWORD PTR [edx]
  00024	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00027	3b c2		 cmp	 eax, edx
  00029	73 02		 jae	 SHORT $LN7@str
  0002b	8b c2		 mov	 eax, edx
$LN7@str:
  0002d	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00030	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00032	6a 0f		 push	 15			; 0000000fH
  00034	5f		 pop	 edi
  00035	2b c1		 sub	 eax, ecx
  00037	50		 push	 eax
  00038	51		 push	 ecx
  00039	8d 4d d4	 lea	 ecx, DWORD PTR __Str$37142[ebp]
  0003c	89 7d e8	 mov	 DWORD PTR __Str$37142[ebp+20], edi
  0003f	89 5d e4	 mov	 DWORD PTR __Str$37142[ebp+16], ebx
  00042	88 5d d4	 mov	 BYTE PTR __Str$37142[ebp], bl
  00045	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
$LN214@str:

; 98   : 			return (_Str);

  0004d	8d 45 d4	 lea	 eax, DWORD PTR __Str$37142[ebp]
  00050	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00053	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00056	50		 push	 eax
  00057	8b ce		 mov	 ecx, esi
  00059	88 1e		 mov	 BYTE PTR [esi], bl
  0005b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00060	8d 4d d4	 lea	 ecx, DWORD PTR __Str$37142[ebp]
  00063	eb 61		 jmp	 SHORT $LN213@str
$LN4@str:

; 99   : 			}
; 100  : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)

  00065	a8 04		 test	 al, 4
  00067	75 34		 jne	 SHORT $LN2@str
  00069	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0006c	39 1a		 cmp	 DWORD PTR [edx], ebx
  0006e	74 2d		 je	 SHORT $LN2@str

; 101  : 			{	// readable, make string from read buffer
; 102  : 			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());

  00070	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00073	8b 00		 mov	 eax, DWORD PTR [eax]
  00075	03 02		 add	 eax, DWORD PTR [edx]
  00077	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0007a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007c	6a 0f		 push	 15			; 0000000fH
  0007e	5f		 pop	 edi
  0007f	2b c1		 sub	 eax, ecx
  00081	50		 push	 eax
  00082	51		 push	 ecx
  00083	8d 4d d4	 lea	 ecx, DWORD PTR __Str$37145[ebp]
  00086	89 7d e8	 mov	 DWORD PTR __Str$37145[ebp+20], edi
  00089	89 5d e4	 mov	 DWORD PTR __Str$37145[ebp+16], ebx
  0008c	88 5d d4	 mov	 BYTE PTR __Str$37145[ebp], bl
  0008f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00094	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 103  : 			return (_Str);

  0009b	eb b0		 jmp	 SHORT $LN214@str
$LN2@str:

; 104  : 			}
; 105  : 		else
; 106  : 			{	// inaccessible, return empty string
; 107  : 			_Mystr _Nul;

  0009d	6a 0f		 push	 15			; 0000000fH
  0009f	5f		 pop	 edi
  000a0	89 7d cc	 mov	 DWORD PTR __Nul$37147[ebp+20], edi
  000a3	89 5d c8	 mov	 DWORD PTR __Nul$37147[ebp+16], ebx
  000a6	88 5d b8	 mov	 BYTE PTR __Nul$37147[ebp], bl

; 108  : 			return (_Nul);

  000a9	8d 45 b8	 lea	 eax, DWORD PTR __Nul$37147[ebp]
  000ac	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000af	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000b2	50		 push	 eax
  000b3	8b ce		 mov	 ecx, esi
  000b5	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000bc	88 1e		 mov	 BYTE PTR [esi], bl
  000be	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000c3	8d 4d b8	 lea	 ecx, DWORD PTR __Nul$37147[ebp]
$LN213@str:
  000c6	53		 push	 ebx
  000c7	6a 01		 push	 1
  000c9	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  000ce	8b c6		 mov	 eax, esi

; 109  : 			}
; 110  : 		}

  000d0	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000d5	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Str$37142[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$2:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Str$37145[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$3:
  00010	8d 4d b8	 lea	 ecx, DWORD PTR __Nul$37147[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	??_C@_02EAOCLKAK@ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02EAOCLKAK@ld?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02EAOCLKAK@ld?$AA@ DB 'ld', 00H			; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1173 : 		{	// put formatted long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1174 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[6];
; 1175 : 
; 1176 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1177 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
; 1178 : 				_Iosbase.flags()), _Val)));

  00015	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00018	57		 push	 edi
  00019	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  0001c	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	50		 push	 eax
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02EAOCLKAK@ld?$AA@
  00025	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00028	8b d9		 mov	 ebx, ecx
  0002a	50		 push	 eax
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00031	83 c4 10	 add	 esp, 16			; 00000010H
  00034	50		 push	 eax
  00035	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00038	6a 40		 push	 64			; 00000040H
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _sprintf_s
  00040	50		 push	 eax
  00041	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00044	50		 push	 eax
  00045	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00048	56		 push	 esi
  00049	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0004c	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0004f	57		 push	 edi
  00050	53		 push	 ebx
  00051	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1179 : 		}

  00056	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00059	83 c4 30	 add	 esp, 48			; 00000030H
  0005c	8b c7		 mov	 eax, edi
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	33 cd		 xor	 ecx, ebp
  00062	5b		 pop	 ebx
  00063	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00068	c9		 leave
  00069	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BDDLJJBK@lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BDDLJJBK@lu?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02BDDLJJBK@lu?$AA@ DB 'lu', 00H			; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1183 : 		{	// put formatted unsigned long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1184 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[6];
; 1185 : 
; 1186 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1187 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
; 1188 : 				_Iosbase.flags()), _Val)));

  00015	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00018	57		 push	 edi
  00019	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  0001c	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	50		 push	 eax
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02BDDLJJBK@lu?$AA@
  00025	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00028	8b d9		 mov	 ebx, ecx
  0002a	50		 push	 eax
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00031	83 c4 10	 add	 esp, 16			; 00000010H
  00034	50		 push	 eax
  00035	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00038	6a 40		 push	 64			; 00000040H
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _sprintf_s
  00040	50		 push	 eax
  00041	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00044	50		 push	 eax
  00045	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00048	56		 push	 esi
  00049	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0004c	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0004f	57		 push	 edi
  00050	53		 push	 ebx
  00051	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1189 : 		}

  00056	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00059	83 c4 30	 add	 esp, 48			; 00000030H
  0005c	8b c7		 mov	 eax, edi
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	33 cd		 xor	 ecx, ebp
  00062	5b		 pop	 ebx
  00063	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00068	c9		 leave
  00069	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02HIKPPMOK@Ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02HIKPPMOK@Ld?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02HIKPPMOK@Ld?$AA@ DB 'Ld', 00H			; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1194 : 		{	// put formatted long long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1195 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[8];
; 1196 : 
; 1197 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1198 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
; 1199 : 				_Iosbase.flags()), _Val)));

  00015	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00018	57		 push	 edi
  00019	ff 75 20	 push	 DWORD PTR __Val$[ebp+4]
  0001c	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00022	8b d9		 mov	 ebx, ecx
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_02HIKPPMOK@Ld?$AA@
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  0002d	50		 push	 eax
  0002e	53		 push	 ebx
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  0003b	6a 40		 push	 64			; 00000040H
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _sprintf_s
  00043	50		 push	 eax
  00044	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00047	50		 push	 eax
  00048	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0004b	56		 push	 esi
  0004c	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0004f	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00052	57		 push	 edi
  00053	53		 push	 ebx
  00054	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1200 : 		}

  00059	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005c	83 c4 34	 add	 esp, 52			; 00000034H
  0005f	8b c7		 mov	 eax, edi
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	33 cd		 xor	 ecx, ebp
  00065	5b		 pop	 ebx
  00066	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006b	c9		 leave
  0006c	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02CLHGNPPK@Lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02CLHGNPPK@Lu?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02CLHGNPPK@Lu?$AA@ DB 'Lu', 00H			; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1204 : 		{	// put formatted unsigned long long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1205 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[8];
; 1206 : 
; 1207 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1208 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
; 1209 : 				_Iosbase.flags()), _Val)));

  00015	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00018	57		 push	 edi
  00019	ff 75 20	 push	 DWORD PTR __Val$[ebp+4]
  0001c	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00022	8b d9		 mov	 ebx, ecx
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_02CLHGNPPK@Lu?$AA@
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  0002d	50		 push	 eax
  0002e	53		 push	 ebx
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  0003b	6a 40		 push	 64			; 00000040H
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _sprintf_s
  00043	50		 push	 eax
  00044	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00047	50		 push	 eax
  00048	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0004b	56		 push	 esi
  0004c	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0004f	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00052	57		 push	 edi
  00053	53		 push	 ebx
  00054	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1210 : 		}

  00059	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005c	83 c4 34	 add	 esp, 52			; 00000034H
  0005f	8b c7		 mov	 eax, edi
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	33 cd		 xor	 ecx, ebp
  00065	5b		 pop	 ebx
  00066	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006b	c9		 leave
  0006c	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	__real@38aa95a5b7f87a0f
PUBLIC	__real@4202a05f20000000
PUBLIC	__real@4733426172c74d82
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	_this$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT __real@38aa95a5b7f87a0f
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	SEGMENT
__real@38aa95a5b7f87a0f DQ 038aa95a5b7f87a0fr	; 1e-035
CONST	ENDS
;	COMDAT __real@4202a05f20000000
CONST	SEGMENT
__real@4202a05f20000000 DQ 04202a05f20000000r	; 1e+010
CONST	ENDS
;	COMDAT __real@4733426172c74d82
CONST	SEGMENT
__real@4733426172c74d82 DQ 04733426172c74d82r	; 1e+035
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -144				; size = 4
_this$GSCopy$ = -140					; size = 4
__Significance$ = -136					; size = 4
__Afterpoint$ = -132					; size = 4
__Beforepoint$ = -128					; size = 4
__Signed$37293 = -121					; size = 1
__Buf$ = -120						; size = 108
__Fmt$ = -12						; size = 8
__Precision$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1215 : 		{	// put formatted double to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1246 : 			}
; 1247 : 
; 1248 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1249 : 			_Beforepoint, _Afterpoint, (size_t)_Precision,
; 1250 : 				_CSTD sprintf_s(_Buf, sizeof (_Buf),
; 1251 : 					_Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1252 : 					_Significance, _Val)));	// convert and put

  0001b	89 85 70 ff ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  00021	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00024	57		 push	 edi
  00025	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0002b	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0002e	bf 00 20 00 00	 mov	 edi, 8192		; 00002000H
  00033	85 c0		 test	 eax, eax
  00035	7f 10		 jg	 SHORT $LN13@do_put@2

; 1216 : 		char _Buf[_MAX_EXP_DIG + _MAX_SIG_DIG + 64], _Fmt[8];
; 1217 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1218 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1219 : 				? 6 : _Iosbase.precision();	// desired precision

  00037	7c 04		 jl	 SHORT $LN34@do_put@2
  00039	85 c9		 test	 ecx, ecx
  0003b	75 0a		 jne	 SHORT $LN13@do_put@2
$LN34@do_put@2:
  0003d	85 7e 14	 test	 DWORD PTR [esi+20], edi
  00040	75 05		 jne	 SHORT $LN13@do_put@2
  00042	6a 06		 push	 6
  00044	59		 pop	 ecx
  00045	33 c0		 xor	 eax, eax
$LN13@do_put@2:
  00047	8b d9		 mov	 ebx, ecx
  00049	89 45 f8	 mov	 DWORD PTR __Precision$[ebp+4], eax

; 1220 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1221 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  0004c	85 c0		 test	 eax, eax
  0004e	7c 11		 jl	 SHORT $LN15@do_put@2
  00050	6a 24		 push	 36			; 00000024H
  00052	58		 pop	 eax
  00053	7f 04		 jg	 SHORT $LN35@do_put@2
  00055	3b d8		 cmp	 ebx, eax
  00057	76 08		 jbe	 SHORT $LN15@do_put@2
$LN35@do_put@2:
  00059	89 85 78 ff ff
	ff		 mov	 DWORD PTR __Significance$[ebp], eax
  0005f	eb 06		 jmp	 SHORT $LN16@do_put@2
$LN15@do_put@2:
  00061	89 9d 78 ff ff
	ff		 mov	 DWORD PTR __Significance$[ebp], ebx
$LN16@do_put@2:

; 1222 : 		_Precision -= _Significance;

  00067	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR __Significance$[ebp]

; 1223 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1224 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1225 : 
; 1226 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
; 1227 : 			&& _Val * 0.5 != _Val)	// skip -Inf, 0, Inf

  0006d	dd 45 1c	 fld	 QWORD PTR __Val$[ebp]
  00070	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00073	99		 cdq
  00074	2b d8		 sub	 ebx, eax
  00076	19 55 f8	 sbb	 DWORD PTR __Precision$[ebp+4], edx
  00079	83 65 80 00	 and	 DWORD PTR __Beforepoint$[ebp], 0
  0007d	83 a5 7c ff ff
	ff 00		 and	 DWORD PTR __Afterpoint$[ebp], 0
  00084	8b c1		 mov	 eax, ecx
  00086	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  0008b	3b c7		 cmp	 eax, edi
  0008d	0f 85 bb 00 00
	00		 jne	 $LN40@do_put@2
  00093	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe0000000000000
  00099	d8 c9		 fmul	 ST(0), ST(1)
  0009b	d9 c1		 fld	 ST(1)
  0009d	da e9		 fucompp
  0009f	df e0		 fnstsw	 ax
  000a1	f6 c4 44	 test	 ah, 68			; 00000044H
  000a4	0f 8b a4 00 00
	00		 jnp	 $LN40@do_put@2

; 1228 : 			{	// scale silly fixed-point value
; 1229 : 			bool _Signed = _Val < 0;

  000aa	d9 ee		 fldz
  000ac	d8 d1		 fcom	 ST(1)
  000ae	df e0		 fnstsw	 ax
  000b0	f6 c4 41	 test	 ah, 65			; 00000041H
  000b3	75 0a		 jne	 SHORT $LN17@do_put@2

; 1230 : 			if (_Signed)
; 1231 : 				_Val = -_Val;

  000b5	d9 c9		 fxch	 ST(1)
  000b7	c6 45 87 01	 mov	 BYTE PTR __Signed$37293[ebp], 1
  000bb	d9 e0		 fchs
  000bd	eb 06		 jmp	 SHORT $LN9@do_put@2
$LN17@do_put@2:

; 1228 : 			{	// scale silly fixed-point value
; 1229 : 			bool _Signed = _Val < 0;

  000bf	c6 45 87 00	 mov	 BYTE PTR __Signed$37293[ebp], 0

; 1245 : 				_Val = -_Val;

  000c3	d9 c9		 fxch	 ST(1)
$LN9@do_put@2:

; 1232 : 
; 1233 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000c5	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  000cb	6a 0a		 push	 10			; 0000000aH
  000cd	d8 d1		 fcom	 ST(1)
  000cf	ba 88 13 00 00	 mov	 edx, 5000		; 00001388H
  000d4	5f		 pop	 edi
  000d5	df e0		 fnstsw	 ax
  000d7	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  000dd	f6 c4 41	 test	 ah, 65			; 00000041H
  000e0	7b 06		 jnp	 SHORT $LN8@do_put@2
$LN50@do_put@2:
  000e2	dd d9		 fstp	 ST(1)
  000e4	eb 19		 jmp	 SHORT $LN6@do_put@2
$LN56@do_put@2:
  000e6	d9 c9		 fxch	 ST(1)
$LN8@do_put@2:
  000e8	39 55 80	 cmp	 DWORD PTR __Beforepoint$[ebp], edx
  000eb	73 f5		 jae	 SHORT $LN50@do_put@2

; 1234 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000ed	dc fa		 fdiv	 ST(2), ST(0)
  000ef	01 7d 80	 add	 DWORD PTR __Beforepoint$[ebp], edi
  000f2	d9 c9		 fxch	 ST(1)
  000f4	d8 d2		 fcom	 ST(2)
  000f6	df e0		 fnstsw	 ax
  000f8	f6 c4 41	 test	 ah, 65			; 00000041H
  000fb	7b e9		 jnp	 SHORT $LN56@do_put@2

; 1232 : 
; 1233 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000fd	dd d8		 fstp	 ST(0)
$LN6@do_put@2:

; 1235 : 
; 1236 : 			if (0 < _Val)

  000ff	d9 ca		 fxch	 ST(2)
  00101	d8 d9		 fcomp	 ST(1)
  00103	df e0		 fnstsw	 ax
  00105	f6 c4 05	 test	 ah, 5
  00108	7a 3a		 jp	 SHORT $LN78@do_put@2

; 1237 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1238 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  0010a	83 7d f8 00	 cmp	 DWORD PTR __Precision$[ebp+4], 0
  0010e	7c 34		 jl	 SHORT $LN78@do_put@2
  00110	7f 04		 jg	 SHORT $LN41@do_put@2
$LN82@do_put@2:
  00112	3b df		 cmp	 ebx, edi
  00114	72 2e		 jb	 SHORT $LN78@do_put@2
$LN41@do_put@2:
  00116	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  0011c	d8 d9		 fcomp	 ST(1)
  0011e	df e0		 fnstsw	 ax
  00120	f6 c4 01	 test	 ah, 1
  00123	75 1f		 jne	 SHORT $LN78@do_put@2
  00125	39 95 7c ff ff
	ff		 cmp	 DWORD PTR __Afterpoint$[ebp], edx
  0012b	73 17		 jae	 SHORT $LN78@do_put@2

; 1239 : 					{	// drop 10 zeros after decimal point
; 1240 : 					_Val *= 1e10;
; 1241 : 					_Precision -= 10;

  0012d	83 c3 f6	 add	 ebx, -10		; fffffff6H
  00130	d8 c9		 fmul	 ST(0), ST(1)
  00132	83 55 f8 ff	 adc	 DWORD PTR __Precision$[ebp+4], -1
  00136	01 bd 7c ff ff
	ff		 add	 DWORD PTR __Afterpoint$[ebp], edi
  0013c	83 7d f8 00	 cmp	 DWORD PTR __Precision$[ebp+4], 0
  00140	7f d4		 jg	 SHORT $LN41@do_put@2

; 1237 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1238 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00142	7d ce		 jge	 SHORT $LN82@do_put@2
$LN78@do_put@2:

; 1242 : 					}
; 1243 : 
; 1244 : 			if (_Signed)

  00144	80 7d 87 00	 cmp	 BYTE PTR __Signed$37293[ebp], 0
  00148	dd d9		 fstp	 ST(1)
  0014a	74 02		 je	 SHORT $LN40@do_put@2

; 1245 : 				_Val = -_Val;

  0014c	d9 e0		 fchs
$LN40@do_put@2:

; 1246 : 			}
; 1247 : 
; 1248 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1249 : 			_Beforepoint, _Afterpoint, (size_t)_Precision,
; 1250 : 				_CSTD sprintf_s(_Buf, sizeof (_Buf),
; 1251 : 					_Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1252 : 					_Significance, _Val)));	// convert and put

  0014e	51		 push	 ecx
  0014f	51		 push	 ecx
  00150	dd 1c 24	 fstp	 QWORD PTR [esp]
  00153	ff b5 78 ff ff
	ff		 push	 DWORD PTR __Significance$[ebp]
  00159	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  0015c	51		 push	 ecx
  0015d	6a 00		 push	 0
  0015f	50		 push	 eax
  00160	ff b5 74 ff ff
	ff		 push	 DWORD PTR _this$GSCopy$[ebp]
  00166	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
  0016b	83 c4 10	 add	 esp, 16			; 00000010H
  0016e	50		 push	 eax
  0016f	8d 45 88	 lea	 eax, DWORD PTR __Buf$[ebp]
  00172	6a 6c		 push	 108			; 0000006cH
  00174	50		 push	 eax
  00175	e8 00 00 00 00	 call	 _sprintf_s
  0017a	50		 push	 eax
  0017b	53		 push	 ebx
  0017c	ff b5 7c ff ff
	ff		 push	 DWORD PTR __Afterpoint$[ebp]
  00182	8d 45 88	 lea	 eax, DWORD PTR __Buf$[ebp]
  00185	ff 75 80	 push	 DWORD PTR __Beforepoint$[ebp]
  00188	50		 push	 eax
  00189	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0018c	56		 push	 esi
  0018d	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00190	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00193	ff b5 70 ff ff
	ff		 push	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00199	ff b5 74 ff ff
	ff		 push	 DWORD PTR _this$GSCopy$[ebp]
  0019f	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput

; 1253 : 		}

  001a4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a7	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  001ad	83 c4 44	 add	 esp, 68			; 00000044H
  001b0	5f		 pop	 edi
  001b1	5e		 pop	 esi
  001b2	33 cd		 xor	 ecx, ebp
  001b4	5b		 pop	 ebx
  001b5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ba	c9		 leave
  001bb	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogsp
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -144				; size = 4
_this$GSCopy$ = -140					; size = 4
__Significance$ = -136					; size = 4
__Afterpoint$ = -132					; size = 4
__Beforepoint$ = -128					; size = 4
__Signed$37316 = -121					; size = 1
__Buf$ = -120						; size = 108
__Fmt$ = -12						; size = 8
__Precision$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1257 : 		{	// put formatted long double to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1287 : 			}
; 1288 : 
; 1289 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1290 : 			_Beforepoint, _Afterpoint, (size_t)_Precision,
; 1291 : 				_CSTD sprintf_s(_Buf, sizeof (_Buf),
; 1292 : 					_Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1293 : 					_Significance, _Val)));	// convert and put

  0001b	89 85 70 ff ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  00021	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00024	57		 push	 edi
  00025	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0002b	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0002e	bf 00 20 00 00	 mov	 edi, 8192		; 00002000H
  00033	85 c0		 test	 eax, eax
  00035	7f 10		 jg	 SHORT $LN13@do_put@3

; 1258 : 		char _Buf[_MAX_EXP_DIG + _MAX_SIG_DIG + 64], _Fmt[8];
; 1259 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1260 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1261 : 				? 6 : _Iosbase.precision();	// desired precision

  00037	7c 04		 jl	 SHORT $LN34@do_put@3
  00039	85 c9		 test	 ecx, ecx
  0003b	75 0a		 jne	 SHORT $LN13@do_put@3
$LN34@do_put@3:
  0003d	85 7e 14	 test	 DWORD PTR [esi+20], edi
  00040	75 05		 jne	 SHORT $LN13@do_put@3
  00042	6a 06		 push	 6
  00044	59		 pop	 ecx
  00045	33 c0		 xor	 eax, eax
$LN13@do_put@3:
  00047	8b d9		 mov	 ebx, ecx
  00049	89 45 f8	 mov	 DWORD PTR __Precision$[ebp+4], eax

; 1262 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1263 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  0004c	85 c0		 test	 eax, eax
  0004e	7c 11		 jl	 SHORT $LN15@do_put@3
  00050	6a 24		 push	 36			; 00000024H
  00052	58		 pop	 eax
  00053	7f 04		 jg	 SHORT $LN35@do_put@3
  00055	3b d8		 cmp	 ebx, eax
  00057	76 08		 jbe	 SHORT $LN15@do_put@3
$LN35@do_put@3:
  00059	89 85 78 ff ff
	ff		 mov	 DWORD PTR __Significance$[ebp], eax
  0005f	eb 06		 jmp	 SHORT $LN16@do_put@3
$LN15@do_put@3:
  00061	89 9d 78 ff ff
	ff		 mov	 DWORD PTR __Significance$[ebp], ebx
$LN16@do_put@3:

; 1264 : 		_Precision -= _Significance;

  00067	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR __Significance$[ebp]

; 1265 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1266 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1267 : 
; 1268 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)

  0006d	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00070	99		 cdq
  00071	2b d8		 sub	 ebx, eax
  00073	19 55 f8	 sbb	 DWORD PTR __Precision$[ebp+4], edx
  00076	83 65 80 00	 and	 DWORD PTR __Beforepoint$[ebp], 0
  0007a	83 a5 7c ff ff
	ff 00		 and	 DWORD PTR __Afterpoint$[ebp], 0
  00081	8b c1		 mov	 eax, ecx
  00083	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00088	3b c7		 cmp	 eax, edi
  0008a	0f 85 a5 00 00
	00		 jne	 $LN39@do_put@3

; 1269 : 			{	// scale silly fixed-point value
; 1270 : 			bool _Signed = _Val < 0;

  00090	d9 ee		 fldz
  00092	dd 45 1c	 fld	 QWORD PTR __Val$[ebp]
  00095	d8 d1		 fcom	 ST(1)
  00097	df e0		 fnstsw	 ax
  00099	f6 c4 05	 test	 ah, 5
  0009c	7a 27		 jp	 SHORT $LN17@do_put@3
  0009e	c6 45 87 01	 mov	 BYTE PTR __Signed$37316[ebp], 1

; 1272 : 				_Val = -_Val;

  000a2	d9 e0		 fchs
$LN9@do_put@3:

; 1273 : 
; 1274 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000a4	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  000aa	6a 0a		 push	 10			; 0000000aH
  000ac	d8 d1		 fcom	 ST(1)
  000ae	ba 88 13 00 00	 mov	 edx, 5000		; 00001388H
  000b3	5f		 pop	 edi
  000b4	df e0		 fnstsw	 ax
  000b6	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  000bc	f6 c4 41	 test	 ah, 65			; 00000041H
  000bf	7b 0c		 jnp	 SHORT $LN8@do_put@3
$LN46@do_put@3:
  000c1	dd d9		 fstp	 ST(1)
  000c3	eb 1f		 jmp	 SHORT $LN6@do_put@3
$LN17@do_put@3:

; 1269 : 			{	// scale silly fixed-point value
; 1270 : 			bool _Signed = _Val < 0;

  000c5	c6 45 87 00	 mov	 BYTE PTR __Signed$37316[ebp], 0

; 1271 : 			if (_Signed)

  000c9	eb d9		 jmp	 SHORT $LN9@do_put@3
$LN52@do_put@3:

; 1273 : 
; 1274 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000cb	d9 c9		 fxch	 ST(1)
$LN8@do_put@3:
  000cd	39 55 80	 cmp	 DWORD PTR __Beforepoint$[ebp], edx
  000d0	73 ef		 jae	 SHORT $LN46@do_put@3

; 1275 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000d2	dc fa		 fdiv	 ST(2), ST(0)
  000d4	01 7d 80	 add	 DWORD PTR __Beforepoint$[ebp], edi
  000d7	d9 c9		 fxch	 ST(1)
  000d9	d8 d2		 fcom	 ST(2)
  000db	df e0		 fnstsw	 ax
  000dd	f6 c4 41	 test	 ah, 65			; 00000041H
  000e0	7b e9		 jnp	 SHORT $LN52@do_put@3

; 1273 : 
; 1274 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000e2	dd d8		 fstp	 ST(0)
$LN6@do_put@3:

; 1276 : 
; 1277 : 			if (0 < _Val)

  000e4	d9 ca		 fxch	 ST(2)
  000e6	d8 d9		 fcomp	 ST(1)
  000e8	df e0		 fnstsw	 ax
  000ea	f6 c4 05	 test	 ah, 5
  000ed	7a 3a		 jp	 SHORT $LN74@do_put@3

; 1278 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1279 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000ef	83 7d f8 00	 cmp	 DWORD PTR __Precision$[ebp+4], 0
  000f3	7c 34		 jl	 SHORT $LN74@do_put@3
  000f5	7f 04		 jg	 SHORT $LN40@do_put@3
$LN78@do_put@3:
  000f7	3b df		 cmp	 ebx, edi
  000f9	72 2e		 jb	 SHORT $LN74@do_put@3
$LN40@do_put@3:
  000fb	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  00101	d8 d9		 fcomp	 ST(1)
  00103	df e0		 fnstsw	 ax
  00105	f6 c4 01	 test	 ah, 1
  00108	75 1f		 jne	 SHORT $LN74@do_put@3
  0010a	39 95 7c ff ff
	ff		 cmp	 DWORD PTR __Afterpoint$[ebp], edx
  00110	73 17		 jae	 SHORT $LN74@do_put@3

; 1280 : 					{	// drop 10 zeros after decimal point
; 1281 : 					_Val *= 1e10;
; 1282 : 					_Precision -= 10;

  00112	83 c3 f6	 add	 ebx, -10		; fffffff6H
  00115	d8 c9		 fmul	 ST(0), ST(1)
  00117	83 55 f8 ff	 adc	 DWORD PTR __Precision$[ebp+4], -1
  0011b	01 bd 7c ff ff
	ff		 add	 DWORD PTR __Afterpoint$[ebp], edi
  00121	83 7d f8 00	 cmp	 DWORD PTR __Precision$[ebp+4], 0
  00125	7f d4		 jg	 SHORT $LN40@do_put@3

; 1278 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1279 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00127	7d ce		 jge	 SHORT $LN78@do_put@3
$LN74@do_put@3:

; 1283 : 					}
; 1284 : 
; 1285 : 			if (_Signed)

  00129	80 7d 87 00	 cmp	 BYTE PTR __Signed$37316[ebp], 0
  0012d	dd d9		 fstp	 ST(1)
  0012f	74 07		 je	 SHORT $LN1@do_put@3

; 1286 : 				_Val = -_Val;

  00131	d9 e0		 fchs
  00133	eb 03		 jmp	 SHORT $LN1@do_put@3
$LN39@do_put@3:
  00135	dd 45 1c	 fld	 QWORD PTR __Val$[ebp]
$LN1@do_put@3:

; 1287 : 			}
; 1288 : 
; 1289 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1290 : 			_Beforepoint, _Afterpoint, (size_t)_Precision,
; 1291 : 				_CSTD sprintf_s(_Buf, sizeof (_Buf),
; 1292 : 					_Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1293 : 					_Significance, _Val)));	// convert and put

  00138	51		 push	 ecx
  00139	51		 push	 ecx
  0013a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0013d	ff b5 78 ff ff
	ff		 push	 DWORD PTR __Significance$[ebp]
  00143	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00146	51		 push	 ecx
  00147	6a 4c		 push	 76			; 0000004cH
  00149	50		 push	 eax
  0014a	ff b5 74 ff ff
	ff		 push	 DWORD PTR _this$GSCopy$[ebp]
  00150	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
  00155	83 c4 10	 add	 esp, 16			; 00000010H
  00158	50		 push	 eax
  00159	8d 45 88	 lea	 eax, DWORD PTR __Buf$[ebp]
  0015c	6a 6c		 push	 108			; 0000006cH
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 _sprintf_s
  00164	50		 push	 eax
  00165	53		 push	 ebx
  00166	ff b5 7c ff ff
	ff		 push	 DWORD PTR __Afterpoint$[ebp]
  0016c	8d 45 88	 lea	 eax, DWORD PTR __Buf$[ebp]
  0016f	ff 75 80	 push	 DWORD PTR __Beforepoint$[ebp]
  00172	50		 push	 eax
  00173	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00176	56		 push	 esi
  00177	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0017a	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0017d	ff b5 70 ff ff
	ff		 push	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00183	ff b5 74 ff ff
	ff		 push	 DWORD PTR _this$GSCopy$[ebp]
  00189	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput

; 1294 : 		}

  0018e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00191	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00197	83 c4 44	 add	 esp, 68			; 00000044H
  0019a	5f		 pop	 edi
  0019b	5e		 pop	 esi
  0019c	33 cd		 xor	 ecx, ebp
  0019e	5b		 pop	 ebx
  0019f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a4	c9		 leave
  001a5	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BBAHNLBA@?$CFp?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp?$AA@ DB '%p', 00H		; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
_TEXT	SEGMENT
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1298 : 		{	// put formatted void pointer to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 1c	 mov	 eax, DWORD PTR __Val$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00018	57		 push	 edi
  00019	8b 7d 14	 mov	 edi, DWORD PTR __Iosbase$[ebp]

; 1299 : 		char _Buf[2 * _MAX_INT_DIG];
; 1300 : 
; 1301 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1302 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));

  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02BBAHNLBA@?$CFp?$AA@
  00022	8d 45 bc	 lea	 eax, DWORD PTR __Buf$[ebp]
  00025	6a 40		 push	 64			; 00000040H
  00027	50		 push	 eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	e8 00 00 00 00	 call	 _sprintf_s
  0002f	50		 push	 eax
  00030	8d 45 bc	 lea	 eax, DWORD PTR __Buf$[ebp]
  00033	50		 push	 eax
  00034	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00037	57		 push	 edi
  00038	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0003b	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0003e	56		 push	 esi
  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1303 : 		}

  00045	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00048	83 c4 30	 add	 esp, 48			; 00000030H
  0004b	5f		 pop	 edi
  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi
  0004f	33 cd		 xor	 ecx, ebp
  00051	5b		 pop	 ebx
  00052	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00057	c9		 leave
  00058	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z
_TEXT	SEGMENT
$T47698 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 146  : 	{	// return string + NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 147  : 	return (_STD move(_Left.append(_Right)));

  00004	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  00007	83 65 fc 00	 and	 DWORD PTR $T47698[ebp], 0
  0000b	e8 00 00 00 00	 call	 _strlen
  00010	59		 pop	 ecx
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00014	50		 push	 eax
  00015	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  00018	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00026	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 148  : 	}

  00029	c9		 leave
  0002a	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD$$QAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD$$QAV10@@Z
_TEXT	SEGMENT
$T47716 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD$$QAV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 126  : 	{	// return NTCS + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 127  : 	return (_STD move(_Right.insert(0, _Left)));

  00004	ff 75 0c	 push	 DWORD PTR __Left$[ebp]
  00007	83 65 fc 00	 and	 DWORD PTR $T47716[ebp], 0
  0000b	e8 00 00 00 00	 call	 _strlen
  00010	59		 pop	 ecx
  00011	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  00014	50		 push	 eax
  00015	ff 75 0c	 push	 DWORD PTR __Left$[ebp]
  00018	6a 00		 push	 0
  0001a	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00028	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 128  : 	}

  0002b	c9		 leave
  0002c	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD$$QAV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV20@@Z ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV20@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV20@@Z PROC ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV20@@Z ENDP ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
PUBLIC	??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 10		 jmp	 SHORT $LN15@Move
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00012	83 45 10 1c	 add	 DWORD PTR __Dest$[ebp], 28 ; 0000001cH
  00016	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN15@Move:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	75 eb		 jne	 SHORT $LL3@Move

; 2515 : 	return (_Dest);

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	5e		 pop	 esi

; 2516 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0e		 jmp	 SHORT $LN21@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	6a 00		 push	 0
  0000b	6a 01		 push	 1
  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00014	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN21@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00017	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001a	75 ed		 jne	 SHORT $LL3@Destroy_ra
  0001c	5e		 pop	 esi

; 98   : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z$0
__ehfuncinfo$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z
_TEXT	SEGMENT
$T47816 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T47816[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@2
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN3@construct@2:

; 203  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T47816[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct
PUBLIC	?normalizeEOL@StyledWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z ; Json::StyledWriter::normalizeEOL
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?normalizeEOL@StyledWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?normalizeEOL@StyledWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z$0
__ehfuncinfo$?normalizeEOL@StyledWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?normalizeEOL@StyledWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
xdata$x	ENDS
;	COMDAT ?normalizeEOL@StyledWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z
_TEXT	SEGMENT
$T47836 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_c$35233 = 12						; size = 1
_text$ = 12						; size = 4
?normalizeEOL@StyledWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z PROC ; Json::StyledWriter::normalizeEOL, COMDAT

; 519  : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?normalizeEOL@StyledWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 525  :    while ( current != end )

  0000c	33 c0		 xor	 eax, eax
  0000e	89 45 f0	 mov	 DWORD PTR $T47836[ebp], eax
  00011	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00014	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  0001b	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0001e	88 07		 mov	 BYTE PTR [edi], al

; 536  :    }
; 537  :    return normalized;

  00020	8b 75 0c	 mov	 esi, DWORD PTR _text$[ebp]
  00023	ff 76 10	 push	 DWORD PTR [esi+16]
  00026	8b cf		 mov	 ecx, edi
  00028	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  0002b	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T47836[ebp], 1
  00032	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
  00037	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0003b	72 04		 jb	 SHORT $LN42@normalizeE

; 520  :    std::string normalized;
; 521  :    normalized.reserve( text.length() );
; 522  :    const char *begin = text.c_str();

  0003d	8b 06		 mov	 eax, DWORD PTR [esi]
  0003f	eb 02		 jmp	 SHORT $LN43@normalizeE
$LN42@normalizeE:
  00041	8b c6		 mov	 eax, esi
$LN43@normalizeE:

; 523  :    const char *end = begin + text.length();

  00043	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00046	03 d8		 add	 ebx, eax

; 524  :    const char *current = begin;

  00048	8b f0		 mov	 esi, eax

; 525  :    while ( current != end )

  0004a	3b c3		 cmp	 eax, ebx
  0004c	74 24		 je	 SHORT $LN4@normalizeE
$LL5@normalizeE:

; 526  :    {
; 527  :       char c = *current++;

  0004e	8a 06		 mov	 al, BYTE PTR [esi]
  00050	46		 inc	 esi
  00051	88 45 0c	 mov	 BYTE PTR _c$35233[ebp], al

; 528  :       if ( c == '\r' ) // mac or dos EOL

  00054	3c 0d		 cmp	 al, 13			; 0000000dH
  00056	75 0a		 jne	 SHORT $LN3@normalizeE

; 529  :       {
; 530  :          if ( *current == '\n' ) // convert dos EOL

  00058	80 3e 0a	 cmp	 BYTE PTR [esi], 10	; 0000000aH
  0005b	75 01		 jne	 SHORT $LN2@normalizeE

; 531  :             ++current;

  0005d	46		 inc	 esi
$LN2@normalizeE:

; 532  :          normalized += '\n';

  0005e	6a 0a		 push	 10			; 0000000aH

; 533  :       }
; 534  :       else // handle unix EOL & other char

  00060	eb 03		 jmp	 SHORT $LN52@normalizeE
$LN3@normalizeE:

; 535  :          normalized += c;

  00062	ff 75 0c	 push	 DWORD PTR _c$35233[ebp]
$LN52@normalizeE:
  00065	6a 01		 push	 1
  00067	8b cf		 mov	 ecx, edi
  00069	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0006e	3b f3		 cmp	 esi, ebx
  00070	75 dc		 jne	 SHORT $LL5@normalizeE
$LN4@normalizeE:

; 536  :    }
; 537  :    return normalized;

  00072	8b c7		 mov	 eax, edi

; 538  : }

  00074	e8 00 00 00 00	 call	 __EH_epilog3
  00079	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?normalizeEOL@StyledWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T47836[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN9@normalizeE
  0000c	83 65 f0 fe	 and	 DWORD PTR $T47836[ebp], -2 ; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN9@normalizeE:
  00018	c3		 ret	 0
__ehhandler$?normalizeEOL@StyledWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?normalizeEOL@StyledWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?normalizeEOL@StyledWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z ENDP ; Json::StyledWriter::normalizeEOL
PUBLIC	?normalizeEOL@StyledStreamWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z ; Json::StyledStreamWriter::normalizeEOL
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?normalizeEOL@StyledStreamWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?normalizeEOL@StyledStreamWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z$0
__ehfuncinfo$?normalizeEOL@StyledStreamWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?normalizeEOL@StyledStreamWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
xdata$x	ENDS
;	COMDAT ?normalizeEOL@StyledStreamWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z
_TEXT	SEGMENT
$T47971 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_c$35416 = 12						; size = 1
_text$ = 12						; size = 4
?normalizeEOL@StyledStreamWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z PROC ; Json::StyledStreamWriter::normalizeEOL, COMDAT

; 800  : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?normalizeEOL@StyledStreamWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 806  :    while ( current != end )

  0000c	33 c0		 xor	 eax, eax
  0000e	89 45 f0	 mov	 DWORD PTR $T47971[ebp], eax
  00011	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00014	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  0001b	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0001e	88 07		 mov	 BYTE PTR [edi], al

; 817  :    }
; 818  :    return normalized;

  00020	8b 75 0c	 mov	 esi, DWORD PTR _text$[ebp]
  00023	ff 76 10	 push	 DWORD PTR [esi+16]
  00026	8b cf		 mov	 ecx, edi
  00028	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  0002b	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T47971[ebp], 1
  00032	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
  00037	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0003b	72 04		 jb	 SHORT $LN42@normalizeE@2

; 801  :    std::string normalized;
; 802  :    normalized.reserve( text.length() );
; 803  :    const char *begin = text.c_str();

  0003d	8b 06		 mov	 eax, DWORD PTR [esi]
  0003f	eb 02		 jmp	 SHORT $LN43@normalizeE@2
$LN42@normalizeE@2:
  00041	8b c6		 mov	 eax, esi
$LN43@normalizeE@2:

; 804  :    const char *end = begin + text.length();

  00043	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00046	03 d8		 add	 ebx, eax

; 805  :    const char *current = begin;

  00048	8b f0		 mov	 esi, eax

; 806  :    while ( current != end )

  0004a	3b c3		 cmp	 eax, ebx
  0004c	74 24		 je	 SHORT $LN4@normalizeE@2
$LL5@normalizeE@2:

; 807  :    {
; 808  :       char c = *current++;

  0004e	8a 06		 mov	 al, BYTE PTR [esi]
  00050	46		 inc	 esi
  00051	88 45 0c	 mov	 BYTE PTR _c$35416[ebp], al

; 809  :       if ( c == '\r' ) // mac or dos EOL

  00054	3c 0d		 cmp	 al, 13			; 0000000dH
  00056	75 0a		 jne	 SHORT $LN3@normalizeE@2

; 810  :       {
; 811  :          if ( *current == '\n' ) // convert dos EOL

  00058	80 3e 0a	 cmp	 BYTE PTR [esi], 10	; 0000000aH
  0005b	75 01		 jne	 SHORT $LN2@normalizeE@2

; 812  :             ++current;

  0005d	46		 inc	 esi
$LN2@normalizeE@2:

; 813  :          normalized += '\n';

  0005e	6a 0a		 push	 10			; 0000000aH

; 814  :       }
; 815  :       else // handle unix EOL & other char

  00060	eb 03		 jmp	 SHORT $LN52@normalizeE@2
$LN3@normalizeE@2:

; 816  :          normalized += c;

  00062	ff 75 0c	 push	 DWORD PTR _c$35416[ebp]
$LN52@normalizeE@2:
  00065	6a 01		 push	 1
  00067	8b cf		 mov	 ecx, edi
  00069	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0006e	3b f3		 cmp	 esi, ebx
  00070	75 dc		 jne	 SHORT $LL5@normalizeE@2
$LN4@normalizeE@2:

; 817  :    }
; 818  :    return normalized;

  00072	8b c7		 mov	 eax, edi

; 819  : }

  00074	e8 00 00 00 00	 call	 __EH_epilog3
  00079	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?normalizeEOL@StyledStreamWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T47971[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN9@normalizeE@2
  0000c	83 65 f0 fe	 and	 DWORD PTR $T47971[ebp], -2 ; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN9@normalizeE@2:
  00018	c3		 ret	 0
__ehhandler$?normalizeEOL@StyledStreamWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?normalizeEOL@StyledStreamWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?normalizeEOL@StyledStreamWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z ENDP ; Json::StyledStreamWriter::normalizeEOL
PUBLIC	?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\sstream
;	COMDAT ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T48105 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 592  : 		{	// return string copy of character array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 593  : 		return (_Stringbuffer.str());

  00004	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00007	83 65 fc 00	 and	 DWORD PTR $T48105[ebp], 0
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 594  : 		}

  00016	c9		 leave
  00017	c2 04 00	 ret	 4
?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
PUBLIC	??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z
_TEXT	SEGMENT
__Cat$48112 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z PROC ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$48112[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z ENDP ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$48119 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$48119[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z
_TEXT	SEGMENT
$T48138 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z PROC ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T48138[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@2
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN7@Cons_val@2:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T48138[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z ENDP ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??_C@_02DCNDPIBM@?2b?$AA@			; `string'
PUBLIC	??_C@_02COELENML@?2t?$AA@			; `string'
PUBLIC	??_C@_02JOGGLHBA@?2n?$AA@			; `string'
PUBLIC	??_C@_02FGLPDNBI@?2f?$AA@			; `string'
PUBLIC	??_C@_02HIBBOKEN@?2r?$AA@			; `string'
PUBLIC	??_C@_02MCKKLHBJ@?2?$CC?$AA@			; `string'
PUBLIC	??_C@_02HDBGODGB@?2?2?$AA@			; `string'
PUBLIC	??_C@_02DHFAHMIK@?2u?$AA@			; `string'
PUBLIC	??_C@_01BJJEKLCA@?$CC?$AA@			; `string'
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	??_C@_07FKPPGBGM@?$CC?2?$AI?$AM?6?$AN?7?$AA@	; `string'
PUBLIC	?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; Json::valueToQuotedString
EXTRN	?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z:PROC	; std::setw
EXTRN	_strpbrk:PROC
;	COMDAT ??_C@_02DCNDPIBM@?2b?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_02DCNDPIBM@?2b?$AA@ DB '\b', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02COELENML@?2t?$AA@
CONST	SEGMENT
??_C@_02COELENML@?2t?$AA@ DB '\t', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JOGGLHBA@?2n?$AA@
CONST	SEGMENT
??_C@_02JOGGLHBA@?2n?$AA@ DB '\n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FGLPDNBI@?2f?$AA@
CONST	SEGMENT
??_C@_02FGLPDNBI@?2f?$AA@ DB '\f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HIBBOKEN@?2r?$AA@
CONST	SEGMENT
??_C@_02HIBBOKEN@?2r?$AA@ DB '\r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MCKKLHBJ@?2?$CC?$AA@
CONST	SEGMENT
??_C@_02MCKKLHBJ@?2?$CC?$AA@ DB '\"', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HDBGODGB@?2?2?$AA@
CONST	SEGMENT
??_C@_02HDBGODGB@?2?2?$AA@ DB '\\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DHFAHMIK@?2u?$AA@
CONST	SEGMENT
??_C@_02DHFAHMIK@?2u?$AA@ DB '\u', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BJJEKLCA@?$CC?$AA@
CONST	SEGMENT
??_C@_01BJJEKLCA@?$CC?$AA@ DB '"', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FKPPGBGM@?$CC?2?$AI?$AM?6?$AN?7?$AA@
CONST	SEGMENT
??_C@_07FKPPGBGM@?$CC?2?$AI?$AM?6?$AN?7?$AA@ DB '"\', 08H, 0cH, 0aH, 0dH, 09H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$5
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
xdata$x	ENDS
;	COMDAT ?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
_TEXT	SEGMENT
_oss$34601 = -260					; size = 152
___$ReturnUdt$GSCopy$ = -108				; size = 4
$T48162 = -104						; size = 4
_c$34438 = -104						; size = 4
$T34433 = -100						; size = 28
$T48157 = -88						; size = 16
$T34843 = -72						; size = 28
$T34406 = -72						; size = 28
_result$ = -44						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_value$ = 12						; size = 4
?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z PROC ; Json::valueToQuotedString, COMDAT

; 112  : {

  00000	68 f8 00 00 00	 push	 248			; 000000f8H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00012	8b 7d 0c	 mov	 edi, DWORD PTR _value$[ebp]

; 113  :    // Not sure how to handle unicode...
; 114  :    if (strpbrk(value, "\"\\\b\f\n\r\t") == NULL && !containsControlCharacter( value ))

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_07FKPPGBGM@?$CC?2?$AI?$AM?6?$AN?7?$AA@
  0001a	33 db		 xor	 ebx, ebx
  0001c	57		 push	 edi

; 168  :       }
; 169  :    }
; 170  :    result += "\"";

  0001d	89 45 94	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  00020	89 5d 98	 mov	 DWORD PTR $T48162[ebp], ebx
  00023	e8 00 00 00 00	 call	 _strpbrk
  00028	59		 pop	 ecx
  00029	59		 pop	 ecx
  0002a	85 c0		 test	 eax, eax
  0002c	75 66		 jne	 SHORT $LN16@valueToQuo

; 113  :    // Not sure how to handle unicode...
; 114  :    if (strpbrk(value, "\"\\\b\f\n\r\t") == NULL && !containsControlCharacter( value ))

  0002e	8b f7		 mov	 esi, edi
  00030	38 1f		 cmp	 BYTE PTR [edi], bl
  00032	74 15		 je	 SHORT $LN27@valueToQuo
$LL28@valueToQuo:
  00034	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00037	fe c8		 dec	 al
  00039	b1 1e		 mov	 cl, 30			; 0000001eH
  0003b	3a c8		 cmp	 cl, al
  0003d	1b c0		 sbb	 eax, eax
  0003f	40		 inc	 eax
  00040	46		 inc	 esi
  00041	3a c3		 cmp	 al, bl
  00043	75 4f		 jne	 SHORT $LN16@valueToQuo
  00045	38 1e		 cmp	 BYTE PTR [esi], bl
  00047	75 eb		 jne	 SHORT $LL28@valueToQuo
$LN27@valueToQuo:

; 115  :       return std::string("\"") + value + "\"";

  00049	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
  0004e	56		 push	 esi
  0004f	8d 4d b8	 lea	 ecx, DWORD PTR $T34406[ebp]
  00052	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00057	57		 push	 edi
  00058	50		 push	 eax
  00059	8d 45 9c	 lea	 eax, DWORD PTR $T34433[ebp]
  0005c	50		 push	 eax
  0005d	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00060	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00065	56		 push	 esi
  00066	50		 push	 eax
  00067	ff 75 94	 push	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0006a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0006e	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00073	83 c4 18	 add	 esp, 24			; 00000018H
  00076	53		 push	 ebx
  00077	6a 01		 push	 1
  00079	8d 4d 9c	 lea	 ecx, DWORD PTR $T34433[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00081	53		 push	 ebx
  00082	6a 01		 push	 1
  00084	8d 4d b8	 lea	 ecx, DWORD PTR $T34406[ebp]
  00087	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0008c	8b 45 94	 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0008f	e9 ec 01 00 00	 jmp	 $LN17@valueToQuo
$LN16@valueToQuo:

; 116  :    // We have to walk value and escape any special characters.
; 117  :    // Appending to std::string is not efficient, but this should be rare.
; 118  :    // (Note: forward slashes are *not* rare, but I am not escaping them.)
; 119  :    unsigned maxsize = strlen(value)*2 + 3; // allescaped+quotes+NULL

  00094	57		 push	 edi
  00095	e8 00 00 00 00	 call	 _strlen
  0009a	59		 pop	 ecx
  0009b	8d 44 00 03	 lea	 eax, DWORD PTR [eax+eax+3]

; 120  :    std::string result;

  0009f	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR _result$[ebp+20], 15 ; 0000000fH
  000a6	89 5d e4	 mov	 DWORD PTR _result$[ebp+16], ebx
  000a9	88 5d d4	 mov	 BYTE PTR _result$[ebp], bl

; 121  :    result.reserve(maxsize); // to avoid lots of mallocs

  000ac	50		 push	 eax
  000ad	8d 4d d4	 lea	 ecx, DWORD PTR _result$[ebp]
  000b0	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000b7	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve

; 122  :    result += "\"";

  000bc	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
  000c1	56		 push	 esi
  000c2	e8 00 00 00 00	 call	 _strlen
  000c7	59		 pop	 ecx
  000c8	50		 push	 eax
  000c9	56		 push	 esi
  000ca	8d 4d d4	 lea	 ecx, DWORD PTR _result$[ebp]
  000cd	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 123  :    for (const char* c=value; *c != 0; ++c)

  000d2	89 7d 98	 mov	 DWORD PTR _c$34438[ebp], edi
  000d5	38 1f		 cmp	 BYTE PTR [edi], bl
  000d7	0f 84 6b 01 00
	00		 je	 $LN13@valueToQuo
$LN15@valueToQuo:

; 124  :    {
; 125  :       switch(*c)

  000dd	8b 45 98	 mov	 eax, DWORD PTR _c$34438[ebp]
  000e0	8a 08		 mov	 cl, BYTE PTR [eax]
  000e2	0f be c1	 movsx	 eax, cl
  000e5	83 e8 08	 sub	 eax, 8
  000e8	0f 84 36 01 00
	00		 je	 $LN8@valueToQuo
  000ee	48		 dec	 eax
  000ef	0f 84 28 01 00
	00		 je	 $LN4@valueToQuo
  000f5	48		 dec	 eax
  000f6	0f 84 1a 01 00
	00		 je	 $LN6@valueToQuo
  000fc	48		 dec	 eax
  000fd	48		 dec	 eax
  000fe	0f 84 0b 01 00
	00		 je	 $LN7@valueToQuo
  00104	48		 dec	 eax
  00105	0f 84 fd 00 00
	00		 je	 $LN5@valueToQuo
  0010b	83 e8 15	 sub	 eax, 21			; 00000015H
  0010e	0f 84 ed 00 00
	00		 je	 $LN10@valueToQuo
  00114	83 e8 3a	 sub	 eax, 58			; 0000003aH
  00117	0f 84 dd 00 00
	00		 je	 $LN9@valueToQuo

; 148  :          //case '/':
; 149  :             // Even though \/ is considered a legal escape in JSON, a bare
; 150  :             // slash is also legal, so I see no reason to escape it.
; 151  :             // (I hope I am not misunderstanding something.
; 152  :             // blep notes: actually escaping \/ may be useful in javascript to avoid </ 
; 153  :             // sequence.
; 154  :             // Should add a flag to allow this compatibility mode and prevent this 
; 155  :             // sequence from occurring.
; 156  :          default:
; 157  :             if ( isControlCharacter( *c ) )

  0011d	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00120	3c 1e		 cmp	 al, 30			; 0000001eH
  00122	0f 87 c5 00 00
	00		 ja	 $LN2@valueToQuo

; 158  :             {
; 159  :                std::ostringstream oss;

  00128	6a 01		 push	 1
  0012a	6a 02		 push	 2
  0012c	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _oss$34601[ebp]
  00132	e8 00 00 00 00	 call	 ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >

; 160  :                oss << "\\u" << std::hex << std::uppercase << std::setfill('0') << std::setw(4) << static_cast<int>(*c);

  00137	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _oss$34601[ebp]
  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_02DHFAHMIK@?2u?$AA@
  00142	50		 push	 eax
  00143	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00147	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0014c	8b f8		 mov	 edi, eax
  0014e	59		 pop	 ecx
  0014f	59		 pop	 ecx
  00150	3b fb		 cmp	 edi, ebx
  00152	75 04		 jne	 SHORT $LN127@valueToQuo
  00154	33 c0		 xor	 eax, eax
  00156	eb 07		 jmp	 SHORT $LN128@valueToQuo
$LN127@valueToQuo:
  00158	8b 07		 mov	 eax, DWORD PTR [edi]
  0015a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0015d	03 c7		 add	 eax, edi
$LN128@valueToQuo:
  0015f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00162	81 e1 ff f9 ff
	ff		 and	 ecx, -1537		; fffff9ffH
  00168	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  0016e	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00171	3b fb		 cmp	 edi, ebx
  00173	75 04		 jne	 SHORT $LN135@valueToQuo
  00175	33 c0		 xor	 eax, eax
  00177	eb 07		 jmp	 SHORT $LN136@valueToQuo
$LN135@valueToQuo:
  00179	8b 07		 mov	 eax, DWORD PTR [edi]
  0017b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0017e	03 c7		 add	 eax, edi
$LN136@valueToQuo:
  00180	83 48 14 04	 or	 DWORD PTR [eax+20], 4
  00184	8b 07		 mov	 eax, DWORD PTR [edi]
  00186	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00189	c6 44 38 40 30	 mov	 BYTE PTR [eax+edi+64], 48 ; 00000030H
  0018e	8b 45 98	 mov	 eax, DWORD PTR _c$34438[ebp]
  00191	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00194	50		 push	 eax
  00195	53		 push	 ebx
  00196	8d 45 a8	 lea	 eax, DWORD PTR $T48157[ebp]
  00199	6a 04		 push	 4
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 ?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z ; std::setw
  001a1	50		 push	 eax
  001a2	57		 push	 edi
  001a3	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@_J@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char>,__int64>
  001a8	83 c4 14	 add	 esp, 20			; 00000014H
  001ab	8b c8		 mov	 ecx, eax
  001ad	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 161  :                result += oss.str();

  001b2	8d 45 b8	 lea	 eax, DWORD PTR $T34843[ebp]
  001b5	50		 push	 eax
  001b6	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _oss$34601[ebp]
  001bc	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  001c1	6a ff		 push	 -1
  001c3	53		 push	 ebx
  001c4	50		 push	 eax
  001c5	8d 4d d4	 lea	 ecx, DWORD PTR _result$[ebp]
  001c8	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001cc	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  001d1	53		 push	 ebx
  001d2	6a 01		 push	 1
  001d4	8d 4d b8	 lea	 ecx, DWORD PTR $T34843[ebp]
  001d7	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 162  :             }

  001dc	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _oss$34601[ebp]
  001e2	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001e6	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ

; 163  :             else

  001eb	eb 4d		 jmp	 SHORT $LN14@valueToQuo
$LN2@valueToQuo:

; 164  :             {
; 165  :                result += *c;

  001ed	51		 push	 ecx
  001ee	6a 01		 push	 1
  001f0	8d 4d d4	 lea	 ecx, DWORD PTR _result$[ebp]
  001f3	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 166  :             }
; 167  :             break;

  001f8	eb 40		 jmp	 SHORT $LN14@valueToQuo
$LN9@valueToQuo:

; 130  :          case '\\':
; 131  :             result += "\\\\";

  001fa	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_02HDBGODGB@?2?2?$AA@

; 132  :             break;

  001ff	eb 28		 jmp	 SHORT $LN202@valueToQuo
$LN10@valueToQuo:

; 126  :       {
; 127  :          case '\"':
; 128  :             result += "\\\"";

  00201	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_02MCKKLHBJ@?2?$CC?$AA@

; 129  :             break;

  00206	eb 21		 jmp	 SHORT $LN202@valueToQuo
$LN5@valueToQuo:

; 142  :          case '\r':
; 143  :             result += "\\r";

  00208	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_02HIBBOKEN@?2r?$AA@

; 144  :             break;

  0020d	eb 1a		 jmp	 SHORT $LN202@valueToQuo
$LN7@valueToQuo:

; 135  :             break;
; 136  :          case '\f':
; 137  :             result += "\\f";

  0020f	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_02FGLPDNBI@?2f?$AA@

; 138  :             break;

  00214	eb 13		 jmp	 SHORT $LN202@valueToQuo
$LN6@valueToQuo:

; 139  :          case '\n':
; 140  :             result += "\\n";

  00216	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_02JOGGLHBA@?2n?$AA@

; 141  :             break;

  0021b	eb 0c		 jmp	 SHORT $LN202@valueToQuo
$LN4@valueToQuo:

; 145  :          case '\t':
; 146  :             result += "\\t";

  0021d	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_02COELENML@?2t?$AA@

; 147  :             break;

  00222	eb 05		 jmp	 SHORT $LN202@valueToQuo
$LN8@valueToQuo:

; 133  :          case '\b':
; 134  :             result += "\\b";

  00224	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_02DCNDPIBM@?2b?$AA@
$LN202@valueToQuo:
  00229	57		 push	 edi
  0022a	e8 00 00 00 00	 call	 _strlen
  0022f	59		 pop	 ecx
  00230	50		 push	 eax
  00231	57		 push	 edi
  00232	8d 4d d4	 lea	 ecx, DWORD PTR _result$[ebp]
  00235	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN14@valueToQuo:

; 123  :    for (const char* c=value; *c != 0; ++c)

  0023a	ff 45 98	 inc	 DWORD PTR _c$34438[ebp]
  0023d	8b 45 98	 mov	 eax, DWORD PTR _c$34438[ebp]
  00240	38 18		 cmp	 BYTE PTR [eax], bl
  00242	0f 85 95 fe ff
	ff		 jne	 $LN15@valueToQuo
$LN13@valueToQuo:

; 168  :       }
; 169  :    }
; 170  :    result += "\"";

  00248	56		 push	 esi
  00249	e8 00 00 00 00	 call	 _strlen
  0024e	59		 pop	 ecx
  0024f	50		 push	 eax
  00250	56		 push	 esi
  00251	8d 4d d4	 lea	 ecx, DWORD PTR _result$[ebp]
  00254	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 171  :    return result;

  00259	8b 75 94	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0025c	8d 45 d4	 lea	 eax, DWORD PTR _result$[ebp]
  0025f	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00266	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00269	50		 push	 eax
  0026a	8b ce		 mov	 ecx, esi
  0026c	88 1e		 mov	 BYTE PTR [esi], bl
  0026e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00273	53		 push	 ebx
  00274	6a 01		 push	 1
  00276	8d 4d d4	 lea	 ecx, DWORD PTR _result$[ebp]
  00279	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0027e	8b c6		 mov	 eax, esi
$LN17@valueToQuo:

; 172  : }

  00280	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00285	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR $T34406[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1:
  00008	8d 4d 9c	 lea	 ecx, DWORD PTR $T34433[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$3:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR _result$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$4:
  00018	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _oss$34601[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$5:
  00023	8d 4d b8	 lea	 ecx, DWORD PTR $T34843[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 8a f8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-264]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00042	33 c8		 xor	 ecx, eax
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  0004e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ENDP ; Json::valueToQuotedString
PUBLIC	?writeCommentBeforeValue@StyledWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledWriter::writeCommentBeforeValue
EXTRN	?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z:PROC ; Json::Value::getComment
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?writeCommentBeforeValue@StyledWriter@Json@@AAEXABVValue@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?writeCommentBeforeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?writeCommentBeforeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$1
__ehfuncinfo$?writeCommentBeforeValue@StyledWriter@Json@@AAEXABVValue@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?writeCommentBeforeValue@StyledWriter@Json@@AAEXABVValue@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
xdata$x	ENDS
;	COMDAT ?writeCommentBeforeValue@StyledWriter@Json@@AAEXABVValue@2@@Z
_TEXT	SEGMENT
$T35178 = -72						; size = 28
$T35179 = -44						; size = 28
__$EHRec$ = -12						; size = 12
_root$ = 8						; size = 4
?writeCommentBeforeValue@StyledWriter@Json@@AAEXABVValue@2@@Z PROC ; Json::StyledWriter::writeCommentBeforeValue, COMDAT
; _this$ = ecx

; 485  : {

  00000	6a 3c		 push	 60			; 0000003cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?writeCommentBeforeValue@StyledWriter@Json@@AAEXABVValue@2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 5d 08	 mov	 ebx, DWORD PTR _root$[ebp]
  0000f	8b f9		 mov	 edi, ecx

; 486  :    if ( !root.hasComment( commentBefore ) )

  00011	33 f6		 xor	 esi, esi
  00013	56		 push	 esi
  00014	8b cb		 mov	 ecx, ebx
  00016	e8 00 00 00 00	 call	 ?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ; Json::Value::hasComment
  0001b	84 c0		 test	 al, al
  0001d	74 41		 je	 SHORT $LN14@writeComme

; 487  :       return;
; 488  :    document_ += normalizeEOL( root.getComment( commentBefore ) );

  0001f	56		 push	 esi
  00020	8d 45 b8	 lea	 eax, DWORD PTR $T35178[ebp]
  00023	50		 push	 eax
  00024	8b cb		 mov	 ecx, ebx
  00026	e8 00 00 00 00	 call	 ?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::getComment
  0002b	50		 push	 eax
  0002c	8d 45 d4	 lea	 eax, DWORD PTR $T35179[ebp]
  0002f	50		 push	 eax
  00030	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  00033	e8 00 00 00 00	 call	 ?normalizeEOL@StyledWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z ; Json::StyledWriter::normalizeEOL
  00038	59		 pop	 ecx
  00039	59		 pop	 ecx
  0003a	6a ff		 push	 -1
  0003c	56		 push	 esi
  0003d	50		 push	 eax
  0003e	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00041	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00045	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0004a	56		 push	 esi
  0004b	6a 01		 push	 1
  0004d	8d 4d d4	 lea	 ecx, DWORD PTR $T35179[ebp]
  00050	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00055	56		 push	 esi
  00056	6a 01		 push	 1
  00058	8d 4d b8	 lea	 ecx, DWORD PTR $T35178[ebp]
  0005b	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
$LN14@writeComme:

; 489  :    //document_ += "\n";
; 490  : }

  00060	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00065	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?writeCommentBeforeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR $T35178[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeCommentBeforeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR $T35179[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?writeCommentBeforeValue@StyledWriter@Json@@AAEXABVValue@2@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?writeCommentBeforeValue@StyledWriter@Json@@AAEXABVValue@2@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?writeCommentBeforeValue@StyledWriter@Json@@AAEXABVValue@2@@Z ENDP ; Json::StyledWriter::writeCommentBeforeValue
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	_root$GSCopy$
PUBLIC	?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledWriter::writeCommentAfterValueOnSameLine
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z$4
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
xdata$x	ENDS
;	COMDAT ?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z
_TEXT	SEGMENT
_root$GSCopy$ = -160					; size = 4
$T35216 = -156						; size = 28
$T35217 = -128						; size = 28
$T35213 = -100						; size = 28
$T35185 = -72						; size = 28
$T35186 = -44						; size = 28
__$EHRec$ = -12						; size = 12
_root$ = 8						; size = 4
?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z PROC ; Json::StyledWriter::writeCommentAfterValueOnSameLine, COMDAT
; _this$ = ecx

; 495  : {

  00000	68 94 00 00 00	 push	 148			; 00000094H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 496  :    if ( root.hasComment( commentAfterOnSameLine ) )

  0000f	33 db		 xor	 ebx, ebx
  00011	8b f9		 mov	 edi, ecx
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _root$[ebp]
  00016	43		 inc	 ebx
  00017	53		 push	 ebx

; 500  :    {
; 501  :       //document_ += "\n";
; 502  :       document_ += normalizeEOL( root.getComment( commentAfter ) );

  00018	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _root$GSCopy$[ebp], ecx
  0001e	e8 00 00 00 00	 call	 ?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ; Json::Value::hasComment
  00023	33 f6		 xor	 esi, esi
  00025	84 c0		 test	 al, al
  00027	74 64		 je	 SHORT $LN22@writeComme@2

; 497  :       document_ += " " + normalizeEOL( root.getComment( commentAfterOnSameLine ) );

  00029	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _root$GSCopy$[ebp]
  0002f	53		 push	 ebx
  00030	8d 45 b8	 lea	 eax, DWORD PTR $T35185[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::getComment
  00039	50		 push	 eax
  0003a	8d 45 d4	 lea	 eax, DWORD PTR $T35186[ebp]
  0003d	50		 push	 eax
  0003e	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  00041	e8 00 00 00 00	 call	 ?normalizeEOL@StyledWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z ; Json::StyledWriter::normalizeEOL
  00046	50		 push	 eax
  00047	8d 45 9c	 lea	 eax, DWORD PTR $T35213[ebp]
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  0004f	50		 push	 eax
  00050	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00053	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD$$QAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00058	83 c4 14	 add	 esp, 20			; 00000014H
  0005b	6a ff		 push	 -1
  0005d	56		 push	 esi
  0005e	50		 push	 eax
  0005f	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00062	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00066	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0006b	56		 push	 esi
  0006c	53		 push	 ebx
  0006d	8d 4d 9c	 lea	 ecx, DWORD PTR $T35213[ebp]
  00070	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00075	56		 push	 esi
  00076	53		 push	 ebx
  00077	8d 4d d4	 lea	 ecx, DWORD PTR $T35186[ebp]
  0007a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0007f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00083	56		 push	 esi
  00084	53		 push	 ebx
  00085	8d 4d b8	 lea	 ecx, DWORD PTR $T35185[ebp]
  00088	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
$LN22@writeComme@2:

; 498  : 
; 499  :    if ( root.hasComment( commentAfter ) )

  0008d	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _root$GSCopy$[ebp]
  00093	6a 02		 push	 2
  00095	e8 00 00 00 00	 call	 ?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ; Json::Value::hasComment
  0009a	84 c0		 test	 al, al
  0009c	74 4e		 je	 SHORT $LN34@writeComme@2

; 500  :    {
; 501  :       //document_ += "\n";
; 502  :       document_ += normalizeEOL( root.getComment( commentAfter ) );

  0009e	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _root$GSCopy$[ebp]
  000a4	6a 02		 push	 2
  000a6	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T35216[ebp]
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::getComment
  000b2	50		 push	 eax
  000b3	8d 45 80	 lea	 eax, DWORD PTR $T35217[ebp]
  000b6	50		 push	 eax
  000b7	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  000be	e8 00 00 00 00	 call	 ?normalizeEOL@StyledWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z ; Json::StyledWriter::normalizeEOL
  000c3	59		 pop	 ecx
  000c4	59		 pop	 ecx
  000c5	6a ff		 push	 -1
  000c7	56		 push	 esi
  000c8	50		 push	 eax
  000c9	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  000cc	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000d0	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  000d5	56		 push	 esi
  000d6	53		 push	 ebx
  000d7	8d 4d 80	 lea	 ecx, DWORD PTR $T35217[ebp]
  000da	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  000df	56		 push	 esi
  000e0	53		 push	 ebx
  000e1	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T35216[ebp]
  000e7	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
$LN34@writeComme@2:

; 503  :       //document_ += "\n";
; 504  :    }
; 505  : }

  000ec	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000f1	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR $T35185[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR $T35186[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z$2:
  00010	8d 4d 9c	 lea	 ecx, DWORD PTR $T35213[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z$3:
  00018	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T35216[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z$4:
  00023	8d 4d 80	 lea	 ecx, DWORD PTR $T35217[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z:
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 8a 5c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-164]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00042	33 c8		 xor	 ecx, eax
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z
  0004e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z ENDP ; Json::StyledWriter::writeCommentAfterValueOnSameLine
PUBLIC	?writeCommentBeforeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledStreamWriter::writeCommentBeforeValue
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?writeCommentBeforeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?writeCommentBeforeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?writeCommentBeforeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$1
__ehfuncinfo$?writeCommentBeforeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?writeCommentBeforeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
xdata$x	ENDS
;	COMDAT ?writeCommentBeforeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z
_TEXT	SEGMENT
$T35388 = -72						; size = 28
$T35389 = -44						; size = 28
__$EHRec$ = -12						; size = 12
_root$ = 8						; size = 4
?writeCommentBeforeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z PROC ; Json::StyledStreamWriter::writeCommentBeforeValue, COMDAT
; _this$ = ecx

; 766  : {

  00000	6a 3c		 push	 60			; 0000003cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?writeCommentBeforeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 5d 08	 mov	 ebx, DWORD PTR _root$[ebp]
  0000f	8b f9		 mov	 edi, ecx

; 767  :    if ( !root.hasComment( commentBefore ) )

  00011	33 f6		 xor	 esi, esi
  00013	56		 push	 esi
  00014	8b cb		 mov	 ecx, ebx
  00016	e8 00 00 00 00	 call	 ?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ; Json::Value::hasComment
  0001b	84 c0		 test	 al, al
  0001d	74 3f		 je	 SHORT $LN10@writeComme@3

; 768  :       return;
; 769  :    *document_ << normalizeEOL( root.getComment( commentBefore ) );

  0001f	56		 push	 esi
  00020	8d 45 b8	 lea	 eax, DWORD PTR $T35388[ebp]
  00023	50		 push	 eax
  00024	8b cb		 mov	 ecx, ebx
  00026	e8 00 00 00 00	 call	 ?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::getComment
  0002b	50		 push	 eax
  0002c	8d 45 d4	 lea	 eax, DWORD PTR $T35389[ebp]
  0002f	50		 push	 eax
  00030	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  00033	e8 00 00 00 00	 call	 ?normalizeEOL@StyledStreamWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z ; Json::StyledStreamWriter::normalizeEOL
  00038	50		 push	 eax
  00039	ff 77 10	 push	 DWORD PTR [edi+16]
  0003c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00040	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00045	83 c4 10	 add	 esp, 16			; 00000010H
  00048	56		 push	 esi
  00049	6a 01		 push	 1
  0004b	8d 4d d4	 lea	 ecx, DWORD PTR $T35389[ebp]
  0004e	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00053	56		 push	 esi
  00054	6a 01		 push	 1
  00056	8d 4d b8	 lea	 ecx, DWORD PTR $T35388[ebp]
  00059	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
$LN10@writeComme@3:

; 770  :    //*document_ << "\n";
; 771  : }

  0005e	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00063	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?writeCommentBeforeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR $T35388[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeCommentBeforeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR $T35389[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?writeCommentBeforeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?writeCommentBeforeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?writeCommentBeforeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ENDP ; Json::StyledStreamWriter::writeCommentBeforeValue
PUBLIC	_root$GSCopy$
PUBLIC	?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledStreamWriter::writeCommentAfterValueOnSameLine
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__ehfuncinfo$?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$4
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
xdata$x	ENDS
;	COMDAT ?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z
_TEXT	SEGMENT
_root$GSCopy$ = -160					; size = 4
$T35399 = -156						; size = 28
$T35400 = -128						; size = 28
$T35397 = -100						; size = 28
$T35395 = -72						; size = 28
$T35396 = -44						; size = 28
__$EHRec$ = -12						; size = 12
_root$ = 8						; size = 4
?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z PROC ; Json::StyledStreamWriter::writeCommentAfterValueOnSameLine, COMDAT
; _this$ = ecx

; 776  : {

  00000	68 94 00 00 00	 push	 148			; 00000094H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 777  :    if ( root.hasComment( commentAfterOnSameLine ) )

  0000f	33 db		 xor	 ebx, ebx
  00011	8b f1		 mov	 esi, ecx
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _root$[ebp]
  00016	43		 inc	 ebx
  00017	53		 push	 ebx

; 781  :    {
; 782  :       //*document_ << "\n";
; 783  :       *document_ << normalizeEOL( root.getComment( commentAfter ) );

  00018	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _root$GSCopy$[ebp], ecx
  0001e	e8 00 00 00 00	 call	 ?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ; Json::Value::hasComment
  00023	33 ff		 xor	 edi, edi
  00025	84 c0		 test	 al, al
  00027	74 61		 je	 SHORT $LN18@writeComme@4

; 778  :       *document_ << " " + normalizeEOL( root.getComment( commentAfterOnSameLine ) );

  00029	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _root$GSCopy$[ebp]
  0002f	53		 push	 ebx
  00030	8d 45 b8	 lea	 eax, DWORD PTR $T35395[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::getComment
  00039	50		 push	 eax
  0003a	8d 45 d4	 lea	 eax, DWORD PTR $T35396[ebp]
  0003d	50		 push	 eax
  0003e	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00041	e8 00 00 00 00	 call	 ?normalizeEOL@StyledStreamWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z ; Json::StyledStreamWriter::normalizeEOL
  00046	50		 push	 eax
  00047	8d 45 9c	 lea	 eax, DWORD PTR $T35397[ebp]
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  0004f	50		 push	 eax
  00050	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00053	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD$$QAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00058	50		 push	 eax
  00059	ff 76 10	 push	 DWORD PTR [esi+16]
  0005c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00060	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00065	83 c4 1c	 add	 esp, 28			; 0000001cH
  00068	57		 push	 edi
  00069	53		 push	 ebx
  0006a	8d 4d 9c	 lea	 ecx, DWORD PTR $T35397[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00072	57		 push	 edi
  00073	53		 push	 ebx
  00074	8d 4d d4	 lea	 ecx, DWORD PTR $T35396[ebp]
  00077	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0007c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00080	57		 push	 edi
  00081	53		 push	 ebx
  00082	8d 4d b8	 lea	 ecx, DWORD PTR $T35395[ebp]
  00085	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
$LN18@writeComme@4:

; 779  : 
; 780  :    if ( root.hasComment( commentAfter ) )

  0008a	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _root$GSCopy$[ebp]
  00090	6a 02		 push	 2
  00092	e8 00 00 00 00	 call	 ?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ; Json::Value::hasComment
  00097	84 c0		 test	 al, al
  00099	74 4c		 je	 SHORT $LN26@writeComme@4

; 781  :    {
; 782  :       //*document_ << "\n";
; 783  :       *document_ << normalizeEOL( root.getComment( commentAfter ) );

  0009b	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _root$GSCopy$[ebp]
  000a1	6a 02		 push	 2
  000a3	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T35399[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::getComment
  000af	50		 push	 eax
  000b0	8d 45 80	 lea	 eax, DWORD PTR $T35400[ebp]
  000b3	50		 push	 eax
  000b4	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  000bb	e8 00 00 00 00	 call	 ?normalizeEOL@StyledStreamWriter@Json@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z ; Json::StyledStreamWriter::normalizeEOL
  000c0	50		 push	 eax
  000c1	ff 76 10	 push	 DWORD PTR [esi+16]
  000c4	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000c8	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  000cd	83 c4 10	 add	 esp, 16			; 00000010H
  000d0	57		 push	 edi
  000d1	53		 push	 ebx
  000d2	8d 4d 80	 lea	 ecx, DWORD PTR $T35400[ebp]
  000d5	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  000da	57		 push	 edi
  000db	53		 push	 ebx
  000dc	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T35399[ebp]
  000e2	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
$LN26@writeComme@4:

; 784  :       //*document_ << "\n";
; 785  :    }
; 786  : }

  000e7	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000ec	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR $T35395[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR $T35396[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$2:
  00010	8d 4d 9c	 lea	 ecx, DWORD PTR $T35397[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$3:
  00018	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T35399[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$4:
  00023	8d 4d 80	 lea	 ecx, DWORD PTR $T35400[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z:
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 8a 5c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-164]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00042	33 c8		 xor	 ecx, eax
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z
  0004e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ENDP ; Json::StyledStreamWriter::writeCommentAfterValueOnSameLine
PUBLIC	?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Cat$48872 = 12					; size = 1
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00003	ff 75 0c	 push	 DWORD PTR __Cat$48872[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1271 : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ
_TEXT	SEGMENT
__Cat$48898 = -4					; size = 1
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	85 c0		 test	 eax, eax
  0000b	74 1a		 je	 SHORT $LN12@Tidy@5

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0000d	ff 75 fc	 push	 DWORD PTR __Cat$48898[ebp]
  00010	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00013	51		 push	 ecx
  00014	ff 76 04	 push	 DWORD PTR [esi+4]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0001d	ff 36		 push	 DWORD PTR [esi]
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00024	83 c4 14	 add	 esp, 20			; 00000014H
$LN12@Tidy@5:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00027	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  0002a	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0002e	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00032	5e		 pop	 esi

; 1312 : 		}

  00033	c9		 leave
  00034	c3		 ret	 0
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 37		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	56		 push	 esi
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00025	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0002a	83 45 10 1c	 add	 DWORD PTR __Dest$[ebp], 28 ; 0000001cH
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	83 c6 1c	 add	 esi, 28			; 0000001cH
  00034	eb e3		 jmp	 SHORT $LL6@Uninit_mov
__catch$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00036	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00039	eb 0c		 jmp	 SHORT $LN34@Uninit_mov
$LL3@Uninit_mov:

; 434  : 		_Dest_val(_Al, _Next);

  0003b	6a 01		 push	 1
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00044	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN34@Uninit_mov:

; 435  : 	_RERAISE;

  00047	6a 00		 push	 0
  00049	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  0004c	75 ed		 jne	 SHORT $LL3@Uninit_mov
  0004e	6a 00		 push	 0
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN35@Uninit_mov:
$LN4@Uninit_mov:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00055	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00058	e8 00 00 00 00	 call	 __EH_epilog3
  0005d	c3		 ret	 0
$LN33@Uninit_mov:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$49087 = 16					; size = 1
__Cat$49063 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __First_arg$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000a	3b 5d 10	 cmp	 ebx, DWORD PTR __Last_arg$[ebp]
  0000d	74 2a		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	57		 push	 edi
  00013	ff 75 10	 push	 DWORD PTR __Cat$49063[ebp]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001b	e8 00 00 00 00	 call	 ??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00020	ff 75 10	 push	 DWORD PTR __Cat$49087[ebp]
  00023	8b f8		 mov	 edi, eax
  00025	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00028	50		 push	 eax
  00029	ff 76 04	 push	 DWORD PTR [esi+4]
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00032	83 c4 20	 add	 esp, 32			; 00000020H

; 1211 : 			this->_Mylast = _Ptr;

  00035	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00038	5f		 pop	 edi
$LN1@erase@2:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00039	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	5e		 pop	 esi
  0003d	89 18		 mov	 DWORD PTR [eax], ebx
  0003f	5b		 pop	 ebx

; 1214 : 		}

  00040	5d		 pop	 ebp
  00041	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$49119 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$49119[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??1StyledStreamWriter@Json@@QAE@XZ		; Json::StyledStreamWriter::~StyledStreamWriter
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\writer.h
;	COMDAT ??1StyledStreamWriter@Json@@QAE@XZ
_TEXT	SEGMENT
??1StyledStreamWriter@Json@@QAE@XZ PROC			; Json::StyledStreamWriter::~StyledStreamWriter, COMDAT
; _this$ = ecx

; 126  :       ~StyledStreamWriter(){}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	6a 00		 push	 0
  00005	6a 01		 push	 1
  00007	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0000f	6a 00		 push	 0
  00011	6a 01		 push	 1
  00013	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00016	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0001b	8b ce		 mov	 ecx, esi
  0001d	5e		 pop	 esi
  0001e	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
??1StyledStreamWriter@Json@@QAE@XZ ENDP			; Json::StyledStreamWriter::~StyledStreamWriter
_TEXT	ENDS
PUBLIC	??_C@_01CELHOKLL@?$HN?$AA@			; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3?$AA@			; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	??_C@_01HCONENDN@?$HL?$AA@			; `string'
PUBLIC	??_C@_01LBDDMOBJ@?$FN?$AA@			; `string'
PUBLIC	??_C@_01IHBHIGKO@?0?$AA@			; `string'
PUBLIC	??_C@_01OHGJGJJP@?$FL?$AA@			; `string'
PUBLIC	??_C@_04MLLLIHIP@null?$AA@			; `string'
PUBLIC	_value$GSCopy$
PUBLIC	?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z	; Json::FastWriter::writeValue
EXTRN	??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Json::Value::operator[]
EXTRN	?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ:PROC ; Json::Value::getMemberNames
EXTRN	??AValue@Json@@QBEABV01@I@Z:PROC		; Json::Value::operator[]
EXTRN	?size@Value@Json@@QBEIXZ:PROC			; Json::Value::size
EXTRN	?asBool@Value@Json@@QBE_NXZ:PROC		; Json::Value::asBool
EXTRN	?asCString@Value@Json@@QBEPBDXZ:PROC		; Json::Value::asCString
EXTRN	?asDouble@Value@Json@@QBENXZ:PROC		; Json::Value::asDouble
EXTRN	?asUInt@Value@Json@@QBEIXZ:PROC			; Json::Value::asUInt
EXTRN	?asInt@Value@Json@@QBEHXZ:PROC			; Json::Value::asInt
EXTRN	?type@Value@Json@@QBE?AW4ValueType@2@XZ:PROC	; Json::Value::type
;	COMDAT ??_C@_01CELHOKLL@?$HN?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_01CELHOKLL@?$HN?$AA@ DB '}', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3?$AA@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3?$AA@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HCONENDN@?$HL?$AA@
CONST	SEGMENT
??_C@_01HCONENDN@?$HL?$AA@ DB '{', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LBDDMOBJ@?$FN?$AA@
CONST	SEGMENT
??_C@_01LBDDMOBJ@?$FN?$AA@ DB ']', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0?$AA@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0?$AA@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OHGJGJJP@?$FL?$AA@
CONST	SEGMENT
??_C@_01OHGJGJJP@?$FL?$AA@ DB '[', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLLLIHIP@null?$AA@
CONST	SEGMENT
??_C@_04MLLLIHIP@null?$AA@ DB 'null', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z$6
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
xdata$x	ENDS
;	COMDAT ?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z
_TEXT	SEGMENT
_members$34900 = -208					; size = 16
_value$GSCopy$ = -192					; size = 4
_size$34890 = -192					; size = 4
tv513 = -188						; size = 4
$T49517 = -188						; size = 4
$T34887 = -184						; size = 28
$T34879 = -156						; size = 28
$T34885 = -128						; size = 28
$T35053 = -100						; size = 28
$T34883 = -72						; size = 28
$T34881 = -44						; size = 28
__$EHRec$ = -12						; size = 12
_value$ = 8						; size = 4
?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z PROC	; Json::FastWriter::writeValue, COMDAT
; _this$ = ecx

; 209  : {

  00000	68 c4 00 00 00	 push	 196			; 000000c4H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 5d 08	 mov	 ebx, DWORD PTR _value$[ebp]
  00012	8b f1		 mov	 esi, ecx

; 210  :    switch ( value.type() )

  00014	8b cb		 mov	 ecx, ebx

; 258  :          }
; 259  :          document_ += "}";

  00016	89 9d 40 ff ff
	ff		 mov	 DWORD PTR _value$GSCopy$[ebp], ebx
  0001c	e8 00 00 00 00	 call	 ?type@Value@Json@@QBE?AW4ValueType@2@XZ ; Json::Value::type
  00021	83 f8 07	 cmp	 eax, 7
  00024	0f 87 b0 02 00
	00		 ja	 $LN17@writeValue

; 210  :    switch ( value.type() )

  0002a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN191@writeValue[eax*4]
$LN16@writeValue:

; 211  :    {
; 212  :    case nullValue:
; 213  :       document_ += "null";

  00031	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_04MLLLIHIP@null?$AA@
  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 _strlen
  0003c	59		 pop	 ecx
  0003d	50		 push	 eax
  0003e	57		 push	 edi
  0003f	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
$LN188@writeValue:
  00042	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 214  :       break;

  00047	e9 8e 02 00 00	 jmp	 $LN17@writeValue
$LN15@writeValue:

; 215  :    case intValue:
; 216  :       document_ += valueToString( value.asInt() );

  0004c	8b cb		 mov	 ecx, ebx
  0004e	e8 00 00 00 00	 call	 ?asInt@Value@Json@@QBEHXZ ; Json::Value::asInt
  00053	50		 push	 eax
  00054	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T34879[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; Json::valueToString
  00060	59		 pop	 ecx
  00061	59		 pop	 ecx
  00062	33 ff		 xor	 edi, edi
  00064	6a ff		 push	 -1
  00066	57		 push	 edi
  00067	50		 push	 eax
  00068	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0006b	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  0006e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00073	57		 push	 edi
  00074	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T34879[ebp]
$LN190@writeValue:
  0007a	6a 01		 push	 1
$LN189@writeValue:
  0007c	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 217  :       break;

  00081	e9 54 02 00 00	 jmp	 $LN17@writeValue
$LN14@writeValue:

; 218  :    case uintValue:
; 219  :       document_ += valueToString( value.asUInt() );

  00086	8b cb		 mov	 ecx, ebx
  00088	e8 00 00 00 00	 call	 ?asUInt@Value@Json@@QBEIXZ ; Json::Value::asUInt
  0008d	50		 push	 eax
  0008e	8d 45 d4	 lea	 eax, DWORD PTR $T34881[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; Json::valueToString
  00097	59		 pop	 ecx
  00098	59		 pop	 ecx
  00099	6a ff		 push	 -1
  0009b	33 ff		 xor	 edi, edi
  0009d	6a 00		 push	 0
  0009f	47		 inc	 edi
  000a0	50		 push	 eax
  000a1	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000a4	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  000a7	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  000ac	6a 00		 push	 0
  000ae	57		 push	 edi
  000af	8d 4d d4	 lea	 ecx, DWORD PTR $T34881[ebp]

; 220  :       break;

  000b2	eb c8		 jmp	 SHORT $LN189@writeValue
$LN13@writeValue:

; 221  :    case realValue:
; 222  :       document_ += valueToString( value.asDouble() );

  000b4	8b cb		 mov	 ecx, ebx
  000b6	e8 00 00 00 00	 call	 ?asDouble@Value@Json@@QBENXZ ; Json::Value::asDouble
  000bb	51		 push	 ecx
  000bc	51		 push	 ecx
  000bd	8d 45 b8	 lea	 eax, DWORD PTR $T34883[ebp]
  000c0	dd 1c 24	 fstp	 QWORD PTR [esp]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z ; Json::valueToString
  000c9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cc	6a ff		 push	 -1
  000ce	6a 00		 push	 0
  000d0	50		 push	 eax
  000d1	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000d4	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000db	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  000e0	6a 00		 push	 0
  000e2	8d 4d b8	 lea	 ecx, DWORD PTR $T34883[ebp]

; 223  :       break;

  000e5	eb 93		 jmp	 SHORT $LN190@writeValue
$LN12@writeValue:

; 224  :    case stringValue:
; 225  :       document_ += valueToQuotedString( value.asCString() );

  000e7	8b cb		 mov	 ecx, ebx
  000e9	e8 00 00 00 00	 call	 ?asCString@Value@Json@@QBEPBDXZ ; Json::Value::asCString
  000ee	50		 push	 eax
  000ef	8d 45 80	 lea	 eax, DWORD PTR $T34885[ebp]
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 ?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; Json::valueToQuotedString
  000f8	59		 pop	 ecx
  000f9	59		 pop	 ecx
  000fa	6a ff		 push	 -1
  000fc	6a 00		 push	 0
  000fe	50		 push	 eax
  000ff	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00102	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00109	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0010e	6a 00		 push	 0
  00110	8d 4d 80	 lea	 ecx, DWORD PTR $T34885[ebp]

; 226  :       break;

  00113	e9 62 ff ff ff	 jmp	 $LN190@writeValue
$LN11@writeValue:

; 227  :    case booleanValue:
; 228  :       document_ += valueToString( value.asBool() );

  00118	8b cb		 mov	 ecx, ebx
  0011a	e8 00 00 00 00	 call	 ?asBool@Value@Json@@QBE_NXZ ; Json::Value::asBool
  0011f	0f b6 c0	 movzx	 eax, al
  00122	50		 push	 eax
  00123	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T34887[ebp]
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 ?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; Json::valueToString
  0012f	59		 pop	 ecx
  00130	59		 pop	 ecx
  00131	6a ff		 push	 -1
  00133	6a 00		 push	 0
  00135	50		 push	 eax
  00136	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00139	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00140	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00145	6a 00		 push	 0
  00147	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T34887[ebp]

; 229  :       break;

  0014d	e9 28 ff ff ff	 jmp	 $LN190@writeValue
$LN10@writeValue:

; 230  :    case arrayValue:
; 231  :       {
; 232  :          document_ += "[";

  00152	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_01OHGJGJJP@?$FL?$AA@
  00157	57		 push	 edi
  00158	e8 00 00 00 00	 call	 _strlen
  0015d	59		 pop	 ecx
  0015e	50		 push	 eax
  0015f	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00162	57		 push	 edi
  00163	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv513[ebp], ecx
  00169	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 233  :          int size = value.size();

  0016e	8b cb		 mov	 ecx, ebx
  00170	e8 00 00 00 00	 call	 ?size@Value@Json@@QBEIXZ ; Json::Value::size

; 234  :          for ( int index =0; index < size; ++index )

  00175	33 ff		 xor	 edi, edi
  00177	89 85 40 ff ff
	ff		 mov	 DWORD PTR _size$34890[ebp], eax
  0017d	85 c0		 test	 eax, eax
  0017f	7e 39		 jle	 SHORT $LN7@writeValue
$LN9@writeValue:

; 235  :          {
; 236  :             if ( index > 0 )

  00181	85 ff		 test	 edi, edi
  00183	7e 1c		 jle	 SHORT $LN82@writeValue

; 237  :                document_ += ",";

  00185	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0?$AA@
  0018a	e8 00 00 00 00	 call	 _strlen
  0018f	59		 pop	 ecx
  00190	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv513[ebp]
  00196	50		 push	 eax
  00197	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0?$AA@
  0019c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN82@writeValue:

; 238  :             writeValue( value[index] );

  001a1	57		 push	 edi
  001a2	8b cb		 mov	 ecx, ebx
  001a4	e8 00 00 00 00	 call	 ??AValue@Json@@QBEABV01@I@Z ; Json::Value::operator[]
  001a9	50		 push	 eax
  001aa	8b ce		 mov	 ecx, esi
  001ac	e8 00 00 00 00	 call	 ?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z ; Json::FastWriter::writeValue
  001b1	47		 inc	 edi
  001b2	3b bd 40 ff ff
	ff		 cmp	 edi, DWORD PTR _size$34890[ebp]
  001b8	7c c7		 jl	 SHORT $LN9@writeValue
$LN7@writeValue:

; 239  :          }
; 240  :          document_ += "]";

  001ba	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_01LBDDMOBJ@?$FN?$AA@
  001bf	56		 push	 esi
  001c0	e8 00 00 00 00	 call	 _strlen
  001c5	59		 pop	 ecx
  001c6	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv513[ebp]
  001cc	50		 push	 eax
  001cd	56		 push	 esi

; 241  :       }
; 242  :       break;

  001ce	e9 6f fe ff ff	 jmp	 $LN188@writeValue
$LN5@writeValue:

; 243  :    case objectValue:
; 244  :       {
; 245  :          Value::Members members( value.getMemberNames() );

  001d3	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _members$34900[ebp]
  001d9	50		 push	 eax
  001da	8b cb		 mov	 ecx, ebx
  001dc	e8 00 00 00 00	 call	 ?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ ; Json::Value::getMemberNames

; 246  :          document_ += "{";

  001e1	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_01HCONENDN@?$HL?$AA@
  001e6	57		 push	 edi
  001e7	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  001ee	e8 00 00 00 00	 call	 _strlen
  001f3	59		 pop	 ecx
  001f4	50		 push	 eax
  001f5	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  001f8	57		 push	 edi
  001f9	8b cb		 mov	 ecx, ebx
  001fb	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 247  :          for ( Value::Members::iterator it = members.begin(); 

  00200	8b bd 30 ff ff
	ff		 mov	 edi, DWORD PTR _members$34900[ebp]
  00206	e9 a3 00 00 00	 jmp	 $LN187@writeValue

; 248  :                it != members.end(); 
; 249  :                ++it )

$LN110@writeValue:

; 250  :          {
; 251  :             const std::string &name = *it;
; 252  :             if ( it != members.begin() )

  0020b	3b bd 30 ff ff
	ff		 cmp	 edi, DWORD PTR _members$34900[ebp]
  00211	74 18		 je	 SHORT $LN144@writeValue

; 253  :                document_ += ",";

  00213	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0?$AA@
  00218	e8 00 00 00 00	 call	 _strlen
  0021d	59		 pop	 ecx
  0021e	50		 push	 eax
  0021f	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0?$AA@
  00224	8b cb		 mov	 ecx, ebx
  00226	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN144@writeValue:

; 254  :             document_ += valueToQuotedString( name.c_str() );

  0022b	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  0022f	72 04		 jb	 SHORT $LN154@writeValue
  00231	8b 07		 mov	 eax, DWORD PTR [edi]
  00233	eb 02		 jmp	 SHORT $LN155@writeValue
$LN154@writeValue:
  00235	8b c7		 mov	 eax, edi
$LN155@writeValue:
  00237	50		 push	 eax
  00238	8d 45 9c	 lea	 eax, DWORD PTR $T35053[ebp]
  0023b	50		 push	 eax
  0023c	e8 00 00 00 00	 call	 ?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; Json::valueToQuotedString
  00241	59		 pop	 ecx
  00242	59		 pop	 ecx
  00243	6a ff		 push	 -1
  00245	6a 00		 push	 0
  00247	50		 push	 eax
  00248	8b cb		 mov	 ecx, ebx
  0024a	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  0024e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00253	6a 00		 push	 0
  00255	6a 01		 push	 1
  00257	8d 4d 9c	 lea	 ecx, DWORD PTR $T35053[ebp]
  0025a	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0025e	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 255  :             document_ += yamlCompatiblityEnabled_ ? ": " 
; 256  :                                                   : ":";

  00263	80 7e 20 00	 cmp	 BYTE PTR [esi+32], 0
  00267	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T49517[ebp], OFFSET ??_C@_02LMMGGCAJ@?3?5?$AA@
  00271	75 0a		 jne	 SHORT $LN22@writeValue
  00273	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T49517[ebp], OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
$LN22@writeValue:
  0027d	ff b5 44 ff ff
	ff		 push	 DWORD PTR $T49517[ebp]
  00283	e8 00 00 00 00	 call	 _strlen
  00288	59		 pop	 ecx
  00289	50		 push	 eax
  0028a	ff b5 44 ff ff
	ff		 push	 DWORD PTR $T49517[ebp]
  00290	8b cb		 mov	 ecx, ebx
  00292	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 257  :             writeValue( value[name] );

  00297	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _value$GSCopy$[ebp]
  0029d	57		 push	 edi
  0029e	e8 00 00 00 00	 call	 ??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::operator[]
  002a3	50		 push	 eax
  002a4	8b ce		 mov	 ecx, esi
  002a6	e8 00 00 00 00	 call	 ?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z ; Json::FastWriter::writeValue
  002ab	83 c7 1c	 add	 edi, 28			; 0000001cH
$LN187@writeValue:

; 248  :                it != members.end(); 
; 249  :                ++it )

  002ae	3b bd 34 ff ff
	ff		 cmp	 edi, DWORD PTR _members$34900[ebp+4]
  002b4	0f 85 51 ff ff
	ff		 jne	 $LN110@writeValue

; 258  :          }
; 259  :          document_ += "}";

  002ba	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_01CELHOKLL@?$HN?$AA@
  002bf	56		 push	 esi
  002c0	e8 00 00 00 00	 call	 _strlen
  002c5	59		 pop	 ecx
  002c6	50		 push	 eax
  002c7	56		 push	 esi
  002c8	8b cb		 mov	 ecx, ebx
  002ca	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 260  :       }

  002cf	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _members$34900[ebp]
  002d5	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
$LN17@writeValue:

; 261  :       break;
; 262  :    }
; 263  : }

  002da	e8 00 00 00 00	 call	 __EH_epilog3_GS
  002df	c2 04 00	 ret	 4
  002e2	8b ff		 npad	 2
$LN191@writeValue:
  002e4	00 00 00 00	 DD	 $LN16@writeValue
  002e8	00 00 00 00	 DD	 $LN15@writeValue
  002ec	00 00 00 00	 DD	 $LN14@writeValue
  002f0	00 00 00 00	 DD	 $LN13@writeValue
  002f4	00 00 00 00	 DD	 $LN12@writeValue
  002f8	00 00 00 00	 DD	 $LN11@writeValue
  002fc	00 00 00 00	 DD	 $LN10@writeValue
  00300	00 00 00 00	 DD	 $LN5@writeValue
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z$0:
  00000	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T34879[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z$1:
  0000b	8d 4d d4	 lea	 ecx, DWORD PTR $T34881[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z$2:
  00013	8d 4d b8	 lea	 ecx, DWORD PTR $T34883[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z$3:
  0001b	8d 4d 80	 lea	 ecx, DWORD PTR $T34885[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z$4:
  00023	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T34887[ebp]
  00029	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z$5:
  0002e	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _members$34900[ebp]
  00034	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z$6:
  00039	8d 4d 9c	 lea	 ecx, DWORD PTR $T35053[ebp]
  0003c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z:
  00041	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00045	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00048	8b 8a 2c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-212]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00058	33 c8		 xor	 ecx, eax
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z
  00064	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z ENDP	; Json::FastWriter::writeValue
PUBLIC	??_7StyledWriter@Json@@6B@			; Json::StyledWriter::`vftable'
PUBLIC	??0StyledWriter@Json@@QAE@XZ			; Json::StyledWriter::StyledWriter
PUBLIC	??_R4StyledWriter@Json@@6B@			; Json::StyledWriter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStyledWriter@Json@@@8			; Json::StyledWriter `RTTI Type Descriptor'
PUBLIC	??_R3StyledWriter@Json@@8			; Json::StyledWriter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StyledWriter@Json@@8			; Json::StyledWriter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StyledWriter@Json@@8		; Json::StyledWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?write@StyledWriter@Json@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@@Z ; Json::StyledWriter::write
EXTRN	??_EStyledWriter@Json@@UAEPAXI@Z:PROC		; Json::StyledWriter::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@StyledWriter@Json@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@StyledWriter@Json@@8 DD FLAT:??_R0?AVStyledWriter@Json@@@8 ; Json::StyledWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StyledWriter@Json@@8
rdata$r	ENDS
;	COMDAT ??_R2StyledWriter@Json@@8
rdata$r	SEGMENT
??_R2StyledWriter@Json@@8 DD FLAT:??_R1A@?0A@EA@StyledWriter@Json@@8 ; Json::StyledWriter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Writer@Json@@8
rdata$r	ENDS
;	COMDAT ??_R3StyledWriter@Json@@8
rdata$r	SEGMENT
??_R3StyledWriter@Json@@8 DD 00H			; Json::StyledWriter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2StyledWriter@Json@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStyledWriter@Json@@@8
_DATA	SEGMENT
??_R0?AVStyledWriter@Json@@@8 DD FLAT:??_7type_info@@6B@ ; Json::StyledWriter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStyledWriter@Json@@', 00H
_DATA	ENDS
;	COMDAT ??_R4StyledWriter@Json@@6B@
rdata$r	SEGMENT
??_R4StyledWriter@Json@@6B@ DD 00H			; Json::StyledWriter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStyledWriter@Json@@@8
	DD	FLAT:??_R3StyledWriter@Json@@8
rdata$r	ENDS
;	COMDAT ??_7StyledWriter@Json@@6B@
CONST	SEGMENT
??_7StyledWriter@Json@@6B@ DD FLAT:??_R4StyledWriter@Json@@6B@ ; Json::StyledWriter::`vftable'
	DD	FLAT:??_EStyledWriter@Json@@UAEPAXI@Z
	DD	FLAT:?write@StyledWriter@Json@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@@Z
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
CONST	ENDS
;	COMDAT ??0StyledWriter@Json@@QAE@XZ
_TEXT	SEGMENT
??0StyledWriter@Json@@QAE@XZ PROC			; Json::StyledWriter::StyledWriter, COMDAT
; _this$ = ecx

; 272  : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7StyledWriter@Json@@6B@
  00008	33 c9		 xor	 ecx, ecx
  0000a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00010	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00013	c7 40 28 0f 00
	00 00		 mov	 DWORD PTR [eax+40], 15	; 0000000fH
  0001a	89 48 24	 mov	 DWORD PTR [eax+36], ecx
  0001d	88 48 14	 mov	 BYTE PTR [eax+20], cl
  00020	c7 40 30 4a 00
	00 00		 mov	 DWORD PTR [eax+48], 74	; 0000004aH
  00027	c7 40 34 03 00
	00 00		 mov	 DWORD PTR [eax+52], 3

; 273  : }

  0002e	c3		 ret	 0
??0StyledWriter@Json@@QAE@XZ ENDP			; Json::StyledWriter::StyledWriter
_TEXT	ENDS
PUBLIC	??1StyledWriter@Json@@UAE@XZ			; Json::StyledWriter::~StyledWriter
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\writer.h
;	COMDAT ??1StyledWriter@Json@@UAE@XZ
_TEXT	SEGMENT
??1StyledWriter@Json@@UAE@XZ PROC			; Json::StyledWriter::~StyledWriter, COMDAT
; _this$ = ecx

; 69   :       virtual ~StyledWriter(){}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	6a 00		 push	 0
  00005	6a 01		 push	 1
  00007	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7StyledWriter@Json@@6B@
  00010	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00015	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00018	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
  0001d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Writer@Json@@6B@
  00023	5e		 pop	 esi
  00024	c3		 ret	 0
??1StyledWriter@Json@@UAE@XZ ENDP			; Json::StyledWriter::~StyledWriter
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GStyledWriter@Json@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GStyledWriter@Json@@UAEPAXI@Z PROC			; Json::StyledWriter::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1StyledWriter@Json@@UAE@XZ ; Json::StyledWriter::~StyledWriter
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@20
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@20:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GStyledWriter@Json@@UAEPAXI@Z ENDP			; Json::StyledWriter::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	??0StyledStreamWriter@Json@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::StyledStreamWriter
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??0StyledStreamWriter@Json@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0StyledStreamWriter@Json@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0StyledStreamWriter@Json@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0StyledStreamWriter@Json@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
__ehfuncinfo$??0StyledStreamWriter@Json@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0StyledStreamWriter@Json@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
xdata$x	ENDS
;	COMDAT ??0StyledStreamWriter@Json@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_indentation$ = 8					; size = 28
??0StyledStreamWriter@Json@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::StyledStreamWriter::StyledStreamWriter, COMDAT
; _this$ = ecx

; 548  : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0StyledStreamWriter@Json@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00011	33 db		 xor	 ebx, ebx
  00013	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00021	c7 46 28 0f 00
	00 00		 mov	 DWORD PTR [esi+40], 15	; 0000000fH
  00028	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  0002b	88 5e 14	 mov	 BYTE PTR [esi+20], bl
  0002e	8d 45 08	 lea	 eax, DWORD PTR _indentation$[ebp]
  00031	50		 push	 eax
  00032	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
  00035	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00039	c7 46 30 4a 00
	00 00		 mov	 DWORD PTR [esi+48], 74	; 0000004aH
  00040	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 549  : }

  00045	53		 push	 ebx
  00046	6a 01		 push	 1
  00048	8d 4d 08	 lea	 ecx, DWORD PTR _indentation$[ebp]
  0004b	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00050	8b c6		 mov	 eax, esi
  00052	e8 00 00 00 00	 call	 __EH_epilog3
  00057	c2 1c 00	 ret	 28			; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0StyledStreamWriter@Json@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _indentation$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0StyledStreamWriter@Json@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$??0StyledStreamWriter@Json@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00013	83 c1 14	 add	 ecx, 20			; 00000014H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0StyledStreamWriter@Json@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0StyledStreamWriter@Json@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0StyledStreamWriter@Json@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::StyledStreamWriter::StyledStreamWriter
PUBLIC	?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
$T49862 = -4						; size = 4
?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T49862[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
_TEXT	ENDS
PUBLIC	??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
_TEXT	ENDS
;	COMDAT ?write@FastWriter@Json@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@@Z
_TEXT	SEGMENT
$T49918 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_root$ = 12						; size = 4
?write@FastWriter@Json@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@@Z PROC ; Json::FastWriter::write, COMDAT
; _this$ = ecx

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	83 65 fc 00	 and	 DWORD PTR $T49918[ebp], 0
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 200  :    document_ = "";

  0000b	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00010	56		 push	 esi
  00011	8b f9		 mov	 edi, ecx
  00013	e8 00 00 00 00	 call	 _strlen
  00018	59		 pop	 ecx
  00019	50		 push	 eax
  0001a	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]
  0001d	56		 push	 esi
  0001e	8b cb		 mov	 ecx, ebx
  00020	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 201  :    writeValue( root );

  00025	ff 75 0c	 push	 DWORD PTR _root$[ebp]
  00028	8b cf		 mov	 ecx, edi
  0002a	e8 00 00 00 00	 call	 ?writeValue@FastWriter@Json@@AAEXABVValue@2@@Z ; Json::FastWriter::writeValue

; 202  :    //document_ += "\n";
; 203  :    return document_;

  0002f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00032	53		 push	 ebx
  00033	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00038	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx

; 204  : }

  0003e	c9		 leave
  0003f	c2 08 00	 ret	 8
?write@FastWriter@Json@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@@Z ENDP ; Json::FastWriter::write
_TEXT	ENDS
PUBLIC	?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Cat$49999 = 8						; size = 1
__Ptr$36392 = 8						; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb 49 92 24
	09		 cmp	 ebx, 153391689		; 09249249H
  00017	76 0a		 jbe	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN44@reserve@2:
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  00023	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00026	2b 06		 sub	 eax, DWORD PTR [esi]
  00028	6a 1c		 push	 28			; 0000001cH
  0002a	99		 cdq
  0002b	59		 pop	 ecx
  0002c	f7 f9		 idiv	 ecx
  0002e	3b c3		 cmp	 eax, ebx
  00030	73 67		 jae	 SHORT $LN3@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00032	6a 00		 push	 0
  00034	53		 push	 ebx
  00035	e8 00 00 00 00	 call	 ??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00040	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00043	52		 push	 edx
  00044	89 45 08	 mov	 DWORD PTR __Ptr$36392[ebp], eax
  00047	ff 75 08	 push	 DWORD PTR __Ptr$36392[ebp]
  0004a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004d	50		 push	 eax
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00054	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00056	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00059	83 c4 18	 add	 esp, 24			; 00000018H
  0005c	2b c1		 sub	 eax, ecx
  0005e	6a 1c		 push	 28			; 0000001cH
  00060	99		 cdq
  00061	5f		 pop	 edi
  00062	f7 ff		 idiv	 edi
  00064	8b f8		 mov	 edi, eax

; 761  : 			if (this->_Myfirst != 0)

  00066	85 c9		 test	 ecx, ecx
  00068	74 1a		 je	 SHORT $LN37@reserve@2

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  0006a	ff 75 08	 push	 DWORD PTR __Cat$49999[ebp]
  0006d	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00070	50		 push	 eax
  00071	ff 76 04	 push	 DWORD PTR [esi+4]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  0007a	ff 36		 push	 DWORD PTR [esi]
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00081	83 c4 14	 add	 esp, 20			; 00000014H
$LN37@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  00084	8b 45 08	 mov	 eax, DWORD PTR __Ptr$36392[ebp]
  00087	6b db 1c	 imul	 ebx, 28			; 0000001cH

; 770  : 			this->_Mylast = _Ptr + _Size;

  0008a	6b ff 1c	 imul	 edi, 28			; 0000001cH
  0008d	03 d8		 add	 ebx, eax
  0008f	03 f8		 add	 edi, eax
  00091	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00094	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  00097	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve@2:

; 772  : 			}
; 773  : 		}

  00099	e8 00 00 00 00	 call	 __EH_epilog3
  0009e	c2 04 00	 ret	 4
__catch$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000a1	ff 75 08	 push	 DWORD PTR __Ptr$36392[ebp]
  000a4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a9	59		 pop	 ecx

; 757  : 			_RERAISE;

  000aa	6a 00		 push	 0
  000ac	6a 00		 push	 0
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN45@reserve@2:
$LN43@reserve@2:
  000b3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve
PUBLIC	?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 1c		 push	 28			; 0000001cH
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002f	2b c1		 sub	 eax, ecx
  00031	6a 1c		 push	 28			; 0000001cH
  00033	99		 cdq
  00034	59		 pop	 ecx
  00035	f7 f9		 idiv	 ecx
  00037	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003a	3b f8		 cmp	 edi, eax
  0003c	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003e	57		 push	 edi
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Grow_to
  00046	50		 push	 eax
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve
$LN1@Reserve:
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi

; 1298 : 		}

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
_TEXT	ENDS
PUBLIC	?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledStreamWriter::writeValue
PUBLIC	?isMultineArray@StyledStreamWriter@Json@@AAE_NABVValue@2@@Z ; Json::StyledStreamWriter::isMultineArray
EXTRN	?isObject@Value@Json@@QBE_NXZ:PROC		; Json::Value::isObject
EXTRN	?isArray@Value@Json@@QBE_NXZ:PROC		; Json::Value::isArray
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
;	COMDAT ?isMultineArray@StyledStreamWriter@Json@@AAE_NABVValue@2@@Z
_TEXT	SEGMENT
tv312 = -12						; size = 4
$T50124 = -12						; size = 4
_childValue$35356 = -12					; size = 4
_index$35359 = -8					; size = 4
_isMultiLine$ = -1					; size = 1
_value$ = 8						; size = 4
?isMultineArray@StyledStreamWriter@Json@@AAE_NABVValue@2@@Z PROC ; Json::StyledStreamWriter::isMultineArray, COMDAT
; _this$ = ecx

; 682  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 683  :    int size = value.size();

  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0000d	57		 push	 edi
  0000e	e8 00 00 00 00	 call	 ?size@Value@Json@@QBEIXZ ; Json::Value::size

; 684  :    bool isMultiLine = size*3 >= rightMargin_ ;
; 685  :    childValues_.clear();

  00013	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00015	8b d8		 mov	 ebx, eax
  00017	6b c0 03	 imul	 eax, 3
  0001a	3b 46 30	 cmp	 eax, DWORD PTR [esi+48]
  0001d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00020	50		 push	 eax
  00021	51		 push	 ecx
  00022	8d 45 f4	 lea	 eax, DWORD PTR $T50124[ebp]
  00025	50		 push	 eax
  00026	8b ce		 mov	 ecx, esi
  00028	0f 9d 45 ff	 setge	 BYTE PTR _isMultiLine$[ebp]
  0002c	e8 00 00 00 00	 call	 ?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase

; 686  :    for ( int index =0; index < size  &&  !isMultiLine; ++index )

  00031	33 ff		 xor	 edi, edi
  00033	85 db		 test	 ebx, ebx
  00035	7e 48		 jle	 SHORT $LN5@isMultineA
$LL7@isMultineA:
  00037	80 7d ff 00	 cmp	 BYTE PTR _isMultiLine$[ebp], 0
  0003b	0f 85 93 00 00
	00		 jne	 $LN45@isMultineA

; 687  :    {
; 688  :       const Value &childValue = value[index];

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  00044	57		 push	 edi
  00045	e8 00 00 00 00	 call	 ??AValue@Json@@QBEABV01@I@Z ; Json::Value::operator[]
  0004a	8b c8		 mov	 ecx, eax
  0004c	89 4d f4	 mov	 DWORD PTR _childValue$35356[ebp], ecx

; 689  :       isMultiLine = isMultiLine  ||
; 690  :                      ( (childValue.isArray()  ||  childValue.isObject())  &&  
; 691  :                         childValue.size() > 0 );

  0004f	e8 00 00 00 00	 call	 ?isArray@Value@Json@@QBE_NXZ ; Json::Value::isArray
  00054	84 c0		 test	 al, al
  00056	75 0c		 jne	 SHORT $LN10@isMultineA
  00058	8b 4d f4	 mov	 ecx, DWORD PTR _childValue$35356[ebp]
  0005b	e8 00 00 00 00	 call	 ?isObject@Value@Json@@QBE_NXZ ; Json::Value::isObject
  00060	84 c0		 test	 al, al
  00062	74 0c		 je	 SHORT $LN11@isMultineA
$LN10@isMultineA:
  00064	8b 4d f4	 mov	 ecx, DWORD PTR _childValue$35356[ebp]
  00067	e8 00 00 00 00	 call	 ?size@Value@Json@@QBEIXZ ; Json::Value::size
  0006c	85 c0		 test	 eax, eax
  0006e	75 06		 jne	 SHORT $LN12@isMultineA
$LN11@isMultineA:
  00070	c6 45 ff 00	 mov	 BYTE PTR _isMultiLine$[ebp], 0
  00074	eb 04		 jmp	 SHORT $LN13@isMultineA
$LN12@isMultineA:
  00076	c6 45 ff 01	 mov	 BYTE PTR _isMultiLine$[ebp], 1
$LN13@isMultineA:

; 686  :    for ( int index =0; index < size  &&  !isMultiLine; ++index )

  0007a	47		 inc	 edi
  0007b	3b fb		 cmp	 edi, ebx
  0007d	7c b8		 jl	 SHORT $LL7@isMultineA
$LN5@isMultineA:

; 692  :    }
; 693  :    if ( !isMultiLine ) // check if line length > max line length

  0007f	80 7d ff 00	 cmp	 BYTE PTR _isMultiLine$[ebp], 0
  00083	75 4f		 jne	 SHORT $LN45@isMultineA

; 694  :    {
; 695  :       childValues_.reserve( size );

  00085	53		 push	 ebx
  00086	8b ce		 mov	 ecx, esi
  00088	e8 00 00 00 00	 call	 ?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve

; 696  :       addChildValues_ = true;
; 697  :       int lineLength = 4 + (size-1)*2; // '[ ' + ', '*n + ' ]'
; 698  :       for ( int index =0; index < size  &&  !isMultiLine; ++index )

  0008d	83 65 f8 00	 and	 DWORD PTR _index$35359[ebp], 0
  00091	c6 46 50 01	 mov	 BYTE PTR [esi+80], 1
  00095	8d 7c 1b 02	 lea	 edi, DWORD PTR [ebx+ebx+2]
  00099	85 db		 test	 ebx, ebx
  0009b	7e 2c		 jle	 SHORT $LN1@isMultineA

; 694  :    {
; 695  :       childValues_.reserve( size );

  0009d	83 65 f4 00	 and	 DWORD PTR tv312[ebp], 0
$LL44@isMultineA:

; 699  :       {
; 700  :          writeValue( value[index] );

  000a1	ff 75 f8	 push	 DWORD PTR _index$35359[ebp]
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  000a7	e8 00 00 00 00	 call	 ??AValue@Json@@QBEABV01@I@Z ; Json::Value::operator[]
  000ac	50		 push	 eax
  000ad	8b ce		 mov	 ecx, esi
  000af	e8 00 00 00 00	 call	 ?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledStreamWriter::writeValue

; 701  :          lineLength += int( childValues_[index].length() );

  000b4	8b 4d f4	 mov	 ecx, DWORD PTR tv312[ebp]
  000b7	8b 06		 mov	 eax, DWORD PTR [esi]
  000b9	03 7c 01 10	 add	 edi, DWORD PTR [ecx+eax+16]
  000bd	ff 45 f8	 inc	 DWORD PTR _index$35359[ebp]
  000c0	83 45 f4 1c	 add	 DWORD PTR tv312[ebp], 28 ; 0000001cH
  000c4	39 5d f8	 cmp	 DWORD PTR _index$35359[ebp], ebx
  000c7	7c d8		 jl	 SHORT $LL44@isMultineA
$LN1@isMultineA:

; 702  :          isMultiLine = isMultiLine  &&  hasCommentForValue( value[index] );
; 703  :       }
; 704  :       addChildValues_ = false;
; 705  :       isMultiLine = isMultiLine  ||  lineLength >= rightMargin_;

  000c9	3b 7e 30	 cmp	 edi, DWORD PTR [esi+48]
  000cc	c6 46 50 00	 mov	 BYTE PTR [esi+80], 0
  000d0	0f 9d 45 ff	 setge	 BYTE PTR _isMultiLine$[ebp]
$LN45@isMultineA:

; 706  :    }
; 707  :    return isMultiLine;

  000d4	8a 45 ff	 mov	 al, BYTE PTR _isMultiLine$[ebp]
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx

; 708  : }

  000da	c9		 leave
  000db	c2 04 00	 ret	 4
?isMultineArray@StyledStreamWriter@Json@@AAE_NABVValue@2@@Z ENDP ; Json::StyledStreamWriter::isMultineArray
_TEXT	ENDS
PUBLIC	?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 37		 jae	 SHORT $LN4@push_back
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 31		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 1c		 push	 28			; 0000001cH
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 1c	 imul	 edi, 28			; 0000001cH
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@AAV32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV20@@Z ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00046	eb 19		 jmp	 SHORT $LN26@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00048	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0004b	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0004d	6a 01		 push	 1
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00056	57		 push	 edi
  00057	ff 76 04	 push	 DWORD PTR [esi+4]
  0005a	e8 00 00 00 00	 call	 ??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
$LN26@push_back:

; 996  : 			++this->_Mylast;

  00061	83 46 04 1c	 add	 DWORD PTR [esi+4], 28	; 0000001cH
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
_TEXT	ENDS
PUBLIC	?pushValue@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledWriter::pushValue
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
;	COMDAT ?pushValue@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?pushValue@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::StyledWriter::pushValue, COMDAT
; _this$ = ecx

; 437  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 438  :    if ( addChildValues_ )

  00003	80 79 38 00	 cmp	 BYTE PTR [ecx+56], 0
  00007	74 09		 je	 SHORT $LN2@pushValue

; 439  :       childValues_.push_back( value );

  00009	83 c1 04	 add	 ecx, 4

; 442  : }

  0000c	5d		 pop	 ebp

; 439  :       childValues_.push_back( value );

  0000d	e9 00 00 00 00	 jmp	 ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
$LN2@pushValue:

; 440  :    else
; 441  :       document_ += value;

  00012	6a ff		 push	 -1
  00014	6a 00		 push	 0
  00016	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00019	83 c1 14	 add	 ecx, 20			; 00000014H
  0001c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 442  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?pushValue@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::StyledWriter::pushValue
_TEXT	ENDS
PUBLIC	?pushValue@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::pushValue
; Function compile flags: /Ogsp
;	COMDAT ?pushValue@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?pushValue@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::StyledStreamWriter::pushValue, COMDAT
; _this$ = ecx

; 713  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 714  :    if ( addChildValues_ )

  00003	80 79 50 00	 cmp	 BYTE PTR [ecx+80], 0
  00007	74 06		 je	 SHORT $LN2@pushValue@2

; 718  : }

  00009	5d		 pop	 ebp

; 715  :       childValues_.push_back( value );

  0000a	e9 00 00 00 00	 jmp	 ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
$LN2@pushValue@2:

; 716  :    else
; 717  :       *document_ << value;

  0000f	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00012	ff 71 10	 push	 DWORD PTR [ecx+16]
  00015	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  0001a	59		 pop	 ecx
  0001b	59		 pop	 ecx

; 718  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?pushValue@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::StyledStreamWriter::pushValue
_TEXT	ENDS
PUBLIC	?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledWriter::writeValue
PUBLIC	?isMultineArray@StyledWriter@Json@@AAE_NABVValue@2@@Z ; Json::StyledWriter::isMultineArray
PUBLIC	??_C@_02GPECMEKF@?$FL?$FN?$AA@			; `string'
PUBLIC	_value$GSCopy$
PUBLIC	?writeArrayValue@StyledWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledWriter::writeArrayValue
;	COMDAT ??_C@_02GPECMEKF@?$FL?$FN?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_02GPECMEKF@?$FL?$FN?$AA@ DB '[]', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?writeArrayValue@StyledWriter@Json@@AAEXABVValue@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?writeArrayValue@StyledWriter@Json@@AAEXABVValue@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeArrayValue@StyledWriter@Json@@AAEXABVValue@2@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeArrayValue@StyledWriter@Json@@AAEXABVValue@2@@Z$2
__ehfuncinfo$?writeArrayValue@StyledWriter@Json@@AAEXABVValue@2@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?writeArrayValue@StyledWriter@Json@@AAEXABVValue@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
xdata$x	ENDS
;	COMDAT ?writeArrayValue@StyledWriter@Json@@AAEXABVValue@2@@Z
_TEXT	SEGMENT
_value$GSCopy$ = -96					; size = 4
tv479 = -92						; size = 4
_size$ = -88						; size = 4
_hasChildValue$35117 = -81				; size = 1
tv488 = -80						; size = 4
_childValue$35122 = -80					; size = 4
_index$35129 = -76					; size = 4
_index$35118 = -76					; size = 4
$T35126 = -72						; size = 28
$T35116 = -44						; size = 28
$T35111 = -44						; size = 28
__$EHRec$ = -12						; size = 12
_value$ = 8						; size = 4
?writeArrayValue@StyledWriter@Json@@AAEXABVValue@2@@Z PROC ; Json::StyledWriter::writeArrayValue, COMDAT
; _this$ = ecx

; 353  : {

  00000	6a 54		 push	 84			; 00000054H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?writeArrayValue@StyledWriter@Json@@AAEXABVValue@2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _value$[ebp]
  0000f	8b f1		 mov	 esi, ecx

; 354  :    unsigned size = value.size();

  00011	8b cf		 mov	 ecx, edi

; 378  :             {
; 379  :                writeCommentAfterValueOnSameLine( childValue );

  00013	89 7d a0	 mov	 DWORD PTR _value$GSCopy$[ebp], edi
  00016	e8 00 00 00 00	 call	 ?size@Value@Json@@QBEIXZ ; Json::Value::size
  0001b	89 45 a8	 mov	 DWORD PTR _size$[ebp], eax
  0001e	85 c0		 test	 eax, eax
  00020	75 24		 jne	 SHORT $LN13@writeArray

; 355  :    if ( size == 0 )
; 356  :       pushValue( "[]" );

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_02GPECMEKF@?$FL?$FN?$AA@
  00027	8d 4d d4	 lea	 ecx, DWORD PTR $T35111[ebp]
  0002a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00033	8d 45 d4	 lea	 eax, DWORD PTR $T35111[ebp]
  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?pushValue@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledWriter::pushValue
  0003e	8d 4d d4	 lea	 ecx, DWORD PTR $T35111[ebp]

; 357  :    else

  00041	e9 ea 00 00 00	 jmp	 $LN130@writeArray
$LN13@writeArray:

; 358  :    {
; 359  :       bool isArrayMultiLine = isMultineArray( value );

  00046	57		 push	 edi
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?isMultineArray@StyledWriter@Json@@AAE_NABVValue@2@@Z ; Json::StyledWriter::isMultineArray

; 360  :       if ( isArrayMultiLine )

  0004e	84 c0		 test	 al, al
  00050	0f 84 e5 00 00
	00		 je	 $LN11@writeArray

; 361  :       {
; 362  :          writeWithIndent( "[" );

  00056	68 00 00 00 00	 push	 OFFSET ??_C@_01OHGJGJJP@?$FL?$AA@
  0005b	8d 4d d4	 lea	 ecx, DWORD PTR $T35116[ebp]
  0005e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00063	6a ff		 push	 -1
  00065	33 ff		 xor	 edi, edi
  00067	6a 00		 push	 0
  00069	8d 45 d4	 lea	 eax, DWORD PTR $T35116[ebp]
  0006c	47		 inc	 edi
  0006d	50		 push	 eax
  0006e	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00071	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00074	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00079	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0007d	6a 00		 push	 0
  0007f	57		 push	 edi
  00080	8d 4d d4	 lea	 ecx, DWORD PTR $T35116[ebp]
  00083	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 363  :          indent();
; 364  :          bool hasChildValue = !childValues_.empty();

  00088	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008b	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0008e	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_01IHBHIGKO@?0?$AA@
  00093	0f 95 45 af	 setne	 BYTE PTR _hasChildValue$35117[ebp]

; 365  :          unsigned index =0;

  00097	83 65 b4 00	 and	 DWORD PTR _index$35118[ebp], 0
  0009b	83 65 a4 00	 and	 DWORD PTR tv479[ebp], 0
$LL10@writeArray:

; 366  :          while ( true )
; 367  :          {
; 368  :             const Value &childValue = value[index];

  0009f	ff 75 b4	 push	 DWORD PTR _index$35118[ebp]
  000a2	8b 4d a0	 mov	 ecx, DWORD PTR _value$GSCopy$[ebp]
  000a5	e8 00 00 00 00	 call	 ??AValue@Json@@QBEABV01@I@Z ; Json::Value::operator[]

; 369  :             writeCommentBeforeValue( childValue );

  000aa	50		 push	 eax
  000ab	8b ce		 mov	 ecx, esi
  000ad	89 45 b0	 mov	 DWORD PTR _childValue$35122[ebp], eax
  000b0	e8 00 00 00 00	 call	 ?writeCommentBeforeValue@StyledWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledWriter::writeCommentBeforeValue

; 370  :             if ( hasChildValue )

  000b5	80 7d af 00	 cmp	 BYTE PTR _hasChildValue$35117[ebp], 0

; 371  :                writeWithIndent( childValues_[index] );

  000b9	8b ce		 mov	 ecx, esi
  000bb	74 0e		 je	 SHORT $LN8@writeArray
  000bd	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c0	03 45 a4	 add	 eax, DWORD PTR tv479[ebp]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?writeWithIndent@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledWriter::writeWithIndent

; 372  :             else

  000c9	eb 08		 jmp	 SHORT $LN7@writeArray
$LN8@writeArray:

; 373  :             {
; 374  :                writeIndent();
; 375  :                writeValue( childValue );

  000cb	ff 75 b0	 push	 DWORD PTR _childValue$35122[ebp]
  000ce	e8 00 00 00 00	 call	 ?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledWriter::writeValue
$LN7@writeArray:

; 376  :             }
; 377  :             if ( ++index == size )

  000d3	ff 45 b4	 inc	 DWORD PTR _index$35118[ebp]
  000d6	8b 45 b4	 mov	 eax, DWORD PTR _index$35118[ebp]
  000d9	83 45 a4 1c	 add	 DWORD PTR tv479[ebp], 28 ; 0000001cH
  000dd	3b 45 a8	 cmp	 eax, DWORD PTR _size$[ebp]
  000e0	74 1d		 je	 SHORT $LN125@writeArray

; 380  :                break;
; 381  :             }
; 382  :             document_ += ",";

  000e2	57		 push	 edi
  000e3	e8 00 00 00 00	 call	 _strlen
  000e8	59		 pop	 ecx
  000e9	50		 push	 eax
  000ea	57		 push	 edi
  000eb	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  000ee	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 383  :             writeCommentAfterValueOnSameLine( childValue );

  000f3	ff 75 b0	 push	 DWORD PTR _childValue$35122[ebp]
  000f6	8b ce		 mov	 ecx, esi
  000f8	e8 00 00 00 00	 call	 ?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledWriter::writeCommentAfterValueOnSameLine

; 384  :          }

  000fd	eb a0		 jmp	 SHORT $LL10@writeArray
$LN125@writeArray:

; 378  :             {
; 379  :                writeCommentAfterValueOnSameLine( childValue );

  000ff	ff 75 b0	 push	 DWORD PTR _childValue$35122[ebp]
  00102	8b ce		 mov	 ecx, esi
  00104	e8 00 00 00 00	 call	 ?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledWriter::writeCommentAfterValueOnSameLine

; 385  :          unindent();
; 386  :          writeWithIndent( "]" );

  00109	68 00 00 00 00	 push	 OFFSET ??_C@_01LBDDMOBJ@?$FN?$AA@
  0010e	8d 4d b8	 lea	 ecx, DWORD PTR $T35126[ebp]
  00111	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00116	6a ff		 push	 -1
  00118	6a 00		 push	 0
  0011a	8d 45 b8	 lea	 eax, DWORD PTR $T35126[ebp]
  0011d	50		 push	 eax
  0011e	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00121	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00128	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0012d	8d 4d b8	 lea	 ecx, DWORD PTR $T35126[ebp]
$LN130@writeArray:
  00130	6a 00		 push	 0
  00132	6a 01		 push	 1
  00134	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 387  :       }
; 388  :       else // output on a single line

  00139	eb 76		 jmp	 SHORT $LN117@writeArray
$LN11@writeArray:

; 389  :       {
; 390  :          assert( childValues_.size() == size );
; 391  :          document_ += "[";

  0013b	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_01OHGJGJJP@?$FL?$AA@
  00140	57		 push	 edi
  00141	e8 00 00 00 00	 call	 _strlen
  00146	59		 pop	 ecx
  00147	50		 push	 eax
  00148	8d 5e 14	 lea	 ebx, DWORD PTR [esi+20]
  0014b	57		 push	 edi
  0014c	8b cb		 mov	 ecx, ebx
  0014e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 392  :          for ( unsigned index =0; index < size; ++index )

  00153	33 c0		 xor	 eax, eax
  00155	89 45 b4	 mov	 DWORD PTR _index$35129[ebp], eax
  00158	39 45 a8	 cmp	 DWORD PTR _size$[ebp], eax
  0015b	76 3f		 jbe	 SHORT $LN2@writeArray

; 389  :       {
; 390  :          assert( childValues_.size() == size );
; 391  :          document_ += "[";

  0015d	89 45 b0	 mov	 DWORD PTR tv488[ebp], eax
  00160	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_01IHBHIGKO@?0?$AA@
$LN4@writeArray:

; 393  :          {
; 394  :             if ( index > 0 )

  00165	83 7d b4 00	 cmp	 DWORD PTR _index$35129[ebp], 0
  00169	76 10		 jbe	 SHORT $LN105@writeArray

; 395  :                document_ += ",";

  0016b	57		 push	 edi
  0016c	e8 00 00 00 00	 call	 _strlen
  00171	59		 pop	 ecx
  00172	50		 push	 eax
  00173	57		 push	 edi
  00174	8b cb		 mov	 ecx, ebx
  00176	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN105@writeArray:

; 396  :             document_ += childValues_[index];

  0017b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0017e	03 45 b0	 add	 eax, DWORD PTR tv488[ebp]
  00181	6a ff		 push	 -1
  00183	6a 00		 push	 0
  00185	50		 push	 eax
  00186	8b cb		 mov	 ecx, ebx
  00188	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0018d	ff 45 b4	 inc	 DWORD PTR _index$35129[ebp]
  00190	8b 45 b4	 mov	 eax, DWORD PTR _index$35129[ebp]
  00193	83 45 b0 1c	 add	 DWORD PTR tv488[ebp], 28 ; 0000001cH
  00197	3b 45 a8	 cmp	 eax, DWORD PTR _size$[ebp]
  0019a	72 c9		 jb	 SHORT $LN4@writeArray
$LN2@writeArray:

; 397  :          }
; 398  :          document_ += "]";

  0019c	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_01LBDDMOBJ@?$FN?$AA@
  001a1	56		 push	 esi
  001a2	e8 00 00 00 00	 call	 _strlen
  001a7	59		 pop	 ecx
  001a8	50		 push	 eax
  001a9	56		 push	 esi
  001aa	8b cb		 mov	 ecx, ebx
  001ac	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN117@writeArray:

; 399  :       }
; 400  :    }
; 401  : }

  001b1	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001b6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?writeArrayValue@StyledWriter@Json@@AAEXABVValue@2@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T35111[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeArrayValue@StyledWriter@Json@@AAEXABVValue@2@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR $T35116[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeArrayValue@StyledWriter@Json@@AAEXABVValue@2@@Z$2:
  00010	8d 4d b8	 lea	 ecx, DWORD PTR $T35126[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?writeArrayValue@StyledWriter@Json@@AAEXABVValue@2@@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?writeArrayValue@StyledWriter@Json@@AAEXABVValue@2@@Z
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?writeArrayValue@StyledWriter@Json@@AAEXABVValue@2@@Z ENDP ; Json::StyledWriter::writeArrayValue
PUBLIC	_value$GSCopy$
PUBLIC	?writeArrayValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledStreamWriter::writeArrayValue
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?writeArrayValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?writeArrayValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeArrayValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeArrayValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$2
__ehfuncinfo$?writeArrayValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?writeArrayValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
xdata$x	ENDS
;	COMDAT ?writeArrayValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z
_TEXT	SEGMENT
_size$ = -88						; size = 4
_value$GSCopy$ = -84					; size = 4
_hasChildValue$35296 = -77				; size = 1
tv310 = -76						; size = 4
tv301 = -76						; size = 4
$T35305 = -72						; size = 28
$T35295 = -44						; size = 28
$T35291 = -44						; size = 28
__$EHRec$ = -12						; size = 12
_value$ = 8						; size = 4
?writeArrayValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z PROC ; Json::StyledStreamWriter::writeArrayValue, COMDAT
; _this$ = ecx

; 629  : {

  00000	6a 4c		 push	 76			; 0000004cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?writeArrayValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _value$[ebp]
  0000f	8b f1		 mov	 esi, ecx

; 630  :    unsigned size = value.size();

  00011	8b cf		 mov	 ecx, edi
  00013	89 7d ac	 mov	 DWORD PTR _value$GSCopy$[ebp], edi
  00016	e8 00 00 00 00	 call	 ?size@Value@Json@@QBEIXZ ; Json::Value::size
  0001b	8b d8		 mov	 ebx, eax
  0001d	89 5d a8	 mov	 DWORD PTR _size$[ebp], ebx

; 631  :    if ( size == 0 )

  00020	85 db		 test	 ebx, ebx
  00022	75 23		 jne	 SHORT $LN13@writeArray@2

; 632  :       pushValue( "[]" );

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02GPECMEKF@?$FL?$FN?$AA@
  00029	8d 4d d4	 lea	 ecx, DWORD PTR $T35291[ebp]
  0002c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00031	21 5d fc	 and	 DWORD PTR __$EHRec$[ebp+8], ebx
  00034	8d 45 d4	 lea	 eax, DWORD PTR $T35291[ebp]
  00037	50		 push	 eax
  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?pushValue@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::pushValue
  0003f	8d 4d d4	 lea	 ecx, DWORD PTR $T35291[ebp]

; 633  :    else

  00042	e9 da 00 00 00	 jmp	 $LN44@writeArray@2
$LN13@writeArray@2:

; 634  :    {
; 635  :       bool isArrayMultiLine = isMultineArray( value );

  00047	57		 push	 edi
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?isMultineArray@StyledStreamWriter@Json@@AAE_NABVValue@2@@Z ; Json::StyledStreamWriter::isMultineArray

; 636  :       if ( isArrayMultiLine )
; 637  :       {
; 638  :          writeWithIndent( "[" );

  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_01OHGJGJJP@?$FL?$AA@
  00054	84 c0		 test	 al, al
  00056	0f 84 d0 00 00
	00		 je	 $LN11@writeArray@2
  0005c	8d 4d d4	 lea	 ecx, DWORD PTR $T35295[ebp]
  0005f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00064	33 ff		 xor	 edi, edi
  00066	8d 45 d4	 lea	 eax, DWORD PTR $T35295[ebp]
  00069	47		 inc	 edi
  0006a	50		 push	 eax
  0006b	8b ce		 mov	 ecx, esi
  0006d	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00070	e8 00 00 00 00	 call	 ?writeWithIndent@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::writeWithIndent
  00075	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00079	33 db		 xor	 ebx, ebx
  0007b	53		 push	 ebx
  0007c	57		 push	 edi
  0007d	8d 4d d4	 lea	 ecx, DWORD PTR $T35295[ebp]
  00080	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 639  :          indent();

  00085	8b ce		 mov	 ecx, esi
  00087	e8 00 00 00 00	 call	 ?indent@StyledStreamWriter@Json@@AAEXXZ ; Json::StyledStreamWriter::indent

; 640  :          bool hasChildValue = !childValues_.empty();

  0008c	8b 06		 mov	 eax, DWORD PTR [esi]
  0008e	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00091	0f 95 45 b3	 setne	 BYTE PTR _hasChildValue$35296[ebp]
  00095	21 5d b4	 and	 DWORD PTR tv301[ebp], ebx
$LL10@writeArray@2:

; 641  :          unsigned index =0;
; 642  :          while ( true )
; 643  :          {
; 644  :             const Value &childValue = value[index];

  00098	8b 4d ac	 mov	 ecx, DWORD PTR _value$GSCopy$[ebp]
  0009b	53		 push	 ebx
  0009c	e8 00 00 00 00	 call	 ??AValue@Json@@QBEABV01@I@Z ; Json::Value::operator[]
  000a1	8b f8		 mov	 edi, eax

; 645  :             writeCommentBeforeValue( childValue );

  000a3	57		 push	 edi
  000a4	8b ce		 mov	 ecx, esi
  000a6	e8 00 00 00 00	 call	 ?writeCommentBeforeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledStreamWriter::writeCommentBeforeValue

; 646  :             if ( hasChildValue )

  000ab	80 7d b3 00	 cmp	 BYTE PTR _hasChildValue$35296[ebp], 0

; 647  :                writeWithIndent( childValues_[index] );

  000af	8b ce		 mov	 ecx, esi
  000b1	74 0d		 je	 SHORT $LN8@writeArray@2
  000b3	8b 06		 mov	 eax, DWORD PTR [esi]
  000b5	03 45 b4	 add	 eax, DWORD PTR tv301[ebp]
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 ?writeWithIndent@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::writeWithIndent

; 648  :             else

  000be	eb 0d		 jmp	 SHORT $LN7@writeArray@2
$LN8@writeArray@2:

; 649  :             {
; 650  : 	       writeIndent();

  000c0	e8 00 00 00 00	 call	 ?writeIndent@StyledStreamWriter@Json@@AAEXXZ ; Json::StyledStreamWriter::writeIndent

; 651  :                writeValue( childValue );

  000c5	57		 push	 edi
  000c6	8b ce		 mov	 ecx, esi
  000c8	e8 00 00 00 00	 call	 ?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledStreamWriter::writeValue
$LN7@writeArray@2:

; 652  :             }
; 653  :             if ( ++index == size )

  000cd	83 45 b4 1c	 add	 DWORD PTR tv301[ebp], 28 ; 0000001cH
  000d1	43		 inc	 ebx
  000d2	3b 5d a8	 cmp	 ebx, DWORD PTR _size$[ebp]
  000d5	74 19		 je	 SHORT $LN39@writeArray@2

; 656  :                break;
; 657  :             }
; 658  :             *document_ << ",";

  000d7	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0?$AA@
  000dc	ff 76 10	 push	 DWORD PTR [esi+16]
  000df	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000e4	59		 pop	 ecx
  000e5	59		 pop	 ecx

; 659  :             writeCommentAfterValueOnSameLine( childValue );

  000e6	57		 push	 edi
  000e7	8b ce		 mov	 ecx, esi
  000e9	e8 00 00 00 00	 call	 ?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledStreamWriter::writeCommentAfterValueOnSameLine

; 660  :          }

  000ee	eb a8		 jmp	 SHORT $LL10@writeArray@2
$LN39@writeArray@2:

; 654  :             {
; 655  :                writeCommentAfterValueOnSameLine( childValue );

  000f0	57		 push	 edi
  000f1	8b ce		 mov	 ecx, esi
  000f3	e8 00 00 00 00	 call	 ?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledStreamWriter::writeCommentAfterValueOnSameLine

; 661  :          unindent();

  000f8	8b ce		 mov	 ecx, esi
  000fa	e8 00 00 00 00	 call	 ?unindent@StyledStreamWriter@Json@@AAEXXZ ; Json::StyledStreamWriter::unindent

; 662  :          writeWithIndent( "]" );

  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_01LBDDMOBJ@?$FN?$AA@
  00104	8d 4d b8	 lea	 ecx, DWORD PTR $T35305[ebp]
  00107	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0010c	8d 45 b8	 lea	 eax, DWORD PTR $T35305[ebp]
  0010f	50		 push	 eax
  00110	8b ce		 mov	 ecx, esi
  00112	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00119	e8 00 00 00 00	 call	 ?writeWithIndent@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::writeWithIndent
  0011e	8d 4d b8	 lea	 ecx, DWORD PTR $T35305[ebp]
$LN44@writeArray@2:
  00121	6a 00		 push	 0
  00123	6a 01		 push	 1
  00125	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 663  :       }
; 664  :       else // output on a single line

  0012a	eb 4e		 jmp	 SHORT $LN5@writeArray@2
$LN11@writeArray@2:

; 665  :       {
; 666  :          assert( childValues_.size() == size );
; 667  :          *document_ << "[";

  0012c	ff 76 10	 push	 DWORD PTR [esi+16]
  0012f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 668  :          for ( unsigned index =0; index < size; ++index )

  00134	33 ff		 xor	 edi, edi
  00136	59		 pop	 ecx
  00137	59		 pop	 ecx
  00138	3b df		 cmp	 ebx, edi
  0013a	76 2f		 jbe	 SHORT $LN2@writeArray@2

; 665  :       {
; 666  :          assert( childValues_.size() == size );
; 667  :          *document_ << "[";

  0013c	89 7d b4	 mov	 DWORD PTR tv310[ebp], edi
$LN4@writeArray@2:

; 669  :          {
; 670  :             if ( index > 0 )

  0013f	85 ff		 test	 edi, edi
  00141	74 0f		 je	 SHORT $LN1@writeArray@2

; 671  :                *document_ << ",";

  00143	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0?$AA@
  00148	ff 76 10	 push	 DWORD PTR [esi+16]
  0014b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00150	59		 pop	 ecx
  00151	59		 pop	 ecx
$LN1@writeArray@2:

; 672  :             *document_ << childValues_[index];

  00152	8b 06		 mov	 eax, DWORD PTR [esi]
  00154	03 45 b4	 add	 eax, DWORD PTR tv310[ebp]
  00157	50		 push	 eax
  00158	ff 76 10	 push	 DWORD PTR [esi+16]
  0015b	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00160	83 45 b4 1c	 add	 DWORD PTR tv310[ebp], 28 ; 0000001cH
  00164	47		 inc	 edi
  00165	59		 pop	 ecx
  00166	59		 pop	 ecx
  00167	3b fb		 cmp	 edi, ebx
  00169	72 d4		 jb	 SHORT $LN4@writeArray@2
$LN2@writeArray@2:

; 673  :          }
; 674  :          *document_ << "]";

  0016b	68 00 00 00 00	 push	 OFFSET ??_C@_01LBDDMOBJ@?$FN?$AA@
  00170	ff 76 10	 push	 DWORD PTR [esi+16]
  00173	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00178	59		 pop	 ecx
  00179	59		 pop	 ecx
$LN5@writeArray@2:

; 675  :       }
; 676  :    }
; 677  : }

  0017a	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0017f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?writeArrayValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T35291[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeArrayValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR $T35295[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeArrayValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$2:
  00010	8d 4d b8	 lea	 ecx, DWORD PTR $T35305[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?writeArrayValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?writeArrayValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?writeArrayValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ENDP ; Json::StyledStreamWriter::writeArrayValue
PUBLIC	??_C@_02MCILKGOH@?$HL?$HN?$AA@			; `string'
PUBLIC	_value$GSCopy$
;	COMDAT ??_C@_02MCILKGOH@?$HL?$HN?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
??_C@_02MCILKGOH@?$HL?$HN?$AA@ DB '{}', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$7
	DD	06H
	DD	FLAT:__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$8
	DD	06H
	DD	FLAT:__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$9
	DD	06H
	DD	FLAT:__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$10
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
xdata$x	ENDS
;	COMDAT ?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z
_TEXT	SEGMENT
_members$35088 = -324					; size = 16
_value$GSCopy$ = -308					; size = 4
_childValue$35100 = -304				; size = 4
tv546 = -300						; size = 4
$T35084 = -296						; size = 28
$T35078 = -268						; size = 28
$T35082 = -240						; size = 28
$T35101 = -212						; size = 28
$T35080 = -184						; size = 28
$T35076 = -156						; size = 28
$T35074 = -128						; size = 28
$T35090 = -100						; size = 28
$T35104 = -72						; size = 28
$T35093 = -44						; size = 28
__$EHRec$ = -12						; size = 12
_value$ = 8						; size = 4
?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z PROC	; Json::StyledWriter::writeValue, COMDAT
; _this$ = ecx

; 292  : {

  00000	68 38 01 00 00	 push	 312			; 00000138H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 75 08	 mov	 esi, DWORD PTR _value$[ebp]
  00012	8b f9		 mov	 edi, ecx

; 293  :    switch ( value.type() )

  00014	8b ce		 mov	 ecx, esi

; 337  :                   break;
; 338  :                }
; 339  :                document_ += ",";

  00016	89 b5 cc fe ff
	ff		 mov	 DWORD PTR _value$GSCopy$[ebp], esi
  0001c	e8 00 00 00 00	 call	 ?type@Value@Json@@QBE?AW4ValueType@2@XZ ; Json::Value::type
  00021	83 f8 07	 cmp	 eax, 7
  00024	0f 87 b4 02 00
	00		 ja	 $LN14@writeValue@2

; 293  :    switch ( value.type() )

  0002a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN171@writeValue@2[eax*4]
$LN13@writeValue@2:

; 294  :    {
; 295  :    case nullValue:
; 296  :       pushValue( "null" );

  00031	68 00 00 00 00	 push	 OFFSET ??_C@_04MLLLIHIP@null?$AA@
  00036	8d 4d 80	 lea	 ecx, DWORD PTR $T35074[ebp]
  00039	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00042	8d 45 80	 lea	 eax, DWORD PTR $T35074[ebp]
  00045	50		 push	 eax
  00046	8b cf		 mov	 ecx, edi
  00048	e8 00 00 00 00	 call	 ?pushValue@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledWriter::pushValue
  0004d	8d 4d 80	 lea	 ecx, DWORD PTR $T35074[ebp]
$LN170@writeValue@2:
  00050	6a 00		 push	 0
  00052	6a 01		 push	 1
$LN169@writeValue@2:
  00054	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 297  :       break;

  00059	e9 80 02 00 00	 jmp	 $LN14@writeValue@2
$LN12@writeValue@2:

; 298  :    case intValue:
; 299  :       pushValue( valueToString( value.asInt() ) );

  0005e	8b ce		 mov	 ecx, esi
  00060	e8 00 00 00 00	 call	 ?asInt@Value@Json@@QBEHXZ ; Json::Value::asInt
  00065	50		 push	 eax
  00066	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T35076[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; Json::valueToString
  00072	59		 pop	 ecx
  00073	59		 pop	 ecx
  00074	33 f6		 xor	 esi, esi
  00076	46		 inc	 esi
  00077	50		 push	 eax
  00078	8b cf		 mov	 ecx, edi
  0007a	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  0007d	e8 00 00 00 00	 call	 ?pushValue@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledWriter::pushValue
  00082	6a 00		 push	 0
  00084	56		 push	 esi
  00085	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T35076[ebp]

; 300  :       break;

  0008b	eb c7		 jmp	 SHORT $LN169@writeValue@2
$LN11@writeValue@2:

; 301  :    case uintValue:
; 302  :       pushValue( valueToString( value.asUInt() ) );

  0008d	8b ce		 mov	 ecx, esi
  0008f	e8 00 00 00 00	 call	 ?asUInt@Value@Json@@QBEIXZ ; Json::Value::asUInt
  00094	50		 push	 eax
  00095	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR $T35078[ebp]
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; Json::valueToString
  000a1	59		 pop	 ecx
  000a2	59		 pop	 ecx
  000a3	50		 push	 eax
  000a4	8b cf		 mov	 ecx, edi
  000a6	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000ad	e8 00 00 00 00	 call	 ?pushValue@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledWriter::pushValue
  000b2	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T35078[ebp]

; 303  :       break;

  000b8	eb 96		 jmp	 SHORT $LN170@writeValue@2
$LN10@writeValue@2:

; 304  :    case realValue:
; 305  :       pushValue( valueToString( value.asDouble() ) );

  000ba	8b ce		 mov	 ecx, esi
  000bc	e8 00 00 00 00	 call	 ?asDouble@Value@Json@@QBENXZ ; Json::Value::asDouble
  000c1	51		 push	 ecx
  000c2	51		 push	 ecx
  000c3	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T35080[ebp]
  000c9	dd 1c 24	 fstp	 QWORD PTR [esp]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z ; Json::valueToString
  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d5	50		 push	 eax
  000d6	8b cf		 mov	 ecx, edi
  000d8	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  000df	e8 00 00 00 00	 call	 ?pushValue@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledWriter::pushValue
  000e4	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T35080[ebp]

; 306  :       break;

  000ea	e9 61 ff ff ff	 jmp	 $LN170@writeValue@2
$LN9@writeValue@2:

; 307  :    case stringValue:
; 308  :       pushValue( valueToQuotedString( value.asCString() ) );

  000ef	8b ce		 mov	 ecx, esi
  000f1	e8 00 00 00 00	 call	 ?asCString@Value@Json@@QBEPBDXZ ; Json::Value::asCString
  000f6	50		 push	 eax
  000f7	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T35082[ebp]
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 ?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; Json::valueToQuotedString
  00103	59		 pop	 ecx
  00104	59		 pop	 ecx
  00105	50		 push	 eax
  00106	8b cf		 mov	 ecx, edi
  00108	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  0010f	e8 00 00 00 00	 call	 ?pushValue@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledWriter::pushValue
  00114	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T35082[ebp]

; 309  :       break;

  0011a	e9 31 ff ff ff	 jmp	 $LN170@writeValue@2
$LN8@writeValue@2:

; 310  :    case booleanValue:
; 311  :       pushValue( valueToString( value.asBool() ) );

  0011f	8b ce		 mov	 ecx, esi
  00121	e8 00 00 00 00	 call	 ?asBool@Value@Json@@QBE_NXZ ; Json::Value::asBool
  00126	0f b6 c0	 movzx	 eax, al
  00129	50		 push	 eax
  0012a	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR $T35084[ebp]
  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 ?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; Json::valueToString
  00136	59		 pop	 ecx
  00137	59		 pop	 ecx
  00138	50		 push	 eax
  00139	8b cf		 mov	 ecx, edi
  0013b	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  00142	e8 00 00 00 00	 call	 ?pushValue@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledWriter::pushValue
  00147	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T35084[ebp]

; 312  :       break;

  0014d	e9 fe fe ff ff	 jmp	 $LN170@writeValue@2
$LN7@writeValue@2:

; 313  :    case arrayValue:
; 314  :       writeArrayValue( value);

  00152	56		 push	 esi
  00153	8b cf		 mov	 ecx, edi
  00155	e8 00 00 00 00	 call	 ?writeArrayValue@StyledWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledWriter::writeArrayValue

; 315  :       break;

  0015a	e9 7f 01 00 00	 jmp	 $LN14@writeValue@2
$LN6@writeValue@2:

; 316  :    case objectValue:
; 317  :       {
; 318  :          Value::Members members( value.getMemberNames() );

  0015f	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _members$35088[ebp]
  00165	50		 push	 eax
  00166	8b ce		 mov	 ecx, esi
  00168	e8 00 00 00 00	 call	 ?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ ; Json::Value::getMemberNames

; 319  :          if ( members.empty() )

  0016d	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _members$35088[ebp]
  00173	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  0017a	3b 85 c0 fe ff
	ff		 cmp	 eax, DWORD PTR _members$35088[ebp+4]
  00180	75 24		 jne	 SHORT $LN5@writeValue@2

; 320  :             pushValue( "{}" );

  00182	68 00 00 00 00	 push	 OFFSET ??_C@_02MCILKGOH@?$HL?$HN?$AA@
  00187	8d 4d 9c	 lea	 ecx, DWORD PTR $T35090[ebp]
  0018a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0018f	8d 45 9c	 lea	 eax, DWORD PTR $T35090[ebp]
  00192	50		 push	 eax
  00193	8b cf		 mov	 ecx, edi
  00195	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00199	e8 00 00 00 00	 call	 ?pushValue@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledWriter::pushValue
  0019e	8d 4d 9c	 lea	 ecx, DWORD PTR $T35090[ebp]

; 321  :          else

  001a1	e9 24 01 00 00	 jmp	 $LN168@writeValue@2
$LN5@writeValue@2:

; 322  :          {
; 323  :             writeWithIndent( "{" );

  001a6	68 00 00 00 00	 push	 OFFSET ??_C@_01HCONENDN@?$HL?$AA@
  001ab	8d 4d d4	 lea	 ecx, DWORD PTR $T35093[ebp]
  001ae	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001b3	6a ff		 push	 -1
  001b5	6a 00		 push	 0
  001b7	8d 45 d4	 lea	 eax, DWORD PTR $T35093[ebp]
  001ba	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  001bd	50		 push	 eax
  001be	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  001c2	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv546[ebp], ecx
  001c8	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  001cd	6a 00		 push	 0
  001cf	6a 01		 push	 1
  001d1	8d 4d d4	 lea	 ecx, DWORD PTR $T35093[ebp]
  001d4	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  001d8	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 324  :             indent();
; 325  :             Value::Members::iterator it = members.begin();

  001dd	8b b5 bc fe ff
	ff		 mov	 esi, DWORD PTR _members$35088[ebp]
  001e3	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
$LL3@writeValue@2:

; 326  :             while ( true )
; 327  :             {
; 328  :                const std::string &name = *it;
; 329  :                const Value &childValue = value[name];

  001e8	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _value$GSCopy$[ebp]
  001ee	56		 push	 esi
  001ef	e8 00 00 00 00	 call	 ??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::operator[]

; 330  :                writeCommentBeforeValue( childValue );

  001f4	50		 push	 eax
  001f5	8b cf		 mov	 ecx, edi
  001f7	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _childValue$35100[ebp], eax
  001fd	e8 00 00 00 00	 call	 ?writeCommentBeforeValue@StyledWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledWriter::writeCommentBeforeValue

; 331  :                writeWithIndent( valueToQuotedString( name.c_str() ) );

  00202	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00206	72 04		 jb	 SHORT $LN101@writeValue@2
  00208	8b 06		 mov	 eax, DWORD PTR [esi]
  0020a	eb 02		 jmp	 SHORT $LN102@writeValue@2
$LN101@writeValue@2:
  0020c	8b c6		 mov	 eax, esi
$LN102@writeValue@2:
  0020e	50		 push	 eax
  0020f	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR $T35101[ebp]
  00215	50		 push	 eax
  00216	e8 00 00 00 00	 call	 ?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; Json::valueToQuotedString
  0021b	59		 pop	 ecx
  0021c	59		 pop	 ecx
  0021d	50		 push	 eax
  0021e	8b cf		 mov	 ecx, edi
  00220	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00224	e8 00 00 00 00	 call	 ?writeWithIndent@StyledWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledWriter::writeWithIndent
  00229	6a 00		 push	 0
  0022b	6a 01		 push	 1
  0022d	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T35101[ebp]
  00233	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00237	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 332  :                document_ += ":";

  0023c	53		 push	 ebx
  0023d	e8 00 00 00 00	 call	 _strlen
  00242	59		 pop	 ecx
  00243	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv546[ebp]
  00249	50		 push	 eax
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 333  :                writeValue( childValue );

  00250	ff b5 d0 fe ff
	ff		 push	 DWORD PTR _childValue$35100[ebp]
  00256	8b cf		 mov	 ecx, edi
  00258	e8 00 00 00 00	 call	 ?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledWriter::writeValue

; 334  :                if ( ++it == members.end() )

  0025d	83 c6 1c	 add	 esi, 28			; 0000001cH
  00260	3b b5 c0 fe ff
	ff		 cmp	 esi, DWORD PTR _members$35088[ebp+4]
  00266	74 2e		 je	 SHORT $LN166@writeValue@2

; 337  :                   break;
; 338  :                }
; 339  :                document_ += ",";

  00268	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0?$AA@
  0026d	e8 00 00 00 00	 call	 _strlen
  00272	59		 pop	 ecx
  00273	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv546[ebp]
  00279	50		 push	 eax
  0027a	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0?$AA@
  0027f	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 340  :                writeCommentAfterValueOnSameLine( childValue );

  00284	ff b5 d0 fe ff
	ff		 push	 DWORD PTR _childValue$35100[ebp]
  0028a	8b cf		 mov	 ecx, edi
  0028c	e8 00 00 00 00	 call	 ?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledWriter::writeCommentAfterValueOnSameLine

; 341  :             }

  00291	e9 52 ff ff ff	 jmp	 $LL3@writeValue@2
$LN166@writeValue@2:

; 335  :                {
; 336  :                   writeCommentAfterValueOnSameLine( childValue );

  00296	ff b5 d0 fe ff
	ff		 push	 DWORD PTR _childValue$35100[ebp]
  0029c	8b cf		 mov	 ecx, edi
  0029e	e8 00 00 00 00	 call	 ?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledWriter::writeCommentAfterValueOnSameLine

; 342  :             unindent();
; 343  :             writeWithIndent( "}" );

  002a3	68 00 00 00 00	 push	 OFFSET ??_C@_01CELHOKLL@?$HN?$AA@
  002a8	8d 4d b8	 lea	 ecx, DWORD PTR $T35104[ebp]
  002ab	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  002b0	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv546[ebp]
  002b6	6a ff		 push	 -1
  002b8	6a 00		 push	 0
  002ba	8d 45 b8	 lea	 eax, DWORD PTR $T35104[ebp]
  002bd	50		 push	 eax
  002be	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  002c2	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  002c7	8d 4d b8	 lea	 ecx, DWORD PTR $T35104[ebp]
$LN168@writeValue@2:
  002ca	6a 00		 push	 0
  002cc	6a 01		 push	 1
  002ce	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 344  :          }
; 345  :       }

  002d3	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _members$35088[ebp]
  002d9	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
$LN14@writeValue@2:

; 346  :       break;
; 347  :    }
; 348  : }

  002de	e8 00 00 00 00	 call	 __EH_epilog3_GS
  002e3	c2 04 00	 ret	 4
  002e6	8b ff		 npad	 2
$LN171@writeValue@2:
  002e8	00 00 00 00	 DD	 $LN13@writeValue@2
  002ec	00 00 00 00	 DD	 $LN12@writeValue@2
  002f0	00 00 00 00	 DD	 $LN11@writeValue@2
  002f4	00 00 00 00	 DD	 $LN10@writeValue@2
  002f8	00 00 00 00	 DD	 $LN9@writeValue@2
  002fc	00 00 00 00	 DD	 $LN8@writeValue@2
  00300	00 00 00 00	 DD	 $LN7@writeValue@2
  00304	00 00 00 00	 DD	 $LN6@writeValue@2
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$0:
  00000	8d 4d 80	 lea	 ecx, DWORD PTR $T35074[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$1:
  00008	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T35076[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$2:
  00013	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T35078[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$3:
  0001e	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T35080[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$4:
  00029	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T35082[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$5:
  00034	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T35084[ebp]
  0003a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$6:
  0003f	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _members$35088[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$7:
  0004a	8d 4d 9c	 lea	 ecx, DWORD PTR $T35090[ebp]
  0004d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$8:
  00052	8d 4d d4	 lea	 ecx, DWORD PTR $T35093[ebp]
  00055	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$9:
  0005a	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T35101[ebp]
  00060	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z$10:
  00065	8d 4d b8	 lea	 ecx, DWORD PTR $T35104[ebp]
  00068	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z:
  0006d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00071	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00074	8b 8a b8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-328]
  0007a	33 c8		 xor	 ecx, eax
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00084	33 c8		 xor	 ecx, eax
  00086	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z
  00090	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z ENDP	; Json::StyledWriter::writeValue
; Function compile flags: /Ogsp
;	COMDAT ?isMultineArray@StyledWriter@Json@@AAE_NABVValue@2@@Z
_TEXT	SEGMENT
_size$ = -16						; size = 4
tv329 = -12						; size = 4
$T51022 = -12						; size = 4
_childValue$35144 = -12					; size = 4
_index$35147 = -8					; size = 4
_index$35140 = -8					; size = 4
_isMultiLine$ = -1					; size = 1
_value$ = 8						; size = 4
?isMultineArray@StyledWriter@Json@@AAE_NABVValue@2@@Z PROC ; Json::StyledWriter::isMultineArray, COMDAT
; _this$ = ecx

; 406  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 407  :    int size = value.size();

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0000e	e8 00 00 00 00	 call	 ?size@Value@Json@@QBEIXZ ; Json::Value::size

; 408  :    bool isMultiLine = size*3 >= rightMargin_ ;
; 409  :    childValues_.clear();

  00013	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00016	8b d8		 mov	 ebx, eax
  00018	6b c0 03	 imul	 eax, 3
  0001b	3b 47 30	 cmp	 eax, DWORD PTR [edi+48]
  0001e	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00021	50		 push	 eax
  00022	51		 push	 ecx
  00023	8d 45 f4	 lea	 eax, DWORD PTR $T51022[ebp]
  00026	50		 push	 eax
  00027	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0002a	89 5d f0	 mov	 DWORD PTR _size$[ebp], ebx
  0002d	0f 9d 45 ff	 setge	 BYTE PTR _isMultiLine$[ebp]
  00031	e8 00 00 00 00	 call	 ?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase

; 410  :    for ( int index =0; index < size  &&  !isMultiLine; ++index )

  00036	83 65 f8 00	 and	 DWORD PTR _index$35140[ebp], 0
  0003a	85 db		 test	 ebx, ebx
  0003c	7e 4d		 jle	 SHORT $LN5@isMultineA@2
$LL45@isMultineA@2:
  0003e	80 7d ff 00	 cmp	 BYTE PTR _isMultiLine$[ebp], 0
  00042	0f 85 9e 00 00
	00		 jne	 $LN46@isMultineA@2

; 411  :    {
; 412  :       const Value &childValue = value[index];

  00048	ff 75 f8	 push	 DWORD PTR _index$35140[ebp]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0004e	e8 00 00 00 00	 call	 ??AValue@Json@@QBEABV01@I@Z ; Json::Value::operator[]
  00053	8b c8		 mov	 ecx, eax
  00055	89 4d f4	 mov	 DWORD PTR _childValue$35144[ebp], ecx

; 413  :       isMultiLine = isMultiLine  ||
; 414  :                      ( (childValue.isArray()  ||  childValue.isObject())  &&  
; 415  :                         childValue.size() > 0 );

  00058	e8 00 00 00 00	 call	 ?isArray@Value@Json@@QBE_NXZ ; Json::Value::isArray
  0005d	84 c0		 test	 al, al
  0005f	75 0c		 jne	 SHORT $LN10@isMultineA@2
  00061	8b 4d f4	 mov	 ecx, DWORD PTR _childValue$35144[ebp]
  00064	e8 00 00 00 00	 call	 ?isObject@Value@Json@@QBE_NXZ ; Json::Value::isObject
  00069	84 c0		 test	 al, al
  0006b	74 0c		 je	 SHORT $LN11@isMultineA@2
$LN10@isMultineA@2:
  0006d	8b 4d f4	 mov	 ecx, DWORD PTR _childValue$35144[ebp]
  00070	e8 00 00 00 00	 call	 ?size@Value@Json@@QBEIXZ ; Json::Value::size
  00075	85 c0		 test	 eax, eax
  00077	75 06		 jne	 SHORT $LN12@isMultineA@2
$LN11@isMultineA@2:
  00079	c6 45 ff 00	 mov	 BYTE PTR _isMultiLine$[ebp], 0
  0007d	eb 04		 jmp	 SHORT $LN13@isMultineA@2
$LN12@isMultineA@2:
  0007f	c6 45 ff 01	 mov	 BYTE PTR _isMultiLine$[ebp], 1
$LN13@isMultineA@2:

; 410  :    for ( int index =0; index < size  &&  !isMultiLine; ++index )

  00083	ff 45 f8	 inc	 DWORD PTR _index$35140[ebp]
  00086	39 5d f8	 cmp	 DWORD PTR _index$35140[ebp], ebx
  00089	7c b3		 jl	 SHORT $LL45@isMultineA@2
$LN5@isMultineA@2:

; 416  :    }
; 417  :    if ( !isMultiLine ) // check if line length > max line length

  0008b	80 7d ff 00	 cmp	 BYTE PTR _isMultiLine$[ebp], 0
  0008f	75 55		 jne	 SHORT $LN46@isMultineA@2

; 418  :    {
; 419  :       childValues_.reserve( size );

  00091	53		 push	 ebx
  00092	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00095	e8 00 00 00 00	 call	 ?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve

; 420  :       addChildValues_ = true;
; 421  :       int lineLength = 4 + (size-1)*2; // '[ ' + ', '*n + ' ]'
; 422  :       for ( int index =0; index < size  &&  !isMultiLine; ++index )

  0009a	33 c0		 xor	 eax, eax
  0009c	c6 47 38 01	 mov	 BYTE PTR [edi+56], 1
  000a0	8d 5c 1b 02	 lea	 ebx, DWORD PTR [ebx+ebx+2]
  000a4	89 45 f8	 mov	 DWORD PTR _index$35147[ebp], eax
  000a7	39 45 f0	 cmp	 DWORD PTR _size$[ebp], eax
  000aa	7e 2f		 jle	 SHORT $LN1@isMultineA@2

; 418  :    {
; 419  :       childValues_.reserve( size );

  000ac	89 45 f4	 mov	 DWORD PTR tv329[ebp], eax
$LL44@isMultineA@2:

; 423  :       {
; 424  :          writeValue( value[index] );

  000af	ff 75 f8	 push	 DWORD PTR _index$35147[ebp]
  000b2	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  000b5	e8 00 00 00 00	 call	 ??AValue@Json@@QBEABV01@I@Z ; Json::Value::operator[]
  000ba	50		 push	 eax
  000bb	8b cf		 mov	 ecx, edi
  000bd	e8 00 00 00 00	 call	 ?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledWriter::writeValue

; 425  :          lineLength += int( childValues_[index].length() );

  000c2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000c5	8b 4d f4	 mov	 ecx, DWORD PTR tv329[ebp]
  000c8	03 5c 01 10	 add	 ebx, DWORD PTR [ecx+eax+16]
  000cc	ff 45 f8	 inc	 DWORD PTR _index$35147[ebp]
  000cf	8b 45 f8	 mov	 eax, DWORD PTR _index$35147[ebp]
  000d2	83 45 f4 1c	 add	 DWORD PTR tv329[ebp], 28 ; 0000001cH
  000d6	3b 45 f0	 cmp	 eax, DWORD PTR _size$[ebp]
  000d9	7c d4		 jl	 SHORT $LL44@isMultineA@2
$LN1@isMultineA@2:

; 426  :          isMultiLine = isMultiLine  &&  hasCommentForValue( value[index] );
; 427  :       }
; 428  :       addChildValues_ = false;
; 429  :       isMultiLine = isMultiLine  ||  lineLength >= rightMargin_;

  000db	3b 5f 30	 cmp	 ebx, DWORD PTR [edi+48]
  000de	c6 47 38 00	 mov	 BYTE PTR [edi+56], 0
  000e2	0f 9d 45 ff	 setge	 BYTE PTR _isMultiLine$[ebp]
$LN46@isMultineA@2:

; 430  :    }
; 431  :    return isMultiLine;

  000e6	8a 45 ff	 mov	 al, BYTE PTR _isMultiLine$[ebp]
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx

; 432  : }

  000ec	c9		 leave
  000ed	c2 04 00	 ret	 4
?isMultineArray@StyledWriter@Json@@AAE_NABVValue@2@@Z ENDP ; Json::StyledWriter::isMultineArray
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__ehfuncinfo$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$7
	DD	06H
	DD	FLAT:__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$8
	DD	06H
	DD	FLAT:__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$9
	DD	06H
	DD	FLAT:__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$10
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_writer.cpp
xdata$x	ENDS
;	COMDAT ?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z
_TEXT	SEGMENT
_members$35269 = -316					; size = 16
_childValue$35280 = -300				; size = 4
$T35265 = -296						; size = 28
$T35281 = -268						; size = 28
$T35263 = -240						; size = 28
$T35259 = -212						; size = 28
$T35261 = -184						; size = 28
$T35257 = -156						; size = 28
$T35271 = -128						; size = 28
$T35273 = -100						; size = 28
$T35255 = -72						; size = 28
$T35284 = -44						; size = 28
__$EHRec$ = -12						; size = 12
_value$ = 8						; size = 4
?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z PROC ; Json::StyledStreamWriter::writeValue, COMDAT
; _this$ = ecx

; 568  : {

  00000	68 30 01 00 00	 push	 304			; 00000130H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 5d 08	 mov	 ebx, DWORD PTR _value$[ebp]
  00012	8b f1		 mov	 esi, ecx

; 569  :    switch ( value.type() )

  00014	8b cb		 mov	 ecx, ebx
  00016	e8 00 00 00 00	 call	 ?type@Value@Json@@QBE?AW4ValueType@2@XZ ; Json::Value::type
  0001b	83 f8 07	 cmp	 eax, 7
  0001e	0f 87 94 02 00
	00		 ja	 $LN14@writeValue@3
  00024	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN115@writeValue@3[eax*4]
$LN13@writeValue@3:

; 570  :    {
; 571  :    case nullValue:
; 572  :       pushValue( "null" );

  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_04MLLLIHIP@null?$AA@
  00030	8d 4d b8	 lea	 ecx, DWORD PTR $T35255[ebp]
  00033	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00038	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8d 45 b8	 lea	 eax, DWORD PTR $T35255[ebp]
  0003f	50		 push	 eax
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?pushValue@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::pushValue
  00047	8d 4d b8	 lea	 ecx, DWORD PTR $T35255[ebp]
$LN114@writeValue@3:
  0004a	6a 00		 push	 0
  0004c	6a 01		 push	 1
$LN113@writeValue@3:
  0004e	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 573  :       break;

  00053	e9 60 02 00 00	 jmp	 $LN14@writeValue@3
$LN12@writeValue@3:

; 574  :    case intValue:
; 575  :       pushValue( valueToString( value.asInt() ) );

  00058	8b cb		 mov	 ecx, ebx
  0005a	e8 00 00 00 00	 call	 ?asInt@Value@Json@@QBEHXZ ; Json::Value::asInt
  0005f	50		 push	 eax
  00060	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T35257[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; Json::valueToString
  0006c	59		 pop	 ecx
  0006d	59		 pop	 ecx
  0006e	33 ff		 xor	 edi, edi
  00070	47		 inc	 edi
  00071	50		 push	 eax
  00072	8b ce		 mov	 ecx, esi
  00074	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00077	e8 00 00 00 00	 call	 ?pushValue@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::pushValue
  0007c	6a 00		 push	 0
  0007e	57		 push	 edi
  0007f	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T35257[ebp]

; 576  :       break;

  00085	eb c7		 jmp	 SHORT $LN113@writeValue@3
$LN11@writeValue@3:

; 577  :    case uintValue:
; 578  :       pushValue( valueToString( value.asUInt() ) );

  00087	8b cb		 mov	 ecx, ebx
  00089	e8 00 00 00 00	 call	 ?asUInt@Value@Json@@QBEIXZ ; Json::Value::asUInt
  0008e	50		 push	 eax
  0008f	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR $T35259[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; Json::valueToString
  0009b	59		 pop	 ecx
  0009c	59		 pop	 ecx
  0009d	50		 push	 eax
  0009e	8b ce		 mov	 ecx, esi
  000a0	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000a7	e8 00 00 00 00	 call	 ?pushValue@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::pushValue
  000ac	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T35259[ebp]

; 579  :       break;

  000b2	eb 96		 jmp	 SHORT $LN114@writeValue@3
$LN10@writeValue@3:

; 580  :    case realValue:
; 581  :       pushValue( valueToString( value.asDouble() ) );

  000b4	8b cb		 mov	 ecx, ebx
  000b6	e8 00 00 00 00	 call	 ?asDouble@Value@Json@@QBENXZ ; Json::Value::asDouble
  000bb	51		 push	 ecx
  000bc	51		 push	 ecx
  000bd	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T35261[ebp]
  000c3	dd 1c 24	 fstp	 QWORD PTR [esp]
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z ; Json::valueToString
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cf	50		 push	 eax
  000d0	8b ce		 mov	 ecx, esi
  000d2	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  000d9	e8 00 00 00 00	 call	 ?pushValue@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::pushValue
  000de	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T35261[ebp]

; 582  :       break;

  000e4	e9 61 ff ff ff	 jmp	 $LN114@writeValue@3
$LN9@writeValue@3:

; 583  :    case stringValue:
; 584  :       pushValue( valueToQuotedString( value.asCString() ) );

  000e9	8b cb		 mov	 ecx, ebx
  000eb	e8 00 00 00 00	 call	 ?asCString@Value@Json@@QBEPBDXZ ; Json::Value::asCString
  000f0	50		 push	 eax
  000f1	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T35263[ebp]
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 ?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; Json::valueToQuotedString
  000fd	59		 pop	 ecx
  000fe	59		 pop	 ecx
  000ff	50		 push	 eax
  00100	8b ce		 mov	 ecx, esi
  00102	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00109	e8 00 00 00 00	 call	 ?pushValue@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::pushValue
  0010e	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T35263[ebp]

; 585  :       break;

  00114	e9 31 ff ff ff	 jmp	 $LN114@writeValue@3
$LN8@writeValue@3:

; 586  :    case booleanValue:
; 587  :       pushValue( valueToString( value.asBool() ) );

  00119	8b cb		 mov	 ecx, ebx
  0011b	e8 00 00 00 00	 call	 ?asBool@Value@Json@@QBE_NXZ ; Json::Value::asBool
  00120	0f b6 c0	 movzx	 eax, al
  00123	50		 push	 eax
  00124	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR $T35265[ebp]
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 ?valueToString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; Json::valueToString
  00130	59		 pop	 ecx
  00131	59		 pop	 ecx
  00132	50		 push	 eax
  00133	8b ce		 mov	 ecx, esi
  00135	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  0013c	e8 00 00 00 00	 call	 ?pushValue@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::pushValue
  00141	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T35265[ebp]

; 588  :       break;

  00147	e9 fe fe ff ff	 jmp	 $LN114@writeValue@3
$LN7@writeValue@3:

; 589  :    case arrayValue:
; 590  :       writeArrayValue( value);

  0014c	53		 push	 ebx
  0014d	8b ce		 mov	 ecx, esi
  0014f	e8 00 00 00 00	 call	 ?writeArrayValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledStreamWriter::writeArrayValue

; 591  :       break;

  00154	e9 5f 01 00 00	 jmp	 $LN14@writeValue@3
$LN6@writeValue@3:

; 592  :    case objectValue:
; 593  :       {
; 594  :          Value::Members members( value.getMemberNames() );

  00159	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _members$35269[ebp]
  0015f	50		 push	 eax
  00160	8b cb		 mov	 ecx, ebx
  00162	e8 00 00 00 00	 call	 ?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ ; Json::Value::getMemberNames

; 595  :          if ( members.empty() )

  00167	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _members$35269[ebp]
  0016d	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  00174	3b 85 c8 fe ff
	ff		 cmp	 eax, DWORD PTR _members$35269[ebp+4]
  0017a	75 24		 jne	 SHORT $LN5@writeValue@3

; 596  :             pushValue( "{}" );

  0017c	68 00 00 00 00	 push	 OFFSET ??_C@_02MCILKGOH@?$HL?$HN?$AA@
  00181	8d 4d 80	 lea	 ecx, DWORD PTR $T35271[ebp]
  00184	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00189	8d 45 80	 lea	 eax, DWORD PTR $T35271[ebp]
  0018c	50		 push	 eax
  0018d	8b ce		 mov	 ecx, esi
  0018f	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00193	e8 00 00 00 00	 call	 ?pushValue@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::pushValue
  00198	8d 4d 80	 lea	 ecx, DWORD PTR $T35271[ebp]

; 597  :          else

  0019b	e9 04 01 00 00	 jmp	 $LN112@writeValue@3
$LN5@writeValue@3:

; 598  :          {
; 599  :             writeWithIndent( "{" );

  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_01HCONENDN@?$HL?$AA@
  001a5	8d 4d 9c	 lea	 ecx, DWORD PTR $T35273[ebp]
  001a8	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001ad	8d 45 9c	 lea	 eax, DWORD PTR $T35273[ebp]
  001b0	50		 push	 eax
  001b1	8b ce		 mov	 ecx, esi
  001b3	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  001b7	e8 00 00 00 00	 call	 ?writeWithIndent@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::writeWithIndent
  001bc	6a 00		 push	 0
  001be	6a 01		 push	 1
  001c0	8d 4d 9c	 lea	 ecx, DWORD PTR $T35273[ebp]
  001c3	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  001c7	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 600  :             indent();

  001cc	8b ce		 mov	 ecx, esi
  001ce	e8 00 00 00 00	 call	 ?indent@StyledStreamWriter@Json@@AAEXXZ ; Json::StyledStreamWriter::indent

; 601  :             Value::Members::iterator it = members.begin();

  001d3	8b bd c4 fe ff
	ff		 mov	 edi, DWORD PTR _members$35269[ebp]
$LL3@writeValue@3:

; 602  :             while ( true )
; 603  :             {
; 604  :                const std::string &name = *it;
; 605  :                const Value &childValue = value[name];

  001d9	57		 push	 edi
  001da	8b cb		 mov	 ecx, ebx
  001dc	e8 00 00 00 00	 call	 ??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::operator[]

; 606  :                writeCommentBeforeValue( childValue );

  001e1	50		 push	 eax
  001e2	8b ce		 mov	 ecx, esi
  001e4	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _childValue$35280[ebp], eax
  001ea	e8 00 00 00 00	 call	 ?writeCommentBeforeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledStreamWriter::writeCommentBeforeValue

; 607  :                writeWithIndent( valueToQuotedString( name.c_str() ) );

  001ef	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  001f3	72 04		 jb	 SHORT $LN79@writeValue@3
  001f5	8b 07		 mov	 eax, DWORD PTR [edi]
  001f7	eb 02		 jmp	 SHORT $LN80@writeValue@3
$LN79@writeValue@3:
  001f9	8b c7		 mov	 eax, edi
$LN80@writeValue@3:
  001fb	50		 push	 eax
  001fc	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR $T35281[ebp]
  00202	50		 push	 eax
  00203	e8 00 00 00 00	 call	 ?valueToQuotedString@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; Json::valueToQuotedString
  00208	59		 pop	 ecx
  00209	59		 pop	 ecx
  0020a	50		 push	 eax
  0020b	8b ce		 mov	 ecx, esi
  0020d	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00211	e8 00 00 00 00	 call	 ?writeWithIndent@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::writeWithIndent
  00216	6a 00		 push	 0
  00218	6a 01		 push	 1
  0021a	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T35281[ebp]
  00220	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00224	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 608  :                *document_ << ":";

  00229	68 00 00 00 00	 push	 OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
  0022e	ff 76 10	 push	 DWORD PTR [esi+16]
  00231	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00236	59		 pop	 ecx
  00237	59		 pop	 ecx

; 609  :                writeValue( childValue );

  00238	ff b5 d4 fe ff
	ff		 push	 DWORD PTR _childValue$35280[ebp]
  0023e	8b ce		 mov	 ecx, esi
  00240	e8 00 00 00 00	 call	 ?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledStreamWriter::writeValue

; 610  :                if ( ++it == members.end() )

  00245	83 c7 1c	 add	 edi, 28			; 0000001cH
  00248	3b bd c8 fe ff
	ff		 cmp	 edi, DWORD PTR _members$35269[ebp+4]
  0024e	74 21		 je	 SHORT $LN110@writeValue@3

; 613  :                   break;
; 614  :                }
; 615  :                *document_ << ",";

  00250	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0?$AA@
  00255	ff 76 10	 push	 DWORD PTR [esi+16]
  00258	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0025d	59		 pop	 ecx
  0025e	59		 pop	 ecx

; 616  :                writeCommentAfterValueOnSameLine( childValue );

  0025f	ff b5 d4 fe ff
	ff		 push	 DWORD PTR _childValue$35280[ebp]
  00265	8b ce		 mov	 ecx, esi
  00267	e8 00 00 00 00	 call	 ?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledStreamWriter::writeCommentAfterValueOnSameLine

; 617  :             }

  0026c	e9 68 ff ff ff	 jmp	 $LL3@writeValue@3
$LN110@writeValue@3:

; 611  :                {
; 612  :                   writeCommentAfterValueOnSameLine( childValue );

  00271	ff b5 d4 fe ff
	ff		 push	 DWORD PTR _childValue$35280[ebp]
  00277	8b ce		 mov	 ecx, esi
  00279	e8 00 00 00 00	 call	 ?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledStreamWriter::writeCommentAfterValueOnSameLine

; 618  :             unindent();

  0027e	8b ce		 mov	 ecx, esi
  00280	e8 00 00 00 00	 call	 ?unindent@StyledStreamWriter@Json@@AAEXXZ ; Json::StyledStreamWriter::unindent

; 619  :             writeWithIndent( "}" );

  00285	68 00 00 00 00	 push	 OFFSET ??_C@_01CELHOKLL@?$HN?$AA@
  0028a	8d 4d d4	 lea	 ecx, DWORD PTR $T35284[ebp]
  0028d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00292	8d 45 d4	 lea	 eax, DWORD PTR $T35284[ebp]
  00295	50		 push	 eax
  00296	8b ce		 mov	 ecx, esi
  00298	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  0029c	e8 00 00 00 00	 call	 ?writeWithIndent@StyledStreamWriter@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::writeWithIndent
  002a1	8d 4d d4	 lea	 ecx, DWORD PTR $T35284[ebp]
$LN112@writeValue@3:
  002a4	6a 00		 push	 0
  002a6	6a 01		 push	 1
  002a8	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 620  :          }
; 621  :       }

  002ad	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _members$35269[ebp]
  002b3	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
$LN14@writeValue@3:

; 622  :       break;
; 623  :    }
; 624  : }

  002b8	e8 00 00 00 00	 call	 __EH_epilog3_GS
  002bd	c2 04 00	 ret	 4
$LN115@writeValue@3:
  002c0	00 00 00 00	 DD	 $LN13@writeValue@3
  002c4	00 00 00 00	 DD	 $LN12@writeValue@3
  002c8	00 00 00 00	 DD	 $LN11@writeValue@3
  002cc	00 00 00 00	 DD	 $LN10@writeValue@3
  002d0	00 00 00 00	 DD	 $LN9@writeValue@3
  002d4	00 00 00 00	 DD	 $LN8@writeValue@3
  002d8	00 00 00 00	 DD	 $LN7@writeValue@3
  002dc	00 00 00 00	 DD	 $LN6@writeValue@3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR $T35255[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$1:
  00008	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T35257[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$2:
  00013	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T35259[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$3:
  0001e	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T35261[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$4:
  00029	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T35263[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$5:
  00034	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T35265[ebp]
  0003a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$6:
  0003f	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _members$35269[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$7:
  0004a	8d 4d 80	 lea	 ecx, DWORD PTR $T35271[ebp]
  0004d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$8:
  00052	8d 4d 9c	 lea	 ecx, DWORD PTR $T35273[ebp]
  00055	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$9:
  0005a	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T35281[ebp]
  00060	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z$10:
  00065	8d 4d d4	 lea	 ecx, DWORD PTR $T35284[ebp]
  00068	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z:
  0006d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00071	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00074	8b 8a c0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-320]
  0007a	33 c8		 xor	 ecx, eax
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00084	33 c8		 xor	 ecx, eax
  00086	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z
  00090	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ENDP ; Json::StyledStreamWriter::writeValue
; Function compile flags: /Ogsp
;	COMDAT ?write@StyledWriter@Json@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@@Z
_TEXT	SEGMENT
$T51264 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_root$ = 12						; size = 4
?write@StyledWriter@Json@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@@Z PROC ; Json::StyledWriter::write, COMDAT
; _this$ = ecx

; 278  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	83 65 fc 00	 and	 DWORD PTR $T51264[ebp], 0
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 279  :    document_ = "";

  0000b	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00010	57		 push	 edi
  00011	8b f1		 mov	 esi, ecx
  00013	e8 00 00 00 00	 call	 _strlen
  00018	59		 pop	 ecx
  00019	50		 push	 eax
  0001a	8d 5e 14	 lea	 ebx, DWORD PTR [esi+20]
  0001d	57		 push	 edi
  0001e	8b cb		 mov	 ecx, ebx
  00020	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 280  :    addChildValues_ = false;
; 281  :    //indentString_ = "";
; 282  :    writeCommentBeforeValue( root );

  00025	ff 75 0c	 push	 DWORD PTR _root$[ebp]
  00028	8b ce		 mov	 ecx, esi
  0002a	c6 46 38 00	 mov	 BYTE PTR [esi+56], 0
  0002e	e8 00 00 00 00	 call	 ?writeCommentBeforeValue@StyledWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledWriter::writeCommentBeforeValue

; 283  :    writeValue( root );

  00033	ff 75 0c	 push	 DWORD PTR _root$[ebp]
  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?writeValue@StyledWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledWriter::writeValue

; 284  :    writeCommentAfterValueOnSameLine( root );

  0003d	ff 75 0c	 push	 DWORD PTR _root$[ebp]
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?writeCommentAfterValueOnSameLine@StyledWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledWriter::writeCommentAfterValueOnSameLine

; 285  :    //document_ += "\n";
; 286  :    return document_;

  00047	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004a	53		 push	 ebx
  0004b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00050	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx

; 287  : }

  00056	c9		 leave
  00057	c2 08 00	 ret	 8
?write@StyledWriter@Json@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@@Z ENDP ; Json::StyledWriter::write
_TEXT	ENDS
PUBLIC	?write@StyledStreamWriter@Json@@QAEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABVValue@2@@Z ; Json::StyledStreamWriter::write
; Function compile flags: /Ogsp
;	COMDAT ?write@StyledStreamWriter@Json@@QAEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABVValue@2@@Z
_TEXT	SEGMENT
_out$ = 8						; size = 4
_root$ = 12						; size = 4
?write@StyledStreamWriter@Json@@QAEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABVValue@2@@Z PROC ; Json::StyledStreamWriter::write, COMDAT
; _this$ = ecx

; 554  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 555  :    document_ = &out;

  00003	8b 45 08	 mov	 eax, DWORD PTR _out$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx

; 556  :    addChildValues_ = false;
; 557  :    indentString_ = "";

  0000a	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0000f	57		 push	 edi
  00010	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00013	c6 46 50 00	 mov	 BYTE PTR [esi+80], 0
  00017	e8 00 00 00 00	 call	 _strlen
  0001c	59		 pop	 ecx
  0001d	50		 push	 eax
  0001e	57		 push	 edi
  0001f	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00022	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 558  :    writeCommentBeforeValue( root );

  00027	ff 75 0c	 push	 DWORD PTR _root$[ebp]
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?writeCommentBeforeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledStreamWriter::writeCommentBeforeValue

; 559  :    writeValue( root );

  00031	ff 75 0c	 push	 DWORD PTR _root$[ebp]
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?writeValue@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledStreamWriter::writeValue

; 560  :    writeCommentAfterValueOnSameLine( root );

  0003b	ff 75 0c	 push	 DWORD PTR _root$[ebp]
  0003e	8b ce		 mov	 ecx, esi
  00040	e8 00 00 00 00	 call	 ?writeCommentAfterValueOnSameLine@StyledStreamWriter@Json@@AAEXABVValue@2@@Z ; Json::StyledStreamWriter::writeCommentAfterValueOnSameLine

; 561  :    //*document_ << "\n";
; 562  :    document_ = NULL; // Forget the stream, for safety.

  00045	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 563  : }

  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
?write@StyledStreamWriter@Json@@QAEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABVValue@2@@Z ENDP ; Json::StyledStreamWriter::write
_TEXT	ENDS
PUBLIC	??_C@_01GPOEFGEJ@?7?$AA@			; `string'
PUBLIC	??6Json@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVValue@0@@Z ; Json::operator<<
;	COMDAT ??_C@_01GPOEFGEJ@?7?$AA@
CONST	SEGMENT
??_C@_01GPOEFGEJ@?7?$AA@ DB 09H, 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??6Json@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVValue@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6Json@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVValue@0@@Z$1
__ehfuncinfo$??6Json@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVValue@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??6Json@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVValue@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??6Json@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVValue@0@@Z
_TEXT	SEGMENT
$T51303 = -104						; size = 4
_writer$ = -100						; size = 81
__$EHRec$ = -12						; size = 12
_sout$ = 8						; size = 4
_root$ = 12						; size = 4
??6Json@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVValue@0@@Z PROC ; Json::operator<<, COMDAT

; 823  : {

  00000	6a 5c		 push	 92			; 0000005cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??6Json@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVValue@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 0c	 mov	 esi, DWORD PTR _root$[ebp]

; 824  :    Json::StyledStreamWriter writer;

  0000f	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00012	8b cc		 mov	 ecx, esp
  00014	89 65 98	 mov	 DWORD PTR $T51303[ebp], esp
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7?$AA@
  0001c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00021	8d 4d 9c	 lea	 ecx, DWORD PTR _writer$[ebp]
  00024	e8 00 00 00 00	 call	 ??0StyledStreamWriter@Json@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::StyledStreamWriter::StyledStreamWriter
  00029	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 825  :    writer.write(sout, root);

  0002d	56		 push	 esi
  0002e	ff 75 08	 push	 DWORD PTR _sout$[ebp]
  00031	8d 4d 9c	 lea	 ecx, DWORD PTR _writer$[ebp]
  00034	e8 00 00 00 00	 call	 ?write@StyledStreamWriter@Json@@QAEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABVValue@2@@Z ; Json::StyledStreamWriter::write

; 826  :    return sout;

  00039	8d 4d 9c	 lea	 ecx, DWORD PTR _writer$[ebp]
  0003c	e8 00 00 00 00	 call	 ??1StyledStreamWriter@Json@@QAE@XZ ; Json::StyledStreamWriter::~StyledStreamWriter
  00041	8b 45 08	 mov	 eax, DWORD PTR _sout$[ebp]

; 827  : }

  00044	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00049	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6Json@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVValue@0@@Z$1:
  00000	8d 4d 9c	 lea	 ecx, DWORD PTR _writer$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1StyledStreamWriter@Json@@QAE@XZ ; Json::StyledStreamWriter::~StyledStreamWriter
__ehhandler$??6Json@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVValue@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6Json@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVValue@0@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6Json@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVValue@0@@Z ENDP ; Json::operator<<
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
END
