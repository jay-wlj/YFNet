; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	F:\Projects\Git\YFNet\trunk\Src\qvodbase\udp.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@D@std@@2HB	; std::numeric_limits<char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_W@std@@2HB	; std::numeric_limits<wchar_t>::max_digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_N@std@@2HB	; std::numeric_limits<bool>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@C@std@@2HB	; std::numeric_limits<signed char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@E@std@@2HB	; std::numeric_limits<unsigned char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?max_digits10@?$numeric_limits@F@std@@2HB	; std::numeric_limits<short>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?max_digits10@?$numeric_limits@G@std@@2HB	; std::numeric_limits<unsigned short>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?max_digits10@?$numeric_limits@H@std@@2HB	; std::numeric_limits<int>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?max_digits10@?$numeric_limits@I@std@@2HB	; std::numeric_limits<unsigned int>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?max_digits10@?$numeric_limits@J@std@@2HB	; std::numeric_limits<long>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?max_digits10@?$numeric_limits@K@std@@2HB	; std::numeric_limits<unsigned long>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_J@std@@2HB	; std::numeric_limits<__int64>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_K@std@@2HB	; std::numeric_limits<unsigned __int64>::max_digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 08H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_K@std@@2HB DD 015H	; std::numeric_limits<unsigned __int64>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_J@std@@2HB DD 014H	; std::numeric_limits<__int64>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@K@std@@2HB DD 0bH	; std::numeric_limits<unsigned long>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@J@std@@2HB DD 0bH	; std::numeric_limits<long>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@I@std@@2HB DD 0bH	; std::numeric_limits<unsigned int>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@H@std@@2HB DD 0bH	; std::numeric_limits<int>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@G@std@@2HB DD 06H	; std::numeric_limits<unsigned short>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@F@std@@2HB DD 06H	; std::numeric_limits<short>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@E@std@@2HB DD 04H	; std::numeric_limits<unsigned char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@C@std@@2HB DD 04H	; std::numeric_limits<signed char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_N@std@@2HB DD 00H	; std::numeric_limits<bool>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_W@std@@2HB DD 06H	; std::numeric_limits<wchar_t>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@D@std@@2HB DD 04H	; std::numeric_limits<char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 01H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
EXTRN	_strlen:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 492  : 		}

  00003	5d		 pop	 ebp

; 491  : 		return (_CSTD strlen(_First));

  00004	e9 00 00 00 00	 jmp	 _strlen
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
; Function compile flags: /Ogsp
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 546  : 		{	// convert character to metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 547  : 		return ((unsigned char)_Ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00006	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 548  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
; Function compile flags: /Ogsp
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 552  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 553  : 		return (_Left == _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000b	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000d	f7 d8		 neg	 eax
  0000f	1b c0		 sbb	 eax, eax
  00011	40		 inc	 eax

; 554  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
; Function compile flags: /Ogsp
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 563  : 		return (EOF);

  00000	83 c8 ff	 or	 eax, -1

; 564  : 		}

  00003	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??0runtime_error@std@@QAE@PBD@Z			; std::runtime_error::runtime_error
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0runtime_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@PBD@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 170  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 171  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@PBD@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogsp
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
PUBLIC	?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ	; std::_Locinfo::_Getcvt
EXTRN	__Getcvt:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
;	COMDAT ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ PROC		; std::_Locinfo::_Getcvt, COMDAT
; _this$ = ecx

; 122  : 		{	// return codecvt stuff

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 123  : 		return (::_Getcvt());

  00003	e8 00 00 00 00	 call	 __Getcvt
  00008	8b c8		 mov	 ecx, eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 124  : 		}

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ENDP		; std::_Locinfo::_Getcvt
_TEXT	ENDS
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 71   : 			{	// construct with specified stamp value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 72   : 			}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
PUBLIC	??Bid@locale@std@@QAEIXZ			; std::locale::id::operator unsigned int
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
; Function compile flags: /Ogsp
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$15082 = -4					; size = 4
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = ecx

; 75   : 			{	// get stamp, with lazy allocation

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 76   : 			if (_Id == 0)

  00007	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0000a	75 24		 jne	 SHORT $LN2@operator

; 77   : 				{	// still zero, allocate stamp
; 78   : 				_BEGIN_LOCK(_LOCK_LOCALE)

  0000c	6a 00		 push	 0
  0000e	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15082[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 79   : 					if (_Id == 0)

  00016	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00019	75 0d		 jne	 SHORT $LN1@operator

; 80   : 						_Id = ++_Id_cnt;

  0001b	ff 05 00 00 00
	00		 inc	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00026	89 06		 mov	 DWORD PTR [esi], eax
$LN1@operator:

; 81   : 				_END_LOCK()

  00028	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15082[ebp]
  0002b	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN2@operator:

; 82   : 				}
; 83   : 			return (_Id);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	5e		 pop	 esi

; 84   : 			}

  00033	c9		 leave
  00034	c3		 ret	 0
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
_TEXT	ENDS
PUBLIC	?_Incref@facet@locale@std@@QAEXXZ		; std::locale::facet::_Incref
; Function compile flags: /Ogsp
;	COMDAT ?_Incref@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
__Lock$15088 = -4					; size = 4
?_Incref@facet@locale@std@@QAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 111  : 			{	// safely increment the reference count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 112  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00007	6a 00		 push	 0
  00009	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15088[ebp]
  0000c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 113  : 				if (_Refs < (size_t)(-1))

  00011	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00014	83 f8 ff	 cmp	 eax, -1
  00017	73 04		 jae	 SHORT $LN1@Incref

; 114  : 					++_Refs;

  00019	40		 inc	 eax
  0001a	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@Incref:

; 115  : 			_END_LOCK()

  0001d	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15088[ebp]
  00020	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00025	5e		 pop	 esi

; 116  : 			}

  00026	c9		 leave
  00027	c3		 ret	 0
?_Incref@facet@locale@std@@QAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
PUBLIC	?_Decref@facet@locale@std@@QAEPAV123@XZ		; std::locale::facet::_Decref
; Function compile flags: /Ogsp
;	COMDAT ?_Decref@facet@locale@std@@QAEPAV123@XZ
_TEXT	SEGMENT
__Lock$15093 = -4					; size = 4
?_Decref@facet@locale@std@@QAEPAV123@XZ PROC		; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 119  : 			{	// safely decrement the reference count, return this when dead

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 120  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00008	6a 00		 push	 0
  0000a	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15093[ebp]
  0000d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 121  : 				if (0 < _Refs && _Refs < (size_t)(-1))

  00012	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $LN1@Decref
  00019	83 f8 ff	 cmp	 eax, -1
  0001c	73 04		 jae	 SHORT $LN1@Decref

; 122  : 					--_Refs;

  0001e	48		 dec	 eax
  0001f	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN1@Decref:

; 123  : 				return (_Refs == 0 ? this : 0);

  00022	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00025	f7 de		 neg	 esi
  00027	1b f6		 sbb	 esi, esi
  00029	f7 d6		 not	 esi
  0002b	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15093[ebp]
  0002e	23 f7		 and	 esi, edi
  00030	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00035	5f		 pop	 edi
  00036	8b c6		 mov	 eax, esi
  00038	5e		 pop	 esi

; 124  : 			_END_LOCK()
; 125  : 			}

  00039	c9		 leave
  0003a	c3		 ret	 0
?_Decref@facet@locale@std@@QAEPAV123@XZ ENDP		; std::locale::facet::_Decref
_TEXT	ENDS
PUBLIC	?_Register@facet@locale@std@@QAEXXZ		; std::locale::facet::_Register
EXTRN	?_Facet_Register@facet@locale@std@@CAXPAV123@@Z:PROC ; std::locale::facet::_Facet_Register
; Function compile flags: /Ogsp
;	COMDAT ?_Register@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
?_Register@facet@locale@std@@QAEXXZ PROC		; std::locale::facet::_Register, COMDAT
; _this$ = ecx

; 129  :  #if defined(_M_CEE)
; 130  : 			_Facet_Register_m(this);
; 131  : 
; 132  :  #else /* defined(_M_CEE) */
; 133  : 			_Facet_Register(this);

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 ?_Facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::_Facet_Register
  00006	59		 pop	 ecx

; 134  :  #endif /* defined(_M_CEE) */
; 135  : 			}

  00007	c3		 ret	 0
?_Register@facet@locale@std@@QAEXXZ ENDP		; std::locale::facet::_Register
_TEXT	ENDS
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??1facet@locale@std@@UAE@XZ			; std::locale::facet::~facet
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efacet@locale@std@@UAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1facet@locale@std@@UAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@UAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 164  : 			{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@

; 165  : 			}

  00006	c3		 ret	 0
??1facet@locale@std@@UAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
PUBLIC	??0facet@locale@std@@IAE@I@Z			; std::locale::facet::facet
; Function compile flags: /Ogsp
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 170  : 			{	// construct with initial reference count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Initrefs$[ebp]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@
  0000e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 171  : 			}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
; Function compile flags: /Ogsp
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 309  : 		{	// construct by copying

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	89 0e		 mov	 DWORD PTR [esi], ecx

; 310  : 		_Ptr->_Incref();

  0000d	e8 00 00 00 00	 call	 ?_Incref@facet@locale@std@@QAEXXZ ; std::locale::facet::_Incref

; 311  : 		}

  00012	8b c6		 mov	 eax, esi
  00014	5e		 pop	 esi
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
_TEXT	ENDS
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
; Function compile flags: /Ogsp
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 410  : 		if (_Ptr != 0)

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 11		 je	 SHORT $LN4@locale

; 411  : 			_DELETE_CRT(_Ptr->_Decref());

  00006	e8 00 00 00 00	 call	 ?_Decref@facet@locale@std@@QAEPAV123@XZ ; std::locale::facet::_Decref
  0000b	85 c0		 test	 eax, eax
  0000d	74 08		 je	 SHORT $LN4@locale
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	6a 01		 push	 1
  00013	8b c8		 mov	 ecx, eax
  00015	ff 12		 call	 DWORD PTR [edx]
$LN4@locale:

; 412  : 		}

  00017	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
; Function compile flags: /Ogsp
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 436  : 		{	// look up a facet in locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 437  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 438  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR __Id$[ebp]
  00009	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  0000c	73 08		 jae	 SHORT $LN6@Getfacet
  0000e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00011	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00014	eb 02		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  00016	33 c0		 xor	 eax, eax
$LN7@Getfacet:

; 439  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00018	85 c0		 test	 eax, eax
  0001a	75 19		 jne	 SHORT $LN1@Getfacet
  0001c	38 41 14	 cmp	 BYTE PTR [ecx+20], al
  0001f	74 14		 je	 SHORT $LN1@Getfacet

; 440  : 			return (_Facptr);	// found facet or not transparent
; 441  : 		else
; 442  : 			{	// look in current locale
; 443  : 			locale::_Locimp *_Ptr = _Getgloballocale();

  00021	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 444  : 			return (_Id < _Ptr->_Facetcount
; 445  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 446  : 				: 0);	// no entry in current locale

  00026	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00029	73 08		 jae	 SHORT $LN8@Getfacet
  0002b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002e	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00031	eb 02		 jmp	 SHORT $LN1@Getfacet
$LN8@Getfacet:
  00033	33 c0		 xor	 eax, eax
$LN1@Getfacet:
  00035	5e		 pop	 esi

; 447  : 			}
; 448  : 		}

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gfacet@locale@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@UAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_Gfacet@locale@std@@UAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0error_code@std@@QAE@HABVerror_category@1@@Z	; std::error_code::error_code
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
;	COMDAT ??0error_code@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_code@std@@QAE@HABVerror_category@1@@Z PROC	; std::error_code::error_code, COMDAT
; _this$ = ecx

; 204  : 		{	// construct from error code and category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Cat$[ebp]
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 205  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0error_code@std@@QAE@HABVerror_category@1@@Z ENDP	; std::error_code::error_code
_TEXT	ENDS
PUBLIC	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z ; std::make_error_code
EXTRN	?iostream_category@std@@YAABVerror_category@1@XZ:PROC ; std::iostream_category
; Function compile flags: /Ogsp
;	COMDAT ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errno$ = 12						; size = 4
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z PROC ; std::make_error_code, COMDAT

; 446  : 	{	// make an error_code

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	return (error_code(_Errno, iostream_category()));

  00003	e8 00 00 00 00	 call	 ?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
  00008	8b 55 0c	 mov	 edx, DWORD PTR __Errno$[ebp]
  0000b	8b c8		 mov	 ecx, eax
  0000d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00010	89 10		 mov	 DWORD PTR [eax], edx
  00012	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 448  : 	}

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z ENDP ; std::make_error_code
_TEXT	ENDS
PUBLIC	?_Makestr@system_error@std@@AAEXXZ		; std::system_error::_Makestr
; Function compile flags: /Ogsp
;	COMDAT ?_Makestr@system_error@std@@AAEXXZ
_TEXT	SEGMENT
?_Makestr@system_error@std@@AAEXXZ PROC			; std::system_error::_Makestr, COMDAT
; _this$ = ecx

; 563  : //		_Mymes = this->runtime_error::what();
; 564  : //		if (!_Mymes.empty())
; 565  : //			_Mymes.append(": ");
; 566  : //		_Mymes.append(_Mycode.message());
; 567  : 		}

  00000	c3		 ret	 0
?_Makestr@system_error@std@@AAEXXZ ENDP			; std::system_error::_Makestr
_TEXT	ENDS
PUBLIC	??1system_error@std@@UAE@XZ			; std::system_error::~system_error
; Function compile flags: /Ogsp
;	COMDAT ??1system_error@std@@UAE@XZ
_TEXT	SEGMENT
??1system_error@std@@UAE@XZ PROC			; std::system_error::~system_error, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1system_error@std@@UAE@XZ ENDP			; std::system_error::~system_error
_TEXT	ENDS
PUBLIC	?rdstate@ios_base@std@@QBEHXZ			; std::ios_base::rdstate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = ecx

; 336  : 		return (_Mystate);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 337  : 		}

  00003	c3		 ret	 0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
PUBLIC	?good@ios_base@std@@QBE_NXZ			; std::ios_base::good
; Function compile flags: /Ogsp
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 358  : 		return (rdstate() == goodbit);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 0c	 cmp	 DWORD PTR [ecx+12], eax
  00005	0f 94 c0	 sete	 al

; 359  : 		}

  00008	c3		 ret	 0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
PUBLIC	?fail@ios_base@std@@QBE_NXZ			; std::ios_base::fail
; Function compile flags: /Ogsp
;	COMDAT ?fail@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?fail@ios_base@std@@QBE_NXZ PROC			; std::ios_base::fail, COMDAT
; _this$ = ecx

; 368  : 		return (((int)rdstate()
; 369  : 			& ((int)badbit | (int)failbit)) != 0);

  00000	f6 41 0c 06	 test	 BYTE PTR [ecx+12], 6
  00004	6a 00		 push	 0
  00006	58		 pop	 eax
  00007	0f 95 c0	 setne	 al

; 370  : 		}

  0000a	c3		 ret	 0
?fail@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::fail
_TEXT	ENDS
PUBLIC	?flags@ios_base@std@@QBEHXZ			; std::ios_base::flags
; Function compile flags: /Ogsp
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = ecx

; 395  : 		return (_Fmtfl);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 396  : 		}

  00003	c3		 ret	 0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
PUBLIC	?setf@ios_base@std@@QAEHHH@Z			; std::ios_base::setf
; Function compile flags: /Ogsp
;	COMDAT ?setf@ios_base@std@@QAEHHH@Z
_TEXT	SEGMENT
__Newfmtflags$ = 8					; size = 4
__Mask$ = 12						; size = 4
?setf@ios_base@std@@QAEHHH@Z PROC			; std::ios_base::setf, COMDAT
; _this$ = ecx

; 414  : 		{	// merge in format flags argument under mask argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 415  : 		ios_base::fmtflags _Oldfmtflags = _Fmtfl;
; 416  : 		_Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
; 417  : 			| ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Mask$[ebp]
  00006	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR __Newfmtflags$[ebp]
  0000d	23 75 0c	 and	 esi, DWORD PTR __Mask$[ebp]
  00010	f7 d2		 not	 edx
  00012	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00018	23 d0		 and	 edx, eax
  0001a	0b d6		 or	 edx, esi
  0001c	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  0001f	5e		 pop	 esi

; 418  : 		return (_Oldfmtflags);
; 419  : 		}

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?setf@ios_base@std@@QAEHHH@Z ENDP			; std::ios_base::setf
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QBE_JXZ			; std::ios_base::width
; Function compile flags: /Ogsp
;	COMDAT ?width@ios_base@std@@QBE_JXZ
_TEXT	SEGMENT
?width@ios_base@std@@QBE_JXZ PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 440  : 		return (_Wide);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]

; 441  : 		}

  00006	c3		 ret	 0
?width@ios_base@std@@QBE_JXZ ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QAE_J_J@Z			; std::ios_base::width
; Function compile flags: /Ogsp
;	COMDAT ?width@ios_base@std@@QAE_J_J@Z
_TEXT	SEGMENT
__Newwidth$ = 8						; size = 8
?width@ios_base@std@@QAE_J_J@Z PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 444  : 		{	// set width to argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 445  : 		streamsize _Oldwidth = _Wide;

  00003	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00006	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00009	56		 push	 esi

; 446  : 		_Wide = _Newwidth;

  0000a	8b 75 08	 mov	 esi, DWORD PTR __Newwidth$[ebp]
  0000d	89 71 20	 mov	 DWORD PTR [ecx+32], esi
  00010	8b 75 0c	 mov	 esi, DWORD PTR __Newwidth$[ebp+4]
  00013	89 71 24	 mov	 DWORD PTR [ecx+36], esi
  00016	5e		 pop	 esi

; 447  : 		return (_Oldwidth);
; 448  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?width@ios_base@std@@QAE_J_J@Z ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
; Function compile flags: /Ogsp
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
$T87429 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = ecx

; 451  : 		{	// get locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 452  : 		return (*_Ploc);

  00004	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	83 65 fc 00	 and	 DWORD PTR $T87429[ebp], 0
  0000d	56		 push	 esi
  0000e	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00011	89 0e		 mov	 DWORD PTR [esi], ecx
  00013	e8 00 00 00 00	 call	 ?_Incref@facet@locale@std@@QAEXXZ ; std::locale::facet::_Incref
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi

; 453  : 		}

  0001b	c9		 leave
  0001c	c2 04 00	 ret	 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
_TEXT	ENDS
PUBLIC	?dec@std@@YAAAVios_base@1@AAV21@@Z		; std::dec
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?dec@std@@YAAAVios_base@1@AAV21@@Z
_TEXT	SEGMENT
__Iosbase$ = 8						; size = 4
?dec@std@@YAAAVios_base@1@AAV21@@Z PROC			; std::dec, COMDAT

; 199  : 	{	// set basefield to dec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 200  : 	_Iosbase.setf(ios_base::dec, ios_base::basefield);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iosbase$[ebp]
  00006	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00009	81 e1 ff f3 ff
	ff		 and	 ecx, -3073		; fffff3ffH
  0000f	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  00015	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 201  : 	return (_Iosbase);
; 202  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?dec@std@@YAAAVios_base@1@AAV21@@Z ENDP			; std::dec
_TEXT	ENDS
PUBLIC	?hex@std@@YAAAVios_base@1@AAV21@@Z		; std::hex
; Function compile flags: /Ogsp
;	COMDAT ?hex@std@@YAAAVios_base@1@AAV21@@Z
_TEXT	SEGMENT
__Iosbase$ = 8						; size = 4
?hex@std@@YAAAVios_base@1@AAV21@@Z PROC			; std::hex, COMDAT

; 219  : 	{	// set basefield to hex

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 220  : 	_Iosbase.setf(ios_base::hex, ios_base::basefield);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iosbase$[ebp]
  00006	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00009	81 e1 ff f9 ff
	ff		 and	 ecx, -1537		; fffff9ffH
  0000f	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  00015	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 221  : 	return (_Iosbase);
; 222  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?hex@std@@YAAAVios_base@1@AAV21@@Z ENDP			; std::hex
_TEXT	ENDS
PUBLIC	?getErrno@@YAHXZ				; getErrno
EXTRN	__imp__WSAGetLastError@0:PROC
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\udp.h
;	COMDAT ?getErrno@@YAHXZ
_TEXT	SEGMENT
?getErrno@@YAHXZ PROC					; getErrno, COMDAT

; 56   : inline int getErrno() { return WSAGetLastError(); }

  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__WSAGetLastError@0
?getErrno@@YAHXZ ENDP					; getErrno
_TEXT	ENDS
PUBLIC	??0?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::_Yarn<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??0?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::_Yarn<char>, COMDAT
; _this$ = ecx

; 3315 : 		{	// default construct

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0
  00005	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 3316 : 		}

  00009	c3		 ret	 0
??0?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::_Yarn<char>
_TEXT	ENDS
PUBLIC	?c_str@?$_Yarn@D@std@@QBEPBDXZ			; std::_Yarn<char>::c_str
; Function compile flags: /Ogsp
;	COMDAT ?c_str@?$_Yarn@D@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$_Yarn@D@std@@QBEPBDXZ PROC			; std::_Yarn<char>::c_str, COMDAT
; _this$ = ecx

; 3376 : 		return (_Myptr != 0 ? _Myptr : &_Nul);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	75 03		 jne	 SHORT $LN4@c_str
  00006	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
$LN4@c_str:

; 3377 : 		}

  00009	c3		 ret	 0
?c_str@?$_Yarn@D@std@@QBEPBDXZ ENDP			; std::_Yarn<char>::c_str
_TEXT	ENDS
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
_TEXT	SEGMENT
__Pfn$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 187  : 		{	// call basic_ostream manipulator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 188  : 		_DEBUG_POINTER(_Pfn);
; 189  : 		return ((*_Pfn)(*this));

  00003	51		 push	 ecx
  00004	ff 55 08	 call	 DWORD PTR __Pfn$[ebp]
  00007	59		 pop	 ecx

; 190  : 		}

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
_TEXT	ENDS
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
; Function compile flags: /Ogsp
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z
_TEXT	SEGMENT
__Pfn$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 200  : 		{	// call ios_base manipulator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 201  : 		_DEBUG_POINTER(_Pfn);
; 202  : 		(*_Pfn)(*(ios_base *)this);

  00006	85 f6		 test	 esi, esi
  00008	75 04		 jne	 SHORT $LN3@operator@2
  0000a	33 c0		 xor	 eax, eax
  0000c	eb 07		 jmp	 SHORT $LN4@operator@2
$LN3@operator@2:
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00013	03 c6		 add	 eax, esi
$LN4@operator@2:
  00015	50		 push	 eax
  00016	ff 55 08	 call	 DWORD PTR __Pfn$[ebp]
  00019	59		 pop	 ecx

; 203  : 		return (*this);

  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 204  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
_TEXT	ENDS
PUBLIC	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT
; _this$ = ecx

; 86   : 		return (_Mystrbuf);

  00000	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]

; 87   : 		}

  00003	c3		 ret	 0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Yarn@D@std@@AAEXXZ			; std::_Yarn<char>::_Tidy
EXTRN	_free:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$_Yarn@D@std@@AAEXXZ PROC			; std::_Yarn<char>::_Tidy, COMDAT
; _this$ = ecx

; 3391 : 		{	// discard any string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3392 : 		if (_Myptr != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 07		 je	 SHORT $LN1@Tidy

; 3393 : 
; 3394 :  #ifdef _DEBUG
; 3395 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3396 : 
; 3397 :  #else /* _DEBUG */
; 3398 : 			_CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	59		 pop	 ecx
$LN1@Tidy:

; 3399 :  #endif /* _DEBUG */
; 3400 : 
; 3401 : 		_Myptr = 0;

  00010	83 26 00	 and	 DWORD PTR [esi], 0
  00013	5e		 pop	 esi

; 3402 : 		}

  00014	c3		 ret	 0
?_Tidy@?$_Yarn@D@std@@AAEXXZ ENDP			; std::_Yarn<char>::_Tidy
_TEXT	ENDS
PUBLIC	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
_TEXT	SEGMENT
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ PROC ; std::basic_ios<char,std::char_traits<char> >::fill, COMDAT
; _this$ = ecx

; 107  : 		return (_Fillch);

  00000	8a 41 40	 mov	 al, BYTE PTR [ecx+64]

; 108  : 		}

  00003	c3		 ret	 0
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::fill
_TEXT	ENDS
PUBLIC	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT
; _this$ = ecx

; 141  : 		return (sync());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 34	 jmp	 DWORD PTR [eax+52]
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
_TEXT	ENDS
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
; Function compile flags: /Ogsp
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT
; _this$ = ecx

; 310  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  00000	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00003	33 c0		 xor	 eax, eax
  00005	39 02		 cmp	 DWORD PTR [edx], eax
  00007	74 05		 je	 SHORT $LN3@Pnavail
  00009	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN3@Pnavail:
  0000e	99		 cdq

; 311  : 		}

  0000f	c3		 ret	 0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*, COMDAT
; _this$ = ecx

; 133  : 			return (_Ok ? _CONVERTIBLE_TO_TRUE : 0);

  00000	33 c0		 xor	 eax, eax
  00002	38 41 04	 cmp	 BYTE PTR [ecx+4], al
  00005	0f 95 c0	 setne	 al
  00008	48		 dec	 eax

; 134  : 			}

  00009	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
_TEXT	ENDS
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1098 : 		{	// put formatted long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1099 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00003	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0000b	ff 75 14	 push	 DWORD PTR __Iosbase$[ebp]
  0000e	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00011	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00014	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00017	ff 50 1c	 call	 DWORD PTR [eax+28]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1100 : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
; Function compile flags: /Ogsp
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1104 : 		{	// put formatted unsigned long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1105 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00003	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0000b	ff 75 14	 push	 DWORD PTR __Iosbase$[ebp]
  0000e	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00011	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00014	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00017	ff 50 18	 call	 DWORD PTR [eax+24]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1106 : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
PUBLIC	??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
__Sb$ = 8						; size = 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 613  : 		{	// construct from stream buffer _Sb

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Sb$[ebp]
  00008	c6 00 00	 mov	 BYTE PTR [eax], 0
  0000b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 614  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
; Function compile flags: /Ogsp
;	COMDAT ?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed, COMDAT
; _this$ = ecx

; 647  : 		return (_Failed);

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 648  : 		}

  00002	c3		 ret	 0
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
_TEXT	ENDS
PUBLIC	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT
; _this$ = ecx

; 74   : 		return (_Tiestr);

  00000	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]

; 75   : 		}

  00003	c3		 ret	 0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
_TEXT	ENDS
PUBLIC	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT
; _this$ = ecx

; 304  : 		--*_IPcount;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 305  : 		return ((*_IPnext)++);

  00005	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 306  : 		}

  0000f	c3		 ret	 0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 91   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 92   : 			if (_Myostr.rdbuf() != 0)

  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	8b 44 01 38	 mov	 eax, DWORD PTR [ecx+eax+56]
  00014	85 c0		 test	 eax, eax
  00016	74 07		 je	 SHORT $LN1@Sentry_bas

; 93   : 				_Myostr.rdbuf()->_Lock();

  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	8b c8		 mov	 ecx, eax
  0001c	ff 52 04	 call	 DWORD PTR [edx+4]
$LN1@Sentry_bas:

; 94   : 			}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogsp
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 98   : 			if (_Myostr.rdbuf() != 0)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00007	8b 44 01 38	 mov	 eax, DWORD PTR [ecx+eax+56]
  0000b	85 c0		 test	 eax, eax
  0000d	74 07		 je	 SHORT $LN1@Sentry_bas@2

; 99   : 				_Myostr.rdbuf()->_Unlock();

  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	8b c8		 mov	 ecx, eax
  00013	ff 62 08	 jmp	 DWORD PTR [edx+8]
$LN1@Sentry_bas@2:

; 100  : 			}

  00016	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputn, COMDAT
; _this$ = ecx

; 201  : 		{	// put _Count characters from array beginning at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		return (xsputn(_Ptr, _Count));

  00003	ff 75 10	 push	 DWORD PTR __Count$[ebp+4]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0000e	ff 50 24	 call	 DWORD PTR [eax+36]

; 203  : 		}

  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputn
_TEXT	ENDS
PUBLIC	?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init, COMDAT
; _this$ = ecx

; 1066 : 		{	// initialize from _Locinfo object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1067 : 		_Cvt = _Lobj._Getcvt();

  00003	e8 00 00 00 00	 call	 __Getcvt
  00008	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0000b	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0000e	5e		 pop	 esi

; 1068 : 		}

  0000f	c2 04 00	 ret	 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?c_str@locale@std@@QBEPBDXZ			; std::locale::c_str
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
;	COMDAT ?c_str@locale@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@locale@std@@QBEPBDXZ PROC			; std::locale::c_str, COMDAT
; _this$ = ecx

; 432  : 		return (_Ptr->_Name.c_str());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00005	85 c9		 test	 ecx, ecx
  00007	74 03		 je	 SHORT $LN5@c_str@2
  00009	8b c1		 mov	 eax, ecx

; 433  : 		}

  0000b	c3		 ret	 0

; 432  : 		return (_Ptr->_Name.c_str());

$LN5@c_str@2:
  0000c	83 c0 1c	 add	 eax, 28			; 0000001cH

; 433  : 		}

  0000f	c3		 ret	 0
?c_str@locale@std@@QBEPBDXZ ENDP			; std::locale::c_str
_TEXT	ENDS
PUBLIC	??_7system_error@std@@6B@			; std::system_error::`vftable'
PUBLIC	??0system_error@std@@QAE@Verror_code@1@PBD@Z	; std::system_error::system_error
PUBLIC	??_R4system_error@std@@6B@			; std::system_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVsystem_error@std@@@8			; std::system_error `RTTI Type Descriptor'
PUBLIC	??_R3system_error@std@@8			; std::system_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2system_error@std@@8			; std::system_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@system_error@std@@8		; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Esystem_error@std@@UAEPAXI@Z:PROC		; std::system_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@system_error@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
rdata$r	SEGMENT
??_R1A@?0A@EA@system_error@std@@8 DD FLAT:??_R0?AVsystem_error@std@@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2system_error@std@@8
rdata$r	SEGMENT
??_R2system_error@std@@8 DD FLAT:??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3system_error@std@@8
rdata$r	SEGMENT
??_R3system_error@std@@8 DD 00H				; std::system_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVsystem_error@std@@@8
_DATA	SEGMENT
??_R0?AVsystem_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::system_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVsystem_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4system_error@std@@6B@
rdata$r	SEGMENT
??_R4system_error@std@@6B@ DD 00H			; std::system_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7system_error@std@@6B@
CONST	SEGMENT
??_7system_error@std@@6B@ DD FLAT:??_R4system_error@std@@6B@ ; std::system_error::`vftable'
	DD	FLAT:??_Esystem_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0system_error@std@@QAE@Verror_code@1@PBD@Z
_TEXT	SEGMENT
__Errcode$ = 8						; size = 8
$T87557 = 16						; size = 4
__Message$ = 16						; size = 4
??0system_error@std@@QAE@Verror_code@1@PBD@Z PROC	; std::system_error::system_error, COMDAT
; _this$ = ecx

; 516  : 		{	// construct from error code and message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 10	 mov	 eax, DWORD PTR __Message$[ebp]
  00006	56		 push	 esi
  00007	89 45 10	 mov	 DWORD PTR $T87557[ebp], eax
  0000a	8d 45 10	 lea	 eax, DWORD PTR $T87557[ebp]
  0000d	50		 push	 eax
  0000e	8b f1		 mov	 esi, ecx
  00010	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00015	8b 45 08	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00018	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0001b	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp+4]
  0001e	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00021	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7system_error@std@@6B@

; 517  : 		_Makestr();
; 518  : 		}

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
??0system_error@std@@QAE@Verror_code@1@PBD@Z ENDP	; std::system_error::system_error
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gsystem_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gsystem_error@std@@UAEPAXI@Z PROC			; std::system_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_Gsystem_error@std@@UAEPAXI@Z ENDP			; std::system_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@system_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
__Errcode$ = 12						; size = 4
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z PROC	; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 237  : 			{	// construct with message

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00006	56		 push	 esi
  00007	ff 75 08	 push	 DWORD PTR __Message$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	ff 70 04	 push	 DWORD PTR [eax+4]
  0000f	ff 30		 push	 DWORD PTR [eax]
  00011	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  00016	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@

; 238  : 			}

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ENDP	; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
; Function compile flags: /Ogsp
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
_TEXT	ENDS
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ ; `string'
PUBLIC	__TI4?AVfailure@ios_base@std@@
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@	; `string'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	__CTA4?AVfailure@ios_base@std@@
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
PUBLIC	??0system_error@std@@QAE@ABV01@@Z		; std::system_error::system_error
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0system_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT __CTA4?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA4?AVfailure@ios_base@std@@ DD 04H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
	DD	FLAT:__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ DB 'ios_base::failbit se'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT __TI4?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI4?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ DB 'ios_base::badbit set', 00H ; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	ENDS
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T87594 = -20						; size = 20
__State$ = 8						; size = 4
$T87689 = 12						; size = 4
$T87653 = 12						; size = 4
$T87617 = 12						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 310  : 		{	// set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 311  : 		_Mystate = (iostate)(_State & _Statmask);

  00003	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00006	83 e0 17	 and	 eax, 23			; 00000017H
  00009	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 312  : 		if ((_Mystate & _Except) == 0)

  0000c	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0000f	83 ec 14	 sub	 esp, 20			; 00000014H
  00012	23 c8		 and	 ecx, eax
  00014	74 6c		 je	 SHORT $LN1@clear

; 313  : 			;
; 314  : 		else if (_Reraise)

  00016	33 c0		 xor	 eax, eax
  00018	38 45 0c	 cmp	 BYTE PTR __Reraise$[ebp], al
  0001b	74 07		 je	 SHORT $LN6@clear

; 315  : 			_RERAISE;

  0001d	50		 push	 eax
$LN57@clear:
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN59@clear:
$LN6@clear:

; 316  : 		else if (_Mystate & _Except & badbit)
; 317  : 			_THROW_NCEE(failure, "ios_base::badbit set");

  00024	33 f6		 xor	 esi, esi
  00026	46		 inc	 esi
  00027	f6 c1 04	 test	 cl, 4
  0002a	74 31		 je	 SHORT $LN4@clear
  0002c	e8 00 00 00 00	 call	 ?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
  00031	8b f8		 mov	 edi, eax
  00033	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR $T87617[ebp], OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
$LN58@clear:
  0003a	8d 45 0c	 lea	 eax, DWORD PTR $T87617[ebp]
  0003d	50		 push	 eax
  0003e	8d 4d ec	 lea	 ecx, DWORD PTR $T87594[ebp]
  00041	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00046	89 75 f8	 mov	 DWORD PTR $T87594[ebp+12], esi
  00049	89 7d fc	 mov	 DWORD PTR $T87594[ebp+16], edi
  0004c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T87594[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  00053	68 00 00 00 00	 push	 OFFSET __TI4?AVfailure@ios_base@std@@
  00058	8d 45 ec	 lea	 eax, DWORD PTR $T87594[ebp]
  0005b	eb c1		 jmp	 SHORT $LN57@clear
$LN4@clear:

; 318  : 		else if (_Mystate & _Except & failbit)

  0005d	f6 c1 02	 test	 cl, 2
  00060	74 10		 je	 SHORT $LN2@clear

; 319  : 			_THROW_NCEE(failure, "ios_base::failbit set");

  00062	e8 00 00 00 00	 call	 ?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
  00067	8b f8		 mov	 edi, eax
  00069	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR $T87653[ebp], OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  00070	eb c8		 jmp	 SHORT $LN58@clear
$LN2@clear:

; 320  : 		else
; 321  : 			_THROW_NCEE(failure, "ios_base::eofbit set");

  00072	e8 00 00 00 00	 call	 ?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
  00077	8b f8		 mov	 edi, eax
  00079	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR $T87689[ebp], OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  00080	eb b8		 jmp	 SHORT $LN58@clear
$LN1@clear:

; 322  : 		}

  00082	c9		 leave
  00083	c2 08 00	 ret	 8
$LN56@clear:
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??0system_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0system_error@std@@QAE@ABV01@@Z PROC			; std::system_error::system_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7system_error@std@@6B@
  00016	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00019	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0001c	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0001f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00022	5f		 pop	 edi
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??0system_error@std@@QAE@ABV01@@Z ENDP			; std::system_error::system_error
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@4
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@4:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@ABV01@@Z
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@
  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	??1?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::~_Yarn<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??1?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT
; _this$ = ecx

; 3365 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3366 : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 07		 je	 SHORT $LN3@Yarn
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	59		 pop	 ecx
$LN3@Yarn:
  00010	83 26 00	 and	 DWORD PTR [esi], 0
  00013	5e		 pop	 esi

; 3367 : 		}

  00014	c3		 ret	 0
??1?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
_TEXT	ENDS
PUBLIC	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT
; _this$ = ecx

; 42   : 		{	// set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		ios_base::clear((iostate)(_Mystrbuf == 0
; 44   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00003	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00007	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  0000a	75 03		 jne	 SHORT $LN4@clear@2
  0000c	83 c8 04	 or	 eax, 4
$LN4@clear@2:
  0000f	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 45   : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
_TEXT	ENDS
PUBLIC	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputc, COMDAT
; _this$ = ecx

; 193  : 		{	// put a character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 194  : 		return (0 < _Pnavail()
; 195  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 196  : 			: overflow(_Traits::to_int_type(_Ch)));

  00003	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00006	83 38 00	 cmp	 DWORD PTR [eax], 0
  00009	74 07		 je	 SHORT $LN7@sputc
  0000b	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	eb 02		 jmp	 SHORT $LN8@sputc
$LN7@sputc:
  00012	33 c0		 xor	 eax, eax
$LN8@sputc:
  00014	85 c0		 test	 eax, eax
  00016	7e 19		 jle	 SHORT $LN3@sputc
  00018	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0001b	ff 08		 dec	 DWORD PTR [eax]
  0001d	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00025	89 10		 mov	 DWORD PTR [eax], edx
  00027	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  0002a	88 01		 mov	 BYTE PTR [ecx], al
  0002c	0f b6 c0	 movzx	 eax, al
  0002f	eb 0a		 jmp	 SHORT $LN4@sputc
$LN3@sputc:
  00031	0f b6 55 08	 movzx	 edx, BYTE PTR __Ch$[ebp]
  00035	8b 01		 mov	 eax, DWORD PTR [ecx]
  00037	52		 push	 edx
  00038	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN4@sputc:

; 197  : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputc
_TEXT	ENDS
PUBLIC	??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
PUBLIC	??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
EXTRN	??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@'
	DB	'std@@@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD FLAT:??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
	DD	FLAT:??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1083 : 		{	// construct from specified locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 1084 : 		_Init(_Lobj);

  00012	e8 00 00 00 00	 call	 __Getcvt
  00017	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0001a	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 1085 : 		}

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar@5
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar@5:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	_memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  : 		}

  00003	5d		 pop	 ebp

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
EXTRN	_memset:PROC
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 521  : 		{	// assign _Count * _Ch to [_First, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 522  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  00003	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00007	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 _memset
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH

; 523  : 		}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000b	88 01		 mov	 BYTE PTR [ecx], al

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ	; std::_Locinfo::_Getlconv
EXTRN	_localeconv:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
;	COMDAT ?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ
_TEXT	SEGMENT
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ PROC		; std::_Locinfo::_Getlconv, COMDAT
; _this$ = ecx

; 128  : 		return (localeconv());

  00000	e9 00 00 00 00	 jmp	 _localeconv
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ ENDP		; std::_Locinfo::_Getlconv
_TEXT	ENDS
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	?_Getfalse@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Getfalse
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Getfalse@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Getfalse@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Getfalse, COMDAT
; _this$ = ecx

; 166  : 		return ("false");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05LAPONLG@false?$AA@

; 167  : 		}

  00005	c3		 ret	 0
?_Getfalse@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Getfalse
_TEXT	ENDS
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	?_Gettrue@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Gettrue
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Gettrue@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Gettrue@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Gettrue, COMDAT
; _this$ = ecx

; 171  : 		return ("true");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04LOAJBDKD@true?$AA@

; 172  : 		}

  00005	c3		 ret	 0
?_Gettrue@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Gettrue
_TEXT	ENDS
PUBLIC	?precision@ios_base@std@@QBE_JXZ		; std::ios_base::precision
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
;	COMDAT ?precision@ios_base@std@@QBE_JXZ
_TEXT	SEGMENT
?precision@ios_base@std@@QBE_JXZ PROC			; std::ios_base::precision, COMDAT
; _this$ = ecx

; 428  : 		return (_Prec);

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]

; 429  : 		}

  00006	c3		 ret	 0
?precision@ios_base@std@@QBE_JXZ ENDP			; std::ios_base::precision
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1511 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1512 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2009 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2010 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2011 : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 2009 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2010 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2011 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1063 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00006	c3		 ret	 0
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar@6
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@6:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2020 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN4@Xran:
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 1
__Flags$ = 20						; size = 4
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt, COMDAT

; 1308 : 		{	// generate sprintf format for floating-point

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1309 : 		char *_Ptr = _Fmt;
; 1310 : 		*_Ptr++ = '%';

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Fmt$[ebp]
  00006	53		 push	 ebx

; 1311 : 
; 1312 : 		if (_Flags & ios_base::showpos)

  00007	8b 5d 14	 mov	 ebx, DWORD PTR __Flags$[ebp]
  0000a	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000d	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00010	f6 c3 20	 test	 bl, 32			; 00000020H
  00013	74 04		 je	 SHORT $LN3@Ffmt

; 1313 : 			*_Ptr++ = '+';

  00015	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00018	41		 inc	 ecx
$LN3@Ffmt:

; 1314 : 		if (_Flags & ios_base::showpoint)

  00019	f6 c3 10	 test	 bl, 16			; 00000010H
  0001c	74 04		 je	 SHORT $LN2@Ffmt

; 1315 : 			*_Ptr++ = '#';

  0001e	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  00021	41		 inc	 ecx
$LN2@Ffmt:

; 1316 : 		*_Ptr++ = '.';
; 1317 : 		*_Ptr++ = '*';	// for precision argument
; 1318 : 		if (_Spec != '\0')

  00022	8a 55 10	 mov	 dl, BYTE PTR __Spec$[ebp]
  00025	66 c7 01 2e 2a	 mov	 WORD PTR [ecx], 10798	; 00002a2eH
  0002a	83 c1 02	 add	 ecx, 2
  0002d	84 d2		 test	 dl, dl
  0002f	74 03		 je	 SHORT $LN1@Ffmt

; 1319 : 			*_Ptr++ = _Spec;	// 'L' qualifier for long double only

  00031	88 11		 mov	 BYTE PTR [ecx], dl
  00033	41		 inc	 ecx
$LN1@Ffmt:

; 1320 : 
; 1321 : 		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

  00034	ba 00 30 00 00	 mov	 edx, 12288		; 00003000H
  00039	23 da		 and	 ebx, edx

; 1322 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1323 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1324 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0003b	81 fb 00 20 00
	00		 cmp	 ebx, 8192		; 00002000H
  00041	75 04		 jne	 SHORT $LN8@Ffmt
  00043	b2 66		 mov	 dl, 102			; 00000066H
  00045	eb 15		 jmp	 SHORT $LN7@Ffmt
$LN8@Ffmt:
  00047	3b da		 cmp	 ebx, edx
  00049	75 04		 jne	 SHORT $LN6@Ffmt
  0004b	b2 61		 mov	 dl, 97			; 00000061H
  0004d	eb 0d		 jmp	 SHORT $LN7@Ffmt
$LN6@Ffmt:
  0004f	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00055	0f 95 c2	 setne	 dl
  00058	8d 54 12 65	 lea	 edx, DWORD PTR [edx+edx+101]
$LN7@Ffmt:
  0005c	88 11		 mov	 BYTE PTR [ecx], dl

; 1325 : 		*_Ptr = '\0';

  0005e	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00062	5b		 pop	 ebx

; 1326 : 		return (_Fmt);
; 1327 : 		}

  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
_TEXT	ENDS
PUBLIC	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
; Function compile flags: /Ogsp
;	COMDAT ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 4
__Flags$ = 20						; size = 4
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt, COMDAT

; 1451 : 		{	// generate sprintf format for integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1452 : 		char *_Ptr = _Fmt;
; 1453 : 		*_Ptr++ = '%';

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Fmt$[ebp]

; 1454 : 
; 1455 : 		if (_Flags & ios_base::showpos)

  00006	8b 55 14	 mov	 edx, DWORD PTR __Flags$[ebp]
  00009	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000c	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000f	f6 c2 20	 test	 dl, 32			; 00000020H
  00012	74 04		 je	 SHORT $LN4@Ifmt

; 1456 : 			*_Ptr++ = '+';

  00014	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00017	41		 inc	 ecx
$LN4@Ifmt:

; 1457 : 		if (_Flags & ios_base::showbase)

  00018	f6 c2 08	 test	 dl, 8
  0001b	74 04		 je	 SHORT $LN3@Ifmt

; 1458 : 			*_Ptr++ = '#';

  0001d	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  00020	41		 inc	 ecx
$LN3@Ifmt:

; 1459 : 		if (_Spec[0] != 'L')

  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	8b 7d 10	 mov	 edi, DWORD PTR __Spec$[ebp]
  00027	8a 1f		 mov	 bl, BYTE PTR [edi]
  00029	80 fb 4c	 cmp	 bl, 76			; 0000004cH
  0002c	74 05		 je	 SHORT $LN2@Ifmt

; 1460 : 			*_Ptr++ = _Spec[0];	// qualifier

  0002e	88 19		 mov	 BYTE PTR [ecx], bl
  00030	41		 inc	 ecx

; 1461 : 		else

  00031	eb 0c		 jmp	 SHORT $LN1@Ifmt
$LN2@Ifmt:

; 1462 : 
; 1463 : 			{	/* change L to I64 */
; 1464 : 			*_Ptr++ = 'I';

  00033	66 c7 01 49 36	 mov	 WORD PTR [ecx], 13897	; 00003649H

; 1465 : 			*_Ptr++ = '6';
; 1466 : 			*_Ptr++ = '4';

  00038	c6 41 02 34	 mov	 BYTE PTR [ecx+2], 52	; 00000034H
  0003c	83 c1 03	 add	 ecx, 3
$LN1@Ifmt:

; 1467 : 			}
; 1468 : 
; 1469 : 		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  0003f	8b f2		 mov	 esi, edx
  00041	81 e6 00 0e 00
	00		 and	 esi, 3584		; 00000e00H

; 1470 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1471 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1472 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  00047	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  0004d	75 04		 jne	 SHORT $LN9@Ifmt
  0004f	b2 6f		 mov	 dl, 111			; 0000006fH
  00051	eb 18		 jmp	 SHORT $LN8@Ifmt
$LN9@Ifmt:
  00053	81 fe 00 08 00
	00		 cmp	 esi, 2048		; 00000800H
  00059	74 05		 je	 SHORT $LN7@Ifmt
  0005b	8a 57 01	 mov	 dl, BYTE PTR [edi+1]
  0005e	eb 0b		 jmp	 SHORT $LN8@Ifmt
$LN7@Ifmt:
  00060	c0 e2 03	 shl	 dl, 3
  00063	f6 d2		 not	 dl
  00065	80 e2 20	 and	 dl, 32			; 00000020H
  00068	80 ca 58	 or	 dl, 88			; 00000058H
$LN8@Ifmt:
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	88 11		 mov	 BYTE PTR [ecx], dl

; 1473 : 		*_Ptr = '\0';

  0006f	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00073	5b		 pop	 ebx

; 1474 : 		return (_Fmt);
; 1475 : 		}

  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 1905 : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1906 : 		return (this->_Alval);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1907 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2003 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2004 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr@2
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2005 : 		}

  00008	c3		 ret	 0
$LN3@Myptr@2:

; 2003 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2004 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2005 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*, COMDAT
; _this$ = ecx

; 631  : 		{	// pretend to get designated element

  00000	8b c1		 mov	 eax, ecx

; 632  : 		return (*this);
; 633  : 		}

  00002	c3		 ret	 0
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
_TEXT	ENDS
PUBLIC	??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++, COMDAT
; _this$ = ecx

; 636  : 		{	// pretend to preincrement

  00000	8b c1		 mov	 eax, ecx

; 637  : 		return (*this);
; 638  : 		}

  00002	c3		 ret	 0
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
_TEXT	ENDS
PUBLIC	?decimal_point@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::decimal_point
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?decimal_point@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?decimal_point@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::decimal_point, COMDAT
; _this$ = ecx

; 69   : 		return (do_decimal_point());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 04	 jmp	 DWORD PTR [eax+4]
?decimal_point@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::decimal_point
_TEXT	ENDS
PUBLIC	?thousands_sep@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::thousands_sep
; Function compile flags: /Ogsp
;	COMDAT ?thousands_sep@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?thousands_sep@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::thousands_sep, COMDAT
; _this$ = ecx

; 74   : 		return (do_thousands_sep());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 08	 jmp	 DWORD PTR [eax+8]
?thousands_sep@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::thousands_sep
_TEXT	ENDS
PUBLIC	?_Tidy@?$numpunct@D@std@@AAEXXZ			; std::numpunct<char>::_Tidy
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$numpunct@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$numpunct@D@std@@AAEXXZ PROC			; std::numpunct<char>::_Tidy, COMDAT
; _this$ = ecx

; 189  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 190  : 		_DELETE_CRT_VEC((void *)_Grouping);

  00003	ff 76 08	 push	 DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 191  : 		_DELETE_CRT_VEC((void *)_Falsename);

  0000b	ff 76 10	 push	 DWORD PTR [esi+16]
  0000e	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 192  : 		_DELETE_CRT_VEC((void *)_Truename);

  00013	ff 76 14	 push	 DWORD PTR [esi+20]
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001e	5e		 pop	 esi

; 193  : 		}

  0001f	c3		 ret	 0
?_Tidy@?$numpunct@D@std@@AAEXXZ ENDP			; std::numpunct<char>::_Tidy
_TEXT	ENDS
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 1910 : 		{	// assign _Count copies of _Ch beginning at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1911 : 		if (_Count == 1)

  00003	83 7d 0c 01	 cmp	 DWORD PTR __Count$[ebp], 1
  00007	75 13		 jne	 SHORT $LN2@Chassign

; 1912 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

  00009	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  0000d	72 02		 jb	 SHORT $LN7@Chassign
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN7@Chassign:
  00011	8a 45 10	 mov	 al, BYTE PTR __Ch$[ebp]
  00014	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00017	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 1913 : 		else

  0001a	eb 1c		 jmp	 SHORT $LN15@Chassign
$LN2@Chassign:

; 1914 : 			_Traits::assign(_Myptr() + _Off, _Count, _Ch);

  0001c	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00020	72 02		 jb	 SHORT $LN13@Chassign
  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN13@Chassign:
  00024	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00028	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0002b	03 4d 08	 add	 ecx, DWORD PTR __Off$[ebp]
  0002e	50		 push	 eax
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _memset
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@Chassign:

; 1915 : 		}

  00038	5d		 pop	 ebp
  00039	c2 0c 00	 ret	 12			; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2015 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 220  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z	; std::_Maklocchr<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z PROC		; std::_Maklocchr<char>, COMDAT

; 625  : 	{	// convert char to _Elem using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 626  : 	return ((_Elem)(unsigned char)_Byte);

  00003	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]

; 627  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z ENDP		; std::_Maklocchr<char>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T87954 = -12						; size = 12
$T87958 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;

  00003	33 c0		 xor	 eax, eax
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 32   : 
; 33   : 	if (_Count <= 0)

  00008	39 45 08	 cmp	 DWORD PTR __Count$[ebp], eax

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000b	76 38		 jbe	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000d	83 7d 08 ff	 cmp	 DWORD PTR __Count$[ebp], -1
  00011	77 0d		 ja	 SHORT $LN1@Allocate
  00013	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00016	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001b	59		 pop	 ecx
  0001c	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0001e	75 25		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00020	83 65 08 00	 and	 DWORD PTR $T87958[ebp], 0
  00024	8d 45 08	 lea	 eax, DWORD PTR $T87958[ebp]
  00027	50		 push	 eax
  00028	8d 4d f4	 lea	 ecx, DWORD PTR $T87954[ebp]
  0002b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00030	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00035	8d 45 f4	 lea	 eax, DWORD PTR $T87954[ebp]
  00038	50		 push	 eax
  00039	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T87954[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00040	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00045	c9		 leave
  00046	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator==<char,char>
; Function compile flags: /Ogsp
;	COMDAT ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator==<char,char>, COMDAT

; 263  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 264  : 	}

  00002	c3		 ret	 0
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator==<char,char>
_TEXT	ENDS
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 658  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 659  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00008	57		 push	 edi
  00009	e8 00 00 00 00	 call	 _strlen
  0000e	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 660  : 	_Elem *_Ptrdest = _NEW_CRT _Elem[_Count];

  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00017	59		 pop	 ecx
  00018	59		 pop	 ecx

; 661  : 
; 662  :  #pragma warning(push)
; 663  :  #pragma warning(disable: 6011)	/* quiet prefast noise */
; 664  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00019	85 f6		 test	 esi, esi
  0001b	74 0d		 je	 SHORT $LN1@Maklocstr
  0001d	8b c8		 mov	 ecx, eax
  0001f	2b cf		 sub	 ecx, edi
$LL3@Maklocstr:

; 665  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  00021	8a 17		 mov	 dl, BYTE PTR [edi]
  00023	88 14 39	 mov	 BYTE PTR [ecx+edi], dl
  00026	47		 inc	 edi
  00027	4e		 dec	 esi
  00028	75 f7		 jne	 SHORT $LL3@Maklocstr
$LN1@Maklocstr:
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi

; 666  :  #pragma warning(pop)
; 667  : 
; 668  : 	return (_Ptrdest);
; 669  : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1496 : 		return (_Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN5@c_str@3
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1497 : 		}

  00008	c3		 ret	 0

; 1496 : 		return (_Myptr());

$LN5@c_str@3:
  00009	8b c1		 mov	 eax, ecx

; 1497 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogsp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1952 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1953 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1954 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1435 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 
; 1438 : 		if (this->_Mysize <= _Off)
; 1439 : 
; 1440 : 			_DEBUG_ERROR("string subscript out of range");
; 1441 : 
; 1442 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1443 : 		_SCL_SECURE_VALIDATE_RANGE(_Off < this->_Mysize);
; 1444 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1445 : 
; 1446 : 		return (_Myptr()[_Off]);

  00005	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00009	72 02		 jb	 SHORT $LN5@operator@3
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@operator@3:
  0000d	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]

; 1447 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1972 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1973 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)

  00003	83 7d 08 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00007	74 2c		 je	 SHORT $LN2@Inside
  00009	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0000c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0000f	72 04		 jb	 SHORT $LN8@Inside
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00015	8b c1		 mov	 eax, ecx
$LN9@Inside:
  00017	39 45 08	 cmp	 DWORD PTR __Ptr$[ebp], eax
  0001a	72 19		 jb	 SHORT $LN2@Inside
  0001c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0001f	72 04		 jb	 SHORT $LN12@Inside
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	eb 02		 jmp	 SHORT $LN13@Inside
$LN12@Inside:
  00025	8b c1		 mov	 eax, ecx
$LN13@Inside:
  00027	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0002a	03 c8		 add	 ecx, eax
  0002c	3b 4d 08	 cmp	 ecx, DWORD PTR __Ptr$[ebp]
  0002f	76 04		 jbe	 SHORT $LN2@Inside

; 1975 : 		else
; 1976 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	eb 02		 jmp	 SHORT $LN1@Inside
$LN2@Inside:

; 1974 : 			return (false);	// don't ask

  00035	32 c0		 xor	 al, al
$LN1@Inside:

; 1977 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 1
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=, COMDAT
; _this$ = ecx

; 622  : 		{	// store element and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 623  : 		if (_Strbuf == 0
; 624  : 			|| traits_type::eq_int_type(_Traits::eof(),
; 625  : 				_Strbuf->sputc(_Right)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 0d		 je	 SHORT $LN1@operator@4
  0000d	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00010	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  00015	83 f8 ff	 cmp	 eax, -1
  00018	75 03		 jne	 SHORT $LN2@operator@4
$LN1@operator@4:

; 626  : 			_Failed = true;

  0001a	c6 06 01	 mov	 BYTE PTR [esi], 1
$LN2@operator@4:

; 627  : 		return (*this);

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 628  : 		}

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1108 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1109 : 		if (this->_Mysize < _Off)

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000d	3b c1		 cmp	 eax, ecx
  0000f	73 0a		 jae	 SHORT $LN3@erase

; 1110 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN28@erase:
$LN3@erase:

; 1111 : 		if (this->_Mysize - _Off < _Count)

  0001b	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0001e	2b c1		 sub	 eax, ecx
  00020	3b c3		 cmp	 eax, ebx
  00022	73 02		 jae	 SHORT $LN2@erase

; 1112 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00024	8b d8		 mov	 ebx, eax
$LN2@erase:

; 1113 : 		if (0 < _Count)

  00026	85 db		 test	 ebx, ebx
  00028	74 46		 je	 SHORT $LN25@erase

; 1114 : 			{	// move elements down
; 1115 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1116 : 				this->_Mysize - _Off - _Count);

  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	57		 push	 edi
  0002e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00031	72 04		 jb	 SHORT $LN11@erase
  00033	8b 3e		 mov	 edi, DWORD PTR [esi]
  00035	eb 02		 jmp	 SHORT $LN12@erase
$LN11@erase:
  00037	8b fe		 mov	 edi, esi
$LN12@erase:
  00039	83 fa 10	 cmp	 edx, 16			; 00000010H
  0003c	72 04		 jb	 SHORT $LN15@erase
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	eb 02		 jmp	 SHORT $LN16@erase
$LN15@erase:
  00042	8b d6		 mov	 edx, esi
$LN16@erase:
  00044	2b c3		 sub	 eax, ebx
  00046	03 f9		 add	 edi, ecx
  00048	50		 push	 eax
  00049	03 fb		 add	 edi, ebx
  0004b	03 d1		 add	 edx, ecx
  0004d	57		 push	 edi
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 _memmove

; 1117 : 			size_type _Newsize = this->_Mysize - _Count;

  00054	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	2b c3		 sub	 eax, ebx

; 1118 : 			_Eos(_Newsize);

  0005c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00060	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00063	5f		 pop	 edi
  00064	72 04		 jb	 SHORT $LN23@erase
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	eb 02		 jmp	 SHORT $LN24@erase
$LN23@erase:
  0006a	8b ce		 mov	 ecx, esi
$LN24@erase:
  0006c	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN25@erase:

; 1119 : 			}
; 1120 : 		return (*this);

  00070	8b c6		 mov	 eax, esi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx

; 1121 : 		}

  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1516 : 		size_type _Num = this->_Alval.max_size();
; 1517 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	6a fe		 push	 -2			; fffffffeH
  00002	58		 pop	 eax

; 1518 : 		}

  00003	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator!=<char,char>
; Function compile flags: /Ogsp
;	COMDAT ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT

; 271  : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 272  : 	}

  00002	c3		 ret	 0
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z	; std::numpunct<char>::_Init
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0
__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2
__ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
_TEXT	SEGMENT
$T88110 = -28						; size = 8
$T88109 = -28						; size = 8
$T88106 = -28						; size = 8
_this$ = -24						; size = 4
tv79 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Lobj$ = 8						; size = 4
__Isdef$ = 12						; size = 1
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z PROC	; std::numpunct<char>::_Init, COMDAT
; _this$ = ecx

; 133  : 		{	// initialize from _Lobj

  00000	6a 10		 push	 16			; 00000010H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 134  : 		const lconv *_Ptr = _Lobj._Getlconv();

  00011	e8 00 00 00 00	 call	 _localeconv

; 135  : 
; 136  : 		_Grouping = 0;

  00016	33 db		 xor	 ebx, ebx
  00018	8b f8		 mov	 edi, eax
  0001a	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 137  : 		_Falsename = 0;

  0001d	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 138  : 		_Truename = 0;

  00020	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 139  : 
; 140  : 		_TRY_BEGIN

  00023	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 141  : 		_Grouping = _MAKLOCSTR(char, _Isdef ? "" : _Ptr->grouping,

  00026	38 5d 0c	 cmp	 BYTE PTR __Isdef$[ebp], bl
  00029	74 09		 je	 SHORT $LN5@Init
  0002b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
  00032	eb 06		 jmp	 SHORT $LN6@Init
$LN5@Init:
  00034	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00037	89 45 ec	 mov	 DWORD PTR tv79[ebp], eax
$LN6@Init:
  0003a	e8 00 00 00 00	 call	 __Getcvt
  0003f	8d 45 e4	 lea	 eax, DWORD PTR $T88106[ebp]
  00042	50		 push	 eax
  00043	53		 push	 ebx
  00044	ff 75 ec	 push	 DWORD PTR tv79[ebp]
  00047	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 142  : 			_Lobj._Getcvt());
; 143  : 		_Falsename = _MAKLOCSTR(_Elem, _Lobj._Getfalse(), _Lobj._Getcvt());

  00052	e8 00 00 00 00	 call	 __Getcvt
  00057	8d 45 e4	 lea	 eax, DWORD PTR $T88109[ebp]
  0005a	50		 push	 eax
  0005b	53		 push	 ebx
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_05LAPONLG@false?$AA@
  00061	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 144  : 		_Truename = _MAKLOCSTR(_Elem, _Lobj._Gettrue(), _Lobj._Getcvt());

  0006c	e8 00 00 00 00	 call	 __Getcvt
  00071	8d 45 e4	 lea	 eax, DWORD PTR $T88110[ebp]
  00074	50		 push	 eax
  00075	53		 push	 ebx
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_04LOAJBDKD@true?$AA@
  0007b	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH
  00083	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 148  : 		_CATCH_END
; 149  : 
; 150  : 		_Dp = _MAKLOCCHR(_Elem, _Ptr->decimal_point[0], _Lobj._Getcvt());

  00086	e8 00 00 00 00	 call	 __Getcvt
  0008b	8b 07		 mov	 eax, DWORD PTR [edi]
  0008d	8a 00		 mov	 al, BYTE PTR [eax]
  0008f	88 46 0c	 mov	 BYTE PTR [esi+12], al

; 151  : 		_Kseparator =
; 152  : 			_MAKLOCCHR(_Elem, _Ptr->thousands_sep[0], _Lobj._Getcvt());

  00092	e8 00 00 00 00	 call	 __Getcvt
  00097	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0009a	8a 00		 mov	 al, BYTE PTR [eax]
  0009c	88 46 0d	 mov	 BYTE PTR [esi+13], al

; 153  : 
; 154  : 		if (_Isdef)

  0009f	38 5d 0c	 cmp	 BYTE PTR __Isdef$[ebp], bl
  000a2	74 12		 je	 SHORT $LN1@Init

; 155  : 			{	// apply defaults for required facets
; 156  : //			_Grouping = _MAKLOCSTR(char, "", _Lobj._Getcvt());
; 157  : 			_Dp = _MAKLOCCHR(_Elem, '.', _Lobj._Getcvt());

  000a4	e8 00 00 00 00	 call	 __Getcvt
  000a9	c6 46 0c 2e	 mov	 BYTE PTR [esi+12], 46	; 0000002eH

; 158  : 			_Kseparator = _MAKLOCCHR(_Elem, ',', _Lobj._Getcvt());

  000ad	e8 00 00 00 00	 call	 __Getcvt
  000b2	c6 46 0d 2c	 mov	 BYTE PTR [esi+13], 44	; 0000002cH
$LN1@Init:

; 159  : 			}
; 160  : 		}

  000b6	e8 00 00 00 00	 call	 __EH_epilog3
  000bb	c2 08 00	 ret	 8
__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0:

; 145  : 		_CATCH_ALL
; 146  : 		_Tidy();

  000be	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AAEXXZ ; std::numpunct<char>::_Tidy

; 147  : 		_RERAISE;

  000c6	33 db		 xor	 ebx, ebx
  000c8	53		 push	 ebx
  000c9	53		 push	 ebx
  000ca	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN42@Init:
$LN41@Init:
  000cf	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ENDP	; std::numpunct<char>::_Init
PUBLIC	__TI2?AVruntime_error@std@@
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@	; `string'
PUBLIC	??0_Locinfo@std@@QAE@PBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	__CTA2?AVruntime_error@std@@
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	__EH_prolog3:PROC
;	COMDAT __CTA2?AVruntime_error@std@@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\stdexcept
xdata$x	SEGMENT
__CTA2?AVruntime_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT
__TI2?AVruntime_error@std@@ DD 00H
	DD	FLAT:??1runtime_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??0_Locinfo@std@@QAE@PBD@Z
_TEXT	SEGMENT
$T88196 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T88222 = 8						; size = 4
__Pch$ = 8						; size = 4
??0_Locinfo@std@@QAE@PBD@Z PROC				; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 76   :         {	// construct from NTBS

  00000	6a 10		 push	 16			; 00000010H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	33 db		 xor	 ebx, ebx
  00013	53		 push	 ebx
  00014	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00019	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0001c	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001f	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  00022	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  00025	88 5e 10	 mov	 BYTE PTR [esi+16], bl
  00028	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0002b	88 5e 18	 mov	 BYTE PTR [esi+24], bl
  0002e	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
  00031	88 5e 20	 mov	 BYTE PTR [esi+32], bl
  00034	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 77   :         if (_Pch == 0)

  00038	39 5d 08	 cmp	 DWORD PTR __Pch$[ebp], ebx
  0003b	75 28		 jne	 SHORT $LN1@Locinfo

; 78   :             _THROW_NCEE(runtime_error, "bad locale name");

  0003d	8d 45 08	 lea	 eax, DWORD PTR $T88222[ebp]
  00040	50		 push	 eax
  00041	8d 4d e4	 lea	 ecx, DWORD PTR $T88196[ebp]
  00044	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T88222[ebp], OFFSET ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
  0004b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00050	68 00 00 00 00	 push	 OFFSET __TI2?AVruntime_error@std@@
  00055	8d 45 e4	 lea	 eax, DWORD PTR $T88196[ebp]
  00058	50		 push	 eax
  00059	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T88196[ebp], OFFSET ??_7runtime_error@std@@6B@
  00060	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN22@Locinfo:
$LN1@Locinfo:

; 79   :         _Locinfo_ctor(this, _Pch);

  00065	ff 75 08	 push	 DWORD PTR __Pch$[ebp]
  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor
  0006e	59		 pop	 ecx
  0006f	59		 pop	 ecx

; 80   :         }

  00070	8b c6		 mov	 eax, esi
  00072	e8 00 00 00 00	 call	 __EH_epilog3
  00077	c2 04 00	 ret	 4
$LN21@Locinfo:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__ehhandler$??0_Locinfo@std@@QAE@PBD@Z:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003b	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@PBD@Z ENDP				; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1_Locinfo@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1_Locinfo@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 93   :         {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1_Locinfo@std@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 94   :         _Locinfo_dtor(this);

  00011	56		 push	 esi
  00012	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00019	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 95   :         }

  0001e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00021	59		 pop	 ecx
  00022	85 c0		 test	 eax, eax
  00024	74 07		 je	 SHORT $LN10@Locinfo@2
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _free
  0002c	59		 pop	 ecx
$LN10@Locinfo@2:
  0002d	83 66 1c 00	 and	 DWORD PTR [esi+28], 0
  00031	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00034	85 c0		 test	 eax, eax
  00036	74 07		 je	 SHORT $LN15@Locinfo@2
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _free
  0003e	59		 pop	 ecx
$LN15@Locinfo@2:
  0003f	83 66 14 00	 and	 DWORD PTR [esi+20], 0
  00043	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00046	85 c0		 test	 eax, eax
  00048	74 07		 je	 SHORT $LN20@Locinfo@2
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _free
  00050	59		 pop	 ecx
$LN20@Locinfo@2:
  00051	83 66 0c 00	 and	 DWORD PTR [esi+12], 0
  00055	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00058	85 c0		 test	 eax, eax
  0005a	74 07		 je	 SHORT $LN25@Locinfo@2
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 _free
  00062	59		 pop	 ecx
$LN25@Locinfo@2:
  00063	83 66 04 00	 and	 DWORD PTR [esi+4], 0
  00067	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0006b	8b ce		 mov	 ecx, esi
  0006d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00072	e8 00 00 00 00	 call	 __EH_epilog3
  00077	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003b	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 54   : 		{	// merge _State into state, possible reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 		if (_State != goodbit)

  00003	83 7d 08 00	 cmp	 DWORD PTR __State$[ebp], 0
  00007	74 18		 je	 SHORT $LN6@setstate

; 56   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00009	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000c	0b 45 08	 or	 eax, DWORD PTR __State$[ebp]
  0000f	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00013	75 03		 jne	 SHORT $LN8@setstate
  00015	83 c8 04	 or	 eax, 4
$LN8@setstate:
  00018	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN6@setstate:

; 57   : 		}

  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1987 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1988 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 20		 je	 SHORT $LN9@Tidy@2

; 1989 : 			;
; 1990 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1a		 jb	 SHORT $LN9@Tidy@2

; 1991 : 			{	// copy any leftovers to small buffer and deallocate
; 1992 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1993 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy@2

; 1994 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy@2:

; 1995 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	59		 pop	 ecx
  0002f	5b		 pop	 ebx
$LN9@Tidy@2:

; 1996 : 			}
; 1997 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1998 : 		_Eos(_Newsize);

  00030	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00033	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 1999 : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 550  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 551  : 		_Tidy();

  00002	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00006	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
  0000d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 552  : 		}

  00010	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put, COMDAT

; 1533 : 		{	// put [_Ptr, _Ptr + _Count) to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1534 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00003	83 7d 1c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00007	76 1b		 jbe	 SHORT $LN1@Put
  00009	56		 push	 esi
  0000a	8b 75 18	 mov	 esi, DWORD PTR __Ptr$[ebp]
$LL3@Put:

; 1535 : 			*_Dest = *_Ptr;

  0000d	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00010	50		 push	 eax
  00011	8d 4d 10	 lea	 ecx, DWORD PTR __Dest$[ebp]
  00014	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
  00019	ff 4d 1c	 dec	 DWORD PTR __Count$[ebp]
  0001c	46		 inc	 esi
  0001d	83 7d 1c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00021	77 ea		 ja	 SHORT $LL3@Put
  00023	5e		 pop	 esi
$LN1@Put:

; 1536 : 		return (_Dest);

  00024	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00027	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	89 08		 mov	 DWORD PTR [eax], ecx
  0002c	8b 4d 14	 mov	 ecx, DWORD PTR __Dest$[ebp+4]
  0002f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1537 : 		}

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
_TEXT	ENDS
PUBLIC	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
; Function compile flags: /Ogsp
;	COMDAT ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ch$ = 24						; size = 1
__Count$ = 28						; size = 4
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep, COMDAT

; 1568 : 		{	// put _Count * _Ch to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1569 : 		for (; 0 < _Count; --_Count, ++_Dest)

  00003	83 7d 1c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00007	76 10		 jbe	 SHORT $LN1@Rep
$LL6@Rep:

; 1570 : 			*_Dest = _Ch;

  00009	ff 75 18	 push	 DWORD PTR __Ch$[ebp]
  0000c	8d 4d 10	 lea	 ecx, DWORD PTR __Dest$[ebp]
  0000f	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
  00014	ff 4d 1c	 dec	 DWORD PTR __Count$[ebp]
  00017	75 f0		 jne	 SHORT $LL6@Rep
$LN1@Rep:

; 1571 : 		return (_Dest);

  00019	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0001c	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	89 08		 mov	 DWORD PTR [eax], ecx
  00021	8b 4d 14	 mov	 ecx, DWORD PTR __Dest$[ebp+4]
  00024	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1572 : 		}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
_TEXT	ENDS
PUBLIC	?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
; Function compile flags: /Ogsp
;	COMDAT ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc, COMDAT

; 1541 : 		{	// put char sequence [_Ptr, _Ptr + _Count) to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1542 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00003	83 7d 1c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00007	76 1b		 jbe	 SHORT $LN1@Putc
  00009	56		 push	 esi
  0000a	8b 75 18	 mov	 esi, DWORD PTR __Ptr$[ebp]
$LL3@Putc:

; 1543 : 			*_Dest = _MAKLOCCHR(_Elem, *_Ptr, _Cvt);

  0000d	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00010	50		 push	 eax
  00011	8d 4d 10	 lea	 ecx, DWORD PTR __Dest$[ebp]
  00014	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
  00019	ff 4d 1c	 dec	 DWORD PTR __Count$[ebp]
  0001c	46		 inc	 esi
  0001d	83 7d 1c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00021	77 ea		 ja	 SHORT $LL3@Putc
  00023	5e		 pop	 esi
$LN1@Putc:

; 1544 : 		return (_Dest);

  00024	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00027	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	89 08		 mov	 DWORD PTR [eax], ecx
  0002c	8b 4d 14	 mov	 ecx, DWORD PTR __Dest$[ebp+4]
  0002f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1545 : 		}

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
_TEXT	ENDS
PUBLIC	?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
EXTRN	_memchr:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z
_TEXT	SEGMENT
$T88437 = -16						; size = 8
$T88455 = -8						; size = 8
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
__Kseparator$ = 32					; size = 1
?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped, COMDAT

; 1549 : 		{	// put char sequence [_Ptr, _Ptr + _Count) to _Dest with commas

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b 5d 1c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 18	 mov	 edi, DWORD PTR __Ptr$[ebp]
$LL5@Putgrouped:

; 1551 : 			{	// put field with thousands separators for NULs
; 1552 : 			const char *_Pend =
; 1553 : 				(const char *)_CSTD memchr(_Ptr, '\0', _Count);

  0000f	53		 push	 ebx
  00010	6a 00		 push	 0
  00012	57		 push	 edi
  00013	e8 00 00 00 00	 call	 _memchr
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1554 : 			size_t _Groupsize = _Pend != 0 ? _Pend - _Ptr : _Count;

  0001b	85 c0		 test	 eax, eax
  0001d	74 06		 je	 SHORT $LN8@Putgrouped
  0001f	2b c7		 sub	 eax, edi
  00021	8b f0		 mov	 esi, eax
  00023	eb 02		 jmp	 SHORT $LN9@Putgrouped
$LN8@Putgrouped:
  00025	8b f3		 mov	 esi, ebx
$LN9@Putgrouped:

; 1555 : 
; 1556 : 			_Dest = _Putc(_Dest, _Ptr, _Groupsize);

  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  0002c	8d 45 f0	 lea	 eax, DWORD PTR $T88437[ebp]
  0002f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00032	50		 push	 eax
  00033	ff 75 08	 push	 DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 1557 : 			_Ptr += _Groupsize, _Count -= _Groupsize;

  00046	03 fe		 add	 edi, esi
  00048	2b de		 sub	 ebx, esi
  0004a	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx

; 1558 : 			if (_Count == 0)

  0004d	74 2c		 je	 SHORT $LN22@Putgrouped

; 1559 : 				break;
; 1560 : 			if (_Kseparator != (_Elem)0)

  0004f	80 7d 20 00	 cmp	 BYTE PTR __Kseparator$[ebp], 0
  00053	74 22		 je	 SHORT $LN4@Putgrouped

; 1561 : 				_Dest = _Rep(_Dest, _Kseparator, 1);

  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005a	ff 75 20	 push	 DWORD PTR __Kseparator$[ebp]
  0005d	89 4d f8	 mov	 DWORD PTR $T88455[ebp], ecx
  00060	8d 4d f8	 lea	 ecx, DWORD PTR $T88455[ebp]
  00063	89 45 fc	 mov	 DWORD PTR $T88455[ebp+4], eax
  00066	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
  0006b	8b 45 f8	 mov	 eax, DWORD PTR $T88455[ebp]
  0006e	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00071	8b 45 fc	 mov	 eax, DWORD PTR $T88455[ebp+4]
  00074	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
$LN4@Putgrouped:

; 1550 : 		for (; ; ++_Ptr, --_Count)

  00077	47		 inc	 edi
  00078	4b		 dec	 ebx
  00079	eb 94		 jmp	 SHORT $LL5@Putgrouped
$LN22@Putgrouped:

; 1562 : 			}
; 1563 : 		return (_Dest);

  0007b	8b 10		 mov	 edx, DWORD PTR [eax]
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00080	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00088	89 11		 mov	 DWORD PTR [ecx], edx
  0008a	8b c1		 mov	 eax, ecx
  0008c	5b		 pop	 ebx

; 1564 : 		}

  0008d	c9		 leave
  0008e	c3		 ret	 0
?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
tv296 = -20						; size = 4
__Newres$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1918 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 1919 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00014	83 cf 0f	 or	 edi, 15			; 0000000fH

; 1920 : 		if (max_size() < _Newres)

  00017	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0001a	76 05		 jbe	 SHORT $LN9@Copy

; 1921 : 			_Newres = _Newsize;	// undo roundup if too big

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0001f	eb 27		 jmp	 SHORT $LN5@Copy
$LN9@Copy:

; 1922 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00021	33 d2		 xor	 edx, edx
  00023	6a 03		 push	 3
  00025	8b c7		 mov	 eax, edi
  00027	5b		 pop	 ebx
  00028	f7 f3		 div	 ebx
  0002a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002d	89 4d ec	 mov	 DWORD PTR tv296[ebp], ecx
  00030	d1 6d ec	 shr	 DWORD PTR tv296[ebp], 1
  00033	8b 55 ec	 mov	 edx, DWORD PTR tv296[ebp]
  00036	3b d0		 cmp	 edx, eax
  00038	76 0e		 jbe	 SHORT $LN5@Copy

; 1923 : 			;
; 1924 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  0003a	6a fe		 push	 -2			; fffffffeH
  0003c	5f		 pop	 edi
  0003d	8b c7		 mov	 eax, edi
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	77 03		 ja	 SHORT $LN5@Copy

; 1925 : 			_Newres = this->_Myres
; 1926 : 				+ this->_Myres / 2;	// grow exponentially if possible

  00045	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]
$LN5@Copy:

; 1927 : 		else
; 1928 : 			_Newres = max_size();	// settle for max_size()
; 1929 : 
; 1930 : 		_Elem *_Ptr;
; 1931 : 		_TRY_BEGIN

  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1932 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  0004c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0004f	6a 00		 push	 0
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00057	59		 pop	 ecx
  00058	59		 pop	 ecx
  00059	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0005c	eb 27		 jmp	 SHORT $LN19@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1933 : 		_CATCH_ALL
; 1934 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0005e	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00061	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00064	89 45 ec	 mov	 DWORD PTR __Newres$[ebp], eax

; 1935 : 			_TRY_BEGIN
; 1936 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  00067	40		 inc	 eax
  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00074	59		 pop	 ecx
  00075	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00078	59		 pop	 ecx

; 1940 : 			_CATCH_END
; 1941 : 		_CATCH_END

  00079	b8 00 00 00 00	 mov	 eax, $LN63@Copy
  0007e	c3		 ret	 0
$LN63@Copy:
  0007f	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00082	8b 7d ec	 mov	 edi, DWORD PTR __Newres$[ebp]
$LN19@Copy:

; 1942 : 
; 1943 : 		if (0 < _Oldlen)

  00085	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  00088	85 db		 test	 ebx, ebx
  0008a	74 19		 je	 SHORT $LN52@Copy

; 1944 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  0008c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00090	72 04		 jb	 SHORT $LN50@Copy
  00092	8b 06		 mov	 eax, DWORD PTR [esi]
  00094	eb 02		 jmp	 SHORT $LN51@Copy
$LN50@Copy:
  00096	8b c6		 mov	 eax, esi
$LN51@Copy:
  00098	53		 push	 ebx
  00099	50		 push	 eax
  0009a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0009d	e8 00 00 00 00	 call	 _memcpy
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@Copy:

; 1945 : 		_Tidy(true);

  000a5	6a 00		 push	 0
  000a7	6a 01		 push	 1
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1946 : 		this->_Bx._Ptr = _Ptr;

  000b0	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b3	89 06		 mov	 DWORD PTR [esi], eax

; 1947 : 		this->_Myres = _Newres;

  000b5	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 1948 : 		_Eos(_Oldlen);

  000b8	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000bb	83 ff 10	 cmp	 edi, 16			; 00000010H
  000be	73 02		 jae	 SHORT $LN59@Copy
  000c0	8b c6		 mov	 eax, esi
$LN59@Copy:
  000c2	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 1949 : 		}

  000c6	e8 00 00 00 00	 call	 __EH_epilog3
  000cb	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1937 : 			_CATCH_ALL
; 1938 : 			_Tidy(true);	// failed again, discard storage and reraise

  000ce	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	33 f6		 xor	 esi, esi
  000d3	56		 push	 esi
  000d4	6a 01		 push	 1
  000d6	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1939 : 			_RERAISE;

  000db	56		 push	 esi
  000dc	56		 push	 esi
  000dd	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN67@Copy:
$LN66@Copy:
  000e2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T88591 = -52						; size = 36
$T88595 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T88590 = 8						; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat, COMDAT

; 1051 : 		{	// return locale category mask and construct standard facet

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 1052 : 		if (_Ppf != 0 && *_Ppf == 0)

  0000c	8b 5d 08	 mov	 ebx, DWORD PTR __Ppf$[ebp]
  0000f	83 65 f0 00	 and	 DWORD PTR $T88595[ebp], 0
  00013	85 db		 test	 ebx, ebx
  00015	74 6a		 je	 SHORT $LN9@Getcat
  00017	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  0001a	75 65		 jne	 SHORT $LN9@Getcat

; 1053 : 			*_Ppf = _NEW_CRT num_put<_Elem, _OutIt>(
; 1054 : 				_Locinfo(_Ploc->c_str()));

  0001c	6a 10		 push	 16			; 00000010H
  0001e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00023	8b f0		 mov	 esi, eax
  00025	59		 pop	 ecx
  00026	89 75 08	 mov	 DWORD PTR $T88590[ebp], esi
  00029	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	85 f6		 test	 esi, esi
  0002f	74 3a		 je	 SHORT $LN4@Getcat
  00031	8b 45 0c	 mov	 eax, DWORD PTR __Ploc$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00039	85 c9		 test	 ecx, ecx
  0003b	74 04		 je	 SHORT $LN14@Getcat
  0003d	8b c1		 mov	 eax, ecx
  0003f	eb 03		 jmp	 SHORT $LN15@Getcat
$LN14@Getcat:
  00041	83 c0 1c	 add	 eax, 28			; 0000001cH
$LN15@Getcat:
  00044	50		 push	 eax
  00045	8d 4d cc	 lea	 ecx, DWORD PTR $T88591[ebp]
  00048	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  0004d	83 66 04 00	 and	 DWORD PTR [esi+4], 0
  00051	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T88595[ebp], 1
  00058	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
  0005e	e8 00 00 00 00	 call	 __Getcvt
  00063	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00066	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  00069	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  0006b	33 f6		 xor	 esi, esi
$LN5@Getcat:
  0006d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	f6 45 f0 01	 test	 BYTE PTR $T88595[ebp], 1
  00075	89 33		 mov	 DWORD PTR [ebx], esi
  00077	74 08		 je	 SHORT $LN9@Getcat
  00079	8d 4d cc	 lea	 ecx, DWORD PTR $T88591[ebp]
  0007c	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN9@Getcat:

; 1055 : 		return (_X_NUMERIC);

  00081	6a 04		 push	 4
  00083	58		 pop	 eax

; 1056 : 		}

  00084	e8 00 00 00 00	 call	 __EH_epilog3
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR $T88590[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
PUBLIC	??_7?$numpunct@D@std@@6B@			; std::numpunct<char>::`vftable'
PUBLIC	??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z	; std::numpunct<char>::numpunct<char>
PUBLIC	??_R4?$numpunct@D@std@@6B@			; std::numpunct<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$numpunct@D@std@@@8			; std::numpunct<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@D@std@@8		; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_decimal_point@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_grouping
PUBLIC	?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_falsename
PUBLIC	?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_truename
EXTRN	??_E?$numpunct@D@std@@MAEPAXI@Z:PROC		; std::numpunct<char>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$numpunct@D@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@D@std@@8 DD FLAT:??_R0?AV?$numpunct@D@std@@@8 ; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$numpunct@D@std@@8 ; std::numpunct<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@D@std@@8 DD 00H				; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT
??_R0?AV?$numpunct@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::numpunct<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$numpunct@D@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@D@std@@6B@ DD 00H			; std::numpunct<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$numpunct@D@std@@@8
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$numpunct@D@std@@6B@
CONST	SEGMENT
??_7?$numpunct@D@std@@6B@ DD FLAT:??_R4?$numpunct@D@std@@6B@ ; std::numpunct<char>::`vftable'
	DD	FLAT:??_E?$numpunct@D@std@@MAEPAXI@Z
	DD	FLAT:?do_decimal_point@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0
__ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
__Isdef$ = 16						; size = 1
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z PROC	; std::numpunct<char>::numpunct<char>, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from specified locale

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  00014	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 106  : 		_Init(_Lobj, _Isdef);

  00017	ff 75 10	 push	 DWORD PTR __Isdef$[ebp]
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	ff 75 08	 push	 DWORD PTR __Lobj$[ebp]
  00021	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  00027	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init

; 107  : 		}

  0002c	8b c6		 mov	 eax, esi
  0002e	e8 00 00 00 00	 call	 __EH_epilog3
  00033	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@UAE@XZ ; std::locale::facet::~facet
__ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ENDP	; std::numpunct<char>::numpunct<char>
; Function compile flags: /Ogsp
;	COMDAT ?do_decimal_point@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_decimal_point@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_decimal_point, COMDAT
; _this$ = ecx

; 164  : 		return (_Dp);

  00000	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]

; 165  : 		}

  00003	c3		 ret	 0
?do_decimal_point@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_decimal_point
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_thousands_sep, COMDAT
; _this$ = ecx

; 169  : 		return (_Kseparator);

  00000	8a 41 0d	 mov	 al, BYTE PTR [ecx+13]

; 170  : 		}

  00003	c3		 ret	 0
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_thousands_sep
_TEXT	ENDS
PUBLIC	??1?$numpunct@D@std@@MAE@XZ			; std::numpunct<char>::~numpunct<char>
; Function compile flags: /Ogsp
;	COMDAT ??1?$numpunct@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$numpunct@D@std@@MAE@XZ PROC			; std::numpunct<char>::~numpunct<char>, COMDAT
; _this$ = ecx

; 120  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@

; 121  : 		_Tidy();

  00009	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AAEXXZ ; std::numpunct<char>::_Tidy

; 122  : 		}

  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00014	5e		 pop	 esi
  00015	c3		 ret	 0
??1?$numpunct@D@std@@MAE@XZ ENDP			; std::numpunct<char>::~numpunct<char>
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$numpunct@D@std@@MAEPAXI@Z PROC			; std::numpunct<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  0000c	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AAEXXZ ; std::numpunct<char>::_Tidy
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0001b	74 07		 je	 SHORT $LN1@scalar@7
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00023	59		 pop	 ecx
$LN1@scalar@7:
  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_G?$numpunct@D@std@@MAEPAXI@Z ENDP			; std::numpunct<char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 753  : 		_Tidy(true);

  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 754  : 		}

  00009	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = ecx

; 570  : 		{	// flush output stream

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 571  : 		ios_base::iostate _State = ios_base::goodbit;
; 572  : 		if (!ios_base::fail() && _Myios::rdbuf()->pubsync() == -1)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	f6 44 30 0c 06	 test	 BYTE PTR [eax+esi+12], 6
  00010	75 13		 jne	 SHORT $LN1@flush
  00012	8b 44 30 38	 mov	 eax, DWORD PTR [eax+esi+56]
  00016	8b 10		 mov	 edx, DWORD PTR [eax]
  00018	8b c8		 mov	 ecx, eax
  0001a	ff 52 34	 call	 DWORD PTR [edx+52]
  0001d	83 f8 ff	 cmp	 eax, -1
  00020	75 03		 jne	 SHORT $LN1@flush

; 573  : 			_State |= ios_base::badbit;	// sync failed

  00022	6a 04		 push	 4
  00024	5f		 pop	 edi
$LN1@flush:

; 574  : 		_Myios::setstate(_State);

  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002a	6a 00		 push	 0
  0002c	57		 push	 edi
  0002d	03 ce		 add	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00034	5f		 pop	 edi

; 575  : 		return (*this);

  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi

; 576  : 		}

  00038	c3		 ret	 0
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
_TEXT	ENDS
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 114  : 			{	// construct locking and testing stream

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base

; 115  : 			if (_Ostr.good() && _Ostr.tie() != 0)

  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00023	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  00028	75 0f		 jne	 SHORT $LN1@sentry
  0002a	8b 44 30 3c	 mov	 eax, DWORD PTR [eax+esi+60]
  0002e	85 c0		 test	 eax, eax
  00030	74 07		 je	 SHORT $LN1@sentry

; 116  : 				_Ostr.tie()->flush();

  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN1@sentry:

; 117  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00039	8b 06		 mov	 eax, DWORD PTR [esi]
  0003b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003e	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  00043	0f 94 c0	 sete	 al
  00046	88 47 04	 mov	 BYTE PTR [edi+4], al

; 118  : 			}

  00049	8b c7		 mov	 eax, edi
  0004b	e8 00 00 00 00	 call	 __EH_epilog3
  00050	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 156  : 		{	// perform any wrapup

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 157  : 		_TRY_BEGIN
; 158  : 		if (ios_base::flags() & ios_base::unitbuf)

  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00011	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00015	f6 44 08 14 02	 test	 BYTE PTR [eax+ecx+20], 2
  0001a	74 05		 je	 SHORT $LN8@Osfx

; 159  : 			flush();	// flush stream as needed

  0001c	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN8@Osfx:

; 162  : 		}

  00021	e8 00 00 00 00	 call	 __EH_epilog3
  00026	c3		 ret	 0
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:

; 160  : 		_CATCH_ALL
; 161  : 		_CATCH_END

  00027	b8 00 00 00 00	 mov	 eax, $LN8@Osfx
  0002c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T88764 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::falsename, COMDAT
; _this$ = ecx

; 83   : 		{	// return name for false

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 84   : 		return (do_falsename());

  00004	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	83 65 fc 00	 and	 DWORD PTR $T88764[ebp], 0
  0000d	ff 50 10	 call	 DWORD PTR [eax+16]
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 85   : 		}

  00013	c9		 leave
  00014	c2 04 00	 ret	 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::falsename
_TEXT	ENDS
PUBLIC	?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
; Function compile flags: /Ogsp
;	COMDAT ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T88769 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::truename, COMDAT
; _this$ = ecx

; 88   : 		{	// return name for true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 89   : 		return (do_truename());

  00004	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	83 65 fc 00	 and	 DWORD PTR $T88769[ebp], 0
  0000d	ff 50 14	 call	 DWORD PTR [eax+20]
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 90   : 		}

  00013	c9		 leave
  00014	c2 04 00	 ret	 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::truename
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1958 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1959 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0000a	76 0a		 jbe	 SHORT $LN6@Grow

; 1960 : 			_Xlen();	// result too long

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN31@Grow:
$LN6@Grow:

; 1961 : 		if (this->_Myres < _Newsize)

  00016	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00019	3b c6		 cmp	 eax, esi
  0001b	73 0b		 jae	 SHORT $LN5@Grow

; 1962 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0001d	ff 71 10	 push	 DWORD PTR [ecx+16]
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00026	eb 2f		 jmp	 SHORT $LN28@Grow
$LN5@Grow:

; 1963 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00028	33 d2		 xor	 edx, edx
  0002a	38 55 0c	 cmp	 BYTE PTR __Trim$[ebp], dl
  0002d	74 18		 je	 SHORT $LN3@Grow
  0002f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00032	73 13		 jae	 SHORT $LN3@Grow

; 1964 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1965 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00034	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00037	3b f0		 cmp	 esi, eax
  00039	73 02		 jae	 SHORT $LN9@Grow
  0003b	8b c6		 mov	 eax, esi
$LN9@Grow:
  0003d	50		 push	 eax
  0003e	6a 01		 push	 1
  00040	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00045	eb 10		 jmp	 SHORT $LN28@Grow
$LN3@Grow:

; 1966 : 		else if (_Newsize == 0)

  00047	3b f2		 cmp	 esi, edx
  00049	75 0c		 jne	 SHORT $LN28@Grow

; 1967 : 			_Eos(0);	// new size is zero, just null terminate

  0004b	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0004e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00051	72 02		 jb	 SHORT $LN26@Grow
  00053	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN26@Grow:
  00055	88 11		 mov	 BYTE PTR [ecx], dl
$LN28@Grow:

; 1968 : 		return (0 < _Newsize);	// return true only if more work to do

  00057	33 c0		 xor	 eax, eax
  00059	3b c6		 cmp	 eax, esi
  0005b	1b c0		 sbb	 eax, eax
  0005d	f7 d8		 neg	 eax
  0005f	5e		 pop	 esi

; 1969 : 		}

  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN30@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T88826 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::grouping, COMDAT
; _this$ = ecx

; 78   : 		{	// return grouping string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 79   : 		return (do_grouping());

  00004	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	83 65 fc 00	 and	 DWORD PTR $T88826[ebp], 0
  0000d	ff 50 0c	 call	 DWORD PTR [eax+12]
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 80   : 		}

  00013	c9		 leave
  00014	c2 04 00	 ret	 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::grouping
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 798  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 799  : 		if (_Right.size() < _Roff)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	3b 45 0c	 cmp	 eax, DWORD PTR __Roff$[ebp]
  00010	73 0a		 jae	 SHORT $LN4@append

; 800  : 			_Xran();	// _Roff off end

  00012	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00017	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN36@append:
$LN4@append:

; 801  : 		size_type _Num = _Right.size() - _Roff;

  0001c	2b 45 0c	 sub	 eax, DWORD PTR __Roff$[ebp]

; 802  : 		if (_Num < _Count)

  0001f	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp]
  00022	3b c3		 cmp	 eax, ebx
  00024	73 02		 jae	 SHORT $LN3@append

; 803  : 			_Count = _Num;	// trim _Count to size

  00026	8b d8		 mov	 ebx, eax
$LN3@append:

; 804  : 		if (npos - this->_Mysize <= _Count)

  00028	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002b	83 c9 ff	 or	 ecx, -1
  0002e	2b c8		 sub	 ecx, eax
  00030	3b cb		 cmp	 ecx, ebx
  00032	77 0a		 ja	 SHORT $LN2@append

; 805  : 			_Xlen();	// result too long

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00039	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN37@append:
$LN2@append:

; 806  : 
; 807  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  0003e	85 db		 test	 ebx, ebx
  00040	74 50		 je	 SHORT $LN32@append
  00042	57		 push	 edi
  00043	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  00046	6a 00		 push	 0
  00048	57		 push	 edi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00050	84 c0		 test	 al, al
  00052	74 3d		 je	 SHORT $LN34@append

; 808  : 			{	// make room and append new stuff
; 809  : 			_Traits::copy(_Myptr() + this->_Mysize,
; 810  : 				_Right._Myptr() + _Roff, _Count);

  00054	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00057	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0005b	72 02		 jb	 SHORT $LN18@append
  0005d	8b 00		 mov	 eax, DWORD PTR [eax]
$LN18@append:
  0005f	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00063	72 04		 jb	 SHORT $LN22@append
  00065	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00067	eb 02		 jmp	 SHORT $LN23@append
$LN22@append:
  00069	8b ce		 mov	 ecx, esi
$LN23@append:
  0006b	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  0006e	53		 push	 ebx
  0006f	50		 push	 eax
  00070	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00073	03 c1		 add	 eax, ecx
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _memcpy
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 811  : 			_Eos(_Num);

  0007e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00082	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00085	72 04		 jb	 SHORT $LN30@append
  00087	8b 06		 mov	 eax, DWORD PTR [esi]
  00089	eb 02		 jmp	 SHORT $LN31@append
$LN30@append:
  0008b	8b c6		 mov	 eax, esi
$LN31@append:
  0008d	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN34@append:
  00091	5f		 pop	 edi
$LN32@append:

; 812  : 			}
; 813  : 		return (*this);

  00092	8b c6		 mov	 eax, esi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx

; 814  : 		}

  00096	5d		 pop	 ebp
  00097	c2 0c 00	 ret	 12			; 0000000cH
$LN35@append:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
PUBLIC	??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
EXTRN	??0bad_cast@std@@QAE@PBD@Z:PROC			; std::bad_cast::bad_cast
EXTRN	??1bad_cast@std@@UAE@XZ:PROC			; std::bad_cast::~bad_cast
EXTRN	??0bad_cast@std@@QAE@ABV01@@Z:PROC		; std::bad_cast::bad_cast
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
_BSS	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T88890 = -32						; size = 12
__Lock$85729 = -20					; size = 4
__Psave$85730 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >, COMDAT

; 504  : 	{	// get facet reference from locale

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 505  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  0000c	6a 00		 push	 0
  0000e	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$85729[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 506  : 		const locale::facet *_Psave =
; 507  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00016	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 508  : 
; 509  : 		size_t _Id = _Facet::id;

  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00025	89 75 f0	 mov	 DWORD PTR __Psave$85730[ebp], esi
  00028	e8 00 00 00 00	 call	 ??Bid@locale@std@@QAEIXZ ; std::locale::id::operator unsigned int

; 510  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  00036	8b f8		 mov	 edi, eax

; 511  : 
; 512  : 		if (_Pf != 0)

  00038	85 ff		 test	 edi, edi
  0003a	75 4d		 jne	 SHORT $LN10@use_facet

; 513  : 			;	// got facet from locale
; 514  : 		else if (_Psave != 0)

  0003c	85 f6		 test	 esi, esi
  0003e	74 04		 je	 SHORT $LN4@use_facet

; 515  : 			_Pf = _Psave;	// lazy facet already allocated

  00040	8b fe		 mov	 edi, esi
  00042	eb 45		 jmp	 SHORT $LN10@use_facet
$LN4@use_facet:

; 516  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  00044	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  00047	8d 45 f0	 lea	 eax, DWORD PTR __Psave$85730[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
  00050	59		 pop	 ecx
  00051	59		 pop	 ecx
  00052	83 f8 ff	 cmp	 eax, -1
  00055	75 1b		 jne	 SHORT $LN2@use_facet

; 517  : 
; 518  :  #if _HAS_EXCEPTIONS
; 519  : 
; 520  : 			_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  00057	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  0005c	8d 4d e0	 lea	 ecx, DWORD PTR $T88890[ebp]
  0005f	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  00064	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  00069	8d 45 e0	 lea	 eax, DWORD PTR $T88890[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@use_facet:
$LN2@use_facet:

; 521  : 
; 522  :  #else /* _HAS_EXCEPTIONS */
; 523  : 			abort();	// lazy disallowed
; 524  :  #endif /* _HAS_EXCEPTIONS */
; 525  : 
; 526  : 		else
; 527  : 			{	// queue up lazy facet for destruction
; 528  : 			_Pf = _Psave;

  00072	8b 7d f0	 mov	 edi, DWORD PTR __Psave$85730[ebp]

; 529  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 530  : 
; 531  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 532  : 			_Pfmod->_Incref();

  00075	8b cf		 mov	 ecx, edi
  00077	89 3d 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, edi ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  0007d	e8 00 00 00 00	 call	 ?_Incref@facet@locale@std@@QAEXXZ ; std::locale::facet::_Incref

; 533  : 			_Pfmod->_Register();

  00082	57		 push	 edi
  00083	e8 00 00 00 00	 call	 ?_Facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::_Facet_Register
  00088	59		 pop	 ecx
$LN10@use_facet:

; 534  : 			}
; 535  : 
; 536  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00089	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$85729[ebp]
  00090	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00095	8b c7		 mov	 eax, edi

; 537  : 	_END_LOCK()
; 538  : 	}

  00097	e8 00 00 00 00	 call	 __EH_epilog3
  0009c	c3		 ret	 0
$LN13@use_facet:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$85729[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T88909 = -52						; size = 36
$T88913 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T88908 = 8						; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::numpunct<char>::_Getcat, COMDAT

; 111  : 		{	// return locale category mask and construct standard facet

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	83 65 f0 00	 and	 DWORD PTR $T88913[ebp], 0

; 112  : 		if (_Ppf != 0 && *_Ppf == 0)

  00010	8b 5d 08	 mov	 ebx, DWORD PTR __Ppf$[ebp]
  00013	85 db		 test	 ebx, ebx
  00015	74 6a		 je	 SHORT $LN9@Getcat@2
  00017	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  0001a	75 65		 jne	 SHORT $LN9@Getcat@2

; 113  : 			*_Ppf = _NEW_CRT numpunct<_Elem>(
; 114  : 				_Locinfo(_Ploc->c_str()), 0, true);

  0001c	6a 18		 push	 24			; 00000018H
  0001e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00023	8b f0		 mov	 esi, eax
  00025	59		 pop	 ecx
  00026	89 75 08	 mov	 DWORD PTR $T88908[ebp], esi
  00029	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	85 f6		 test	 esi, esi
  0002f	74 3a		 je	 SHORT $LN4@Getcat@2
  00031	8b 45 0c	 mov	 eax, DWORD PTR __Ploc$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00039	85 c9		 test	 ecx, ecx
  0003b	75 03		 jne	 SHORT $LN15@Getcat@2
  0003d	8d 48 1c	 lea	 ecx, DWORD PTR [eax+28]
$LN15@Getcat@2:
  00040	51		 push	 ecx
  00041	8d 4d cc	 lea	 ecx, DWORD PTR $T88909[ebp]
  00044	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00049	83 66 04 00	 and	 DWORD PTR [esi+4], 0
  0004d	33 c9		 xor	 ecx, ecx
  0004f	41		 inc	 ecx
  00050	89 4d f0	 mov	 DWORD PTR $T88913[ebp], ecx
  00053	51		 push	 ecx
  00054	50		 push	 eax
  00055	8b ce		 mov	 ecx, esi
  00057	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0005e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  00064	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init
  00069	eb 02		 jmp	 SHORT $LN5@Getcat@2
$LN4@Getcat@2:
  0006b	33 f6		 xor	 esi, esi
$LN5@Getcat@2:
  0006d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	f6 45 f0 01	 test	 BYTE PTR $T88913[ebp], 1
  00075	89 33		 mov	 DWORD PTR [ebx], esi
  00077	74 08		 je	 SHORT $LN9@Getcat@2
  00079	8d 4d cc	 lea	 ecx, DWORD PTR $T88909[ebp]
  0007c	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN9@Getcat@2:

; 115  : 		return (_X_NUMERIC);

  00081	6a 04		 push	 4
  00083	58		 pop	 eax

; 116  : 		}

  00084	e8 00 00 00 00	 call	 __EH_epilog3
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR $T88908[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000a	8b 45 f0	 mov	 eax, DWORD PTR $T88913[ebp]
  0000d	83 e0 01	 and	 eax, 1
  00010	0f 84 0c 00 00
	00		 je	 $LN8@Getcat@2
  00016	83 65 f0 fe	 and	 DWORD PTR $T88913[ebp], -2 ; fffffffeH
  0001a	8d 4d cc	 lea	 ecx, DWORD PTR $T88909[ebp]
  0001d	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN8@Getcat@2:
  00022	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  00023	8b 4d 08	 mov	 ecx, DWORD PTR $T88908[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@UAE@XZ ; std::locale::facet::~facet
__ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::numpunct<char>::_Getcat
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 121  : 			{	// destroy the object

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 122  :  #if _HAS_EXCEPTIONS
; 123  : 			if (!uncaught_exception())

  00015	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0001a	84 c0		 test	 al, al
  0001c	75 07		 jne	 SHORT $LN1@sentry@2

; 124  : 				this->_Myostr._Osfx();

  0001e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00020	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN1@sentry@2:

; 125  : 
; 126  :  #else /* _HAS_EXCEPTIONS */
; 127  : 			this->_Myostr._Osfx();
; 128  :  #endif /* _HAS_EXCEPTIONS */
; 129  : 			}

  00025	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00030	e8 00 00 00 00	 call	 __EH_epilog3
  00035	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 817  : 		{	// append [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 818  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 819  : 		if (_Count != 0)
; 820  : 			_DEBUG_POINTER(_Ptr);
; 821  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 822  : 
; 823  : 		if (_Inside(_Ptr))

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 1c		 je	 SHORT $LN3@append@2

; 824  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN8@append@2
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN9@append@2
$LN8@append@2:
  0001e	8b c6		 mov	 eax, esi
$LN9@append@2:
  00020	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00023	2b f8		 sub	 edi, eax
  00025	57		 push	 edi
  00026	56		 push	 esi
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0002e	eb 63		 jmp	 SHORT $LN4@append@2
$LN3@append@2:

; 825  : 		if (npos - this->_Mysize <= _Count)

  00030	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00033	83 c9 ff	 or	 ecx, -1
  00036	53		 push	 ebx
  00037	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0003a	2b c8		 sub	 ecx, eax
  0003c	3b cb		 cmp	 ecx, ebx
  0003e	77 0a		 ja	 SHORT $LN2@append@2

; 826  : 			_Xlen();	// result too long

  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00045	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN28@append@2:
$LN2@append@2:

; 827  : 
; 828  : 		size_type _Num;
; 829  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  0004a	85 db		 test	 ebx, ebx
  0004c	74 42		 je	 SHORT $LN25@append@2
  0004e	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  00051	6a 00		 push	 0
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0005b	84 c0		 test	 al, al
  0005d	74 31		 je	 SHORT $LN25@append@2

; 830  : 			{	// make room and append new stuff
; 831  : 			_Traits::copy(_Myptr() + this->_Mysize, _Ptr, _Count);

  0005f	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00063	72 04		 jb	 SHORT $LN15@append@2
  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	eb 02		 jmp	 SHORT $LN16@append@2
$LN15@append@2:
  00069	8b c6		 mov	 eax, esi
$LN16@append@2:
  0006b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0006e	53		 push	 ebx
  0006f	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00072	03 c8		 add	 ecx, eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memcpy
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 832  : 			_Eos(_Num);

  0007d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00081	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00084	72 04		 jb	 SHORT $LN23@append@2
  00086	8b 06		 mov	 eax, DWORD PTR [esi]
  00088	eb 02		 jmp	 SHORT $LN24@append@2
$LN23@append@2:
  0008a	8b c6		 mov	 eax, esi
$LN24@append@2:
  0008c	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN25@append@2:

; 833  : 			}
; 834  : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5b		 pop	 ebx
$LN4@append@2:
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi

; 835  : 		}

  00095	5d		 pop	 ebp
  00096	c2 08 00	 ret	 8
$LN27@append@2:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 844  : 		{	// append _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 845  : 		if (npos - this->_Mysize <= _Count)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000d	83 c9 ff	 or	 ecx, -1
  00010	2b c8		 sub	 ecx, eax
  00012	3b cb		 cmp	 ecx, ebx
  00014	77 0a		 ja	 SHORT $LN2@append@3

; 846  : 			_Xlen();	// result too long

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0001b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN18@append@3:
$LN2@append@3:

; 847  : 
; 848  : 		size_type _Num;
; 849  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00020	85 db		 test	 ebx, ebx
  00022	74 34		 je	 SHORT $LN14@append@3
  00024	57		 push	 edi
  00025	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  00028	6a 00		 push	 0
  0002a	57		 push	 edi
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00032	84 c0		 test	 al, al
  00034	74 21		 je	 SHORT $LN16@append@3

; 850  : 			{	// make room and append new stuff using assign
; 851  : 			_Chassign(this->_Mysize, _Count, _Ch);

  00036	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  00039	8b ce		 mov	 ecx, esi
  0003b	53		 push	 ebx
  0003c	ff 76 10	 push	 DWORD PTR [esi+16]
  0003f	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 852  : 			_Eos(_Num);

  00044	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00048	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0004b	72 04		 jb	 SHORT $LN12@append@3
  0004d	8b 06		 mov	 eax, DWORD PTR [esi]
  0004f	eb 02		 jmp	 SHORT $LN13@append@3
$LN12@append@3:
  00051	8b c6		 mov	 eax, esi
$LN13@append@3:
  00053	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN16@append@3:
  00057	5f		 pop	 edi
$LN14@append@3:

; 853  : 			}
; 854  : 		return (*this);

  00058	8b c6		 mov	 eax, esi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx

; 855  : 		}

  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
$LN17@append@3:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 892  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 893  : 		if (_Right.size() < _Roff)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00010	57		 push	 edi
  00011	3b c1		 cmp	 eax, ecx
  00013	73 0a		 jae	 SHORT $LN5@assign

; 894  : 			_Xran();	// _Roff off end

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0001a	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN34@assign:
$LN5@assign:

; 895  : 		size_type _Num = _Right.size() - _Roff;

  0001f	2b c1		 sub	 eax, ecx
  00021	8b f8		 mov	 edi, eax

; 896  : 		if (_Count < _Num)

  00023	39 7d 10	 cmp	 DWORD PTR __Count$[ebp], edi
  00026	73 03		 jae	 SHORT $LN4@assign

; 897  : 			_Num = _Count;	// trim _Num to size

  00028	8b 7d 10	 mov	 edi, DWORD PTR __Count$[ebp]
$LN4@assign:

; 898  : 
; 899  : 		if (this == &_Right)

  0002b	3b f3		 cmp	 esi, ebx
  0002d	75 1a		 jne	 SHORT $LN3@assign

; 900  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002f	03 f9		 add	 edi, ecx
  00031	6a ff		 push	 -1
  00033	57		 push	 edi
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0003b	ff 75 0c	 push	 DWORD PTR __Roff$[ebp]
  0003e	8b ce		 mov	 ecx, esi
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00047	eb 47		 jmp	 SHORT $LN31@assign
$LN3@assign:

; 901  : 		else if (_Grow(_Num))

  00049	6a 00		 push	 0
  0004b	57		 push	 edi
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00053	84 c0		 test	 al, al
  00055	74 39		 je	 SHORT $LN31@assign

; 902  : 			{	// make room and assign new stuff
; 903  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  00057	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  0005b	72 04		 jb	 SHORT $LN17@assign
  0005d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005f	eb 02		 jmp	 SHORT $LN18@assign
$LN17@assign:
  00061	8b c3		 mov	 eax, ebx
$LN18@assign:
  00063	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00067	72 04		 jb	 SHORT $LN21@assign
  00069	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0006b	eb 02		 jmp	 SHORT $LN22@assign
$LN21@assign:
  0006d	8b ce		 mov	 ecx, esi
$LN22@assign:
  0006f	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memcpy
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 904  : 			_Eos(_Num);

  0007d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00081	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00084	72 04		 jb	 SHORT $LN29@assign
  00086	8b 06		 mov	 eax, DWORD PTR [esi]
  00088	eb 02		 jmp	 SHORT $LN30@assign
$LN29@assign:
  0008a	8b c6		 mov	 eax, esi
$LN30@assign:
  0008c	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN31@assign:

; 905  : 			}
; 906  : 		return (*this);

  00090	5f		 pop	 edi
  00091	8b c6		 mov	 eax, esi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx

; 907  : 		}

  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN33@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogsp
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1040 : 		{	// insert _Count * _Ch at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1041 : 		if (this->_Mysize < _Off)

  00007	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR __Off$[ebp]
  0000e	3b df		 cmp	 ebx, edi
  00010	73 0a		 jae	 SHORT $LN3@insert

; 1042 : 			_Xran();	// _Off off end

  00012	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00017	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN30@insert:
$LN3@insert:

; 1043 : 		if (npos - this->_Mysize <= _Count)

  0001c	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0001f	83 c9 ff	 or	 ecx, -1
  00022	2b cb		 sub	 ecx, ebx
  00024	3b c8		 cmp	 ecx, eax
  00026	77 0a		 ja	 SHORT $LN2@insert

; 1044 : 			_Xlen();	// result too long

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0002d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN31@insert:
$LN2@insert:

; 1045 : 		size_type _Num;
; 1046 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00032	85 c0		 test	 eax, eax
  00034	74 61		 je	 SHORT $LN27@insert
  00036	03 d8		 add	 ebx, eax
  00038	6a 00		 push	 0
  0003a	53		 push	 ebx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00042	84 c0		 test	 al, al
  00044	74 51		 je	 SHORT $LN27@insert

; 1047 : 			{	// make room and insert new stuff
; 1048 : 			_Traits::move(_Myptr() + _Off + _Count,
; 1049 : 				_Myptr() + _Off, this->_Mysize - _Off);	// empty out hole

  00046	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 04		 jb	 SHORT $LN13@insert
  0004e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00050	eb 02		 jmp	 SHORT $LN14@insert
$LN13@insert:
  00052	8b ce		 mov	 ecx, esi
$LN14@insert:
  00054	83 f8 10	 cmp	 eax, 16			; 00000010H
  00057	72 04		 jb	 SHORT $LN17@insert
  00059	8b 06		 mov	 eax, DWORD PTR [esi]
  0005b	eb 02		 jmp	 SHORT $LN18@insert
$LN17@insert:
  0005d	8b c6		 mov	 eax, esi
$LN18@insert:
  0005f	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00062	2b d7		 sub	 edx, edi
  00064	52		 push	 edx
  00065	03 c7		 add	 eax, edi
  00067	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  0006a	03 cf		 add	 ecx, edi
  0006c	51		 push	 ecx
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 _memmove
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1050 : 			_Chassign(_Off, _Count, _Ch);	// fill hole

  00076	ff 75 10	 push	 DWORD PTR __Ch$[ebp]
  00079	8b ce		 mov	 ecx, esi
  0007b	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0007e	57		 push	 edi
  0007f	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1051 : 			_Eos(_Num);

  00084	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00088	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0008b	72 04		 jb	 SHORT $LN25@insert
  0008d	8b 06		 mov	 eax, DWORD PTR [esi]
  0008f	eb 02		 jmp	 SHORT $LN26@insert
$LN25@insert:
  00091	8b c6		 mov	 eax, esi
$LN26@insert:
  00093	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
$LN27@insert:

; 1052 : 			}
; 1053 : 		return (*this);

  00097	5f		 pop	 edi
  00098	8b c6		 mov	 eax, esi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx

; 1054 : 		}

  0009c	5d		 pop	 ebp
  0009d	c2 0c 00	 ret	 12			; 0000000cH
$LN29@insert:
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 886  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 887  : 		return (assign(_Right, 0, npos));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 888  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$12
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -40						; size = 8
__Pad$ = -32						; size = 8
$T89202 = -24						; size = 1
$T89181 = -24						; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 767  : 	{	// insert NTBS into char stream

  00000	6a 1c		 push	 28			; 0000001cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 768  : 	typedef char _Elem;
; 769  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 770  : 	ios_base::iostate _State = ios_base::goodbit;
; 771  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  0000c	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0000f	33 ff		 xor	 edi, edi
  00011	89 7d ec	 mov	 DWORD PTR __State$[ebp], edi
  00014	e8 00 00 00 00	 call	 _strlen

; 772  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 773  : 		? 0 : _Ostr.width() - _Count;

  00019	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0001c	8b d8		 mov	 ebx, eax
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00023	59		 pop	 ecx
  00024	8b 4c 30 20	 mov	 ecx, DWORD PTR [eax+esi+32]
  00028	8b 44 30 24	 mov	 eax, DWORD PTR [eax+esi+36]
  0002c	85 c0		 test	 eax, eax
  0002e	7c 1c		 jl	 SHORT $LN17@operator@5
  00030	7f 04		 jg	 SHORT $LN130@operator@5
  00032	85 c9		 test	 ecx, ecx
  00034	74 16		 je	 SHORT $LN17@operator@5
$LN130@operator@5:
  00036	3b c7		 cmp	 eax, edi
  00038	7c 12		 jl	 SHORT $LN17@operator@5
  0003a	7f 04		 jg	 SHORT $LN131@operator@5
  0003c	3b cb		 cmp	 ecx, ebx
  0003e	76 0c		 jbe	 SHORT $LN17@operator@5
$LN131@operator@5:
  00040	2b cb		 sub	 ecx, ebx
  00042	1b c7		 sbb	 eax, edi
  00044	89 4d e0	 mov	 DWORD PTR __Pad$[ebp], ecx
  00047	89 45 e4	 mov	 DWORD PTR __Pad$[ebp+4], eax
  0004a	eb 06		 jmp	 SHORT $LN18@operator@5
$LN17@operator@5:
  0004c	21 7d e0	 and	 DWORD PTR __Pad$[ebp], edi
  0004f	21 7d e4	 and	 DWORD PTR __Pad$[ebp+4], edi
$LN18@operator@5:

; 774  : 	const typename _Myos::sentry _Ok(_Ostr);

  00052	56		 push	 esi
  00053	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00056	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0005b	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 775  : 
; 776  : 	if (!_Ok)

  0005f	80 7d dc 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00063	75 0c		 jne	 SHORT $LN14@operator@5

; 777  : 		_State |= ios_base::badbit;

  00065	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4

; 778  : 	else

  0006c	e9 80 00 00 00	 jmp	 $LN22@operator@5
$LN14@operator@5:

; 779  : 		{	// state okay, insert
; 780  : 		_TRY_IO_BEGIN
; 781  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00071	8b 06		 mov	 eax, DWORD PTR [esi]
  00073	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00076	8b 44 30 14	 mov	 eax, DWORD PTR [eax+esi+20]
  0007a	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0007f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00083	83 f8 40	 cmp	 eax, 64			; 00000040H
  00086	74 35		 je	 SHORT $LN128@operator@5
$LL10@operator@5:

; 782  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00088	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  0008c	7c 29		 jl	 SHORT $LN8@operator@5
  0008e	7f 06		 jg	 SHORT $LN132@operator@5
  00090	83 7d e0 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00094	76 21		 jbe	 SHORT $LN8@operator@5
$LN132@operator@5:

; 783  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 784  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00096	8b 06		 mov	 eax, DWORD PTR [esi]
  00098	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0009b	8a 4c 30 40	 mov	 cl, BYTE PTR [eax+esi+64]
  0009f	88 4d e8	 mov	 BYTE PTR $T89181[ebp], cl
  000a2	ff 75 e8	 push	 DWORD PTR $T89181[ebp]
  000a5	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  000a9	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  000ae	83 f8 ff	 cmp	 eax, -1
  000b1	75 63		 jne	 SHORT $LN9@operator@5

; 785  : 					{	// insertion failed, quit
; 786  : 					_State |= ios_base::badbit;

  000b3	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN8@operator@5:

; 787  : 					break;
; 788  : 					}
; 789  : 
; 790  : 		if (_State == ios_base::goodbit
; 791  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  000b7	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  000bb	75 22		 jne	 SHORT $LN2@operator@5
$LN128@operator@5:
  000bd	8b 06		 mov	 eax, DWORD PTR [esi]
  000bf	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000c2	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  000c6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c8	57		 push	 edi
  000c9	53		 push	 ebx
  000ca	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  000cd	ff 50 24	 call	 DWORD PTR [eax+36]
  000d0	3b c3		 cmp	 eax, ebx
  000d2	75 04		 jne	 SHORT $LN133@operator@5
  000d4	3b d7		 cmp	 edx, edi
  000d6	74 4b		 je	 SHORT $LL129@operator@5
$LN133@operator@5:

; 792  : 			_State |= ios_base::badbit;

  000d8	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN2@operator@5:

; 801  : 					}
; 802  : 		_Ostr.width(0);

  000df	8b 06		 mov	 eax, DWORD PTR [esi]
  000e1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000e4	33 c9		 xor	 ecx, ecx
  000e6	89 4c 30 20	 mov	 DWORD PTR [eax+esi+32], ecx
  000ea	89 4c 30 24	 mov	 DWORD PTR [eax+esi+36], ecx
  000ee	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
$LN22@operator@5:

; 804  : 		}
; 805  : 
; 806  : 	_Ostr.setstate(_State);

  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
  000f3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f6	6a 00		 push	 0
  000f8	ff 75 ec	 push	 DWORD PTR __State$[ebp]
  000fb	03 ce		 add	 ecx, esi
  000fd	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 807  : 	return (_Ostr);

  00102	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00106	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00109	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0010e	8b c6		 mov	 eax, esi

; 808  : 	}

  00110	e8 00 00 00 00	 call	 __EH_epilog3
  00115	c3		 ret	 0
$LN9@operator@5:

; 782  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00116	83 45 e0 ff	 add	 DWORD PTR __Pad$[ebp], -1
  0011a	83 55 e4 ff	 adc	 DWORD PTR __Pad$[ebp+4], -1
  0011e	e9 65 ff ff ff	 jmp	 $LL10@operator@5
$LL129@operator@5:

; 793  : 
; 794  : 		if (_State == ios_base::goodbit)
; 795  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00123	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00127	7c b6		 jl	 SHORT $LN2@operator@5
  00129	7f 06		 jg	 SHORT $LN134@operator@5
  0012b	83 7d e0 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  0012f	76 ae		 jbe	 SHORT $LN2@operator@5
$LN134@operator@5:

; 796  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 797  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00131	8b 06		 mov	 eax, DWORD PTR [esi]
  00133	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00136	8a 4c 30 40	 mov	 cl, BYTE PTR [eax+esi+64]
  0013a	88 4d e8	 mov	 BYTE PTR $T89202[ebp], cl
  0013d	ff 75 e8	 push	 DWORD PTR $T89202[ebp]
  00140	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00144	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  00149	83 f8 ff	 cmp	 eax, -1
  0014c	75 06		 jne	 SHORT $LN3@operator@5

; 798  : 					{	// insertion failed, quit
; 799  : 					_State |= ios_base::badbit;

  0014e	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4

; 800  : 					break;

  00152	eb 8b		 jmp	 SHORT $LN2@operator@5
$LN3@operator@5:

; 793  : 
; 794  : 		if (_State == ios_base::goodbit)
; 795  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00154	83 45 e0 ff	 add	 DWORD PTR __Pad$[ebp], -1
  00158	83 55 e4 ff	 adc	 DWORD PTR __Pad$[ebp+4], -1
  0015c	eb c5		 jmp	 SHORT $LL129@operator@5
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 803  : 		_CATCH_IO_(_Ostr)

  0015e	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00161	8b 01		 mov	 eax, DWORD PTR [ecx]
  00163	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00166	03 c1		 add	 eax, ecx
  00168	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0016b	33 d2		 xor	 edx, edx
  0016d	83 c9 04	 or	 ecx, 4
  00170	39 50 38	 cmp	 DWORD PTR [eax+56], edx
  00173	75 03		 jne	 SHORT $LN65@operator@5
  00175	83 c9 04	 or	 ecx, 4
$LN65@operator@5:
  00178	83 e1 17	 and	 ecx, 23			; 00000017H
  0017b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0017e	85 48 10	 test	 DWORD PTR [eax+16], ecx
  00181	75 11		 jne	 SHORT $LN74@operator@5
  00183	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edx
  00186	b8 00 00 00 00	 mov	 eax, $LN23@operator@5
  0018b	c3		 ret	 0
$LN23@operator@5:
  0018c	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0018f	e9 5d ff ff ff	 jmp	 $LN22@operator@5
$LN74@operator@5:
  00194	52		 push	 edx
  00195	52		 push	 edx
  00196	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN142@operator@5:
$LN141@operator@5:
  0019b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
PUBLIC	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::numpunct<char> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T89543 = -32						; size = 12
__Lock$85761 = -20					; size = 4
__Psave$85762 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::numpunct<char> >, COMDAT

; 504  : 	{	// get facet reference from locale

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 505  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  0000c	6a 00		 push	 0
  0000e	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$85761[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 506  : 		const locale::facet *_Psave =
; 507  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00016	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 508  : 
; 509  : 		size_t _Id = _Facet::id;

  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
  00025	89 75 f0	 mov	 DWORD PTR __Psave$85762[ebp], esi
  00028	e8 00 00 00 00	 call	 ??Bid@locale@std@@QAEIXZ ; std::locale::id::operator unsigned int

; 510  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  00036	8b f8		 mov	 edi, eax

; 511  : 
; 512  : 		if (_Pf != 0)

  00038	85 ff		 test	 edi, edi
  0003a	75 4d		 jne	 SHORT $LN10@use_facet@2

; 513  : 			;	// got facet from locale
; 514  : 		else if (_Psave != 0)

  0003c	85 f6		 test	 esi, esi
  0003e	74 04		 je	 SHORT $LN4@use_facet@2

; 515  : 			_Pf = _Psave;	// lazy facet already allocated

  00040	8b fe		 mov	 edi, esi
  00042	eb 45		 jmp	 SHORT $LN10@use_facet@2
$LN4@use_facet@2:

; 516  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  00044	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  00047	8d 45 f0	 lea	 eax, DWORD PTR __Psave$85762[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
  00050	59		 pop	 ecx
  00051	59		 pop	 ecx
  00052	83 f8 ff	 cmp	 eax, -1
  00055	75 1b		 jne	 SHORT $LN2@use_facet@2

; 517  : 
; 518  :  #if _HAS_EXCEPTIONS
; 519  : 
; 520  : 			_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  00057	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  0005c	8d 4d e0	 lea	 ecx, DWORD PTR $T89543[ebp]
  0005f	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  00064	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  00069	8d 45 e0	 lea	 eax, DWORD PTR $T89543[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@use_facet@2:
$LN2@use_facet@2:

; 521  : 
; 522  :  #else /* _HAS_EXCEPTIONS */
; 523  : 			abort();	// lazy disallowed
; 524  :  #endif /* _HAS_EXCEPTIONS */
; 525  : 
; 526  : 		else
; 527  : 			{	// queue up lazy facet for destruction
; 528  : 			_Pf = _Psave;

  00072	8b 7d f0	 mov	 edi, DWORD PTR __Psave$85762[ebp]

; 529  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 530  : 
; 531  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 532  : 			_Pfmod->_Incref();

  00075	8b cf		 mov	 ecx, edi
  00077	89 3d 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B, edi ; std::_Facetptr<std::numpunct<char> >::_Psave
  0007d	e8 00 00 00 00	 call	 ?_Incref@facet@locale@std@@QAEXXZ ; std::locale::facet::_Incref

; 533  : 			_Pfmod->_Register();

  00082	57		 push	 edi
  00083	e8 00 00 00 00	 call	 ?_Facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::_Facet_Register
  00088	59		 pop	 ecx
$LN10@use_facet@2:

; 534  : 			}
; 535  : 
; 536  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00089	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$85761[ebp]
  00090	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00095	8b c7		 mov	 eax, edi

; 537  : 	_END_LOCK()
; 538  : 	}

  00097	e8 00 00 00 00	 call	 __EH_epilog3
  0009c	c3		 ret	 0
$LN13@use_facet@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$85761[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<char> >
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$13 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$13
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
_TEXT	SEGMENT
$T89564 = -48						; size = 8
$T89563 = -48						; size = 8
__Ok$ = -40						; size = 8
$T89578 = -32						; size = 1
$T89560 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 2
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 261  : 		{	// insert an unsigned short

  00000	6a 24		 push	 36			; 00000024H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 262  : 		ios_base::iostate _State = ios_base::goodbit;

  00011	33 db		 xor	 ebx, ebx

; 263  : 		const sentry _Ok(*this);

  00013	56		 push	 esi
  00014	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00017	89 5d e8	 mov	 DWORD PTR __State$[ebp], ebx
  0001a	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0001f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 264  : 
; 265  : 		if (_Ok)

  00022	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00025	74 6a		 je	 SHORT $LN12@operator@6

; 266  : 			{	// state okay, use facet to insert
; 267  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00027	8d 45 e4	 lea	 eax, DWORD PTR $T89560[ebp]
  0002a	50		 push	 eax
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00030	03 ce		 add	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00037	50		 push	 eax
  00038	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0003c	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00041	59		 pop	 ecx
  00042	8d 4d e4	 lea	 ecx, DWORD PTR $T89560[ebp]
  00045	8b f8		 mov	 edi, eax
  00047	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 268  : 
; 269  : 			_TRY_IO_BEGIN
; 270  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 271  : 				_Myios::fill(), (unsigned long)_Val).failed())

  0004c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00051	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00054	8a 54 31 40	 mov	 dl, BYTE PTR [ecx+esi+64]
  00058	8b 4c 31 38	 mov	 ecx, DWORD PTR [ecx+esi+56]
  0005c	88 5d d0	 mov	 BYTE PTR $T89563[ebp], bl
  0005f	0f b7 5d 08	 movzx	 ebx, WORD PTR __Val$[ebp]
  00063	53		 push	 ebx
  00064	88 55 e0	 mov	 BYTE PTR $T89578[ebp], dl
  00067	ff 75 e0	 push	 DWORD PTR $T89578[ebp]
  0006a	8b 17		 mov	 edx, DWORD PTR [edi]
  0006c	03 c6		 add	 eax, esi
  0006e	50		 push	 eax
  0006f	51		 push	 ecx
  00070	ff 75 d0	 push	 DWORD PTR $T89563[ebp]
  00073	8d 45 d0	 lea	 eax, DWORD PTR $T89564[ebp]
  00076	50		 push	 eax
  00077	8b cf		 mov	 ecx, edi
  00079	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0007d	ff 52 18	 call	 DWORD PTR [edx+24]
  00080	33 db		 xor	 ebx, ebx
  00082	38 5d d0	 cmp	 BYTE PTR $T89564[ebp], bl
  00085	74 07		 je	 SHORT $LN1@operator@6

; 272  : 				_State |= ios_base::badbit;

  00087	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN1@operator@6:
  0008e	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
$LN12@operator@6:

; 274  : 			}
; 275  : 
; 276  : 		_Myios::setstate(_State);

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00096	53		 push	 ebx
  00097	ff 75 e8	 push	 DWORD PTR __State$[ebp]
  0009a	03 ce		 add	 ecx, esi
  0009c	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 277  : 		return (*this);

  000a1	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  000a5	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000a8	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000ad	8b c6		 mov	 eax, esi

; 278  : 		}

  000af	e8 00 00 00 00	 call	 __EH_epilog3
  000b4	c2 04 00	 ret	 4
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$0:

; 273  : 			_CATCH_IO_END

  000b7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	8b 01		 mov	 eax, DWORD PTR [ecx]
  000bc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000bf	03 c1		 add	 eax, ecx
  000c1	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000c4	33 d2		 xor	 edx, edx
  000c6	83 c9 04	 or	 ecx, 4
  000c9	39 50 38	 cmp	 DWORD PTR [eax+56], edx
  000cc	75 03		 jne	 SHORT $LN33@operator@6
  000ce	83 c9 04	 or	 ecx, 4
$LN33@operator@6:
  000d1	83 e1 17	 and	 ecx, 23			; 00000017H
  000d4	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000d7	85 48 10	 test	 DWORD PTR [eax+16], ecx
  000da	75 10		 jne	 SHORT $LN42@operator@6
  000dc	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edx
  000df	b8 00 00 00 00	 mov	 eax, $LN13@operator@6
  000e4	c3		 ret	 0
$LN13@operator@6:
  000e5	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000e8	33 db		 xor	 ebx, ebx
  000ea	eb a5		 jmp	 SHORT $LN12@operator@6
$LN42@operator@6:
  000ec	52		 push	 edx
  000ed	52		 push	 edx
  000ee	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN97@operator@6:
$LN96@operator@6:
  000f3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T89560[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$13 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$13
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
$T89912 = -48						; size = 8
$T89911 = -48						; size = 8
__Ok$ = -40						; size = 8
$T89930 = -32						; size = 1
$T89906 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 281  : 		{	// insert an int

  00000	6a 24		 push	 36			; 00000024H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 282  : 		ios_base::iostate _State = ios_base::goodbit;

  00011	33 db		 xor	 ebx, ebx

; 283  : 		const sentry _Ok(*this);

  00013	56		 push	 esi
  00014	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00017	89 5d e8	 mov	 DWORD PTR __State$[ebp], ebx
  0001a	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0001f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 284  : 
; 285  : 		if (_Ok)

  00022	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00025	74 66		 je	 SHORT $LN14@operator@7

; 286  : 			{	// state okay, use facet to insert
; 287  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00027	8d 45 e4	 lea	 eax, DWORD PTR $T89906[ebp]
  0002a	50		 push	 eax
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00030	03 ce		 add	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00037	50		 push	 eax
  00038	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0003c	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00041	59		 pop	 ecx
  00042	8d 4d e4	 lea	 ecx, DWORD PTR $T89906[ebp]
  00045	8b f8		 mov	 edi, eax
  00047	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 288  : 			ios_base::fmtflags _Bfl =
; 289  : 				ios_base::flags() & ios_base::basefield;

  0004c	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 290  : 			long _Tmp = (_Bfl == ios_base::oct
; 291  : 				|| _Bfl == ios_base::hex)
; 292  : 				? (long)(unsigned int)_Val : (long)_Val;
; 293  : 
; 294  : 			_TRY_IO_BEGIN
; 295  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 296  : 				_Myios::fill(), _Tmp).failed())

  0004e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00051	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00054	8a 54 31 40	 mov	 dl, BYTE PTR [ecx+esi+64]
  00058	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  0005b	8b 4c 31 38	 mov	 ecx, DWORD PTR [ecx+esi+56]
  0005f	88 55 e0	 mov	 BYTE PTR $T89930[ebp], dl
  00062	ff 75 e0	 push	 DWORD PTR $T89930[ebp]
  00065	8b 17		 mov	 edx, DWORD PTR [edi]
  00067	03 c6		 add	 eax, esi
  00069	50		 push	 eax
  0006a	51		 push	 ecx
  0006b	88 5d d0	 mov	 BYTE PTR $T89911[ebp], bl
  0006e	ff 75 d0	 push	 DWORD PTR $T89911[ebp]
  00071	8d 45 d0	 lea	 eax, DWORD PTR $T89912[ebp]
  00074	50		 push	 eax
  00075	8b cf		 mov	 ecx, edi
  00077	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0007b	ff 52 1c	 call	 DWORD PTR [edx+28]
  0007e	38 5d d0	 cmp	 BYTE PTR $T89912[ebp], bl
  00081	74 07		 je	 SHORT $LN1@operator@7

; 297  : 				_State |= ios_base::badbit;

  00083	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN1@operator@7:
  0008a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
$LN14@operator@7:

; 299  : 			}
; 300  : 
; 301  : 		_Myios::setstate(_State);

  0008d	8b 06		 mov	 eax, DWORD PTR [esi]
  0008f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00092	53		 push	 ebx
  00093	ff 75 e8	 push	 DWORD PTR __State$[ebp]
  00096	03 ce		 add	 ecx, esi
  00098	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 302  : 		return (*this);

  0009d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  000a1	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000a4	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000a9	8b c6		 mov	 eax, esi

; 303  : 		}

  000ab	e8 00 00 00 00	 call	 __EH_epilog3
  000b0	c2 04 00	 ret	 4
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0:

; 298  : 			_CATCH_IO_END

  000b3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000bb	03 c1		 add	 eax, ecx
  000bd	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000c0	33 db		 xor	 ebx, ebx
  000c2	83 c9 04	 or	 ecx, 4
  000c5	39 58 38	 cmp	 DWORD PTR [eax+56], ebx
  000c8	75 03		 jne	 SHORT $LN37@operator@7
  000ca	83 c9 04	 or	 ecx, 4
$LN37@operator@7:
  000cd	83 e1 17	 and	 ecx, 23			; 00000017H
  000d0	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000d3	85 48 10	 test	 DWORD PTR [eax+16], ecx
  000d6	75 10		 jne	 SHORT $LN46@operator@7
  000d8	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  000db	b8 00 00 00 00	 mov	 eax, $LN15@operator@7
  000e0	c3		 ret	 0
$LN15@operator@7:
  000e1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000e4	33 db		 xor	 ebx, ebx
  000e6	eb a5		 jmp	 SHORT $LN14@operator@7
$LN46@operator@7:
  000e8	53		 push	 ebx
  000e9	53		 push	 ebx
  000ea	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN100@operator@7:
$LN99@operator@7:
  000ef	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T89906[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$13 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$13
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
_TEXT	SEGMENT
$T90261 = -48						; size = 8
$T90260 = -48						; size = 8
__Ok$ = -40						; size = 8
$T90275 = -32						; size = 1
$T90257 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 306  : 		{	// insert an unsigned int

  00000	6a 24		 push	 36			; 00000024H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 307  : 		ios_base::iostate _State = ios_base::goodbit;

  00011	33 db		 xor	 ebx, ebx

; 308  : 		const sentry _Ok(*this);

  00013	56		 push	 esi
  00014	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00017	89 5d e8	 mov	 DWORD PTR __State$[ebp], ebx
  0001a	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0001f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 309  : 
; 310  : 		if (_Ok)

  00022	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00025	74 66		 je	 SHORT $LN12@operator@8

; 311  : 			{	// state okay, use facet to insert
; 312  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00027	8d 45 e4	 lea	 eax, DWORD PTR $T90257[ebp]
  0002a	50		 push	 eax
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00030	03 ce		 add	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00037	50		 push	 eax
  00038	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0003c	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00041	59		 pop	 ecx
  00042	8d 4d e4	 lea	 ecx, DWORD PTR $T90257[ebp]
  00045	8b f8		 mov	 edi, eax
  00047	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 313  : 
; 314  : 			_TRY_IO_BEGIN
; 315  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 316  : 				_Myios::fill(), (unsigned long)_Val).failed())

  0004c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00051	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00054	8a 54 31 40	 mov	 dl, BYTE PTR [ecx+esi+64]
  00058	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  0005b	8b 4c 31 38	 mov	 ecx, DWORD PTR [ecx+esi+56]
  0005f	88 55 e0	 mov	 BYTE PTR $T90275[ebp], dl
  00062	ff 75 e0	 push	 DWORD PTR $T90275[ebp]
  00065	8b 17		 mov	 edx, DWORD PTR [edi]
  00067	03 c6		 add	 eax, esi
  00069	50		 push	 eax
  0006a	51		 push	 ecx
  0006b	88 5d d0	 mov	 BYTE PTR $T90260[ebp], bl
  0006e	ff 75 d0	 push	 DWORD PTR $T90260[ebp]
  00071	8d 45 d0	 lea	 eax, DWORD PTR $T90261[ebp]
  00074	50		 push	 eax
  00075	8b cf		 mov	 ecx, edi
  00077	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0007b	ff 52 18	 call	 DWORD PTR [edx+24]
  0007e	38 5d d0	 cmp	 BYTE PTR $T90261[ebp], bl
  00081	74 07		 je	 SHORT $LN1@operator@8

; 317  : 				_State |= ios_base::badbit;

  00083	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN1@operator@8:
  0008a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
$LN12@operator@8:

; 319  : 			}
; 320  : 
; 321  : 		_Myios::setstate(_State);

  0008d	8b 06		 mov	 eax, DWORD PTR [esi]
  0008f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00092	53		 push	 ebx
  00093	ff 75 e8	 push	 DWORD PTR __State$[ebp]
  00096	03 ce		 add	 ecx, esi
  00098	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 322  : 		return (*this);

  0009d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  000a1	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000a4	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000a9	8b c6		 mov	 eax, esi

; 323  : 		}

  000ab	e8 00 00 00 00	 call	 __EH_epilog3
  000b0	c2 04 00	 ret	 4
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$0:

; 318  : 			_CATCH_IO_END

  000b3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000bb	03 c1		 add	 eax, ecx
  000bd	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000c0	33 db		 xor	 ebx, ebx
  000c2	83 c9 04	 or	 ecx, 4
  000c5	39 58 38	 cmp	 DWORD PTR [eax+56], ebx
  000c8	75 03		 jne	 SHORT $LN33@operator@8
  000ca	83 c9 04	 or	 ecx, 4
$LN33@operator@8:
  000cd	83 e1 17	 and	 ecx, 23			; 00000017H
  000d0	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000d3	85 48 10	 test	 DWORD PTR [eax+16], ecx
  000d6	75 10		 jne	 SHORT $LN42@operator@8
  000d8	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  000db	b8 00 00 00 00	 mov	 eax, $LN13@operator@8
  000e0	c3		 ret	 0
$LN13@operator@8:
  000e1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000e4	33 db		 xor	 ebx, ebx
  000e6	eb a5		 jmp	 SHORT $LN12@operator@8
$LN42@operator@8:
  000e8	53		 push	 ebx
  000e9	53		 push	 ebx
  000ea	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN96@operator@8:
$LN95@operator@8:
  000ef	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T90257[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$13 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$13
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
_TEXT	SEGMENT
$T90606 = -48						; size = 8
$T90605 = -48						; size = 8
__Ok$ = -40						; size = 8
$T90620 = -32						; size = 1
$T90602 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 346  : 		{	// insert an unsigned long

  00000	6a 24		 push	 36			; 00000024H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 347  : 		ios_base::iostate _State = ios_base::goodbit;

  00011	33 db		 xor	 ebx, ebx

; 348  : 		const sentry _Ok(*this);

  00013	56		 push	 esi
  00014	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00017	89 5d e8	 mov	 DWORD PTR __State$[ebp], ebx
  0001a	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0001f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 349  : 
; 350  : 		if (_Ok)

  00022	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00025	74 66		 je	 SHORT $LN12@operator@9

; 351  : 			{	// state okay, use facet to insert
; 352  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00027	8d 45 e4	 lea	 eax, DWORD PTR $T90602[ebp]
  0002a	50		 push	 eax
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00030	03 ce		 add	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00037	50		 push	 eax
  00038	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0003c	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00041	59		 pop	 ecx
  00042	8d 4d e4	 lea	 ecx, DWORD PTR $T90602[ebp]
  00045	8b f8		 mov	 edi, eax
  00047	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 353  : 
; 354  : 			_TRY_IO_BEGIN
; 355  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 356  : 				_Myios::fill(), _Val).failed())

  0004c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00051	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00054	8a 54 31 40	 mov	 dl, BYTE PTR [ecx+esi+64]
  00058	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  0005b	8b 4c 31 38	 mov	 ecx, DWORD PTR [ecx+esi+56]
  0005f	88 55 e0	 mov	 BYTE PTR $T90620[ebp], dl
  00062	ff 75 e0	 push	 DWORD PTR $T90620[ebp]
  00065	8b 17		 mov	 edx, DWORD PTR [edi]
  00067	03 c6		 add	 eax, esi
  00069	50		 push	 eax
  0006a	51		 push	 ecx
  0006b	88 5d d0	 mov	 BYTE PTR $T90605[ebp], bl
  0006e	ff 75 d0	 push	 DWORD PTR $T90605[ebp]
  00071	8d 45 d0	 lea	 eax, DWORD PTR $T90606[ebp]
  00074	50		 push	 eax
  00075	8b cf		 mov	 ecx, edi
  00077	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0007b	ff 52 18	 call	 DWORD PTR [edx+24]
  0007e	38 5d d0	 cmp	 BYTE PTR $T90606[ebp], bl
  00081	74 07		 je	 SHORT $LN1@operator@9

; 357  : 				_State |= ios_base::badbit;

  00083	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN1@operator@9:
  0008a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
$LN12@operator@9:

; 359  : 			}
; 360  : 
; 361  : 		_Myios::setstate(_State);

  0008d	8b 06		 mov	 eax, DWORD PTR [esi]
  0008f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00092	53		 push	 ebx
  00093	ff 75 e8	 push	 DWORD PTR __State$[ebp]
  00096	03 ce		 add	 ecx, esi
  00098	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 362  : 		return (*this);

  0009d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  000a1	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000a4	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000a9	8b c6		 mov	 eax, esi

; 363  : 		}

  000ab	e8 00 00 00 00	 call	 __EH_epilog3
  000b0	c2 04 00	 ret	 4
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$0:

; 358  : 			_CATCH_IO_END

  000b3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000bb	03 c1		 add	 eax, ecx
  000bd	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000c0	33 db		 xor	 ebx, ebx
  000c2	83 c9 04	 or	 ecx, 4
  000c5	39 58 38	 cmp	 DWORD PTR [eax+56], ebx
  000c8	75 03		 jne	 SHORT $LN33@operator@9
  000ca	83 c9 04	 or	 ecx, 4
$LN33@operator@9:
  000cd	83 e1 17	 and	 ecx, 23			; 00000017H
  000d0	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000d3	85 48 10	 test	 DWORD PTR [eax+16], ecx
  000d6	75 10		 jne	 SHORT $LN42@operator@9
  000d8	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  000db	b8 00 00 00 00	 mov	 eax, $LN13@operator@9
  000e0	c3		 ret	 0
$LN13@operator@9:
  000e1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000e4	33 db		 xor	 ebx, ebx
  000e6	eb a5		 jmp	 SHORT $LN12@operator@9
$LN42@operator@9:
  000e8	53		 push	 ebx
  000e9	53		 push	 ebx
  000ea	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN96@operator@9:
$LN95@operator@9:
  000ef	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T90602[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z ; std::basic_ostream<char,std::char_traits<char> >::put
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__catchsym$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$0
__tryblocktable$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$12
__unwindtable$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
_TEXT	SEGMENT
__Ok$ = -32						; size = 8
_this$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ch$ = 8						; size = 1
?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::put, COMDAT
; _this$ = ecx

; 525  : 		{	// insert a character

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 526  : 		ios_base::iostate _State = ios_base::goodbit;

  00011	33 db		 xor	 ebx, ebx

; 527  : 		const sentry _Ok(*this);

  00013	56		 push	 esi
  00014	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00017	89 5d ec	 mov	 DWORD PTR __State$[ebp], ebx
  0001a	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0001f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 528  : 
; 529  : 		if (!_Ok)

  00022	38 5d e4	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00025	75 09		 jne	 SHORT $LN4@put

; 530  : 			_State |= ios_base::badbit;

  00027	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4

; 531  : 		else

  0002e	eb 59		 jmp	 SHORT $LN11@put
$LN4@put:

; 532  : 			{	// state okay, insert character
; 533  : 			_TRY_IO_BEGIN
; 534  : 			if (_Traits::eq_int_type(_Traits::eof(),
; 535  : 				_Myios::rdbuf()->sputc(_Ch)))

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00035	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00038	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  0003c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00040	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  00045	83 f8 ff	 cmp	 eax, -1
  00048	75 07		 jne	 SHORT $LN1@put

; 536  : 				_State |= ios_base::badbit;

  0004a	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN1@put:
  00051	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00054	eb 33		 jmp	 SHORT $LN11@put
__catch$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$0:

; 537  : 			_CATCH_IO_END

  00056	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005e	03 c1		 add	 eax, ecx
  00060	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00063	33 db		 xor	 ebx, ebx
  00065	83 c9 04	 or	 ecx, 4
  00068	39 58 38	 cmp	 DWORD PTR [eax+56], ebx
  0006b	75 03		 jne	 SHORT $LN27@put
  0006d	83 c9 04	 or	 ecx, 4
$LN27@put:
  00070	83 e1 17	 and	 ecx, 23			; 00000017H
  00073	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00076	85 48 10	 test	 DWORD PTR [eax+16], ecx
  00079	75 34		 jne	 SHORT $LN36@put
  0007b	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0007e	b8 00 00 00 00	 mov	 eax, $LN88@put
  00083	c3		 ret	 0
$LN88@put:
  00084	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00087	33 db		 xor	 ebx, ebx
$LN11@put:

; 538  : 			}
; 539  : 
; 540  : 		_Myios::setstate(_State);

  00089	8b 06		 mov	 eax, DWORD PTR [esi]
  0008b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008e	53		 push	 ebx
  0008f	ff 75 ec	 push	 DWORD PTR __State$[ebp]
  00092	03 ce		 add	 ecx, esi
  00094	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 541  : 		return (*this);

  00099	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  0009d	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000a0	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000a5	8b c6		 mov	 eax, esi

; 542  : 		}

  000a7	e8 00 00 00 00	 call	 __EH_epilog3
  000ac	c2 04 00	 ret	 4

; 537  : 			_CATCH_IO_END

$LN36@put:
  000af	53		 push	 ebx
  000b0	53		 push	 ebx
  000b1	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN91@put:
$LN90@put:
  000b6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::put
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 910  : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 911  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 912  : 		if (_Count != 0)
; 913  : 			_DEBUG_POINTER(_Ptr);
; 914  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 915  : 
; 916  : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	53		 push	 ebx
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 1c		 je	 SHORT $LN2@assign@2

; 917  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN7@assign@2
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN8@assign@2
$LN7@assign@2:
  0001e	8b c6		 mov	 eax, esi
$LN8@assign@2:
  00020	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00023	2b d8		 sub	 ebx, eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002e	eb 3f		 jmp	 SHORT $LN3@assign@2
$LN2@assign@2:
  00030	57		 push	 edi

; 918  : 
; 919  : 		if (_Grow(_Count))

  00031	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00034	6a 00		 push	 0
  00036	57		 push	 edi
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0003e	84 c0		 test	 al, al
  00040	74 2a		 je	 SHORT $LN21@assign@2

; 920  : 			{	// make room and assign new stuff
; 921  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

  00042	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00046	72 04		 jb	 SHORT $LN11@assign@2
  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	eb 02		 jmp	 SHORT $LN12@assign@2
$LN11@assign@2:
  0004c	8b c6		 mov	 eax, esi
$LN12@assign@2:
  0004e	57		 push	 edi
  0004f	53		 push	 ebx
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _memcpy
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 922  : 			_Eos(_Count);

  00059	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0005d	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00060	72 04		 jb	 SHORT $LN19@assign@2
  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	eb 02		 jmp	 SHORT $LN20@assign@2
$LN19@assign@2:
  00066	8b c6		 mov	 eax, esi
$LN20@assign@2:
  00068	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN21@assign@2:

; 923  : 			}
; 924  : 		return (*this);

  0006c	8b c6		 mov	 eax, esi
  0006e	5f		 pop	 edi
$LN3@assign@2:
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 925  : 		}

  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??_C@_01KGKMHCOC@e?$AA@				; `string'
PUBLIC	??_C@_01DDCIFGEA@E?$AA@				; `string'
PUBLIC	__Count$GSCopy$
PUBLIC	__Trailing$GSCopy$
PUBLIC	__Afterpoint$GSCopy$
PUBLIC	__Beforepoint$GSCopy$
PUBLIC	__Fill$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
EXTRN	_strcspn:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT ??_C@_01KGKMHCOC@e?$AA@
CONST	SEGMENT
??_C@_01KGKMHCOC@e?$AA@ DB 'e', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT
??_C@_01DDCIFGEA@E?$AA@ DB 'E', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$2
__ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -140				; size = 4
$T91552 = -136						; size = 8
$T91322 = -132						; size = 4
__Kseparator$ = -128					; size = 1
__Fill$GSCopy$ = -124					; size = 1
__Prefix$ = -120					; size = 4
$T91340 = -116						; size = 8
$T91331 = -116						; size = 8
$T91330 = -116						; size = 8
$T91329 = -116						; size = 8
$T91328 = -116						; size = 8
__Eptr$ = -112						; size = 4
$T91339 = -108						; size = 8
$T91338 = -108						; size = 8
$T91335 = -108						; size = 8
$T91334 = -108						; size = 8
$T91333 = -108						; size = 8
$T91535 = -104						; size = 1
__Punct_fac$ = -104					; size = 4
__Afterpoint$GSCopy$ = -100				; size = 4
__Enders$ = -96						; size = 3
__Beforepoint$GSCopy$ = -92				; size = 4
__Trailing$GSCopy$ = -88				; size = 4
_this$GSCopy$ = -84					; size = 4
__Count$GSCopy$ = -80					; size = 4
__Fillcount$ = -76					; size = 4
__Off$85202 = -76					; size = 4
__Pointptr$ = -76					; size = 4
__Grouping$ = -72					; size = 28
__Groupstring$ = -44					; size = 28
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Beforepoint$ = 36					; size = 4
__Afterpoint$ = 40					; size = 4
__Trailing$ = 44					; size = 4
__Count$ = 48						; size = 4
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput, COMDAT

; 1333 : 		{	// put formatted floating-point to _Dest

  00000	68 80 00 00 00	 push	 128			; 00000080H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 1445 : 		_Iosbase.width(0);
; 1446 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 7d 18	 mov	 edi, DWORD PTR __Iosbase$[ebp]
  00015	8b 75 20	 mov	 esi, DWORD PTR __Buf$[ebp]
  00018	89 45 ac	 mov	 DWORD PTR _this$GSCopy$[ebp], eax
  0001b	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	89 85 74 ff ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  00024	8a 45 1c	 mov	 al, BYTE PTR __Fill$[ebp]
  00027	88 45 84	 mov	 BYTE PTR __Fill$GSCopy$[ebp], al
  0002a	8b 45 24	 mov	 eax, DWORD PTR __Beforepoint$[ebp]
  0002d	89 45 a4	 mov	 DWORD PTR __Beforepoint$GSCopy$[ebp], eax
  00030	8b 45 28	 mov	 eax, DWORD PTR __Afterpoint$[ebp]
  00033	89 45 9c	 mov	 DWORD PTR __Afterpoint$GSCopy$[ebp], eax
  00036	8b 45 2c	 mov	 eax, DWORD PTR __Trailing$[ebp]
  00039	89 45 a8	 mov	 DWORD PTR __Trailing$GSCopy$[ebp], eax
  0003c	8b 45 30	 mov	 eax, DWORD PTR __Count$[ebp]
  0003f	89 45 b0	 mov	 DWORD PTR __Count$GSCopy$[ebp], eax
  00042	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR $T91322[ebp]
  00048	50		 push	 eax
  00049	8b cf		 mov	 ecx, edi
  0004b	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00050	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0005a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0005e	59		 pop	 ecx
  0005f	8b d8		 mov	 ebx, eax
  00061	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T91322[ebp]
  00067	89 5d 98	 mov	 DWORD PTR __Punct_fac$[ebp], ebx
  0006a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  0006f	8d 45 b8	 lea	 eax, DWORD PTR __Grouping$[ebp]
  00072	50		 push	 eax
  00073	8b cb		 mov	 ecx, ebx
  00075	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
  0007a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0007c	8b cb		 mov	 ecx, ebx
  0007e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00085	ff 50 08	 call	 DWORD PTR [eax+8]
  00088	33 db		 xor	 ebx, ebx
  0008a	88 45 80	 mov	 BYTE PTR __Kseparator$[ebp], al
  0008d	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH
  00094	89 5d e4	 mov	 DWORD PTR __Groupstring$[ebp+16], ebx
  00097	88 5d d4	 mov	 BYTE PTR __Groupstring$[ebp], bl
  0009a	8a 06		 mov	 al, BYTE PTR [esi]
  0009c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000a0	3c 2b		 cmp	 al, 43			; 0000002bH
  000a2	74 07		 je	 SHORT $LN19@Fput

; 1334 : 		_DEBUG_POINTER(_Dest);
; 1335 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);
; 1336 : 		const string _Grouping = _Punct_fac.grouping();
; 1337 : 		const _Elem _Kseparator = _Punct_fac.thousands_sep();
; 1338 : 		string _Groupstring;
; 1339 : 		const _Elem _E0 = _MAKLOCCHR(_Elem, '0', _Cvt);
; 1340 : 		size_t _Prefix = _Buf[0] == '+' || _Buf[0] == '-' ? 1 : 0;

  000a4	89 5d 88	 mov	 DWORD PTR __Prefix$[ebp], ebx
  000a7	3c 2d		 cmp	 al, 45			; 0000002dH
  000a9	75 07		 jne	 SHORT $LN20@Fput
$LN19@Fput:
  000ab	c7 45 88 01 00
	00 00		 mov	 DWORD PTR __Prefix$[ebp], 1
$LN20@Fput:

; 1341 : 
; 1342 : 		char _Enders[3];
; 1343 : 		_Enders[0] = _CSTD localeconv()->decimal_point[0];

  000b2	e8 00 00 00 00	 call	 _localeconv
  000b7	8b 00		 mov	 eax, DWORD PTR [eax]

; 1344 : 		_Enders[1] = 'e';
; 1345 : 		_Enders[2] = '\0';
; 1346 : 
; 1347 : 		const char *_Eptr = (const char *)_CSTD memchr(_Buf,
; 1348 : 			'e', _Count);	// find exponent

  000b9	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  000bc	8a 00		 mov	 al, BYTE PTR [eax]
  000be	6a 65		 push	 101			; 00000065H
  000c0	56		 push	 esi
  000c1	88 45 a0	 mov	 BYTE PTR __Enders$[ebp], al
  000c4	66 c7 45 a1 65
	00		 mov	 WORD PTR __Enders$[ebp+1], 101 ; 00000065H
  000ca	e8 00 00 00 00	 call	 _memchr

; 1349 : 		const char *_Pointptr = (const char *)_CSTD memchr(_Buf,
; 1350 : 			_Enders[0], _Count);	// find decimal point

  000cf	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  000d2	89 45 90	 mov	 DWORD PTR __Eptr$[ebp], eax
  000d5	0f be 45 a0	 movsx	 eax, BYTE PTR __Enders$[ebp]
  000d9	50		 push	 eax
  000da	56		 push	 esi
  000db	e8 00 00 00 00	 call	 _memchr
  000e0	83 c4 18	 add	 esp, 24			; 00000018H
  000e3	89 45 b4	 mov	 DWORD PTR __Pointptr$[ebp], eax

; 1351 : 		if (_Pointptr == 0)

  000e6	3b c3		 cmp	 eax, ebx
  000e8	75 03		 jne	 SHORT $LN16@Fput

; 1352 : 			_Trailing = 0;

  000ea	89 5d a8	 mov	 DWORD PTR __Trailing$GSCopy$[ebp], ebx
$LN16@Fput:

; 1353 : 
; 1354 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  000ed	83 7d cc 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  000f1	8b 45 b8	 mov	 eax, DWORD PTR __Grouping$[ebp]
  000f4	73 03		 jae	 SHORT $LN63@Fput
  000f6	8d 45 b8	 lea	 eax, DWORD PTR __Grouping$[ebp]
$LN63@Fput:
  000f9	80 38 7f	 cmp	 BYTE PTR [eax], 127	; 0000007fH
  000fc	0f 84 0b 01 00
	00		 je	 $LN88@Fput
  00102	83 7d cc 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  00106	8b 45 b8	 mov	 eax, DWORD PTR __Grouping$[ebp]
  00109	73 03		 jae	 SHORT $LN69@Fput
  0010b	8d 45 b8	 lea	 eax, DWORD PTR __Grouping$[ebp]
$LN69@Fput:
  0010e	80 38 00	 cmp	 BYTE PTR [eax], 0
  00111	0f 8e f6 00 00
	00		 jle	 $LN88@Fput

; 1355 : 			{	// grouping specified, add thousands separators
; 1356 : 			_Groupstring.append(_Buf, _Count);	// assemble field into string

  00117	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  0011a	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0011d	56		 push	 esi
  0011e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1357 : 			if (_Eptr == 0)

  00123	8b 45 90	 mov	 eax, DWORD PTR __Eptr$[ebp]
  00126	3b c3		 cmp	 eax, ebx
  00128	75 0f		 jne	 SHORT $LN14@Fput

; 1358 : 				_Groupstring.append(_Trailing, '0');

  0012a	6a 30		 push	 48			; 00000030H
  0012c	ff 75 a8	 push	 DWORD PTR __Trailing$GSCopy$[ebp]
  0012f	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00132	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1359 : 			else

  00137	eb 28		 jmp	 SHORT $LN13@Fput
$LN14@Fput:

; 1360 : 				{	/* dispose of any zeros before exponent */
; 1361 : 				if (_Pointptr == 0)

  00139	39 5d b4	 cmp	 DWORD PTR __Pointptr$[ebp], ebx
  0013c	75 13		 jne	 SHORT $LN12@Fput

; 1362 : 					{	/* no point but exponent, put scaling zeros */
; 1363 : 					_Groupstring.append(_Beforepoint, '0');

  0013e	6a 30		 push	 48			; 00000030H
  00140	ff 75 a4	 push	 DWORD PTR __Beforepoint$GSCopy$[ebp]
  00143	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00146	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1364 : 					_Beforepoint = 0;

  0014b	8b 45 90	 mov	 eax, DWORD PTR __Eptr$[ebp]
  0014e	89 5d a4	 mov	 DWORD PTR __Beforepoint$GSCopy$[ebp], ebx
$LN12@Fput:

; 1365 : 					}
; 1366 : 				_Groupstring.insert(_Eptr - _Buf, _Trailing, '0');

  00151	6a 30		 push	 48			; 00000030H
  00153	ff 75 a8	 push	 DWORD PTR __Trailing$GSCopy$[ebp]
  00156	2b c6		 sub	 eax, esi
  00158	50		 push	 eax
  00159	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0015c	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
$LN13@Fput:

; 1367 : 				}
; 1368 : 			_Trailing = 0;
; 1369 : 
; 1370 : 			if (_Pointptr == 0)
; 1371 : 				_Groupstring.append(_Beforepoint, '0');

  00161	6a 30		 push	 48			; 00000030H
  00163	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00166	39 5d b4	 cmp	 DWORD PTR __Pointptr$[ebp], ebx
  00169	75 0a		 jne	 SHORT $LN11@Fput
  0016b	ff 75 a4	 push	 DWORD PTR __Beforepoint$GSCopy$[ebp]
  0016e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1372 : 			else

  00173	eb 25		 jmp	 SHORT $LN10@Fput
$LN11@Fput:

; 1373 : 				{	// fill in zeros around decimal point
; 1374 : 				_Groupstring.insert(_Pointptr - _Buf + 1, _Afterpoint, '0');

  00175	8b 5d b4	 mov	 ebx, DWORD PTR __Pointptr$[ebp]
  00178	ff 75 9c	 push	 DWORD PTR __Afterpoint$GSCopy$[ebp]
  0017b	2b de		 sub	 ebx, esi
  0017d	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1375 : 				_Groupstring.insert(_Pointptr - _Buf, _Beforepoint, '0');

  00186	6a 30		 push	 48			; 00000030H
  00188	ff 75 a4	 push	 DWORD PTR __Beforepoint$GSCopy$[ebp]
  0018b	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0018e	53		 push	 ebx
  0018f	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1376 : 				_Afterpoint = 0;

  00194	83 65 9c 00	 and	 DWORD PTR __Afterpoint$GSCopy$[ebp], 0
  00198	33 db		 xor	 ebx, ebx
$LN10@Fput:

; 1377 : 				}
; 1378 : 			_Beforepoint = 0;
; 1379 : 
; 1380 : 			const char *_Pg = _Grouping.c_str();

  0019a	83 7d cc 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  0019e	8b 75 b8	 mov	 esi, DWORD PTR __Grouping$[ebp]
  001a1	89 5d a4	 mov	 DWORD PTR __Beforepoint$GSCopy$[ebp], ebx
  001a4	73 03		 jae	 SHORT $LN75@Fput
  001a6	8d 75 b8	 lea	 esi, DWORD PTR __Grouping$[ebp]
$LN75@Fput:

; 1381 : 			size_t _Off = _CSTD strcspn(&_Groupstring[0], &_Enders[0]);

  001a9	83 7d e8 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
  001ad	8b 45 d4	 mov	 eax, DWORD PTR __Groupstring$[ebp]
  001b0	73 03		 jae	 SHORT $LN81@Fput
  001b2	8d 45 d4	 lea	 eax, DWORD PTR __Groupstring$[ebp]
$LN81@Fput:
  001b5	8d 4d a0	 lea	 ecx, DWORD PTR __Enders$[ebp]
  001b8	51		 push	 ecx
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 _strcspn
  001bf	59		 pop	 ecx
  001c0	59		 pop	 ecx
  001c1	89 45 b4	 mov	 DWORD PTR __Off$85202[ebp], eax

; 1382 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1383 : 				&& (size_t)*_Pg < _Off - _Prefix)

  001c4	eb 2c		 jmp	 SHORT $LN7@Fput
$LN9@Fput:
  001c6	84 c0		 test	 al, al
  001c8	7e 2e		 jle	 SHORT $LN8@Fput
  001ca	8b 4d b4	 mov	 ecx, DWORD PTR __Off$85202[ebp]
  001cd	2b 4d 88	 sub	 ecx, DWORD PTR __Prefix$[ebp]
  001d0	0f be c0	 movsx	 eax, al
  001d3	3b c1		 cmp	 eax, ecx
  001d5	73 21		 jae	 SHORT $LN8@Fput

; 1384 : 				{	// add a NUL to mark thousands separator
; 1385 : 				_Groupstring.insert(_Off -= *_Pg, (size_t)1, '\0');

  001d7	29 45 b4	 sub	 DWORD PTR __Off$85202[ebp], eax
  001da	53		 push	 ebx
  001db	6a 01		 push	 1
  001dd	ff 75 b4	 push	 DWORD PTR __Off$85202[ebp]
  001e0	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  001e3	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1386 : 				if ('\0' < _Pg[1])

  001e8	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  001eb	80 38 00	 cmp	 BYTE PTR [eax], 0
  001ee	7e 02		 jle	 SHORT $LN7@Fput

; 1387 : 					++_Pg;	// not last group, advance

  001f0	8b f0		 mov	 esi, eax
$LN7@Fput:

; 1382 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1383 : 				&& (size_t)*_Pg < _Off - _Prefix)

  001f2	8a 06		 mov	 al, BYTE PTR [esi]
  001f4	3c 7f		 cmp	 al, 127			; 0000007fH
  001f6	75 ce		 jne	 SHORT $LN9@Fput
$LN8@Fput:

; 1388 : 				}
; 1389 : 
; 1390 : 			_Buf = &_Groupstring[0];

  001f8	83 7d e8 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
  001fc	8b 75 d4	 mov	 esi, DWORD PTR __Groupstring$[ebp]
  001ff	73 03		 jae	 SHORT $LN87@Fput
  00201	8d 75 d4	 lea	 esi, DWORD PTR __Groupstring$[ebp]
$LN87@Fput:

; 1391 : 			_Trailing = 0;
; 1392 : 			_Count = _Groupstring.size();

  00204	8b 45 e4	 mov	 eax, DWORD PTR __Groupstring$[ebp+16]
  00207	89 5d a8	 mov	 DWORD PTR __Trailing$GSCopy$[ebp], ebx
  0020a	89 45 b0	 mov	 DWORD PTR __Count$GSCopy$[ebp], eax
$LN88@Fput:

; 1393 : 			}
; 1394 : 
; 1395 : 		size_t _Fillcount = _Beforepoint + _Afterpoint + _Trailing + _Count;

  0020d	8b 45 a8	 mov	 eax, DWORD PTR __Trailing$GSCopy$[ebp]
  00210	03 45 b0	 add	 eax, DWORD PTR __Count$GSCopy$[ebp]

; 1396 : 		_Fillcount = _Iosbase.width() <= 0
; 1397 : 			|| (size_t)_Iosbase.width() <= _Fillcount
; 1398 : 				? 0 : (size_t)_Iosbase.width() - _Fillcount;

  00213	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  00216	03 45 9c	 add	 eax, DWORD PTR __Afterpoint$GSCopy$[ebp]
  00219	03 45 a4	 add	 eax, DWORD PTR __Beforepoint$GSCopy$[ebp]
  0021c	39 5f 24	 cmp	 DWORD PTR [edi+36], ebx
  0021f	7c 11		 jl	 SHORT $LN21@Fput
  00221	7f 04		 jg	 SHORT $LN125@Fput
  00223	3b cb		 cmp	 ecx, ebx
  00225	76 0b		 jbe	 SHORT $LN21@Fput
$LN125@Fput:
  00227	3b c8		 cmp	 ecx, eax
  00229	76 07		 jbe	 SHORT $LN21@Fput
  0022b	2b c8		 sub	 ecx, eax
  0022d	89 4d b4	 mov	 DWORD PTR __Fillcount$[ebp], ecx
  00230	eb 03		 jmp	 SHORT $LN22@Fput
$LN21@Fput:
  00232	89 5d b4	 mov	 DWORD PTR __Fillcount$[ebp], ebx
$LN22@Fput:

; 1399 : 		ios_base::fmtflags _Adjustfield =
; 1400 : 			_Iosbase.flags() & ios_base::adjustfield;

  00235	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00238	25 c0 01 00 00	 and	 eax, 448		; 000001c0H

; 1401 : 		if (_Adjustfield != ios_base::left
; 1402 : 			&& _Adjustfield != ios_base::internal)

  0023d	83 f8 40	 cmp	 eax, 64			; 00000040H
  00240	74 5c		 je	 SHORT $LN4@Fput
  00242	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H

; 1403 : 			{	// put leading fill
; 1404 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);
; 1405 : 			_Fillcount = 0;

  00247	75 2c		 jne	 SHORT $LN3@Fput

; 1406 : 			}
; 1407 : 		else if (_Adjustfield == ios_base::internal)
; 1408 : 			{	// put internal fill
; 1409 : 			if (0 < _Prefix)

  00249	39 5d 88	 cmp	 DWORD PTR __Prefix$[ebp], ebx
  0024c	76 27		 jbe	 SHORT $LN3@Fput

; 1410 : 				{	// but first put sign
; 1411 : 				_Dest = _Putc(_Dest, _Buf, 1);

  0024e	6a 01		 push	 1
  00250	56		 push	 esi
  00251	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00254	8d 45 8c	 lea	 eax, DWORD PTR $T91328[ebp]
  00257	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0025a	50		 push	 eax
  0025b	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  0025e	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  00263	8b 08		 mov	 ecx, DWORD PTR [eax]
  00265	83 c4 18	 add	 esp, 24			; 00000018H
  00268	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  0026b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1412 : 				++_Buf, --_Count;

  0026e	46		 inc	 esi
  0026f	ff 4d b0	 dec	 DWORD PTR __Count$GSCopy$[ebp]
  00272	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
$LN3@Fput:

; 1413 : 				}
; 1414 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00275	ff 75 b4	 push	 DWORD PTR __Fillcount$[ebp]
  00278	8d 45 8c	 lea	 eax, DWORD PTR $T91329[ebp]
  0027b	ff 75 84	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  0027e	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00281	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00284	50		 push	 eax
  00285	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  00288	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0028d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0028f	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00292	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1415 : 			_Fillcount = 0;

  00295	89 5d b4	 mov	 DWORD PTR __Fillcount$[ebp], ebx
  00298	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  0029b	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@Fput:

; 1416 : 			}
; 1417 : 
; 1418 : 		_Pointptr = (const char *)_CSTD memchr(_Buf,
; 1419 : 			_Enders[0], _Count);	// find decimal point again

  0029e	0f be 45 a0	 movsx	 eax, BYTE PTR __Enders$[ebp]
  002a2	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  002a5	50		 push	 eax
  002a6	56		 push	 esi
  002a7	e8 00 00 00 00	 call	 _memchr
  002ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1420 : 		if (_Pointptr != 0)

  002af	3b c3		 cmp	 eax, ebx
  002b1	0f 84 b3 00 00
	00		 je	 $LN2@Fput

; 1421 : 			{	// has decimal point, put pieces and zero fills
; 1422 : 			size_t _Fracoffset = _Pointptr - _Buf + 1;
; 1423 : 			_Dest = _Putgrouped(_Dest, _Buf, _Fracoffset - 1, _Kseparator);

  002b7	ff 75 80	 push	 DWORD PTR __Kseparator$[ebp]
  002ba	2b c6		 sub	 eax, esi
  002bc	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
  002bf	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  002c2	50		 push	 eax
  002c3	56		 push	 esi
  002c4	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  002c7	8d 45 8c	 lea	 eax, DWORD PTR $T91330[ebp]
  002ca	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  002cd	50		 push	 eax
  002ce	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  002d1	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  002d6	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1424 : 			_Dest = _Rep(_Dest, _E0, _Beforepoint);

  002d8	ff 75 a4	 push	 DWORD PTR __Beforepoint$GSCopy$[ebp]
  002db	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  002de	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002e1	6a 30		 push	 48			; 00000030H
  002e3	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  002e6	ff 70 04	 push	 DWORD PTR [eax+4]
  002e9	ff 30		 push	 DWORD PTR [eax]
  002eb	8d 45 8c	 lea	 eax, DWORD PTR $T91331[ebp]
  002ee	50		 push	 eax
  002ef	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  002f2	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  002f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f9	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  002fc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1425 : 			_Dest = _Rep(_Dest, _Punct_fac.decimal_point(), 1);

  002ff	8b 4d 98	 mov	 ecx, DWORD PTR __Punct_fac$[ebp]
  00302	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00305	8b 01		 mov	 eax, DWORD PTR [ecx]
  00307	83 c4 34	 add	 esp, 52			; 00000034H
  0030a	ff 50 04	 call	 DWORD PTR [eax+4]
  0030d	88 45 98	 mov	 BYTE PTR $T91535[ebp], al
  00310	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00313	ff 75 98	 push	 DWORD PTR $T91535[ebp]
  00316	89 85 78 ff ff
	ff		 mov	 DWORD PTR $T91552[ebp], eax
  0031c	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  0031f	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T91552[ebp]
  00325	89 85 7c ff ff
	ff		 mov	 DWORD PTR $T91552[ebp+4], eax
  0032b	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=

; 1426 : 			_Dest = _Rep(_Dest, _E0, _Afterpoint);

  00330	ff 75 9c	 push	 DWORD PTR __Afterpoint$GSCopy$[ebp]
  00333	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR $T91552[ebp+4]
  00339	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR $T91552[ebp]
  0033f	6a 30		 push	 48			; 00000030H
  00341	51		 push	 ecx
  00342	50		 push	 eax
  00343	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00346	8d 45 94	 lea	 eax, DWORD PTR $T91333[ebp]
  00349	50		 push	 eax
  0034a	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  0034d	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  00350	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00355	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1427 : 			_Buf += _Fracoffset, _Count -= _Fracoffset;

  00357	29 5d b0	 sub	 DWORD PTR __Count$GSCopy$[ebp], ebx
  0035a	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  0035d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00360	83 c4 18	 add	 esp, 24			; 00000018H
  00363	03 f3		 add	 esi, ebx
  00365	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00368	33 db		 xor	 ebx, ebx
$LN2@Fput:

; 1428 : 			}
; 1429 : 
; 1430 : 		_Eptr = (const char *)_CSTD memchr(_Buf,
; 1431 : 			'e', _Count);	// find exponent again

  0036a	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  0036d	6a 65		 push	 101			; 00000065H
  0036f	56		 push	 esi
  00370	e8 00 00 00 00	 call	 _memchr
  00375	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1432 : 		if (_Eptr != 0)

  00378	3b c3		 cmp	 eax, ebx
  0037a	0f 84 8b 00 00
	00		 je	 $LN1@Fput

; 1433 : 			{	// has exponent field, put it out
; 1434 : 			size_t _Expoffset = _Eptr - _Buf + 1;
; 1435 : 			_Dest = _Putgrouped(_Dest, _Buf, _Expoffset - 1, _Kseparator);

  00380	ff 75 80	 push	 DWORD PTR __Kseparator$[ebp]
  00383	2b c6		 sub	 eax, esi
  00385	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
  00388	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  0038b	50		 push	 eax
  0038c	56		 push	 esi
  0038d	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00390	8d 45 94	 lea	 eax, DWORD PTR $T91334[ebp]
  00393	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00396	50		 push	 eax
  00397	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  0039a	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  0039f	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1436 : 			_Dest = _Rep(_Dest, _E0, _Trailing), _Trailing = 0;

  003a1	ff 75 a8	 push	 DWORD PTR __Trailing$GSCopy$[ebp]
  003a4	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  003a7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003aa	6a 30		 push	 48			; 00000030H
  003ac	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  003af	ff 70 04	 push	 DWORD PTR [eax+4]
  003b2	ff 30		 push	 DWORD PTR [eax]
  003b4	8d 45 94	 lea	 eax, DWORD PTR $T91335[ebp]
  003b7	50		 push	 eax
  003b8	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  003bb	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  003c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c2	83 65 a8 00	 and	 DWORD PTR __Trailing$GSCopy$[ebp], 0
  003c6	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  003c9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003cc	83 c4 34	 add	 esp, 52			; 00000034H

; 1437 : 			_Dest = _Putc(_Dest, _Iosbase.flags() & ios_base::uppercase
; 1438 : 				? "E" : "e", 1);

  003cf	f6 47 14 04	 test	 BYTE PTR [edi+20], 4
  003d3	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  003d6	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01DDCIFGEA@E?$AA@
  003db	75 05		 jne	 SHORT $LN24@Fput
  003dd	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01KGKMHCOC@e?$AA@
$LN24@Fput:
  003e2	6a 01		 push	 1
  003e4	51		 push	 ecx
  003e5	ff 70 04	 push	 DWORD PTR [eax+4]
  003e8	ff 30		 push	 DWORD PTR [eax]
  003ea	8d 45 94	 lea	 eax, DWORD PTR $T91338[ebp]
  003ed	50		 push	 eax
  003ee	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  003f1	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  003f6	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1439 : 			_Buf += _Expoffset, _Count -= _Expoffset;

  003f8	29 5d b0	 sub	 DWORD PTR __Count$GSCopy$[ebp], ebx
  003fb	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  003fe	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00401	83 c4 18	 add	 esp, 24			; 00000018H
  00404	03 f3		 add	 esi, ebx
  00406	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00409	33 db		 xor	 ebx, ebx
$LN1@Fput:

; 1440 : 			}
; 1441 : 
; 1442 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1443 : 			_Kseparator);	// put leftover field

  0040b	ff 75 80	 push	 DWORD PTR __Kseparator$[ebp]
  0040e	8d 45 94	 lea	 eax, DWORD PTR $T91339[ebp]
  00411	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  00414	56		 push	 esi
  00415	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00418	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0041b	50		 push	 eax
  0041c	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  0041f	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  00424	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1444 : 		_Dest = _Rep(_Dest, _E0, _Trailing);	// put trailing zeros

  00426	ff 75 a8	 push	 DWORD PTR __Trailing$GSCopy$[ebp]
  00429	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  0042c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0042f	6a 30		 push	 48			; 00000030H
  00431	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  00434	ff 70 04	 push	 DWORD PTR [eax+4]
  00437	ff 30		 push	 DWORD PTR [eax]
  00439	8d 45 8c	 lea	 eax, DWORD PTR $T91340[ebp]
  0043c	50		 push	 eax
  0043d	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  00440	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00445	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1445 : 		_Iosbase.width(0);
; 1446 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00447	ff 75 b4	 push	 DWORD PTR __Fillcount$[ebp]
  0044a	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  0044d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00450	ff 75 84	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00453	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00456	50		 push	 eax
  00457	51		 push	 ecx
  00458	ff b5 74 ff ff
	ff		 push	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0045e	89 5f 20	 mov	 DWORD PTR [edi+32], ebx
  00461	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  00464	89 5f 24	 mov	 DWORD PTR [edi+36], ebx
  00467	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0046c	83 c4 4c	 add	 esp, 76			; 0000004cH
  0046f	53		 push	 ebx
  00470	6a 01		 push	 1
  00472	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00475	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0047a	53		 push	 ebx
  0047b	6a 01		 push	 1
  0047d	8d 4d b8	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  00480	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00485	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]

; 1447 : 		}

  0048b	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00490	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$0:
  00000	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T91322[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$1:
  0000b	8d 4d b8	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$2:
  00013	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 8a 70 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-144]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
PUBLIC	__Count$GSCopy$
PUBLIC	__Fill$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
EXTRN	_memmove_s:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1
__ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
_TEXT	SEGMENT
$T91611 = -88						; size = 4
__Punct_fac$ = -84					; size = 4
___$ReturnUdt$GSCopy$ = -80				; size = 4
$T91622 = -76						; size = 8
__Pg$85256 = -72					; size = 4
$T91621 = -68						; size = 8
$T91619 = -68						; size = 8
tv379 = -64						; size = 4
$T91686 = -64						; size = 1
__Fill$GSCopy$ = -60					; size = 1
_this$GSCopy$ = -56					; size = 4
__Prefix$ = -52						; size = 4
__Count$GSCopy$ = -48					; size = 4
__Grouping$ = -44					; size = 28
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput, COMDAT

; 1479 : 		{	// put formatted integer to _Dest

  00000	6a 4c		 push	 76			; 0000004cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 1527 : 		_Iosbase.width(0);
; 1528 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0000c	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 5d 18	 mov	 ebx, DWORD PTR __Iosbase$[ebp]
  00012	8b 7d 24	 mov	 edi, DWORD PTR __Count$[ebp]
  00015	8b 75 20	 mov	 esi, DWORD PTR __Buf$[ebp]
  00018	89 45 c8	 mov	 DWORD PTR _this$GSCopy$[ebp], eax
  0001b	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	89 45 b0	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  00021	8a 45 1c	 mov	 al, BYTE PTR __Fill$[ebp]
  00024	88 45 c4	 mov	 BYTE PTR __Fill$GSCopy$[ebp], al
  00027	8d 45 a8	 lea	 eax, DWORD PTR $T91611[ebp]
  0002a	50		 push	 eax
  0002b	8b cb		 mov	 ecx, ebx
  0002d	89 7d d0	 mov	 DWORD PTR __Count$GSCopy$[ebp], edi
  00030	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00035	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0003f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00043	59		 pop	 ecx
  00044	8d 4d a8	 lea	 ecx, DWORD PTR $T91611[ebp]
  00047	89 45 ac	 mov	 DWORD PTR __Punct_fac$[ebp], eax
  0004a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  0004f	8b 4d ac	 mov	 ecx, DWORD PTR __Punct_fac$[ebp]
  00052	8d 45 d4	 lea	 eax, DWORD PTR __Grouping$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
  0005b	8a 06		 mov	 al, BYTE PTR [esi]
  0005d	33 c9		 xor	 ecx, ecx
  0005f	41		 inc	 ecx
  00060	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ecx
  00063	3c 2b		 cmp	 al, 43			; 0000002bH
  00065	74 22		 je	 SHORT $LN10@Iput

; 1480 : 		_DEBUG_POINTER(_Dest);
; 1481 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);
; 1482 : 		const string _Grouping = _Punct_fac.grouping();
; 1483 : 		const size_t _Prefix = *_Buf == '+' || *_Buf == '-' ? 1
; 1484 : 			: *_Buf == '0' && (_Buf[1] == 'x' || _Buf[1] == 'X') ? 2
; 1485 : 			: 0;

  00067	3c 2d		 cmp	 al, 45			; 0000002dH
  00069	74 1e		 je	 SHORT $LN10@Iput
  0006b	3c 30		 cmp	 al, 48			; 00000030H
  0006d	75 14		 jne	 SHORT $LN12@Iput
  0006f	8a 46 01	 mov	 al, BYTE PTR [esi+1]
  00072	3c 78		 cmp	 al, 120			; 00000078H
  00074	74 04		 je	 SHORT $LN11@Iput
  00076	3c 58		 cmp	 al, 88			; 00000058H
  00078	75 09		 jne	 SHORT $LN12@Iput
$LN11@Iput:
  0007a	c7 45 cc 02 00
	00 00		 mov	 DWORD PTR __Prefix$[ebp], 2
  00081	eb 09		 jmp	 SHORT $LN14@Iput
$LN12@Iput:
  00083	83 65 cc 00	 and	 DWORD PTR __Prefix$[ebp], 0
  00087	eb 03		 jmp	 SHORT $LN14@Iput
$LN10@Iput:
  00089	89 4d cc	 mov	 DWORD PTR __Prefix$[ebp], ecx
$LN14@Iput:

; 1486 : 
; 1487 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  0008c	83 7d e8 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  00090	8b 4d d4	 mov	 ecx, DWORD PTR __Grouping$[ebp]
  00093	8b c1		 mov	 eax, ecx
  00095	73 03		 jae	 SHORT $LN24@Iput
  00097	8d 45 d4	 lea	 eax, DWORD PTR __Grouping$[ebp]
$LN24@Iput:
  0009a	80 38 7f	 cmp	 BYTE PTR [eax], 127	; 0000007fH
  0009d	74 6c		 je	 SHORT $LN5@Iput
  0009f	83 7d e8 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  000a3	8b c1		 mov	 eax, ecx
  000a5	73 03		 jae	 SHORT $LN30@Iput
  000a7	8d 45 d4	 lea	 eax, DWORD PTR __Grouping$[ebp]
$LN30@Iput:
  000aa	80 38 00	 cmp	 BYTE PTR [eax], 0
  000ad	7e 5c		 jle	 SHORT $LN5@Iput

; 1488 : 			{	// grouping specified, add thousands separators
; 1489 : 			const char *_Pg = _Grouping.c_str();

  000af	83 7d e8 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  000b3	72 05		 jb	 SHORT $LN35@Iput
  000b5	89 4d b8	 mov	 DWORD PTR __Pg$85256[ebp], ecx
  000b8	eb 48		 jmp	 SHORT $LN4@Iput
$LN35@Iput:
  000ba	8d 45 d4	 lea	 eax, DWORD PTR __Grouping$[ebp]

; 1490 : 			size_t _Off = _Count;
; 1491 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1492 : 				&& (size_t)*_Pg < _Off - _Prefix)

  000bd	eb 40		 jmp	 SHORT $LN59@Iput
$LL6@Iput:
  000bf	84 c0		 test	 al, al
  000c1	7e 48		 jle	 SHORT $LN5@Iput
  000c3	8b cf		 mov	 ecx, edi
  000c5	2b 4d cc	 sub	 ecx, DWORD PTR __Prefix$[ebp]
  000c8	0f be c0	 movsx	 eax, al
  000cb	3b c1		 cmp	 eax, ecx
  000cd	73 3c		 jae	 SHORT $LN5@Iput

; 1493 : 				{	// add a NUL to mark thousands separator
; 1494 : 				_Off -= *_Pg;

  000cf	2b f8		 sub	 edi, eax

; 1495 : 
; 1496 : 				__analysis_assume(_Count + 1 > _Off);
; 1497 : 				_CRT_SECURE_MEMMOVE(&_Buf[_Off + 1], _Count + 1 - _Off,

  000d1	8b 45 d0	 mov	 eax, DWORD PTR __Count$GSCopy$[ebp]
  000d4	2b c7		 sub	 eax, edi
  000d6	40		 inc	 eax
  000d7	50		 push	 eax
  000d8	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
  000db	51		 push	 ecx
  000dc	50		 push	 eax
  000dd	8d 44 3e 01	 lea	 eax, DWORD PTR [esi+edi+1]
  000e1	50		 push	 eax
  000e2	89 4d c0	 mov	 DWORD PTR tv379[ebp], ecx
  000e5	e8 00 00 00 00	 call	 _memmove_s

; 1498 : 					&_Buf[_Off], _Count + 1 - _Off);
; 1499 : 
; 1500 : 				_Buf[_Off] = '\0', ++_Count;

  000ea	8b 45 c0	 mov	 eax, DWORD PTR tv379[ebp]
  000ed	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1501 : 				if ('\0' < _Pg[1])

  000f0	8b 45 b8	 mov	 eax, DWORD PTR __Pg$85256[ebp]
  000f3	83 c4 10	 add	 esp, 16			; 00000010H
  000f6	ff 45 d0	 inc	 DWORD PTR __Count$GSCopy$[ebp]
  000f9	40		 inc	 eax
  000fa	80 38 00	 cmp	 BYTE PTR [eax], 0
  000fd	7e 03		 jle	 SHORT $LN4@Iput
$LN59@Iput:

; 1502 : 					++_Pg;	// not last group, advance

  000ff	89 45 b8	 mov	 DWORD PTR __Pg$85256[ebp], eax
$LN4@Iput:

; 1490 : 			size_t _Off = _Count;
; 1491 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1492 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00102	8b 45 b8	 mov	 eax, DWORD PTR __Pg$85256[ebp]
  00105	8a 00		 mov	 al, BYTE PTR [eax]
  00107	3c 7f		 cmp	 al, 127			; 0000007fH
  00109	75 b4		 jne	 SHORT $LL6@Iput
$LN5@Iput:

; 1503 : 				}
; 1504 : 			}
; 1505 : 
; 1506 : 		size_t _Fillcount = _Iosbase.width() <= 0
; 1507 : 			|| (size_t)_Iosbase.width() <= _Count
; 1508 : 				? 0 : (size_t)_Iosbase.width() - _Count;

  0010b	83 7b 24 00	 cmp	 DWORD PTR [ebx+36], 0
  0010f	8b 7b 20	 mov	 edi, DWORD PTR [ebx+32]
  00112	7c 10		 jl	 SHORT $LN15@Iput
  00114	7f 04		 jg	 SHORT $LN55@Iput
  00116	85 ff		 test	 edi, edi
  00118	74 0a		 je	 SHORT $LN15@Iput
$LN55@Iput:
  0011a	3b 7d d0	 cmp	 edi, DWORD PTR __Count$GSCopy$[ebp]
  0011d	76 05		 jbe	 SHORT $LN15@Iput
  0011f	2b 7d d0	 sub	 edi, DWORD PTR __Count$GSCopy$[ebp]
  00122	eb 02		 jmp	 SHORT $LN16@Iput
$LN15@Iput:
  00124	33 ff		 xor	 edi, edi
$LN16@Iput:

; 1509 : 
; 1510 : 		ios_base::fmtflags _Adjustfield =
; 1511 : 			_Iosbase.flags() & ios_base::adjustfield;

  00126	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00129	25 c0 01 00 00	 and	 eax, 448		; 000001c0H

; 1512 : 		if (_Adjustfield != ios_base::left
; 1513 : 			&& _Adjustfield != ios_base::internal)

  0012e	83 f8 40	 cmp	 eax, 64			; 00000040H
  00131	74 6e		 je	 SHORT $LN1@Iput
  00133	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H

; 1514 : 			{	// put leading fill
; 1515 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00138	8d 45 bc	 lea	 eax, DWORD PTR $T91619[ebp]
  0013b	74 18		 je	 SHORT $LN54@Iput
  0013d	57		 push	 edi
  0013e	ff 75 c4	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00141	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00144	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00147	50		 push	 eax
  00148	ff 75 c8	 push	 DWORD PTR _this$GSCopy$[ebp]
  0014b	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00150	83 c4 18	 add	 esp, 24			; 00000018H

; 1516 : 			_Fillcount = 0;

  00153	eb 3f		 jmp	 SHORT $LN60@Iput
$LN54@Iput:

; 1517 : 			}
; 1518 : 		else if (_Adjustfield == ios_base::internal)
; 1519 : 			{	// put internal fill
; 1520 : 			_Dest = _Putc(_Dest, _Buf, _Prefix);	// put prefix

  00155	ff 75 cc	 push	 DWORD PTR __Prefix$[ebp]
  00158	56		 push	 esi
  00159	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  0015c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0015f	50		 push	 eax
  00160	ff 75 c8	 push	 DWORD PTR _this$GSCopy$[ebp]
  00163	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  00168	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1521 : 			_Buf += _Prefix, _Count -= _Prefix;

  0016a	03 75 cc	 add	 esi, DWORD PTR __Prefix$[ebp]

; 1522 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount), _Fillcount = 0;

  0016d	57		 push	 edi
  0016e	ff 75 c4	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00171	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00174	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00177	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  0017a	ff 70 04	 push	 DWORD PTR [eax+4]
  0017d	8b 4d cc	 mov	 ecx, DWORD PTR __Prefix$[ebp]
  00180	ff 30		 push	 DWORD PTR [eax]
  00182	29 4d d0	 sub	 DWORD PTR __Count$GSCopy$[ebp], ecx
  00185	8d 45 bc	 lea	 eax, DWORD PTR $T91621[ebp]
  00188	50		 push	 eax
  00189	ff 75 c8	 push	 DWORD PTR _this$GSCopy$[ebp]
  0018c	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00191	83 c4 30	 add	 esp, 48			; 00000030H
$LN60@Iput:
  00194	8b 08		 mov	 ecx, DWORD PTR [eax]
  00196	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00199	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019c	33 ff		 xor	 edi, edi
  0019e	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
$LN1@Iput:

; 1523 : 			}
; 1524 : 
; 1525 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1526 : 			_Punct_fac.thousands_sep());	// put field

  001a1	8b 4d ac	 mov	 ecx, DWORD PTR __Punct_fac$[ebp]
  001a4	8b 01		 mov	 eax, DWORD PTR [ecx]
  001a6	ff 50 08	 call	 DWORD PTR [eax+8]
  001a9	88 45 c0	 mov	 BYTE PTR $T91686[ebp], al
  001ac	ff 75 c0	 push	 DWORD PTR $T91686[ebp]
  001af	8d 45 b4	 lea	 eax, DWORD PTR $T91622[ebp]
  001b2	ff 75 d0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  001b5	56		 push	 esi
  001b6	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  001b9	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  001bc	50		 push	 eax
  001bd	ff 75 c8	 push	 DWORD PTR _this$GSCopy$[ebp]
  001c0	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  001c5	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1527 : 		_Iosbase.width(0);
; 1528 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  001c7	57		 push	 edi
  001c8	ff 75 c4	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  001cb	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  001ce	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001d1	50		 push	 eax
  001d2	51		 push	 ecx
  001d3	ff 75 b0	 push	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  001d6	33 f6		 xor	 esi, esi
  001d8	ff 75 c8	 push	 DWORD PTR _this$GSCopy$[ebp]
  001db	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  001de	89 73 20	 mov	 DWORD PTR [ebx+32], esi
  001e1	89 73 24	 mov	 DWORD PTR [ebx+36], esi
  001e4	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  001e9	83 c4 34	 add	 esp, 52			; 00000034H
  001ec	56		 push	 esi
  001ed	6a 01		 push	 1
  001ef	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  001f2	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  001f7	8b 45 b0	 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]

; 1529 : 		}

  001fa	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001ff	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR $T91611[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 762  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 763  : 		return (assign(_Right));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 764  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
;	COMDAT ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z PROC ; std::endl, COMDAT

; 1004 : 	{	// insert newline and flush byte stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1005 : 	_Ostr.put('\n');

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00006	6a 0a		 push	 10			; 0000000aH
  00008	e8 00 00 00 00	 call	 ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z ; std::basic_ostream<char,std::char_traits<char> >::put

; 1006 : 	_Ostr.flush();

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00010	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush

; 1007 : 	return (_Ostr);

  00015	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 1008 : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ENDP ; std::endl
_TEXT	ENDS
PUBLIC	??_C@_0N@DKHDEAPM@Opened?5port?5?$AA@		; `string'
PUBLIC	??_C@_09PBBIDIFP@?5with?5fd?5?$AA@		; `string'
PUBLIC	??_C@_0BG@KCCGOCDO@Could?5not?5bind?5socket?$AA@ ; `string'
PUBLIC	??_C@_05FOJLDKAO@Port?5?$AA@			; `string'
PUBLIC	??_C@_0BN@JECINJLO@?5for?5receiving?5UDP?5is?5in?5use?$AA@ ; `string'
PUBLIC	??_C@_0CA@NBHADPNL@Cannot?5assign?5requested?5address?$AA@ ; `string'
PUBLIC	??_C@_0CA@PIKCJACA@Could?5not?5bind?5UDP?5receive?5port?$AA@ ; `string'
PUBLIC	??_C@_06OPIAHGOP@Error?$DN?$AA@			; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_02MDDDDAID@0x?$AA@			; `string'
PUBLIC	??_C@_0BG@FPCEBAPN@Binding?5to?5interface?5?$AA@ ; `string'
PUBLIC	??_C@_0BP@DHIAODIO@Could?5not?5create?5a?5UDP?5socket?3?$AA@ ; `string'
PUBLIC	_port$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?openPort@@YAIGI_N@Z				; openPort
EXTRN	__imp__closesocket@4:PROC
EXTRN	_strerror:PROC
EXTRN	__imp__bind@12:PROC
EXTRN	?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE ; std::clog
EXTRN	__imp__htons@4:PROC
EXTRN	__imp__htonl@4:PROC
EXTRN	?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE ; std::cerr
EXTRN	__imp__socket@12:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0N@DKHDEAPM@Opened?5port?5?$AA@
CONST	SEGMENT
??_C@_0N@DKHDEAPM@Opened?5port?5?$AA@ DB 'Opened port ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PBBIDIFP@?5with?5fd?5?$AA@
CONST	SEGMENT
??_C@_09PBBIDIFP@?5with?5fd?5?$AA@ DB ' with fd ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KCCGOCDO@Could?5not?5bind?5socket?$AA@
CONST	SEGMENT
??_C@_0BG@KCCGOCDO@Could?5not?5bind?5socket?$AA@ DB 'Could not bind socke'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05FOJLDKAO@Port?5?$AA@
CONST	SEGMENT
??_C@_05FOJLDKAO@Port?5?$AA@ DB 'Port ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JECINJLO@?5for?5receiving?5UDP?5is?5in?5use?$AA@
CONST	SEGMENT
??_C@_0BN@JECINJLO@?5for?5receiving?5UDP?5is?5in?5use?$AA@ DB ' for recei'
	DB	'ving UDP is in use', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NBHADPNL@Cannot?5assign?5requested?5address?$AA@
CONST	SEGMENT
??_C@_0CA@NBHADPNL@Cannot?5assign?5requested?5address?$AA@ DB 'Cannot ass'
	DB	'ign requested address', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PIKCJACA@Could?5not?5bind?5UDP?5receive?5port?$AA@
CONST	SEGMENT
??_C@_0CA@PIKCJACA@Could?5not?5bind?5UDP?5receive?5port?$AA@ DB 'Could no'
	DB	't bind UDP receive port', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OPIAHGOP@Error?$DN?$AA@
CONST	SEGMENT
??_C@_06OPIAHGOP@Error?$DN?$AA@ DB 'Error=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MDDDDAID@0x?$AA@
CONST	SEGMENT
??_C@_02MDDDDAID@0x?$AA@ DB '0x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FPCEBAPN@Binding?5to?5interface?5?$AA@
CONST	SEGMENT
??_C@_0BG@FPCEBAPN@Binding?5to?5interface?5?$AA@ DB 'Binding to interface'
	DB	' ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DHIAODIO@Could?5not?5create?5a?5UDP?5socket?3?$AA@
CONST	SEGMENT
??_C@_0BP@DHIAODIO@Could?5not?5create?5a?5UDP?5socket?3?$AA@ DB 'Could no'
	DB	't create a UDP socket:', 00H		; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\udp.cpp
CONST	ENDS
;	COMDAT ?openPort@@YAIGI_N@Z
_TEXT	SEGMENT
_fd$ = -28						; size = 4
_port$GSCopy$ = -24					; size = 2
_addr$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_port$ = 8						; size = 2
_interfaceIp$ = 12					; size = 4
_verbose$ = 16						; size = 1
?openPort@@YAIGI_N@Z PROC				; openPort, COMDAT

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	0f b7 45 08	 movzx	 eax, WORD PTR _port$[ebp]
  00014	53		 push	 ebx
  00015	57		 push	 edi
  00016	8b 7d 0c	 mov	 edi, DWORD PTR _interfaceIp$[ebp]

; 40   :    Socket fd;
; 41   :     
; 42   :    fd = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);

  00019	6a 11		 push	 17			; 00000011H
  0001b	6a 02		 push	 2
  0001d	6a 02		 push	 2

; 107  :    {
; 108  :       clog << "Opened port " << port << " with fd " << fd << endl;

  0001f	89 45 e8	 mov	 DWORD PTR _port$GSCopy$[ebp], eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__socket@12
  00028	8b d8		 mov	 ebx, eax
  0002a	89 5d e4	 mov	 DWORD PTR _fd$[ebp], ebx
  0002d	83 fb ff	 cmp	 ebx, -1
  00030	75 2d		 jne	 SHORT $LN12@openPort

; 43   :    if ( fd == INVALID_SOCKET )
; 44   :    {
; 45   :       int err = getErrno();
; 46   :       cerr << "Could not create a UDP socket:" << err << endl;

  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@DHIAODIO@Could?5not?5create?5a?5UDP?5socket?3?$AA@
  0003e	68 00 00 00 00	 push	 OFFSET ?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cerr
  00043	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00048	59		 pop	 ecx
  00049	59		 pop	 ecx
  0004a	8b c8		 mov	 ecx, eax
  0004c	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00057	59		 pop	 ecx

; 47   :       return INVALID_SOCKET;

  00058	0b c3		 or	 eax, ebx
  0005a	e9 be 01 00 00	 jmp	 $LN13@openPort
$LN12@openPort:
  0005f	56		 push	 esi

; 48   :    }
; 49   :     
; 50   :    struct sockaddr_in addr;
; 51   :    memset((char*) &(addr),0, sizeof((addr)));

  00060	6a 10		 push	 16			; 00000010H
  00062	8d 45 ec	 lea	 eax, DWORD PTR _addr$[ebp]
  00065	6a 00		 push	 0
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 _memset

; 52   :    addr.sin_family = AF_INET;
; 53   :    addr.sin_addr.s_addr = htonl(INADDR_ANY);

  0006d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__htonl@4
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH
  00076	6a 02		 push	 2
  00078	58		 pop	 eax
  00079	6a 00		 push	 0
  0007b	66 89 45 ec	 mov	 WORD PTR _addr$[ebp], ax
  0007f	ff d6		 call	 esi

; 54   :    addr.sin_port = htons(port);

  00081	ff 75 e8	 push	 DWORD PTR _port$GSCopy$[ebp]
  00084	89 45 f0	 mov	 DWORD PTR _addr$[ebp+4], eax
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4
  0008d	66 89 45 ee	 mov	 WORD PTR _addr$[ebp+2], ax

; 55   :     
; 56   :    if ( (interfaceIp != 0) && 
; 57   :         ( interfaceIp != 0x100007f ) )

  00091	85 ff		 test	 edi, edi
  00093	0f 84 87 00 00
	00		 je	 $LN49@openPort
  00099	81 ff 7f 00 00
	01		 cmp	 edi, 16777343		; 0100007fH
  0009f	74 7f		 je	 SHORT $LN49@openPort

; 58   :    {
; 59   :       addr.sin_addr.s_addr = htonl(interfaceIp);

  000a1	57		 push	 edi
  000a2	ff d6		 call	 esi

; 60   :       if (verbose )

  000a4	80 7d 10 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  000a8	89 45 f0	 mov	 DWORD PTR _addr$[ebp+4], eax
  000ab	74 73		 je	 SHORT $LN49@openPort

; 61   :       {
; 62   :          clog << "Binding to interface " 
; 63   :               << hex << "0x" << htonl(interfaceIp) << dec << endl;

  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FPCEBAPN@Binding?5to?5interface?5?$AA@
  000b2	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  000b7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000bc	8b d8		 mov	 ebx, eax
  000be	59		 pop	 ecx
  000bf	59		 pop	 ecx
  000c0	85 db		 test	 ebx, ebx
  000c2	74 07		 je	 SHORT $LN22@openPort
$LN21@openPort:
  000c4	8b 03		 mov	 eax, DWORD PTR [ebx]
  000c6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000c9	03 c3		 add	 eax, ebx
$LN22@openPort:
  000cb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000ce	81 e1 ff f9 ff
	ff		 and	 ecx, -1537		; fffff9ffH
  000d4	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  000da	57		 push	 edi
  000db	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  000de	ff d6		 call	 esi
  000e0	50		 push	 eax
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_02MDDDDAID@0x?$AA@
  000e6	53		 push	 ebx
  000e7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000ec	59		 pop	 ecx
  000ed	59		 pop	 ecx
  000ee	8b c8		 mov	 ecx, eax
  000f0	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  000f5	85 c0		 test	 eax, eax
  000f7	75 04		 jne	 SHORT $LN29@openPort
  000f9	33 c9		 xor	 ecx, ecx
  000fb	eb 07		 jmp	 SHORT $LN30@openPort
$LN29@openPort:
  000fd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ff	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00102	03 c8		 add	 ecx, eax
$LN30@openPort:
  00104	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00107	81 e2 ff f3 ff
	ff		 and	 edx, -3073		; fffff3ffH
  0010d	81 ca 00 02 00
	00		 or	 edx, 512		; 00000200H
  00113	50		 push	 eax
  00114	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  00117	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0011c	8b 5d e4	 mov	 ebx, DWORD PTR _fd$[ebp]
  0011f	59		 pop	 ecx
$LN49@openPort:

; 64   :       }
; 65   :    }
; 66   : 	
; 67   :     if ( ::bind( fd,(struct sockaddr*)&addr, sizeof(addr)) != 0 )

  00120	6a 10		 push	 16			; 00000010H
  00122	8d 45 ec	 lea	 eax, DWORD PTR _addr$[ebp]
  00125	50		 push	 eax
  00126	53		 push	 ebx
  00127	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__bind@12
  0012d	85 c0		 test	 eax, eax
  0012f	0f 84 a8 00 00
	00		 je	 $LN7@openPort

; 68   :    {
; 69   :       int e = getErrno();

  00135	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  0013b	8b f0		 mov	 esi, eax

; 70   :         
; 71   :       switch (e)

  0013d	83 e8 00	 sub	 eax, 0
  00140	74 77		 je	 SHORT $LN6@openPort
  00142	2d 40 27 00 00	 sub	 eax, 10048		; 00002740H
  00147	74 4d		 je	 SHORT $LN5@openPort
  00149	48		 dec	 eax
  0014a	74 3d		 je	 SHORT $LN4@openPort

; 94   :          }
; 95   :          break;
; 96   :          default:
; 97   :          {
; 98   :             cerr << "Could not bind UDP receive port"
; 99   :                  << "Error=" << e << " " << strerror(e) << endl;

  0014c	56		 push	 esi
  0014d	e8 00 00 00 00	 call	 _strerror
  00152	59		 pop	 ecx
  00153	50		 push	 eax
  00154	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  00159	56		 push	 esi
  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_06OPIAHGOP@Error?$DN?$AA@
  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@PIKCJACA@Could?5not?5bind?5UDP?5receive?5port?$AA@
  00164	68 00 00 00 00	 push	 OFFSET ?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cerr
  00169	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0016e	59		 pop	 ecx
  0016f	59		 pop	 ecx
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00176	59		 pop	 ecx
  00177	59		 pop	 ecx
  00178	8b c8		 mov	 ecx, eax
  0017a	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00185	59		 pop	 ecx
  00186	59		 pop	 ecx

; 100  : 			closesocket(fd);
; 101  :             return INVALID_SOCKET;

  00187	eb 2d		 jmp	 SHORT $LN53@openPort
$LN4@openPort:

; 84   :          }
; 85   :          break;
; 86   :          case EADDRNOTAVAIL:
; 87   :          {
; 88   :             if ( verbose ) 

  00189	80 7d 10 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  0018d	74 42		 je	 SHORT $LN43@openPort

; 89   :             {
; 90   :                cerr << "Cannot assign requested address" << endl;

  0018f	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NBHADPNL@Cannot?5assign?5requested?5address?$AA@

; 91   :             }
; 92   : 			closesocket(fd);
; 93   :             return INVALID_SOCKET;

  00194	eb 28		 jmp	 SHORT $LN52@openPort
$LN5@openPort:

; 78   :          }
; 79   :          case EADDRINUSE:
; 80   :          {
; 81   :             cerr << "Port " << port << " for receiving UDP is in use" << endl;

  00196	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JECINJLO@?5for?5receiving?5UDP?5is?5in?5use?$AA@
  0019b	ff 75 e8	 push	 DWORD PTR _port$GSCopy$[ebp]
  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_05FOJLDKAO@Port?5?$AA@
  001a3	68 00 00 00 00	 push	 OFFSET ?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cerr
  001a8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001ad	59		 pop	 ecx
  001ae	59		 pop	 ecx
  001af	8b c8		 mov	 ecx, eax
  001b1	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
$LN53@openPort:
  001b6	50		 push	 eax

; 82   :  			closesocket(fd);
; 83   :             return INVALID_SOCKET;

  001b7	eb 0a		 jmp	 SHORT $LN51@openPort
$LN6@openPort:

; 72   :       {
; 73   :          case 0:
; 74   :          {
; 75   :             cerr << "Could not bind socket" << endl;

  001b9	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KCCGOCDO@Could?5not?5bind?5socket?$AA@
$LN52@openPort:
  001be	68 00 00 00 00	 push	 OFFSET ?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cerr
$LN51@openPort:
  001c3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001c8	50		 push	 eax
  001c9	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  001ce	83 c4 0c	 add	 esp, 12			; 0000000cH

; 89   :             {
; 90   :                cerr << "Cannot assign requested address" << endl;

$LN43@openPort:

; 76   : 			closesocket(fd);

  001d1	53		 push	 ebx
  001d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 77   :             return INVALID_SOCKET;

  001d8	83 c8 ff	 or	 eax, -1
  001db	eb 3f		 jmp	 SHORT $LN50@openPort
$LN7@openPort:

; 102  :          }
; 103  :          break;
; 104  :       }
; 105  :    }
; 106  :    if ( verbose )

  001dd	80 7d 10 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  001e1	74 37		 je	 SHORT $LN47@openPort

; 107  :    {
; 108  :       clog << "Opened port " << port << " with fd " << fd << endl;

  001e3	53		 push	 ebx
  001e4	68 00 00 00 00	 push	 OFFSET ??_C@_09PBBIDIFP@?5with?5fd?5?$AA@
  001e9	ff 75 e8	 push	 DWORD PTR _port$GSCopy$[ebp]
  001ec	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DKHDEAPM@Opened?5port?5?$AA@
  001f1	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  001f6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001fb	59		 pop	 ecx
  001fc	59		 pop	 ecx
  001fd	8b c8		 mov	 ecx, eax
  001ff	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00204	50		 push	 eax
  00205	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0020a	59		 pop	 ecx
  0020b	59		 pop	 ecx
  0020c	8b c8		 mov	 ecx, eax
  0020e	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00213	50		 push	 eax
  00214	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00219	59		 pop	 ecx
$LN47@openPort:

; 109  :    }
; 110  :    
; 111  : 	
; 112  :    return fd;

  0021a	8b c3		 mov	 eax, ebx
$LN50@openPort:
  0021c	5e		 pop	 esi
$LN13@openPort:

; 113  : }

  0021d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00220	5f		 pop	 edi
  00221	33 cd		 xor	 ecx, ebp
  00223	5b		 pop	 ebx
  00224	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00229	c9		 leave
  0022a	c3		 ret	 0
?openPort@@YAIGI_N@Z ENDP				; openPort
_TEXT	ENDS
PUBLIC	??_C@_0CG@HDOFBOOA@Received?5a?5message?5that?5was?5too?5@ ; `string'
PUBLIC	??_C@_0BI@NEAPJBGK@socket?5closed?$DP?5zero?5len?$AA@ ; `string'
PUBLIC	??_C@_0BM@EFEGBLAH@socket?5closed?$DP?5negative?5len?$AA@ ; `string'
PUBLIC	??_C@_0BG@LECNPOPE@Error?5fd?5not?5a?5socket?$AA@ ; `string'
PUBLIC	??_C@_0CM@JDHENFOB@Error?5connection?5reset?5?9?5host?5no@ ; `string'
PUBLIC	??_C@_0O@JOHAKBEE@Socket?5Error?$DN?$AA@	; `string'
PUBLIC	_buf$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?getMessage@@YA_NIPADPAHPAIPAG_N@Z		; getMessage
EXTRN	__imp__ntohl@4:PROC
EXTRN	__imp__ntohs@4:PROC
EXTRN	__imp__recvfrom@24:PROC
;	COMDAT ??_C@_0CG@HDOFBOOA@Received?5a?5message?5that?5was?5too?5@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
CONST	SEGMENT
??_C@_0CG@HDOFBOOA@Received?5a?5message?5that?5was?5too?5@ DB 'Received a'
	DB	' message that was too large', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NEAPJBGK@socket?5closed?$DP?5zero?5len?$AA@
CONST	SEGMENT
??_C@_0BI@NEAPJBGK@socket?5closed?$DP?5zero?5len?$AA@ DB 'socket closed? '
	DB	'zero len', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EFEGBLAH@socket?5closed?$DP?5negative?5len?$AA@
CONST	SEGMENT
??_C@_0BM@EFEGBLAH@socket?5closed?$DP?5negative?5len?$AA@ DB 'socket clos'
	DB	'ed? negative len', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LECNPOPE@Error?5fd?5not?5a?5socket?$AA@
CONST	SEGMENT
??_C@_0BG@LECNPOPE@Error?5fd?5not?5a?5socket?$AA@ DB 'Error fd not a sock'
	DB	'et', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@JDHENFOB@Error?5connection?5reset?5?9?5host?5no@
CONST	SEGMENT
??_C@_0CM@JDHENFOB@Error?5connection?5reset?5?9?5host?5no@ DB 'Error conn'
	DB	'ection reset - host not reachable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JOHAKBEE@Socket?5Error?$DN?$AA@
CONST	SEGMENT
??_C@_0O@JOHAKBEE@Socket?5Error?$DN?$AA@ DB 'Socket Error=', 00H ; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\udp.cpp
CONST	ENDS
;	COMDAT ?getMessage@@YA_NIPADPAHPAIPAG_N@Z
_TEXT	SEGMENT
_fromLen$ = -32						; size = 4
_buf$GSCopy$ = -28					; size = 4
_originalSize$ = -24					; size = 4
_from$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_srcIp$ = 20						; size = 4
_srcPort$ = 24						; size = 4
_verbose$ = 28						; size = 1
?getMessage@@YA_NIPADPAHPAIPAG_N@Z PROC			; getMessage, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 18	 mov	 ebx, DWORD PTR _srcPort$[ebp]
  00017	56		 push	 esi
  00018	8b 75 10	 mov	 esi, DWORD PTR _len$[ebp]

; 121  : 	
; 122  :    int originalSize = *len;

  0001b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001d	57		 push	 edi
  0001e	8b 7d 14	 mov	 edi, DWORD PTR _srcIp$[ebp]

; 123  :    
; 124  :    struct sockaddr_in from;
; 125  :    int fromLen = sizeof(from);
; 126  : 	
; 127  :    *len = recvfrom(fd,
; 128  :                    buf,
; 129  :                    originalSize,
; 130  :                    0,
; 131  :                    (struct sockaddr *)&from,
; 132  :                    (socklen_t*)&fromLen);

  00021	8d 55 e0	 lea	 edx, DWORD PTR _fromLen$[ebp]
  00024	52		 push	 edx
  00025	8d 55 ec	 lea	 edx, DWORD PTR _from$[ebp]
  00028	52		 push	 edx
  00029	6a 00		 push	 0
  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00030	89 45 e4	 mov	 DWORD PTR _buf$GSCopy$[ebp], eax
  00033	89 4d e8	 mov	 DWORD PTR _originalSize$[ebp], ecx
  00036	c7 45 e0 10 00
	00 00		 mov	 DWORD PTR _fromLen$[ebp], 16 ; 00000010H
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__recvfrom@24
  00043	89 06		 mov	 DWORD PTR [esi], eax

; 133  : 	
; 134  :    if ( *len == SOCKET_ERROR )

  00045	83 f8 ff	 cmp	 eax, -1
  00048	75 5a		 jne	 SHORT $LN10@getMessage

; 135  :    {
; 136  :       int err = getErrno();

  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0

; 137  : 		
; 138  :       switch (err)

  00050	8b c8		 mov	 ecx, eax
  00052	81 e9 36 27 00
	00		 sub	 ecx, 10038		; 00002736H
  00058	74 2e		 je	 SHORT $LN7@getMessage
  0005a	83 e9 10	 sub	 ecx, 16			; 00000010H
  0005d	74 22		 je	 SHORT $LN6@getMessage

; 146  : 				
; 147  :          default:
; 148  :             cerr << "Socket Error=" << err << endl;

  0005f	50		 push	 eax
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JOHAKBEE@Socket?5Error?$DN?$AA@
  00065	68 00 00 00 00	 push	 OFFSET ?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cerr
  0006a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0006f	59		 pop	 ecx
  00070	59		 pop	 ecx
  00071	8b c8		 mov	 ecx, eax
  00073	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0007e	59		 pop	 ecx
  0007f	eb 1f		 jmp	 SHORT $LN19@getMessage
$LN6@getMessage:

; 142  :             break;
; 143  :          case ECONNRESET:
; 144  :             cerr << "Error connection reset - host not reachable" <<   endl;

  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@JDHENFOB@Error?5connection?5reset?5?9?5host?5no@

; 145  :             break;

  00086	eb 05		 jmp	 SHORT $LN27@getMessage
$LN7@getMessage:

; 139  :       {
; 140  :          case ENOTSOCK:
; 141  :             cerr << "Error fd not a socket" <<   endl;

  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@LECNPOPE@Error?5fd?5not?5a?5socket?$AA@
$LN27@getMessage:
  0008d	68 00 00 00 00	 push	 OFFSET ?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cerr
$LN29@getMessage:
  00092	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 146  : 				
; 147  :          default:
; 148  :             cerr << "Socket Error=" << err << endl;

$LN19@getMessage:

; 149  :       }
; 150  : 		
; 151  :       return false;

  000a0	32 c0		 xor	 al, al
  000a2	eb 50		 jmp	 SHORT $LN11@getMessage
$LN10@getMessage:

; 152  :    }
; 153  : 	
; 154  :    if ( *len < 0 )

  000a4	85 c0		 test	 eax, eax
  000a6	79 0c		 jns	 SHORT $LN28@getMessage

; 155  :    {
; 156  :       clog << "socket closed? negative len" << endl;

  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@EFEGBLAH@socket?5closed?$DP?5negative?5len?$AA@
$LN30@getMessage:
  000ad	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog

; 157  :       return false;

  000b2	eb de		 jmp	 SHORT $LN29@getMessage
$LN28@getMessage:

; 158  :    }
; 159  :     
; 160  :    if ( *len == 0 )

  000b4	75 07		 jne	 SHORT $LN3@getMessage

; 161  :    {
; 162  :       clog << "socket closed? zero len" << endl;

  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NEAPJBGK@socket?5closed?$DP?5zero?5len?$AA@

; 163  :       return false;

  000bb	eb f0		 jmp	 SHORT $LN30@getMessage
$LN3@getMessage:

; 164  :    }
; 165  :     
; 166  :    *srcPort = ntohs(from.sin_port);

  000bd	ff 75 ee	 push	 DWORD PTR _from$[ebp+2]
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ntohs@4

; 167  :    *srcIp = ntohl(from.sin_addr.s_addr);

  000c6	ff 75 f0	 push	 DWORD PTR _from$[ebp+4]
  000c9	66 89 03	 mov	 WORD PTR [ebx], ax
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ntohl@4
  000d2	89 07		 mov	 DWORD PTR [edi], eax

; 168  : 	
; 169  :    if ( (*len)+1 >= originalSize )

  000d4	8b 36		 mov	 esi, DWORD PTR [esi]
  000d6	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  000d9	3b 45 e8	 cmp	 eax, DWORD PTR _originalSize$[ebp]
  000dc	7c 0d		 jl	 SHORT $LN2@getMessage

; 170  :    {
; 171  :       if (verbose)

  000de	80 7d 1c 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  000e2	74 bc		 je	 SHORT $LN19@getMessage

; 172  :       {
; 173  :          clog << "Received a message that was too large" << endl;

  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@HDOFBOOA@Received?5a?5message?5that?5was?5too?5@

; 174  :       }
; 175  :       return false;

  000e9	eb c2		 jmp	 SHORT $LN30@getMessage
$LN2@getMessage:

; 176  :    }
; 177  :    buf[*len]=0;

  000eb	8b 45 e4	 mov	 eax, DWORD PTR _buf$GSCopy$[ebp]
  000ee	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0

; 178  :     
; 179  :    return true;

  000f2	b0 01		 mov	 al, 1
$LN11@getMessage:

; 180  : }

  000f4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	33 cd		 xor	 ecx, ebp
  000fb	5b		 pop	 ebx
  000fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00101	c9		 leave
  00102	c3		 ret	 0
?getMessage@@YA_NIPADPAHPAIPAG_N@Z ENDP			; getMessage
_TEXT	ENDS
PUBLIC	??_C@_05COMJBFDJ@only?5?$AA@			; `string'
PUBLIC	??_C@_08MHHFDANP@?5out?5of?5?$AA@		; `string'
PUBLIC	??_C@_0M@MKAHFHLD@?5bytes?5sent?$AA@		; `string'
PUBLIC	??_C@_0BF@HEDJHPAH@no?5data?5sent?5in?5send?$AA@ ; `string'
PUBLIC	??_C@_0BJ@FPBAHHGL@err?5EAFNOSUPPORT?5in?5send?$AA@ ; `string'
PUBLIC	??_C@_04GLMIAAFE@err?5?$AA@			; `string'
PUBLIC	??_C@_08HJNEDFEL@?5in?5send?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?sendMessage@@YA_NIPADHIG_N@Z			; sendMessage
EXTRN	__imp__sendto@24:PROC
EXTRN	__imp__send@16:PROC
;	COMDAT ??_C@_05COMJBFDJ@only?5?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
CONST	SEGMENT
??_C@_05COMJBFDJ@only?5?$AA@ DB 'only ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MHHFDANP@?5out?5of?5?$AA@
CONST	SEGMENT
??_C@_08MHHFDANP@?5out?5of?5?$AA@ DB ' out of ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MKAHFHLD@?5bytes?5sent?$AA@
CONST	SEGMENT
??_C@_0M@MKAHFHLD@?5bytes?5sent?$AA@ DB ' bytes sent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HEDJHPAH@no?5data?5sent?5in?5send?$AA@
CONST	SEGMENT
??_C@_0BF@HEDJHPAH@no?5data?5sent?5in?5send?$AA@ DB 'no data sent in send'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FPBAHHGL@err?5EAFNOSUPPORT?5in?5send?$AA@
CONST	SEGMENT
??_C@_0BJ@FPBAHHGL@err?5EAFNOSUPPORT?5in?5send?$AA@ DB 'err EAFNOSUPPORT '
	DB	'in send', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04GLMIAAFE@err?5?$AA@
CONST	SEGMENT
??_C@_04GLMIAAFE@err?5?$AA@ DB 'err ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HJNEDFEL@?5in?5send?$AA@
CONST	SEGMENT
??_C@_08HJNEDFEL@?5in?5send?$AA@ DB ' in send', 00H	; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\udp.cpp
CONST	ENDS
;	COMDAT ?sendMessage@@YA_NIPADHIG_N@Z
_TEXT	SEGMENT
_to$83751 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_buf$ = 12						; size = 4
_l$ = 16						; size = 4
_dstIp$ = 20						; size = 4
_dstPort$ = 24						; size = 2
_verbose$ = 28						; size = 1
?sendMessage@@YA_NIPADHIG_N@Z PROC			; sendMessage, COMDAT

; 187  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 10	 mov	 esi, DWORD PTR _l$[ebp]

; 188  :     
; 189  :    int s;
; 190  :    if ( dstPort == 0 )

  00015	33 db		 xor	 ebx, ebx
  00017	57		 push	 edi
  00018	8b 7d 0c	 mov	 edi, DWORD PTR _buf$[ebp]
  0001b	66 39 5d 18	 cmp	 WORD PTR _dstPort$[ebp], bx
  0001f	75 0e		 jne	 SHORT $LN11@sendMessag

; 191  :    {
; 192  :       // sending on a connected port 
; 193  : 		
; 194  :       s = send(fd,buf,l,0);

  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__send@16

; 195  :    }
; 196  :    else

  0002d	eb 41		 jmp	 SHORT $LN10@sendMessag
$LN11@sendMessag:

; 197  :    {
; 198  :         
; 199  :       struct sockaddr_in to;
; 200  :       int toLen = sizeof(to);
; 201  :       memset(&to,0,toLen);

  0002f	6a 10		 push	 16			; 00000010H
  00031	8d 45 ec	 lea	 eax, DWORD PTR _to$83751[ebp]
  00034	53		 push	 ebx
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _memset
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 202  :         
; 203  :       to.sin_family = AF_INET;

  0003e	6a 02		 push	 2
  00040	58		 pop	 eax

; 204  :       to.sin_port = htons(dstPort);

  00041	ff 75 18	 push	 DWORD PTR _dstPort$[ebp]
  00044	66 89 45 ec	 mov	 WORD PTR _to$83751[ebp], ax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4

; 205  :       to.sin_addr.s_addr = htonl(dstIp);

  0004e	ff 75 14	 push	 DWORD PTR _dstIp$[ebp]
  00051	66 89 45 ee	 mov	 WORD PTR _to$83751[ebp+2], ax
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htonl@4

; 206  :         
; 207  :       s = sendto(fd, buf, l, 0,(sockaddr*)&to, toLen);

  0005b	6a 10		 push	 16			; 00000010H
  0005d	89 45 f0	 mov	 DWORD PTR _to$83751[ebp+4], eax
  00060	8d 45 ec	 lea	 eax, DWORD PTR _to$83751[ebp]
  00063	50		 push	 eax
  00064	53		 push	 ebx
  00065	56		 push	 esi
  00066	57		 push	 edi
  00067	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sendto@24
$LN10@sendMessag:

; 208  :    }
; 209  :     
; 210  :    if ( s == SOCKET_ERROR )

  00070	83 f8 ff	 cmp	 eax, -1
  00073	0f 85 82 00 00
	00		 jne	 $LN9@sendMessag

; 211  :    {
; 212  :       int e = getErrno();

  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  0007f	8b f0		 mov	 esi, eax

; 213  :       switch (e)

  00081	81 fe 3f 27 00
	00		 cmp	 esi, 10047		; 0000273fH
  00087	74 56		 je	 SHORT $LN5@sendMessag
  00089	81 fe 4d 27 00
	00		 cmp	 esi, 10061		; 0000274dH
  0008f	74 66		 je	 SHORT $LN18@sendMessag
  00091	81 fe 4f 27 00
	00		 cmp	 esi, 10063		; 0000274fH
  00097	7e 08		 jle	 SHORT $LN4@sendMessag
  00099	81 fe 51 27 00
	00		 cmp	 esi, 10065		; 00002751H
  0009f	7e 56		 jle	 SHORT $LN18@sendMessag
$LN4@sendMessag:

; 225  :          }
; 226  :          break;
; 227  :          default:
; 228  :          {
; 229  :             cerr << "err " << e << " "  << strerror(e) << " in send" << endl;

  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_08HJNEDFEL@?5in?5send?$AA@
  000a6	56		 push	 esi
  000a7	e8 00 00 00 00	 call	 _strerror
  000ac	59		 pop	 ecx
  000ad	50		 push	 eax
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  000b3	56		 push	 esi
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_04GLMIAAFE@err?5?$AA@
  000b9	68 00 00 00 00	 push	 OFFSET ?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cerr
  000be	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000c3	59		 pop	 ecx
  000c4	59		 pop	 ecx
  000c5	8b c8		 mov	 ecx, eax
  000c7	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000d2	59		 pop	 ecx
  000d3	59		 pop	 ecx
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000da	59		 pop	 ecx
  000db	59		 pop	 ecx
$LN26@sendMessag:
  000dc	50		 push	 eax
  000dd	eb 0a		 jmp	 SHORT $LN24@sendMessag
$LN5@sendMessag:

; 214  :       {
; 215  :          case ECONNREFUSED:
; 216  :          case EHOSTDOWN:
; 217  :          case EHOSTUNREACH:
; 218  :          {
; 219  :             // quietly ignore this 
; 220  :          }
; 221  :          break;
; 222  :          case EAFNOSUPPORT:
; 223  :          {
; 224  :             cerr << "err EAFNOSUPPORT in send" << endl;

  000df	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@FPBAHHGL@err?5EAFNOSUPPORT?5in?5send?$AA@
$LN25@sendMessag:
  000e4	68 00 00 00 00	 push	 OFFSET ?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cerr
$LN24@sendMessag:
  000e9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 225  :          }
; 226  :          break;
; 227  :          default:
; 228  :          {
; 229  :             cerr << "err " << e << " "  << strerror(e) << " in send" << endl;

$LN18@sendMessag:

; 230  :          }
; 231  :       }
; 232  :       return false;

  000f7	32 c0		 xor	 al, al
  000f9	eb 4b		 jmp	 SHORT $LN12@sendMessag
$LN9@sendMessag:

; 233  :    }
; 234  :     
; 235  :    if ( s == 0 )

  000fb	3b c3		 cmp	 eax, ebx
  000fd	75 07		 jne	 SHORT $LN3@sendMessag

; 236  :    {
; 237  :       cerr << "no data sent in send" << endl;

  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@HEDJHPAH@no?5data?5sent?5in?5send?$AA@

; 238  :       return false;

  00104	eb de		 jmp	 SHORT $LN25@sendMessag
$LN3@sendMessag:

; 239  :    }
; 240  :     
; 241  :    if ( s != l )

  00106	3b c6		 cmp	 eax, esi
  00108	74 3a		 je	 SHORT $LN2@sendMessag

; 242  :    {
; 243  :       if (verbose)

  0010a	38 5d 1c	 cmp	 BYTE PTR _verbose$[ebp], bl
  0010d	74 e8		 je	 SHORT $LN18@sendMessag

; 244  :       {
; 245  :          cerr << "only " << s << " out of " << l << " bytes sent" << endl;

  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MKAHFHLD@?5bytes?5sent?$AA@
  00114	56		 push	 esi
  00115	68 00 00 00 00	 push	 OFFSET ??_C@_08MHHFDANP@?5out?5of?5?$AA@
  0011a	50		 push	 eax
  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_05COMJBFDJ@only?5?$AA@
  00120	68 00 00 00 00	 push	 OFFSET ?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cerr
  00125	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0012a	59		 pop	 ecx
  0012b	59		 pop	 ecx
  0012c	8b c8		 mov	 ecx, eax
  0012e	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00139	59		 pop	 ecx
  0013a	59		 pop	 ecx
  0013b	8b c8		 mov	 ecx, eax
  0013d	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 246  :       }
; 247  :       return false;

  00142	eb 98		 jmp	 SHORT $LN26@sendMessag
$LN2@sendMessag:

; 248  :    }
; 249  :     
; 250  :    return true;

  00144	b0 01		 mov	 al, 1
$LN12@sendMessag:

; 251  : }

  00146	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	33 cd		 xor	 ecx, ebp
  0014d	5b		 pop	 ebx
  0014e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00153	c9		 leave
  00154	c3		 ret	 0
?sendMessage@@YA_NIPADHIG_N@Z ENDP			; sendMessage
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 928  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 929  : 		_DEBUG_POINTER(_Ptr);
; 930  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 _strlen
  0000e	59		 pop	 ecx
  0000f	50		 push	 eax
  00010	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0001a	5e		 pop	 esi

; 931  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??_C@_02EAOCLKAK@ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	_sprintf_s:PROC
;	COMDAT ??_C@_02EAOCLKAK@ld?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02EAOCLKAK@ld?$AA@ DB 'ld', 00H			; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1173 : 		{	// put formatted long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1174 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[6];
; 1175 : 
; 1176 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1177 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
; 1178 : 				_Iosbase.flags()), _Val)));

  00015	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00018	57		 push	 edi
  00019	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  0001c	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	50		 push	 eax
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02EAOCLKAK@ld?$AA@
  00025	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00028	8b d9		 mov	 ebx, ecx
  0002a	50		 push	 eax
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00031	83 c4 10	 add	 esp, 16			; 00000010H
  00034	50		 push	 eax
  00035	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00038	6a 40		 push	 64			; 00000040H
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _sprintf_s
  00040	50		 push	 eax
  00041	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00044	50		 push	 eax
  00045	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00048	56		 push	 esi
  00049	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0004c	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0004f	57		 push	 edi
  00050	53		 push	 ebx
  00051	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1179 : 		}

  00056	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00059	83 c4 30	 add	 esp, 48			; 00000030H
  0005c	8b c7		 mov	 eax, edi
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	33 cd		 xor	 ecx, ebp
  00062	5b		 pop	 ebx
  00063	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00068	c9		 leave
  00069	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BDDLJJBK@lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BDDLJJBK@lu?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02BDDLJJBK@lu?$AA@ DB 'lu', 00H			; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1183 : 		{	// put formatted unsigned long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1184 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[6];
; 1185 : 
; 1186 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1187 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
; 1188 : 				_Iosbase.flags()), _Val)));

  00015	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00018	57		 push	 edi
  00019	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  0001c	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	50		 push	 eax
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02BDDLJJBK@lu?$AA@
  00025	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00028	8b d9		 mov	 ebx, ecx
  0002a	50		 push	 eax
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00031	83 c4 10	 add	 esp, 16			; 00000010H
  00034	50		 push	 eax
  00035	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00038	6a 40		 push	 64			; 00000040H
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _sprintf_s
  00040	50		 push	 eax
  00041	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00044	50		 push	 eax
  00045	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00048	56		 push	 esi
  00049	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0004c	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0004f	57		 push	 edi
  00050	53		 push	 ebx
  00051	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1189 : 		}

  00056	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00059	83 c4 30	 add	 esp, 48			; 00000030H
  0005c	8b c7		 mov	 eax, edi
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	33 cd		 xor	 ecx, ebp
  00062	5b		 pop	 ebx
  00063	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00068	c9		 leave
  00069	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02HIKPPMOK@Ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02HIKPPMOK@Ld?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02HIKPPMOK@Ld?$AA@ DB 'Ld', 00H			; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1194 : 		{	// put formatted long long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1195 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[8];
; 1196 : 
; 1197 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1198 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
; 1199 : 				_Iosbase.flags()), _Val)));

  00015	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00018	57		 push	 edi
  00019	ff 75 20	 push	 DWORD PTR __Val$[ebp+4]
  0001c	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00022	8b d9		 mov	 ebx, ecx
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_02HIKPPMOK@Ld?$AA@
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  0002d	50		 push	 eax
  0002e	53		 push	 ebx
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  0003b	6a 40		 push	 64			; 00000040H
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _sprintf_s
  00043	50		 push	 eax
  00044	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00047	50		 push	 eax
  00048	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0004b	56		 push	 esi
  0004c	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0004f	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00052	57		 push	 edi
  00053	53		 push	 ebx
  00054	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1200 : 		}

  00059	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005c	83 c4 34	 add	 esp, 52			; 00000034H
  0005f	8b c7		 mov	 eax, edi
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	33 cd		 xor	 ecx, ebp
  00065	5b		 pop	 ebx
  00066	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006b	c9		 leave
  0006c	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02CLHGNPPK@Lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02CLHGNPPK@Lu?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02CLHGNPPK@Lu?$AA@ DB 'Lu', 00H			; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1204 : 		{	// put formatted unsigned long long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1205 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[8];
; 1206 : 
; 1207 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1208 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
; 1209 : 				_Iosbase.flags()), _Val)));

  00015	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00018	57		 push	 edi
  00019	ff 75 20	 push	 DWORD PTR __Val$[ebp+4]
  0001c	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00022	8b d9		 mov	 ebx, ecx
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_02CLHGNPPK@Lu?$AA@
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  0002d	50		 push	 eax
  0002e	53		 push	 ebx
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  0003b	6a 40		 push	 64			; 00000040H
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _sprintf_s
  00043	50		 push	 eax
  00044	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00047	50		 push	 eax
  00048	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0004b	56		 push	 esi
  0004c	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0004f	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00052	57		 push	 edi
  00053	53		 push	 ebx
  00054	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1210 : 		}

  00059	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005c	83 c4 34	 add	 esp, 52			; 00000034H
  0005f	8b c7		 mov	 eax, edi
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	33 cd		 xor	 ecx, ebp
  00065	5b		 pop	 ebx
  00066	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006b	c9		 leave
  0006c	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	__real@38aa95a5b7f87a0f
PUBLIC	__real@4202a05f20000000
PUBLIC	__real@4733426172c74d82
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	_this$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__fltused:DWORD
;	COMDAT __real@38aa95a5b7f87a0f
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	SEGMENT
__real@38aa95a5b7f87a0f DQ 038aa95a5b7f87a0fr	; 1e-035
CONST	ENDS
;	COMDAT __real@4202a05f20000000
CONST	SEGMENT
__real@4202a05f20000000 DQ 04202a05f20000000r	; 1e+010
CONST	ENDS
;	COMDAT __real@4733426172c74d82
CONST	SEGMENT
__real@4733426172c74d82 DQ 04733426172c74d82r	; 1e+035
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -144				; size = 4
_this$GSCopy$ = -140					; size = 4
__Significance$ = -136					; size = 4
__Afterpoint$ = -132					; size = 4
__Beforepoint$ = -128					; size = 4
__Signed$85010 = -121					; size = 1
__Buf$ = -120						; size = 108
__Fmt$ = -12						; size = 8
__Precision$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1215 : 		{	// put formatted double to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1246 : 			}
; 1247 : 
; 1248 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1249 : 			_Beforepoint, _Afterpoint, (size_t)_Precision,
; 1250 : 				_CSTD sprintf_s(_Buf, sizeof (_Buf),
; 1251 : 					_Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1252 : 					_Significance, _Val)));	// convert and put

  0001b	89 85 70 ff ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  00021	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00024	57		 push	 edi
  00025	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0002b	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0002e	bf 00 20 00 00	 mov	 edi, 8192		; 00002000H
  00033	85 c0		 test	 eax, eax
  00035	7f 10		 jg	 SHORT $LN13@do_put

; 1216 : 		char _Buf[_MAX_EXP_DIG + _MAX_SIG_DIG + 64], _Fmt[8];
; 1217 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1218 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1219 : 				? 6 : _Iosbase.precision();	// desired precision

  00037	7c 04		 jl	 SHORT $LN34@do_put
  00039	85 c9		 test	 ecx, ecx
  0003b	75 0a		 jne	 SHORT $LN13@do_put
$LN34@do_put:
  0003d	85 7e 14	 test	 DWORD PTR [esi+20], edi
  00040	75 05		 jne	 SHORT $LN13@do_put
  00042	6a 06		 push	 6
  00044	59		 pop	 ecx
  00045	33 c0		 xor	 eax, eax
$LN13@do_put:
  00047	8b d9		 mov	 ebx, ecx
  00049	89 45 f8	 mov	 DWORD PTR __Precision$[ebp+4], eax

; 1220 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1221 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  0004c	85 c0		 test	 eax, eax
  0004e	7c 11		 jl	 SHORT $LN15@do_put
  00050	6a 24		 push	 36			; 00000024H
  00052	58		 pop	 eax
  00053	7f 04		 jg	 SHORT $LN35@do_put
  00055	3b d8		 cmp	 ebx, eax
  00057	76 08		 jbe	 SHORT $LN15@do_put
$LN35@do_put:
  00059	89 85 78 ff ff
	ff		 mov	 DWORD PTR __Significance$[ebp], eax
  0005f	eb 06		 jmp	 SHORT $LN16@do_put
$LN15@do_put:
  00061	89 9d 78 ff ff
	ff		 mov	 DWORD PTR __Significance$[ebp], ebx
$LN16@do_put:

; 1222 : 		_Precision -= _Significance;

  00067	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR __Significance$[ebp]

; 1223 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1224 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1225 : 
; 1226 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
; 1227 : 			&& _Val * 0.5 != _Val)	// skip -Inf, 0, Inf

  0006d	dd 45 1c	 fld	 QWORD PTR __Val$[ebp]
  00070	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00073	99		 cdq
  00074	2b d8		 sub	 ebx, eax
  00076	19 55 f8	 sbb	 DWORD PTR __Precision$[ebp+4], edx
  00079	83 65 80 00	 and	 DWORD PTR __Beforepoint$[ebp], 0
  0007d	83 a5 7c ff ff
	ff 00		 and	 DWORD PTR __Afterpoint$[ebp], 0
  00084	8b c1		 mov	 eax, ecx
  00086	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  0008b	3b c7		 cmp	 eax, edi
  0008d	0f 85 bb 00 00
	00		 jne	 $LN40@do_put
  00093	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe0000000000000
  00099	d8 c9		 fmul	 ST(0), ST(1)
  0009b	d9 c1		 fld	 ST(1)
  0009d	da e9		 fucompp
  0009f	df e0		 fnstsw	 ax
  000a1	f6 c4 44	 test	 ah, 68			; 00000044H
  000a4	0f 8b a4 00 00
	00		 jnp	 $LN40@do_put

; 1228 : 			{	// scale silly fixed-point value
; 1229 : 			bool _Signed = _Val < 0;

  000aa	d9 ee		 fldz
  000ac	d8 d1		 fcom	 ST(1)
  000ae	df e0		 fnstsw	 ax
  000b0	f6 c4 41	 test	 ah, 65			; 00000041H
  000b3	75 0a		 jne	 SHORT $LN17@do_put

; 1230 : 			if (_Signed)
; 1231 : 				_Val = -_Val;

  000b5	d9 c9		 fxch	 ST(1)
  000b7	c6 45 87 01	 mov	 BYTE PTR __Signed$85010[ebp], 1
  000bb	d9 e0		 fchs
  000bd	eb 06		 jmp	 SHORT $LN9@do_put
$LN17@do_put:

; 1228 : 			{	// scale silly fixed-point value
; 1229 : 			bool _Signed = _Val < 0;

  000bf	c6 45 87 00	 mov	 BYTE PTR __Signed$85010[ebp], 0

; 1245 : 				_Val = -_Val;

  000c3	d9 c9		 fxch	 ST(1)
$LN9@do_put:

; 1232 : 
; 1233 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000c5	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  000cb	6a 0a		 push	 10			; 0000000aH
  000cd	d8 d1		 fcom	 ST(1)
  000cf	ba 88 13 00 00	 mov	 edx, 5000		; 00001388H
  000d4	5f		 pop	 edi
  000d5	df e0		 fnstsw	 ax
  000d7	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  000dd	f6 c4 41	 test	 ah, 65			; 00000041H
  000e0	7b 06		 jnp	 SHORT $LN8@do_put
$LN50@do_put:
  000e2	dd d9		 fstp	 ST(1)
  000e4	eb 19		 jmp	 SHORT $LN6@do_put
$LN56@do_put:
  000e6	d9 c9		 fxch	 ST(1)
$LN8@do_put:
  000e8	39 55 80	 cmp	 DWORD PTR __Beforepoint$[ebp], edx
  000eb	73 f5		 jae	 SHORT $LN50@do_put

; 1234 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000ed	dc fa		 fdiv	 ST(2), ST(0)
  000ef	01 7d 80	 add	 DWORD PTR __Beforepoint$[ebp], edi
  000f2	d9 c9		 fxch	 ST(1)
  000f4	d8 d2		 fcom	 ST(2)
  000f6	df e0		 fnstsw	 ax
  000f8	f6 c4 41	 test	 ah, 65			; 00000041H
  000fb	7b e9		 jnp	 SHORT $LN56@do_put

; 1232 : 
; 1233 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000fd	dd d8		 fstp	 ST(0)
$LN6@do_put:

; 1235 : 
; 1236 : 			if (0 < _Val)

  000ff	d9 ca		 fxch	 ST(2)
  00101	d8 d9		 fcomp	 ST(1)
  00103	df e0		 fnstsw	 ax
  00105	f6 c4 05	 test	 ah, 5
  00108	7a 3a		 jp	 SHORT $LN78@do_put

; 1237 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1238 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  0010a	83 7d f8 00	 cmp	 DWORD PTR __Precision$[ebp+4], 0
  0010e	7c 34		 jl	 SHORT $LN78@do_put
  00110	7f 04		 jg	 SHORT $LN41@do_put
$LN82@do_put:
  00112	3b df		 cmp	 ebx, edi
  00114	72 2e		 jb	 SHORT $LN78@do_put
$LN41@do_put:
  00116	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  0011c	d8 d9		 fcomp	 ST(1)
  0011e	df e0		 fnstsw	 ax
  00120	f6 c4 01	 test	 ah, 1
  00123	75 1f		 jne	 SHORT $LN78@do_put
  00125	39 95 7c ff ff
	ff		 cmp	 DWORD PTR __Afterpoint$[ebp], edx
  0012b	73 17		 jae	 SHORT $LN78@do_put

; 1239 : 					{	// drop 10 zeros after decimal point
; 1240 : 					_Val *= 1e10;
; 1241 : 					_Precision -= 10;

  0012d	83 c3 f6	 add	 ebx, -10		; fffffff6H
  00130	d8 c9		 fmul	 ST(0), ST(1)
  00132	83 55 f8 ff	 adc	 DWORD PTR __Precision$[ebp+4], -1
  00136	01 bd 7c ff ff
	ff		 add	 DWORD PTR __Afterpoint$[ebp], edi
  0013c	83 7d f8 00	 cmp	 DWORD PTR __Precision$[ebp+4], 0
  00140	7f d4		 jg	 SHORT $LN41@do_put

; 1237 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1238 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00142	7d ce		 jge	 SHORT $LN82@do_put
$LN78@do_put:

; 1242 : 					}
; 1243 : 
; 1244 : 			if (_Signed)

  00144	80 7d 87 00	 cmp	 BYTE PTR __Signed$85010[ebp], 0
  00148	dd d9		 fstp	 ST(1)
  0014a	74 02		 je	 SHORT $LN40@do_put

; 1245 : 				_Val = -_Val;

  0014c	d9 e0		 fchs
$LN40@do_put:

; 1246 : 			}
; 1247 : 
; 1248 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1249 : 			_Beforepoint, _Afterpoint, (size_t)_Precision,
; 1250 : 				_CSTD sprintf_s(_Buf, sizeof (_Buf),
; 1251 : 					_Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1252 : 					_Significance, _Val)));	// convert and put

  0014e	51		 push	 ecx
  0014f	51		 push	 ecx
  00150	dd 1c 24	 fstp	 QWORD PTR [esp]
  00153	ff b5 78 ff ff
	ff		 push	 DWORD PTR __Significance$[ebp]
  00159	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  0015c	51		 push	 ecx
  0015d	6a 00		 push	 0
  0015f	50		 push	 eax
  00160	ff b5 74 ff ff
	ff		 push	 DWORD PTR _this$GSCopy$[ebp]
  00166	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
  0016b	83 c4 10	 add	 esp, 16			; 00000010H
  0016e	50		 push	 eax
  0016f	8d 45 88	 lea	 eax, DWORD PTR __Buf$[ebp]
  00172	6a 6c		 push	 108			; 0000006cH
  00174	50		 push	 eax
  00175	e8 00 00 00 00	 call	 _sprintf_s
  0017a	50		 push	 eax
  0017b	53		 push	 ebx
  0017c	ff b5 7c ff ff
	ff		 push	 DWORD PTR __Afterpoint$[ebp]
  00182	8d 45 88	 lea	 eax, DWORD PTR __Buf$[ebp]
  00185	ff 75 80	 push	 DWORD PTR __Beforepoint$[ebp]
  00188	50		 push	 eax
  00189	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0018c	56		 push	 esi
  0018d	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00190	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00193	ff b5 70 ff ff
	ff		 push	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00199	ff b5 74 ff ff
	ff		 push	 DWORD PTR _this$GSCopy$[ebp]
  0019f	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput

; 1253 : 		}

  001a4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a7	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  001ad	83 c4 44	 add	 esp, 68			; 00000044H
  001b0	5f		 pop	 edi
  001b1	5e		 pop	 esi
  001b2	33 cd		 xor	 ecx, ebp
  001b4	5b		 pop	 ebx
  001b5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ba	c9		 leave
  001bb	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogsp
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -144				; size = 4
_this$GSCopy$ = -140					; size = 4
__Significance$ = -136					; size = 4
__Afterpoint$ = -132					; size = 4
__Beforepoint$ = -128					; size = 4
__Signed$85038 = -121					; size = 1
__Buf$ = -120						; size = 108
__Fmt$ = -12						; size = 8
__Precision$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1257 : 		{	// put formatted long double to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1287 : 			}
; 1288 : 
; 1289 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1290 : 			_Beforepoint, _Afterpoint, (size_t)_Precision,
; 1291 : 				_CSTD sprintf_s(_Buf, sizeof (_Buf),
; 1292 : 					_Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1293 : 					_Significance, _Val)));	// convert and put

  0001b	89 85 70 ff ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  00021	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00024	57		 push	 edi
  00025	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0002b	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0002e	bf 00 20 00 00	 mov	 edi, 8192		; 00002000H
  00033	85 c0		 test	 eax, eax
  00035	7f 10		 jg	 SHORT $LN13@do_put@2

; 1258 : 		char _Buf[_MAX_EXP_DIG + _MAX_SIG_DIG + 64], _Fmt[8];
; 1259 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1260 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1261 : 				? 6 : _Iosbase.precision();	// desired precision

  00037	7c 04		 jl	 SHORT $LN34@do_put@2
  00039	85 c9		 test	 ecx, ecx
  0003b	75 0a		 jne	 SHORT $LN13@do_put@2
$LN34@do_put@2:
  0003d	85 7e 14	 test	 DWORD PTR [esi+20], edi
  00040	75 05		 jne	 SHORT $LN13@do_put@2
  00042	6a 06		 push	 6
  00044	59		 pop	 ecx
  00045	33 c0		 xor	 eax, eax
$LN13@do_put@2:
  00047	8b d9		 mov	 ebx, ecx
  00049	89 45 f8	 mov	 DWORD PTR __Precision$[ebp+4], eax

; 1262 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1263 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  0004c	85 c0		 test	 eax, eax
  0004e	7c 11		 jl	 SHORT $LN15@do_put@2
  00050	6a 24		 push	 36			; 00000024H
  00052	58		 pop	 eax
  00053	7f 04		 jg	 SHORT $LN35@do_put@2
  00055	3b d8		 cmp	 ebx, eax
  00057	76 08		 jbe	 SHORT $LN15@do_put@2
$LN35@do_put@2:
  00059	89 85 78 ff ff
	ff		 mov	 DWORD PTR __Significance$[ebp], eax
  0005f	eb 06		 jmp	 SHORT $LN16@do_put@2
$LN15@do_put@2:
  00061	89 9d 78 ff ff
	ff		 mov	 DWORD PTR __Significance$[ebp], ebx
$LN16@do_put@2:

; 1264 : 		_Precision -= _Significance;

  00067	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR __Significance$[ebp]

; 1265 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1266 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1267 : 
; 1268 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)

  0006d	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00070	99		 cdq
  00071	2b d8		 sub	 ebx, eax
  00073	19 55 f8	 sbb	 DWORD PTR __Precision$[ebp+4], edx
  00076	83 65 80 00	 and	 DWORD PTR __Beforepoint$[ebp], 0
  0007a	83 a5 7c ff ff
	ff 00		 and	 DWORD PTR __Afterpoint$[ebp], 0
  00081	8b c1		 mov	 eax, ecx
  00083	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00088	3b c7		 cmp	 eax, edi
  0008a	0f 85 a5 00 00
	00		 jne	 $LN39@do_put@2

; 1269 : 			{	// scale silly fixed-point value
; 1270 : 			bool _Signed = _Val < 0;

  00090	d9 ee		 fldz
  00092	dd 45 1c	 fld	 QWORD PTR __Val$[ebp]
  00095	d8 d1		 fcom	 ST(1)
  00097	df e0		 fnstsw	 ax
  00099	f6 c4 05	 test	 ah, 5
  0009c	7a 27		 jp	 SHORT $LN17@do_put@2
  0009e	c6 45 87 01	 mov	 BYTE PTR __Signed$85038[ebp], 1

; 1272 : 				_Val = -_Val;

  000a2	d9 e0		 fchs
$LN9@do_put@2:

; 1273 : 
; 1274 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000a4	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  000aa	6a 0a		 push	 10			; 0000000aH
  000ac	d8 d1		 fcom	 ST(1)
  000ae	ba 88 13 00 00	 mov	 edx, 5000		; 00001388H
  000b3	5f		 pop	 edi
  000b4	df e0		 fnstsw	 ax
  000b6	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  000bc	f6 c4 41	 test	 ah, 65			; 00000041H
  000bf	7b 0c		 jnp	 SHORT $LN8@do_put@2
$LN46@do_put@2:
  000c1	dd d9		 fstp	 ST(1)
  000c3	eb 1f		 jmp	 SHORT $LN6@do_put@2
$LN17@do_put@2:

; 1269 : 			{	// scale silly fixed-point value
; 1270 : 			bool _Signed = _Val < 0;

  000c5	c6 45 87 00	 mov	 BYTE PTR __Signed$85038[ebp], 0

; 1271 : 			if (_Signed)

  000c9	eb d9		 jmp	 SHORT $LN9@do_put@2
$LN52@do_put@2:

; 1273 : 
; 1274 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000cb	d9 c9		 fxch	 ST(1)
$LN8@do_put@2:
  000cd	39 55 80	 cmp	 DWORD PTR __Beforepoint$[ebp], edx
  000d0	73 ef		 jae	 SHORT $LN46@do_put@2

; 1275 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000d2	dc fa		 fdiv	 ST(2), ST(0)
  000d4	01 7d 80	 add	 DWORD PTR __Beforepoint$[ebp], edi
  000d7	d9 c9		 fxch	 ST(1)
  000d9	d8 d2		 fcom	 ST(2)
  000db	df e0		 fnstsw	 ax
  000dd	f6 c4 41	 test	 ah, 65			; 00000041H
  000e0	7b e9		 jnp	 SHORT $LN52@do_put@2

; 1273 : 
; 1274 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000e2	dd d8		 fstp	 ST(0)
$LN6@do_put@2:

; 1276 : 
; 1277 : 			if (0 < _Val)

  000e4	d9 ca		 fxch	 ST(2)
  000e6	d8 d9		 fcomp	 ST(1)
  000e8	df e0		 fnstsw	 ax
  000ea	f6 c4 05	 test	 ah, 5
  000ed	7a 3a		 jp	 SHORT $LN74@do_put@2

; 1278 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1279 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000ef	83 7d f8 00	 cmp	 DWORD PTR __Precision$[ebp+4], 0
  000f3	7c 34		 jl	 SHORT $LN74@do_put@2
  000f5	7f 04		 jg	 SHORT $LN40@do_put@2
$LN78@do_put@2:
  000f7	3b df		 cmp	 ebx, edi
  000f9	72 2e		 jb	 SHORT $LN74@do_put@2
$LN40@do_put@2:
  000fb	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  00101	d8 d9		 fcomp	 ST(1)
  00103	df e0		 fnstsw	 ax
  00105	f6 c4 01	 test	 ah, 1
  00108	75 1f		 jne	 SHORT $LN74@do_put@2
  0010a	39 95 7c ff ff
	ff		 cmp	 DWORD PTR __Afterpoint$[ebp], edx
  00110	73 17		 jae	 SHORT $LN74@do_put@2

; 1280 : 					{	// drop 10 zeros after decimal point
; 1281 : 					_Val *= 1e10;
; 1282 : 					_Precision -= 10;

  00112	83 c3 f6	 add	 ebx, -10		; fffffff6H
  00115	d8 c9		 fmul	 ST(0), ST(1)
  00117	83 55 f8 ff	 adc	 DWORD PTR __Precision$[ebp+4], -1
  0011b	01 bd 7c ff ff
	ff		 add	 DWORD PTR __Afterpoint$[ebp], edi
  00121	83 7d f8 00	 cmp	 DWORD PTR __Precision$[ebp+4], 0
  00125	7f d4		 jg	 SHORT $LN40@do_put@2

; 1278 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1279 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00127	7d ce		 jge	 SHORT $LN78@do_put@2
$LN74@do_put@2:

; 1283 : 					}
; 1284 : 
; 1285 : 			if (_Signed)

  00129	80 7d 87 00	 cmp	 BYTE PTR __Signed$85038[ebp], 0
  0012d	dd d9		 fstp	 ST(1)
  0012f	74 07		 je	 SHORT $LN1@do_put@2

; 1286 : 				_Val = -_Val;

  00131	d9 e0		 fchs
  00133	eb 03		 jmp	 SHORT $LN1@do_put@2
$LN39@do_put@2:
  00135	dd 45 1c	 fld	 QWORD PTR __Val$[ebp]
$LN1@do_put@2:

; 1287 : 			}
; 1288 : 
; 1289 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1290 : 			_Beforepoint, _Afterpoint, (size_t)_Precision,
; 1291 : 				_CSTD sprintf_s(_Buf, sizeof (_Buf),
; 1292 : 					_Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1293 : 					_Significance, _Val)));	// convert and put

  00138	51		 push	 ecx
  00139	51		 push	 ecx
  0013a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0013d	ff b5 78 ff ff
	ff		 push	 DWORD PTR __Significance$[ebp]
  00143	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00146	51		 push	 ecx
  00147	6a 4c		 push	 76			; 0000004cH
  00149	50		 push	 eax
  0014a	ff b5 74 ff ff
	ff		 push	 DWORD PTR _this$GSCopy$[ebp]
  00150	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
  00155	83 c4 10	 add	 esp, 16			; 00000010H
  00158	50		 push	 eax
  00159	8d 45 88	 lea	 eax, DWORD PTR __Buf$[ebp]
  0015c	6a 6c		 push	 108			; 0000006cH
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 _sprintf_s
  00164	50		 push	 eax
  00165	53		 push	 ebx
  00166	ff b5 7c ff ff
	ff		 push	 DWORD PTR __Afterpoint$[ebp]
  0016c	8d 45 88	 lea	 eax, DWORD PTR __Buf$[ebp]
  0016f	ff 75 80	 push	 DWORD PTR __Beforepoint$[ebp]
  00172	50		 push	 eax
  00173	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00176	56		 push	 esi
  00177	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0017a	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0017d	ff b5 70 ff ff
	ff		 push	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00183	ff b5 74 ff ff
	ff		 push	 DWORD PTR _this$GSCopy$[ebp]
  00189	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput

; 1294 : 		}

  0018e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00191	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00197	83 c4 44	 add	 esp, 68			; 00000044H
  0019a	5f		 pop	 edi
  0019b	5e		 pop	 esi
  0019c	33 cd		 xor	 ecx, ebp
  0019e	5b		 pop	 ebx
  0019f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a4	c9		 leave
  001a5	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BBAHNLBA@?$CFp?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp?$AA@ DB '%p', 00H		; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
_TEXT	SEGMENT
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1298 : 		{	// put formatted void pointer to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 1c	 mov	 eax, DWORD PTR __Val$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00018	57		 push	 edi
  00019	8b 7d 14	 mov	 edi, DWORD PTR __Iosbase$[ebp]

; 1299 : 		char _Buf[2 * _MAX_INT_DIG];
; 1300 : 
; 1301 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1302 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));

  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02BBAHNLBA@?$CFp?$AA@
  00022	8d 45 bc	 lea	 eax, DWORD PTR __Buf$[ebp]
  00025	6a 40		 push	 64			; 00000040H
  00027	50		 push	 eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	e8 00 00 00 00	 call	 _sprintf_s
  0002f	50		 push	 eax
  00030	8d 45 bc	 lea	 eax, DWORD PTR __Buf$[ebp]
  00033	50		 push	 eax
  00034	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00037	57		 push	 edi
  00038	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0003b	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0003e	56		 push	 esi
  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1303 : 		}

  00045	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00048	83 c4 30	 add	 esp, 48			; 00000030H
  0004b	5f		 pop	 edi
  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi
  0004f	33 cd		 xor	 ecx, ebp
  00051	5b		 pop	 ebx
  00052	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00057	c9		 leave
  00058	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 713  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 714  : 		if (this == &_Right)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	3b fe		 cmp	 edi, esi
  0000c	74 41		 je	 SHORT $LN43@assign@3

; 715  : 			;
; 716  : 		else if (get_allocator() != _Right.get_allocator()
; 717  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 718  : 			*this = _Right;
; 719  : 		else
; 720  : 			{	// not same, clear this and steal from _Right
; 721  : 			_Tidy(true);

  0000e	6a 00		 push	 0
  00010	6a 01		 push	 1
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 722  : 			if (_Right._Myres < this->_BUF_SIZE)

  00017	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0001b	73 11		 jae	 SHORT $LN2@assign@3

; 723  : 				_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 724  : 					_Right._Mysize + 1);

  0001d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00020	40		 inc	 eax
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	e8 00 00 00 00	 call	 _memmove
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 725  : 			else

  0002c	eb 07		 jmp	 SHORT $LN1@assign@3
$LN2@assign@3:

; 726  : 				{	// copy pointer
; 727  : 				this->_Bx._Ptr = _Right._Bx._Ptr;

  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	89 07		 mov	 DWORD PTR [edi], eax

; 728  : 				_Right._Bx._Ptr = 0;

  00032	83 26 00	 and	 DWORD PTR [esi], 0
$LN1@assign@3:

; 729  : 				}
; 730  : 			this->_Mysize = _Right._Mysize;

  00035	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00038	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 731  : 			this->_Myres = _Right._Myres;

  0003b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003e	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 732  : 
; 733  : 			_Right._Tidy();

  00041	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  00045	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0004c	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN43@assign@3:

; 734  : 			}
; 735  : 		return (*this);

  0004f	8b c7		 mov	 eax, edi
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi

; 736  : 		}

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 592  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 593  : 		_Tidy();
; 594  : 		assign(_Ptr);

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	e8 00 00 00 00	 call	 _strlen
  0001c	59		 pop	 ecx
  0001d	50		 push	 eax
  0001e	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 595  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	__Fill$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	_this$GSCopy$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$3
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
_TEXT	SEGMENT
$T92283 = -100						; size = 8
$T92280 = -96						; size = 4
$T92284 = -92						; size = 8
__Punct_fac$84892 = -88					; size = 4
___$ReturnUdt$GSCopy$ = -84				; size = 4
__Fill$GSCopy$ = -80					; size = 1
_this$GSCopy$ = -76					; size = 4
$T84958 = -72						; size = 28
$T84956 = -72						; size = 28
__Str$84899 = -44					; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 1
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1143 : 		{	// put formatted bool to _Dest

  00000	6a 58		 push	 88			; 00000058H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1144 : 		_DEBUG_POINTER(_Dest);
; 1145 : 		if (!(_Iosbase.flags() & ios_base::boolalpha))

  0000f	f7 46 14 00 40
	00 00		 test	 DWORD PTR [esi+20], 16384 ; 00004000H
  00016	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00019	8a 45 18	 mov	 al, BYTE PTR __Fill$[ebp]

; 1164 : 				}
; 1165 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  0001c	89 4d b4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001f	89 7d ac	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], edi
  00022	88 45 b0	 mov	 BYTE PTR __Fill$GSCopy$[ebp], al
  00025	75 1c		 jne	 SHORT $LN5@do_put@3

; 1146 : 			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));

  00027	0f b6 55 1c	 movzx	 edx, BYTE PTR __Val$[ebp]
  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	52		 push	 edx
  0002e	ff 75 b0	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00031	56		 push	 esi
  00032	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00035	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00038	57		 push	 edi
  00039	ff 50 1c	 call	 DWORD PTR [eax+28]
  0003c	8b c7		 mov	 eax, edi
  0003e	e9 10 01 00 00	 jmp	 $LN4@do_put@3
$LN5@do_put@3:

; 1147 : 		else
; 1148 : 			{	// put "false" or "true"
; 1149 : 			const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  00043	8d 45 a0	 lea	 eax, DWORD PTR $T92280[ebp]
  00046	50		 push	 eax
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  0004e	33 db		 xor	 ebx, ebx
  00050	50		 push	 eax
  00051	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00054	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  00059	59		 pop	 ecx
  0005a	8d 4d a0	 lea	 ecx, DWORD PTR $T92280[ebp]
  0005d	89 45 a8	 mov	 DWORD PTR __Punct_fac$84892[ebp], eax
  00060	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 1150 : 			_Mystr _Str;

  00065	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR __Str$84899[ebp+20], 15 ; 0000000fH
  0006c	89 5d e4	 mov	 DWORD PTR __Str$84899[ebp+16], ebx
  0006f	88 5d d4	 mov	 BYTE PTR __Str$84899[ebp], bl

; 1151 : 			if (_Val)
; 1152 : 				_Str.assign(_Punct_fac.truename());

  00072	8b 4d a8	 mov	 ecx, DWORD PTR __Punct_fac$84892[ebp]
  00075	33 ff		 xor	 edi, edi
  00077	47		 inc	 edi
  00078	8d 45 b8	 lea	 eax, DWORD PTR $T84956[ebp]
  0007b	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  0007e	50		 push	 eax
  0007f	38 5d 1c	 cmp	 BYTE PTR __Val$[ebp], bl
  00082	74 0b		 je	 SHORT $LN3@do_put@3
  00084	e8 00 00 00 00	 call	 ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
  00089	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 1153 : 			else

  0008d	eb 09		 jmp	 SHORT $LN79@do_put@3
$LN3@do_put@3:

; 1154 : 				_Str.assign(_Punct_fac.falsename());

  0008f	e8 00 00 00 00	 call	 ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
  00094	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
$LN79@do_put@3:
  00098	50		 push	 eax
  00099	8d 4d d4	 lea	 ecx, DWORD PTR __Str$84899[ebp]
  0009c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000a1	53		 push	 ebx
  000a2	57		 push	 edi
  000a3	8d 4d b8	 lea	 ecx, DWORD PTR $T84958[ebp]
  000a6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000aa	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1155 : 
; 1156 : 			size_t _Fillcount = _Iosbase.width() <= 0
; 1157 : 				|| (size_t)_Iosbase.width() <= _Str.size()
; 1158 : 					? 0 : (size_t)_Iosbase.width() - _Str.size();

  000af	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000b2	39 5e 24	 cmp	 DWORD PTR [esi+36], ebx
  000b5	7c 12		 jl	 SHORT $LN8@do_put@3
  000b7	7f 04		 jg	 SHORT $LN76@do_put@3
  000b9	3b c3		 cmp	 eax, ebx
  000bb	76 0c		 jbe	 SHORT $LN8@do_put@3
$LN76@do_put@3:
  000bd	3b 45 e4	 cmp	 eax, DWORD PTR __Str$84899[ebp+16]
  000c0	76 07		 jbe	 SHORT $LN8@do_put@3
  000c2	2b 45 e4	 sub	 eax, DWORD PTR __Str$84899[ebp+16]
  000c5	8b f8		 mov	 edi, eax
  000c7	eb 02		 jmp	 SHORT $LN9@do_put@3
$LN8@do_put@3:
  000c9	33 ff		 xor	 edi, edi
$LN9@do_put@3:

; 1159 : 
; 1160 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

  000cb	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000ce	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000d3	83 f8 40	 cmp	 eax, 64			; 00000040H
  000d6	74 26		 je	 SHORT $LN1@do_put@3

; 1161 : 				{	// put leading fill
; 1162 : 				_Dest = _Rep(_Dest, _Fill, _Fillcount);

  000d8	57		 push	 edi
  000d9	ff 75 b0	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  000dc	8d 45 9c	 lea	 eax, DWORD PTR $T92283[ebp]
  000df	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  000e2	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  000e5	50		 push	 eax
  000e6	ff 75 b4	 push	 DWORD PTR _this$GSCopy$[ebp]
  000e9	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  000ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f0	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  000f3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f6	83 c4 18	 add	 esp, 24			; 00000018H
  000f9	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax

; 1163 : 				_Fillcount = 0;

  000fc	33 ff		 xor	 edi, edi
$LN1@do_put@3:

; 1164 : 				}
; 1165 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  000fe	83 7d e8 10	 cmp	 DWORD PTR __Str$84899[ebp+20], 16 ; 00000010H
  00102	8b 45 d4	 mov	 eax, DWORD PTR __Str$84899[ebp]
  00105	73 03		 jae	 SHORT $LN69@do_put@3
  00107	8d 45 d4	 lea	 eax, DWORD PTR __Str$84899[ebp]
$LN69@do_put@3:
  0010a	ff 75 e4	 push	 DWORD PTR __Str$84899[ebp+16]
  0010d	50		 push	 eax
  0010e	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00111	8d 45 a4	 lea	 eax, DWORD PTR $T92284[ebp]
  00114	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00117	50		 push	 eax
  00118	ff 75 b4	 push	 DWORD PTR _this$GSCopy$[ebp]
  0011b	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00120	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1166 : 			_Iosbase.width(0);
; 1167 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00122	57		 push	 edi
  00123	ff 75 b0	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00126	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  00129	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0012c	50		 push	 eax
  0012d	51		 push	 ecx
  0012e	ff 75 ac	 push	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00131	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00134	ff 75 b4	 push	 DWORD PTR _this$GSCopy$[ebp]
  00137	89 5e 20	 mov	 DWORD PTR [esi+32], ebx
  0013a	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  0013d	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00142	83 c4 30	 add	 esp, 48			; 00000030H
  00145	53		 push	 ebx
  00146	6a 01		 push	 1
  00148	8d 4d d4	 lea	 ecx, DWORD PTR __Str$84899[ebp]
  0014b	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00150	8b 45 ac	 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
$LN4@do_put@3:

; 1168 : 			}
; 1169 : 		}

  00153	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00158	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0:
  00000	8d 4d a0	 lea	 ecx, DWORD PTR $T92280[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Str$84899[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$2:
  00010	8d 4d b8	 lea	 ecx, DWORD PTR $T84956[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$3:
  00018	8d 4d b8	 lea	 ecx, DWORD PTR $T84958[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogsp
;	COMDAT ?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T92472 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_grouping, COMDAT
; _this$ = ecx

; 173  : 		{	// return grouping string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 174  : 		return (string(_Grouping));

  00004	ff 71 08	 push	 DWORD PTR [ecx+8]
  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	83 65 fc 00	 and	 DWORD PTR $T92472[ebp], 0
  0000e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 175  : 		}

  00016	c9		 leave
  00017	c2 04 00	 ret	 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_grouping
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T92477 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_falsename, COMDAT
; _this$ = ecx

; 178  : 		{	// return name for false

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 179  : 		return (string_type(_Falsename));

  00004	ff 71 10	 push	 DWORD PTR [ecx+16]
  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	83 65 fc 00	 and	 DWORD PTR $T92477[ebp], 0
  0000e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 180  : 		}

  00016	c9		 leave
  00017	c2 04 00	 ret	 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_falsename
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T92482 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_truename, COMDAT
; _this$ = ecx

; 183  : 		{	// return name for true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 184  : 		return (string_type(_Truename));

  00004	ff 71 14	 push	 DWORD PTR [ecx+20]
  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	83 65 fc 00	 and	 DWORD PTR $T92482[ebp], 0
  0000e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 185  : 		}

  00016	c9		 leave
  00017	c2 04 00	 ret	 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_truename
_TEXT	ENDS
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
END
