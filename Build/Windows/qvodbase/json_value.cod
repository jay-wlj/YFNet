; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	F:\Projects\Git\YFNet\trunk\Src\include\json\json_value.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@D@std@@2HB	; std::numeric_limits<char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_W@std@@2HB	; std::numeric_limits<wchar_t>::max_digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_N@std@@2HB	; std::numeric_limits<bool>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@C@std@@2HB	; std::numeric_limits<signed char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@E@std@@2HB	; std::numeric_limits<unsigned char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?max_digits10@?$numeric_limits@F@std@@2HB	; std::numeric_limits<short>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?max_digits10@?$numeric_limits@G@std@@2HB	; std::numeric_limits<unsigned short>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?max_digits10@?$numeric_limits@H@std@@2HB	; std::numeric_limits<int>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?max_digits10@?$numeric_limits@I@std@@2HB	; std::numeric_limits<unsigned int>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?max_digits10@?$numeric_limits@J@std@@2HB	; std::numeric_limits<long>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?max_digits10@?$numeric_limits@K@std@@2HB	; std::numeric_limits<unsigned long>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_J@std@@2HB	; std::numeric_limits<__int64>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_K@std@@2HB	; std::numeric_limits<unsigned __int64>::max_digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?minInt@Value@Json@@2HB				; Json::Value::minInt
PUBLIC	?maxInt@Value@Json@@2HB				; Json::Value::maxInt
PUBLIC	?maxUInt@Value@Json@@2IB			; Json::Value::maxUInt
CONST	SEGMENT
?minInt@Value@Json@@2HB DD 080000000H			; Json::Value::minInt
?maxInt@Value@Json@@2HB DD 07fffffffH			; Json::Value::maxInt
?maxUInt@Value@Json@@2IB DD 0ffffffffH			; Json::Value::maxUInt
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 08H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_K@std@@2HB DD 015H	; std::numeric_limits<unsigned __int64>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_J@std@@2HB DD 014H	; std::numeric_limits<__int64>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@K@std@@2HB DD 0bH	; std::numeric_limits<unsigned long>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@J@std@@2HB DD 0bH	; std::numeric_limits<long>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@I@std@@2HB DD 0bH	; std::numeric_limits<unsigned int>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@H@std@@2HB DD 0bH	; std::numeric_limits<int>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@G@std@@2HB DD 06H	; std::numeric_limits<unsigned short>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@F@std@@2HB DD 06H	; std::numeric_limits<short>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@E@std@@2HB DD 04H	; std::numeric_limits<unsigned char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@C@std@@2HB DD 04H	; std::numeric_limits<signed char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_N@std@@2HB DD 00H	; std::numeric_limits<bool>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_W@std@@2HB DD 06H	; std::numeric_limits<wchar_t>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@D@std@@2HB DD 04H	; std::numeric_limits<char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 01H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
EXTRN	_strlen:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 492  : 		}

  00003	5d		 pop	 ebp

; 491  : 		return (_CSTD strlen(_First));

  00004	e9 00 00 00 00	 jmp	 _strlen
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	_memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  : 		}

  00003	5d		 pop	 ebp

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000b	88 01		 mov	 BYTE PTR [ecx], al

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z	; std::_Container_base0::_Swap_all
; Function compile flags: /Ogsp
;	COMDAT ?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z PROC	; std::_Container_base0::_Swap_all, COMDAT
; _this$ = ecx

; 42   : 		}

  00000	c2 04 00	 ret	 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z ENDP	; std::_Container_base0::_Swap_all
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ; std::_Iterator_base0::_Getcont
; Function compile flags: /Ogsp
;	COMDAT ?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ PROC ; std::_Iterator_base0::_Getcont, COMDAT
; _this$ = ecx

; 53   : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 54   : 		}

  00002	c3		 ret	 0
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ENDP ; std::_Iterator_base0::_Getcont
_TEXT	ENDS
PUBLIC	??0StaticString@Json@@QAE@PBD@Z			; Json::StaticString::StaticString
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\value.h
;	COMDAT ??0StaticString@Json@@QAE@PBD@Z
_TEXT	SEGMENT
_czstring$ = 8						; size = 4
??0StaticString@Json@@QAE@PBD@Z PROC			; Json::StaticString::StaticString, COMDAT
; _this$ = ecx

; 67   :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR _czstring$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 68   :       }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0StaticString@Json@@QAE@PBD@Z ENDP			; Json::StaticString::StaticString
_TEXT	ENDS
PUBLIC	??BStaticString@Json@@QBEPBDXZ			; Json::StaticString::operator char const *
; Function compile flags: /Ogsp
;	COMDAT ??BStaticString@Json@@QBEPBDXZ
_TEXT	SEGMENT
??BStaticString@Json@@QBEPBDXZ PROC			; Json::StaticString::operator char const *, COMDAT
; _this$ = ecx

; 72   :          return str_;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 73   :       }

  00002	c3		 ret	 0
??BStaticString@Json@@QBEPBDXZ ENDP			; Json::StaticString::operator char const *
_TEXT	ENDS
PUBLIC	?c_str@StaticString@Json@@QBEPBDXZ		; Json::StaticString::c_str
; Function compile flags: /Ogsp
;	COMDAT ?c_str@StaticString@Json@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@StaticString@Json@@QBEPBDXZ PROC			; Json::StaticString::c_str, COMDAT
; _this$ = ecx

; 77   :          return str_;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 78   :       }

  00002	c3		 ret	 0
?c_str@StaticString@Json@@QBEPBDXZ ENDP			; Json::StaticString::c_str
_TEXT	ENDS
PUBLIC	??_7ValueAllocator@Json@@6B@			; Json::ValueAllocator::`vftable'
PUBLIC	??1ValueAllocator@Json@@UAE@XZ			; Json::ValueAllocator::~ValueAllocator
PUBLIC	??_R4ValueAllocator@Json@@6B@			; Json::ValueAllocator::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVValueAllocator@Json@@@8			; Json::ValueAllocator `RTTI Type Descriptor'
PUBLIC	??_R3ValueAllocator@Json@@8			; Json::ValueAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ValueAllocator@Json@@8			; Json::ValueAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ValueAllocator@Json@@8		; Json::ValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EValueAllocator@Json@@UAEPAXI@Z:PROC		; Json::ValueAllocator::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@ValueAllocator@Json@@8
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@ValueAllocator@Json@@8 DD FLAT:??_R0?AVValueAllocator@Json@@@8 ; Json::ValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R2ValueAllocator@Json@@8
rdata$r	SEGMENT
??_R2ValueAllocator@Json@@8 DD FLAT:??_R1A@?0A@EA@ValueAllocator@Json@@8 ; Json::ValueAllocator::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ValueAllocator@Json@@8
rdata$r	SEGMENT
??_R3ValueAllocator@Json@@8 DD 00H			; Json::ValueAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVValueAllocator@Json@@@8
_DATA	SEGMENT
??_R0?AVValueAllocator@Json@@@8 DD FLAT:??_7type_info@@6B@ ; Json::ValueAllocator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVValueAllocator@Json@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ValueAllocator@Json@@6B@
rdata$r	SEGMENT
??_R4ValueAllocator@Json@@6B@ DD 00H			; Json::ValueAllocator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVValueAllocator@Json@@@8
	DD	FLAT:??_R3ValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_7ValueAllocator@Json@@6B@
CONST	SEGMENT
??_7ValueAllocator@Json@@6B@ DD FLAT:??_R4ValueAllocator@Json@@6B@ ; Json::ValueAllocator::`vftable'
	DD	FLAT:??_EValueAllocator@Json@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1ValueAllocator@Json@@UAE@XZ
_TEXT	SEGMENT
??1ValueAllocator@Json@@UAE@XZ PROC			; Json::ValueAllocator::~ValueAllocator, COMDAT
; _this$ = ecx

; 56   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ValueAllocator@Json@@6B@

; 57   : }

  00006	c3		 ret	 0
??1ValueAllocator@Json@@UAE@XZ ENDP			; Json::ValueAllocator::~ValueAllocator
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GValueAllocator@Json@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GValueAllocator@Json@@UAEPAXI@Z PROC			; Json::ValueAllocator::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ValueAllocator@Json@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar@2
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GValueAllocator@Json@@UAEPAXI@Z ENDP			; Json::ValueAllocator::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1DefaultValueAllocator@Json@@UAE@XZ		; Json::DefaultValueAllocator::~DefaultValueAllocator
; Function compile flags: /Ogsp
;	COMDAT ??1DefaultValueAllocator@Json@@UAE@XZ
_TEXT	SEGMENT
??1DefaultValueAllocator@Json@@UAE@XZ PROC		; Json::DefaultValueAllocator::~DefaultValueAllocator, COMDAT
; _this$ = ecx

; 64   :    }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ValueAllocator@Json@@6B@
  00006	c3		 ret	 0
??1DefaultValueAllocator@Json@@UAE@XZ ENDP		; Json::DefaultValueAllocator::~DefaultValueAllocator
_TEXT	ENDS
PUBLIC	??0ValueAllocator@Json@@QAE@XZ			; Json::ValueAllocator::ValueAllocator
; Function compile flags: /Ogsp
;	COMDAT ??0ValueAllocator@Json@@QAE@XZ
_TEXT	SEGMENT
??0ValueAllocator@Json@@QAE@XZ PROC			; Json::ValueAllocator::ValueAllocator, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ValueAllocator@Json@@6B@
  00008	c3		 ret	 0
??0ValueAllocator@Json@@QAE@XZ ENDP			; Json::ValueAllocator::ValueAllocator
_TEXT	ENDS
PUBLIC	??0ValueIteratorBase@Json@@QAE@ABV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@Z ; Json::ValueIteratorBase::ValueIteratorBase
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_valueiterator.inl
;	COMDAT ??0ValueIteratorBase@Json@@QAE@ABV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@Z
_TEXT	SEGMENT
_current$ = 8						; size = 4
??0ValueIteratorBase@Json@@QAE@ABV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@Z PROC ; Json::ValueIteratorBase::ValueIteratorBase, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR _current$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 33   : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??0ValueIteratorBase@Json@@QAE@ABV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@Z ENDP ; Json::ValueIteratorBase::ValueIteratorBase
_TEXT	ENDS
PUBLIC	?copy@ValueIteratorBase@Json@@IAEXABV12@@Z	; Json::ValueIteratorBase::copy
; Function compile flags: /Ogsp
;	COMDAT ?copy@ValueIteratorBase@Json@@IAEXABV12@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?copy@ValueIteratorBase@Json@@IAEXABV12@@Z PROC		; Json::ValueIteratorBase::copy, COMDAT
; _this$ = ecx

; 144  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 145  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 146  :    current_ = other.current_;

  00003	8b 45 08	 mov	 eax, DWORD PTR _other$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 147  : #else
; 148  :    if ( isArray_ )
; 149  :       iterator_.array_ = other.iterator_.array_;
; 150  :    iterator_.map_ = other.iterator_.map_;
; 151  : #endif
; 152  : }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?copy@ValueIteratorBase@Json@@IAEXABV12@@Z ENDP		; Json::ValueIteratorBase::copy
_TEXT	ENDS
PUBLIC	??0ValueConstIterator@Json@@AAE@ABV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@Z ; Json::ValueConstIterator::ValueConstIterator
; Function compile flags: /Ogsp
;	COMDAT ??0ValueConstIterator@Json@@AAE@ABV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@Z
_TEXT	SEGMENT
_current$ = 8						; size = 4
??0ValueConstIterator@Json@@AAE@ABV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@Z PROC ; Json::ValueConstIterator::ValueConstIterator, COMDAT
; _this$ = ecx

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR _current$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 226  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??0ValueConstIterator@Json@@AAE@ABV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@Z ENDP ; Json::ValueConstIterator::ValueConstIterator
_TEXT	ENDS
PUBLIC	??4ValueConstIterator@Json@@QAEAAV01@ABVValueIteratorBase@1@@Z ; Json::ValueConstIterator::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4ValueConstIterator@Json@@QAEAAV01@ABVValueIteratorBase@1@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??4ValueConstIterator@Json@@QAEAAV01@ABVValueIteratorBase@1@@Z PROC ; Json::ValueConstIterator::operator=, COMDAT
; _this$ = ecx

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 242  :    copy( other );

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _other$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 243  :    return *this;
; 244  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
??4ValueConstIterator@Json@@QAEAAV01@ABVValueIteratorBase@1@@Z ENDP ; Json::ValueConstIterator::operator=
_TEXT	ENDS
PUBLIC	??0ValueIterator@Json@@AAE@ABV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@Z ; Json::ValueIterator::ValueIterator
; Function compile flags: /Ogsp
;	COMDAT ??0ValueIterator@Json@@AAE@ABV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@Z
_TEXT	SEGMENT
_current$ = 8						; size = 4
??0ValueIterator@Json@@AAE@ABV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@Z PROC ; Json::ValueIterator::ValueIterator, COMDAT
; _this$ = ecx

; 263  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR _current$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 264  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??0ValueIterator@Json@@AAE@ABV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@Z ENDP ; Json::ValueIterator::ValueIterator
_TEXT	ENDS
PUBLIC	??0ValueIterator@Json@@QAE@ABVValueConstIterator@1@@Z ; Json::ValueIterator::ValueIterator
; Function compile flags: /Ogsp
;	COMDAT ??0ValueIterator@Json@@QAE@ABVValueConstIterator@1@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??0ValueIterator@Json@@QAE@ABVValueConstIterator@1@@Z PROC ; Json::ValueIterator::ValueIterator, COMDAT
; _this$ = ecx

; 279  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR _other$[ebp]
  00007	57		 push	 edi
  00008	8b c1		 mov	 eax, ecx
  0000a	8b f8		 mov	 edi, eax
  0000c	a5		 movsd
  0000d	a4		 movsb
  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi

; 280  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??0ValueIterator@Json@@QAE@ABVValueConstIterator@1@@Z ENDP ; Json::ValueIterator::ValueIterator
_TEXT	ENDS
PUBLIC	??0ValueIterator@Json@@QAE@ABV01@@Z		; Json::ValueIterator::ValueIterator
; Function compile flags: /Ogsp
;	COMDAT ??0ValueIterator@Json@@QAE@ABV01@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??0ValueIterator@Json@@QAE@ABV01@@Z PROC		; Json::ValueIterator::ValueIterator, COMDAT
; _this$ = ecx

; 284  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR _other$[ebp]
  00007	57		 push	 edi
  00008	8b c1		 mov	 eax, ecx
  0000a	8b f8		 mov	 edi, eax
  0000c	a5		 movsd
  0000d	a4		 movsb
  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi

; 285  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??0ValueIterator@Json@@QAE@ABV01@@Z ENDP		; Json::ValueIterator::ValueIterator
_TEXT	ENDS
PUBLIC	??4ValueIterator@Json@@QAEAAV01@ABV01@@Z	; Json::ValueIterator::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4ValueIterator@Json@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??4ValueIterator@Json@@QAEAAV01@ABV01@@Z PROC		; Json::ValueIterator::operator=, COMDAT
; _this$ = ecx

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 290  :    copy( other );

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _other$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 291  :    return *this;
; 292  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
??4ValueIterator@Json@@QAEAAV01@ABV01@@Z ENDP		; Json::ValueIterator::operator=
_TEXT	ENDS
PUBLIC	??0CommentInfo@Value@Json@@QAE@XZ		; Json::Value::CommentInfo::CommentInfo
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
;	COMDAT ??0CommentInfo@Value@Json@@QAE@XZ
_TEXT	SEGMENT
??0CommentInfo@Value@Json@@QAE@XZ PROC			; Json::Value::CommentInfo::CommentInfo, COMDAT
; _this$ = ecx

; 141  : {

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 142  : }

  00005	c3		 ret	 0
??0CommentInfo@Value@Json@@QAE@XZ ENDP			; Json::Value::CommentInfo::CommentInfo
_TEXT	ENDS
PUBLIC	??0CZString@Value@Json@@QAE@H@Z			; Json::Value::CZString::CZString
; Function compile flags: /Ogsp
;	COMDAT ??0CZString@Value@Json@@QAE@H@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
??0CZString@Value@Json@@QAE@H@Z PROC			; Json::Value::CZString::CZString, COMDAT
; _this$ = ecx

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR _index$[ebp]
  00008	83 20 00	 and	 DWORD PTR [eax], 0
  0000b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 179  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??0CZString@Value@Json@@QAE@H@Z ENDP			; Json::Value::CZString::CZString
_TEXT	ENDS
PUBLIC	??MCZString@Value@Json@@QBE_NABV012@@Z		; Json::Value::CZString::operator<
EXTRN	_strcmp:PROC
; Function compile flags: /Ogsp
;	COMDAT ??MCZString@Value@Json@@QBE_NABV012@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??MCZString@Value@Json@@QBE_NABV012@@Z PROC		; Json::Value::CZString::operator<, COMDAT
; _this$ = ecx

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 221  :    if ( cstr_ )

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	85 c0		 test	 eax, eax
  00007	74 16		 je	 SHORT $LN1@operator

; 222  :       return strcmp( cstr_, other.cstr_ ) < 0;

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _other$[ebp]
  0000c	ff 31		 push	 DWORD PTR [ecx]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _strcmp
  00014	59		 pop	 ecx
  00015	59		 pop	 ecx
  00016	33 c9		 xor	 ecx, ecx
  00018	85 c0		 test	 eax, eax
  0001a	0f 98 c0	 sets	 al
  0001d	eb 0e		 jmp	 SHORT $LN2@operator
$LN1@operator:

; 223  :    return index_ < other.index_;

  0001f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00022	8b 55 08	 mov	 edx, DWORD PTR _other$[ebp]
  00025	33 c9		 xor	 ecx, ecx
  00027	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  0002a	0f 9c c0	 setl	 al
$LN2@operator:

; 224  : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??MCZString@Value@Json@@QBE_NABV012@@Z ENDP		; Json::Value::CZString::operator<
_TEXT	ENDS
PUBLIC	??8CZString@Value@Json@@QBE_NABV012@@Z		; Json::Value::CZString::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8CZString@Value@Json@@QBE_NABV012@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??8CZString@Value@Json@@QBE_NABV012@@Z PROC		; Json::Value::CZString::operator==, COMDAT
; _this$ = ecx

; 228  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :    if ( cstr_ )

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	85 c0		 test	 eax, eax
  00007	74 0f		 je	 SHORT $LN1@operator@2

; 230  :       return strcmp( cstr_, other.cstr_ ) == 0;

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _other$[ebp]
  0000c	ff 31		 push	 DWORD PTR [ecx]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _strcmp
  00014	59		 pop	 ecx
  00015	59		 pop	 ecx
  00016	eb 09		 jmp	 SHORT $LN4@operator@2
$LN1@operator@2:

; 231  :    return index_ == other.index_;

  00018	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _other$[ebp]
  0001e	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
$LN4@operator@2:
  00021	f7 d8		 neg	 eax
  00023	1b c0		 sbb	 eax, eax
  00025	40		 inc	 eax

; 232  : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??8CZString@Value@Json@@QBE_NABV012@@Z ENDP		; Json::Value::CZString::operator==
_TEXT	ENDS
PUBLIC	?index@CZString@Value@Json@@QBEHXZ		; Json::Value::CZString::index
; Function compile flags: /Ogsp
;	COMDAT ?index@CZString@Value@Json@@QBEHXZ
_TEXT	SEGMENT
?index@CZString@Value@Json@@QBEHXZ PROC			; Json::Value::CZString::index, COMDAT
; _this$ = ecx

; 238  :    return index_;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 239  : }

  00003	c3		 ret	 0
?index@CZString@Value@Json@@QBEHXZ ENDP			; Json::Value::CZString::index
_TEXT	ENDS
PUBLIC	?c_str@CZString@Value@Json@@QBEPBDXZ		; Json::Value::CZString::c_str
; Function compile flags: /Ogsp
;	COMDAT ?c_str@CZString@Value@Json@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@CZString@Value@Json@@QBEPBDXZ PROC		; Json::Value::CZString::c_str, COMDAT
; _this$ = ecx

; 245  :    return cstr_;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 246  : }

  00002	c3		 ret	 0
?c_str@CZString@Value@Json@@QBEPBDXZ ENDP		; Json::Value::CZString::c_str
_TEXT	ENDS
PUBLIC	?isStaticString@CZString@Value@Json@@QBE_NXZ	; Json::Value::CZString::isStaticString
; Function compile flags: /Ogsp
;	COMDAT ?isStaticString@CZString@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isStaticString@CZString@Value@Json@@QBE_NXZ PROC	; Json::Value::CZString::isStaticString, COMDAT
; _this$ = ecx

; 251  :    return index_ == noDuplication;

  00000	33 c0		 xor	 eax, eax
  00002	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  00005	0f 94 c0	 sete	 al

; 252  : }

  00008	c3		 ret	 0
?isStaticString@CZString@Value@Json@@QBE_NXZ ENDP	; Json::Value::CZString::isStaticString
_TEXT	ENDS
PUBLIC	??0Value@Json@@QAE@H@Z				; Json::Value::Value
; Function compile flags: /Ogsp
;	COMDAT ??0Value@Json@@QAE@H@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
??0Value@Json@@QAE@H@Z PROC				; Json::Value::Value, COMDAT
; _this$ = ecx

; 319  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 320  :    value_.int_ = value;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  00008	83 60 0c 00	 and	 DWORD PTR [eax+12], 0
  0000c	c6 40 08 01	 mov	 BYTE PTR [eax+8], 1
  00010	89 08		 mov	 DWORD PTR [eax], ecx

; 321  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??0Value@Json@@QAE@H@Z ENDP				; Json::Value::Value
_TEXT	ENDS
PUBLIC	??0Value@Json@@QAE@I@Z				; Json::Value::Value
; Function compile flags: /Ogsp
;	COMDAT ??0Value@Json@@QAE@I@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
??0Value@Json@@QAE@I@Z PROC				; Json::Value::Value, COMDAT
; _this$ = ecx

; 330  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 331  :    value_.uint_ = value;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  00008	83 60 0c 00	 and	 DWORD PTR [eax+12], 0
  0000c	c6 40 08 02	 mov	 BYTE PTR [eax+8], 2
  00010	89 08		 mov	 DWORD PTR [eax], ecx

; 332  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??0Value@Json@@QAE@I@Z ENDP				; Json::Value::Value
_TEXT	ENDS
PUBLIC	??0Value@Json@@QAE@N@Z				; Json::Value::Value
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ??0Value@Json@@QAE@N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 8
??0Value@Json@@QAE@N@Z PROC				; Json::Value::Value, COMDAT
; _this$ = ecx

; 340  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 341  :    value_.real_ = value;

  00003	dd 45 08	 fld	 QWORD PTR _value$[ebp]
  00006	8b c1		 mov	 eax, ecx
  00008	83 60 0c 00	 and	 DWORD PTR [eax+12], 0
  0000c	dd 18		 fstp	 QWORD PTR [eax]
  0000e	c6 40 08 03	 mov	 BYTE PTR [eax+8], 3

; 342  : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
??0Value@Json@@QAE@N@Z ENDP				; Json::Value::Value
_TEXT	ENDS
PUBLIC	??0Value@Json@@QAE@ABVStaticString@1@@Z		; Json::Value::Value
; Function compile flags: /Ogsp
;	COMDAT ??0Value@Json@@QAE@ABVStaticString@1@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
??0Value@Json@@QAE@ABVStaticString@1@@Z PROC		; Json::Value::Value, COMDAT
; _this$ = ecx

; 390  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 391  :    value_.string_ = const_cast<char *>( value.c_str() );

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  00008	c6 40 08 04	 mov	 BYTE PTR [eax+8], 4
  0000c	81 60 08 ff fe
	ff ff		 and	 DWORD PTR [eax+8], -257	; fffffeffH
  00013	83 60 0c 00	 and	 DWORD PTR [eax+12], 0
  00017	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00019	89 08		 mov	 DWORD PTR [eax], ecx

; 392  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??0Value@Json@@QAE@ABVStaticString@1@@Z ENDP		; Json::Value::Value
_TEXT	ENDS
PUBLIC	??0Value@Json@@QAE@_N@Z				; Json::Value::Value
; Function compile flags: /Ogsp
;	COMDAT ??0Value@Json@@QAE@_N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 1
??0Value@Json@@QAE@_N@Z PROC				; Json::Value::Value, COMDAT
; _this$ = ecx

; 414  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 415  :    value_.bool_ = value;

  00005	8a 4d 08	 mov	 cl, BYTE PTR _value$[ebp]
  00008	83 60 0c 00	 and	 DWORD PTR [eax+12], 0
  0000c	c6 40 08 05	 mov	 BYTE PTR [eax+8], 5
  00010	88 08		 mov	 BYTE PTR [eax], cl

; 416  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??0Value@Json@@QAE@_N@Z ENDP				; Json::Value::Value
_TEXT	ENDS
PUBLIC	?type@Value@Json@@QBE?AW4ValueType@2@XZ		; Json::Value::type
; Function compile flags: /Ogsp
;	COMDAT ?type@Value@Json@@QBE?AW4ValueType@2@XZ
_TEXT	SEGMENT
?type@Value@Json@@QBE?AW4ValueType@2@XZ PROC		; Json::Value::type, COMDAT
; _this$ = ecx

; 531  :    return type_;

  00000	0f be 41 08	 movsx	 eax, BYTE PTR [ecx+8]

; 532  : }

  00004	c3		 ret	 0
?type@Value@Json@@QBE?AW4ValueType@2@XZ ENDP		; Json::Value::type
_TEXT	ENDS
PUBLIC	?compare@Value@Json@@QAEHABV12@@Z		; Json::Value::compare
; Function compile flags: /Ogsp
;	COMDAT ?compare@Value@Json@@QAEHABV12@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?compare@Value@Json@@QAEHABV12@@Z PROC			; Json::Value::compare, COMDAT
; _this$ = ecx

; 538  :    /*
; 539  :    int typeDelta = other.type_ - type_;
; 540  :    switch ( type_ )
; 541  :    {
; 542  :    case nullValue:
; 543  : 
; 544  :       return other.type_ == type_;
; 545  :    case intValue:
; 546  :       if ( other.type_.isNumeric()
; 547  :    case uintValue:
; 548  :    case realValue:
; 549  :    case booleanValue:
; 550  :       break;
; 551  :    case stringValue,
; 552  :       break;
; 553  :    case arrayValue:
; 554  :       delete value_.array_;
; 555  :       break;
; 556  :    case objectValue:
; 557  :       delete value_.map_;
; 558  :    default:
; 559  :       JSON_ASSERT_UNREACHABLE;
; 560  :    }
; 561  :    */
; 562  :    return 0;  // unreachable

  00000	33 c0		 xor	 eax, eax

; 563  : }

  00002	c2 04 00	 ret	 4
?compare@Value@Json@@QAEHABV12@@Z ENDP			; Json::Value::compare
_TEXT	ENDS
PUBLIC	?asCString@Value@Json@@QBEPBDXZ			; Json::Value::asCString
; Function compile flags: /Ogsp
;	COMDAT ?asCString@Value@Json@@QBEPBDXZ
_TEXT	SEGMENT
?asCString@Value@Json@@QBEPBDXZ PROC			; Json::Value::asCString, COMDAT
; _this$ = ecx

; 680  :    JSON_ASSERT( type_ == stringValue );
; 681  :    return value_.string_;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 682  : }

  00002	c3		 ret	 0
?asCString@Value@Json@@QBEPBDXZ ENDP			; Json::Value::asCString
_TEXT	ENDS
PUBLIC	?asInt@Value@Json@@QBEHXZ			; Json::Value::asInt
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Ogsp
;	COMDAT ?asInt@Value@Json@@QBEHXZ
_TEXT	SEGMENT
?asInt@Value@Json@@QBEHXZ PROC				; Json::Value::asInt, COMDAT
; _this$ = ecx

; 719  :    switch ( type_ )

  00000	0f be 41 08	 movsx	 eax, BYTE PTR [ecx+8]
  00004	83 e8 00	 sub	 eax, 0
  00007	74 1d		 je	 SHORT $LN7@asInt
  00009	48		 dec	 eax
  0000a	74 17		 je	 SHORT $LN6@asInt
  0000c	48		 dec	 eax
  0000d	74 14		 je	 SHORT $LN6@asInt
  0000f	48		 dec	 eax
  00010	74 0a		 je	 SHORT $LN4@asInt
  00012	48		 dec	 eax
  00013	48		 dec	 eax

; 733  :    case stringValue:
; 734  :    case arrayValue:
; 735  :    case objectValue:
; 736  :       JSON_ASSERT_MESSAGE( false, "Type is not convertible to int" );
; 737  :    default:
; 738  :       JSON_ASSERT_UNREACHABLE;
; 739  :    }
; 740  :    return 0; // unreachable;

  00014	75 10		 jne	 SHORT $LN7@asInt

; 731  :    case booleanValue:
; 732  :       return value_.bool_ ? 1 : 0;

  00016	38 01		 cmp	 BYTE PTR [ecx], al
  00018	0f 95 c0	 setne	 al

; 741  : }

  0001b	c3		 ret	 0
$LN4@asInt:

; 725  :    case uintValue:
; 726  :       JSON_ASSERT_MESSAGE( value_.uint_ < (unsigned)maxInt, "integer out of signed integer range" );
; 727  :       return value_.uint_;
; 728  :    case realValue:
; 729  :       JSON_ASSERT_MESSAGE( value_.real_ >= minInt  &&  value_.real_ <= maxInt, "Real out of signed integer range" );
; 730  :       return Int( value_.real_ );

  0001c	dd 01		 fld	 QWORD PTR [ecx]
  0001e	e9 00 00 00 00	 jmp	 __ftol2_sse
$LN6@asInt:

; 723  :    case intValue:
; 724  :       return value_.int_;

  00023	8b 01		 mov	 eax, DWORD PTR [ecx]

; 741  : }

  00025	c3		 ret	 0
$LN7@asInt:

; 720  :    {
; 721  :    case nullValue:
; 722  :       return 0;

  00026	33 c0		 xor	 eax, eax

; 741  : }

  00028	c3		 ret	 0
?asInt@Value@Json@@QBEHXZ ENDP				; Json::Value::asInt
_TEXT	ENDS
PUBLIC	?asUInt@Value@Json@@QBEIXZ			; Json::Value::asUInt
EXTRN	__ftol2:PROC
; Function compile flags: /Ogsp
;	COMDAT ?asUInt@Value@Json@@QBEIXZ
_TEXT	SEGMENT
?asUInt@Value@Json@@QBEIXZ PROC				; Json::Value::asUInt, COMDAT
; _this$ = ecx

; 746  :    switch ( type_ )

  00000	0f be 41 08	 movsx	 eax, BYTE PTR [ecx+8]
  00004	83 e8 00	 sub	 eax, 0
  00007	74 1d		 je	 SHORT $LN7@asUInt
  00009	48		 dec	 eax
  0000a	74 17		 je	 SHORT $LN6@asUInt
  0000c	48		 dec	 eax
  0000d	74 14		 je	 SHORT $LN6@asUInt
  0000f	48		 dec	 eax
  00010	74 0a		 je	 SHORT $LN4@asUInt
  00012	48		 dec	 eax
  00013	48		 dec	 eax

; 760  :    case stringValue:
; 761  :    case arrayValue:
; 762  :    case objectValue:
; 763  :       JSON_ASSERT_MESSAGE( false, "Type is not convertible to uint" );
; 764  :    default:
; 765  :       JSON_ASSERT_UNREACHABLE;
; 766  :    }
; 767  :    return 0; // unreachable;

  00014	75 10		 jne	 SHORT $LN7@asUInt

; 758  :    case booleanValue:
; 759  :       return value_.bool_ ? 1 : 0;

  00016	38 01		 cmp	 BYTE PTR [ecx], al
  00018	0f 95 c0	 setne	 al

; 768  : }

  0001b	c3		 ret	 0
$LN4@asUInt:

; 753  :    case uintValue:
; 754  :       return value_.uint_;
; 755  :    case realValue:
; 756  :       JSON_ASSERT_MESSAGE( value_.real_ >= 0  &&  value_.real_ <= maxUInt,  "Real out of unsigned integer range" );
; 757  :       return UInt( value_.real_ );

  0001c	dd 01		 fld	 QWORD PTR [ecx]
  0001e	e9 00 00 00 00	 jmp	 __ftol2
$LN6@asUInt:

; 750  :    case intValue:
; 751  :       JSON_ASSERT_MESSAGE( value_.int_ >= 0, "Negative integer can not be converted to unsigned integer" );
; 752  :       return value_.int_;

  00023	8b 01		 mov	 eax, DWORD PTR [ecx]

; 768  : }

  00025	c3		 ret	 0
$LN7@asUInt:

; 747  :    {
; 748  :    case nullValue:
; 749  :       return 0;

  00026	33 c0		 xor	 eax, eax

; 768  : }

  00028	c3		 ret	 0
?asUInt@Value@Json@@QBEIXZ ENDP				; Json::Value::asUInt
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	__real@41f0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	?asDouble@Value@Json@@QBENXZ			; Json::Value::asDouble
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@41f0000000000000
CONST	SEGMENT
__real@41f0000000000000 DQ 041f0000000000000r	; 4.29497e+009
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?asDouble@Value@Json@@QBENXZ
_TEXT	SEGMENT
tv135 = -4						; size = 4
?asDouble@Value@Json@@QBENXZ PROC			; Json::Value::asDouble, COMDAT
; _this$ = ecx

; 772  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 773  :    switch ( type_ )

  00004	0f be 41 08	 movsx	 eax, BYTE PTR [ecx+8]
  00008	83 e8 00	 sub	 eax, 0
  0000b	74 2d		 je	 SHORT $LN7@asDouble
  0000d	48		 dec	 eax
  0000e	74 26		 je	 SHORT $LN6@asDouble
  00010	48		 dec	 eax
  00011	74 13		 je	 SHORT $LN5@asDouble
  00013	48		 dec	 eax
  00014	74 0c		 je	 SHORT $LN4@asDouble
  00016	48		 dec	 eax
  00017	48		 dec	 eax

; 785  :    case stringValue:
; 786  :    case arrayValue:
; 787  :    case objectValue:
; 788  :       JSON_ASSERT_MESSAGE( false, "Type is not convertible to double" );
; 789  :    default:
; 790  :       JSON_ASSERT_UNREACHABLE;
; 791  :    }
; 792  :    return 0; // unreachable;

  00018	75 20		 jne	 SHORT $LN7@asDouble

; 783  :    case booleanValue:
; 784  :       return value_.bool_ ? 1.0 : 0.0;

  0001a	38 01		 cmp	 BYTE PTR [ecx], al
  0001c	74 1c		 je	 SHORT $LN7@asDouble
  0001e	d9 e8		 fld1

; 793  : }

  00020	c9		 leave
  00021	c3		 ret	 0
$LN4@asDouble:

; 781  :    case realValue:
; 782  :       return value_.real_;

  00022	dd 01		 fld	 QWORD PTR [ecx]

; 793  : }

  00024	c9		 leave
  00025	c3		 ret	 0
$LN5@asDouble:

; 779  :    case uintValue:
; 780  :       return value_.uint_;

  00026	8b 01		 mov	 eax, DWORD PTR [ecx]
  00028	db 01		 fild	 DWORD PTR [ecx]
  0002a	85 c0		 test	 eax, eax
  0002c	79 0e		 jns	 SHORT $LN10@asDouble
  0002e	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@41f0000000000000

; 793  : }

  00034	c9		 leave
  00035	c3		 ret	 0
$LN6@asDouble:

; 777  :    case intValue:
; 778  :       return value_.int_;

  00036	db 01		 fild	 DWORD PTR [ecx]

; 793  : }

  00038	c9		 leave
  00039	c3		 ret	 0
$LN7@asDouble:

; 774  :    {
; 775  :    case nullValue:
; 776  :       return 0.0;

  0003a	d9 ee		 fldz
$LN10@asDouble:

; 793  : }

  0003c	c9		 leave
  0003d	c3		 ret	 0
?asDouble@Value@Json@@QBENXZ ENDP			; Json::Value::asDouble
_TEXT	ENDS
PUBLIC	?isNull@Value@Json@@QBE_NXZ			; Json::Value::isNull
; Function compile flags: /Ogsp
;	COMDAT ?isNull@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isNull@Value@Json@@QBE_NXZ PROC			; Json::Value::isNull, COMDAT
; _this$ = ecx

; 1258 :    return type_ == nullValue;

  00000	33 c0		 xor	 eax, eax
  00002	38 41 08	 cmp	 BYTE PTR [ecx+8], al
  00005	0f 94 c0	 sete	 al

; 1259 : }

  00008	c3		 ret	 0
?isNull@Value@Json@@QBE_NXZ ENDP			; Json::Value::isNull
_TEXT	ENDS
PUBLIC	?isBool@Value@Json@@QBE_NXZ			; Json::Value::isBool
; Function compile flags: /Ogsp
;	COMDAT ?isBool@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isBool@Value@Json@@QBE_NXZ PROC			; Json::Value::isBool, COMDAT
; _this$ = ecx

; 1265 :    return type_ == booleanValue;

  00000	33 c0		 xor	 eax, eax
  00002	80 79 08 05	 cmp	 BYTE PTR [ecx+8], 5
  00006	0f 94 c0	 sete	 al

; 1266 : }

  00009	c3		 ret	 0
?isBool@Value@Json@@QBE_NXZ ENDP			; Json::Value::isBool
_TEXT	ENDS
PUBLIC	?isInt@Value@Json@@QBE_NXZ			; Json::Value::isInt
; Function compile flags: /Ogsp
;	COMDAT ?isInt@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isInt@Value@Json@@QBE_NXZ PROC				; Json::Value::isInt, COMDAT
; _this$ = ecx

; 1272 :    return type_ == intValue;

  00000	33 c0		 xor	 eax, eax
  00002	80 79 08 01	 cmp	 BYTE PTR [ecx+8], 1
  00006	0f 94 c0	 sete	 al

; 1273 : }

  00009	c3		 ret	 0
?isInt@Value@Json@@QBE_NXZ ENDP				; Json::Value::isInt
_TEXT	ENDS
PUBLIC	?isUInt@Value@Json@@QBE_NXZ			; Json::Value::isUInt
; Function compile flags: /Ogsp
;	COMDAT ?isUInt@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isUInt@Value@Json@@QBE_NXZ PROC			; Json::Value::isUInt, COMDAT
; _this$ = ecx

; 1279 :    return type_ == uintValue;

  00000	33 c0		 xor	 eax, eax
  00002	80 79 08 02	 cmp	 BYTE PTR [ecx+8], 2
  00006	0f 94 c0	 sete	 al

; 1280 : }

  00009	c3		 ret	 0
?isUInt@Value@Json@@QBE_NXZ ENDP			; Json::Value::isUInt
_TEXT	ENDS
PUBLIC	?isIntegral@Value@Json@@QBE_NXZ			; Json::Value::isIntegral
; Function compile flags: /Ogsp
;	COMDAT ?isIntegral@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isIntegral@Value@Json@@QBE_NXZ PROC			; Json::Value::isIntegral, COMDAT
; _this$ = ecx

; 1286 :    return type_ == intValue  
; 1287 :           ||  type_ == uintValue  
; 1288 :           ||  type_ == booleanValue;

  00000	8a 41 08	 mov	 al, BYTE PTR [ecx+8]
  00003	3c 01		 cmp	 al, 1
  00005	74 0b		 je	 SHORT $LN3@isIntegral
  00007	3c 02		 cmp	 al, 2
  00009	74 07		 je	 SHORT $LN3@isIntegral
  0000b	3c 05		 cmp	 al, 5
  0000d	74 03		 je	 SHORT $LN3@isIntegral
  0000f	33 c0		 xor	 eax, eax

; 1289 : }

  00011	c3		 ret	 0
$LN3@isIntegral:

; 1286 :    return type_ == intValue  
; 1287 :           ||  type_ == uintValue  
; 1288 :           ||  type_ == booleanValue;

  00012	33 c0		 xor	 eax, eax
  00014	40		 inc	 eax

; 1289 : }

  00015	c3		 ret	 0
?isIntegral@Value@Json@@QBE_NXZ ENDP			; Json::Value::isIntegral
_TEXT	ENDS
PUBLIC	?isDouble@Value@Json@@QBE_NXZ			; Json::Value::isDouble
; Function compile flags: /Ogsp
;	COMDAT ?isDouble@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isDouble@Value@Json@@QBE_NXZ PROC			; Json::Value::isDouble, COMDAT
; _this$ = ecx

; 1295 :    return type_ == realValue;

  00000	33 c0		 xor	 eax, eax
  00002	80 79 08 03	 cmp	 BYTE PTR [ecx+8], 3
  00006	0f 94 c0	 sete	 al

; 1296 : }

  00009	c3		 ret	 0
?isDouble@Value@Json@@QBE_NXZ ENDP			; Json::Value::isDouble
_TEXT	ENDS
PUBLIC	?isNumeric@Value@Json@@QBE_NXZ			; Json::Value::isNumeric
; Function compile flags: /Ogsp
;	COMDAT ?isNumeric@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isNumeric@Value@Json@@QBE_NXZ PROC			; Json::Value::isNumeric, COMDAT
; _this$ = ecx

; 1302 :    return isIntegral() || isDouble();

  00000	e8 00 00 00 00	 call	 ?isIntegral@Value@Json@@QBE_NXZ ; Json::Value::isIntegral
  00005	84 c0		 test	 al, al
  00007	75 09		 jne	 SHORT $LN3@isNumeric
  00009	80 79 08 03	 cmp	 BYTE PTR [ecx+8], 3
  0000d	74 03		 je	 SHORT $LN3@isNumeric
  0000f	33 c0		 xor	 eax, eax

; 1303 : }

  00011	c3		 ret	 0
$LN3@isNumeric:

; 1302 :    return isIntegral() || isDouble();

  00012	33 c0		 xor	 eax, eax
  00014	40		 inc	 eax

; 1303 : }

  00015	c3		 ret	 0
?isNumeric@Value@Json@@QBE_NXZ ENDP			; Json::Value::isNumeric
_TEXT	ENDS
PUBLIC	?isString@Value@Json@@QBE_NXZ			; Json::Value::isString
; Function compile flags: /Ogsp
;	COMDAT ?isString@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isString@Value@Json@@QBE_NXZ PROC			; Json::Value::isString, COMDAT
; _this$ = ecx

; 1309 :    return type_ == stringValue;

  00000	33 c0		 xor	 eax, eax
  00002	80 79 08 04	 cmp	 BYTE PTR [ecx+8], 4
  00006	0f 94 c0	 sete	 al

; 1310 : }

  00009	c3		 ret	 0
?isString@Value@Json@@QBE_NXZ ENDP			; Json::Value::isString
_TEXT	ENDS
PUBLIC	?isArray@Value@Json@@QBE_NXZ			; Json::Value::isArray
; Function compile flags: /Ogsp
;	COMDAT ?isArray@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isArray@Value@Json@@QBE_NXZ PROC			; Json::Value::isArray, COMDAT
; _this$ = ecx

; 1316 :    return type_ == nullValue  ||  type_ == arrayValue;

  00000	8a 41 08	 mov	 al, BYTE PTR [ecx+8]
  00003	84 c0		 test	 al, al
  00005	74 07		 je	 SHORT $LN3@isArray
  00007	3c 06		 cmp	 al, 6
  00009	74 03		 je	 SHORT $LN3@isArray
  0000b	33 c0		 xor	 eax, eax

; 1317 : }

  0000d	c3		 ret	 0
$LN3@isArray:

; 1316 :    return type_ == nullValue  ||  type_ == arrayValue;

  0000e	33 c0		 xor	 eax, eax
  00010	40		 inc	 eax

; 1317 : }

  00011	c3		 ret	 0
?isArray@Value@Json@@QBE_NXZ ENDP			; Json::Value::isArray
_TEXT	ENDS
PUBLIC	?isObject@Value@Json@@QBE_NXZ			; Json::Value::isObject
; Function compile flags: /Ogsp
;	COMDAT ?isObject@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isObject@Value@Json@@QBE_NXZ PROC			; Json::Value::isObject, COMDAT
; _this$ = ecx

; 1323 :    return type_ == nullValue  ||  type_ == objectValue;

  00000	8a 41 08	 mov	 al, BYTE PTR [ecx+8]
  00003	84 c0		 test	 al, al
  00005	74 07		 je	 SHORT $LN3@isObject
  00007	3c 07		 cmp	 al, 7
  00009	74 03		 je	 SHORT $LN3@isObject
  0000b	33 c0		 xor	 eax, eax

; 1324 : }

  0000d	c3		 ret	 0
$LN3@isObject:

; 1323 :    return type_ == nullValue  ||  type_ == objectValue;

  0000e	33 c0		 xor	 eax, eax
  00010	40		 inc	 eax

; 1324 : }

  00011	c3		 ret	 0
?isObject@Value@Json@@QBE_NXZ ENDP			; Json::Value::isObject
_TEXT	ENDS
PUBLIC	?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ; Json::Value::hasComment
; Function compile flags: /Ogsp
;	COMDAT ?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z
_TEXT	SEGMENT
_placement$ = 8						; size = 4
?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z PROC ; Json::Value::hasComment, COMDAT
; _this$ = ecx

; 1347 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1348 :    return comments_ != 0  &&  comments_[placement].comment_ != 0;

  00003	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00006	85 c0		 test	 eax, eax
  00008	74 0e		 je	 SHORT $LN3@hasComment
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _placement$[ebp]
  0000d	83 3c 88 00	 cmp	 DWORD PTR [eax+ecx*4], 0
  00011	74 05		 je	 SHORT $LN3@hasComment
  00013	33 c0		 xor	 eax, eax
  00015	40		 inc	 eax
  00016	eb 02		 jmp	 SHORT $LN4@hasComment
$LN3@hasComment:
  00018	33 c0		 xor	 eax, eax
$LN4@hasComment:

; 1349 : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ENDP ; Json::Value::hasComment
_TEXT	ENDS
PUBLIC	?invalidPath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; Json::Path::invalidPath
; Function compile flags: /Ogsp
;	COMDAT ?invalidPath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
_TEXT	SEGMENT
_path$ = 8						; size = 4
_location$ = 12						; size = 4
?invalidPath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z PROC ; Json::Path::invalidPath, COMDAT
; _this$ = ecx

; 1628 :    // Error: invalid path.
; 1629 : }

  00000	c2 08 00	 ret	 8
?invalidPath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ENDP ; Json::Path::invalidPath
_TEXT	ENDS
PUBLIC	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length, COMDAT
; _this$ = ecx

; 1506 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1507 : 		}

  00003	c3		 ret	 0
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1511 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1512 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::size, COMDAT
; _this$ = ecx

; 869  : 		return (this->_Mysize);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 870  : 		}

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::size
_TEXT	ENDS
PUBLIC	?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::empty
; Function compile flags: /Ogsp
;	COMDAT ?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::empty, COMDAT
; _this$ = ecx

; 879  : 		return (size() == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00005	0f 94 c0	 sete	 al

; 880  : 		}

  00008	c3		 ret	 0
?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::empty
_TEXT	ENDS
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator==, COMDAT
; _this$ = ecx

; 316  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 318  : 		if (this->_Getcont() == 0
; 319  : 			|| this->_Getcont() != _Right._Getcont())
; 320  : 			{	// report error
; 321  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 322  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 323  : 			}
; 324  : 
; 325  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 326  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 327  : 			&& this->_Getcont() == _Right._Getcont());
; 328  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 329  : 
; 330  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 331  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator==
_TEXT	ENDS
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator!=, COMDAT
; _this$ = ecx

; 334  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 335  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 336  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator!=
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABQBVPathArgument@Json@@XZ ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABQBVPathArgument@Json@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABQBVPathArgument@Json@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABQBVPathArgument@Json@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::operator*
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABVPathArgument@Json@@XZ ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABVPathArgument@Json@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABVPathArgument@Json@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABVPathArgument@Json@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 24	 add	 DWORD PTR [eax], 36	; 00000024H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::operator++
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2009 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2010 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2011 : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 2009 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2010 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2011 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBE_NPBQBVPathArgument@Json@@@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBE_NPBQBVPathArgument@Json@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBE_NPBQBVPathArgument@Json@@@Z PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBE_NPBQBVPathArgument@Json@@@Z ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEXPAPBVPathArgument@Json@@0@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEXPAPBVPathArgument@Json@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEXPAPBVPathArgument@Json@@0@Z PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEXPAPBVPathArgument@Json@@0@Z ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ ; std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::~_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::~_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::~_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
_TEXT	ENDS
PUBLIC	??0?$allocator@PBVPathArgument@Json@@@std@@QAE@XZ ; std::allocator<Json::PathArgument const *>::allocator<Json::PathArgument const *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PBVPathArgument@Json@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PBVPathArgument@Json@@@std@@QAE@XZ PROC	; std::allocator<Json::PathArgument const *>::allocator<Json::PathArgument const *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@PBVPathArgument@Json@@@std@@QAE@XZ ENDP	; std::allocator<Json::PathArgument const *>::allocator<Json::PathArgument const *>
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBE_NPBVPathArgument@Json@@@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBE_NPBVPathArgument@Json@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBE_NPBVPathArgument@Json@@@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside@2
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside@2
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside@2
$LN3@Inside@2:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside@2:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBE_NPBVPathArgument@Json@@@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEXPAVPathArgument@Json@@0@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEXPAVPathArgument@Json@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEXPAVPathArgument@Json@@0@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEXPAVPathArgument@Json@@0@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ ; std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> >::~_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> >::~_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> >::~_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> >
_TEXT	ENDS
PUBLIC	??0?$allocator@VPathArgument@Json@@@std@@QAE@XZ	; std::allocator<Json::PathArgument>::allocator<Json::PathArgument>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@VPathArgument@Json@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@VPathArgument@Json@@@std@@QAE@XZ PROC	; std::allocator<Json::PathArgument>::allocator<Json::PathArgument>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@VPathArgument@Json@@@std@@QAE@XZ ENDP	; std::allocator<Json::PathArgument>::allocator<Json::PathArgument>
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Color
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Color, COMDAT

; 606  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 607  : 		return ((char&)(*_Pnode)._Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 24	 add	 eax, 36			; 00000024H

; 608  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Color
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Isnil
; Function compile flags: /Ogsp
;	COMDAT ?_Isnil@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Isnil, COMDAT

; 611  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 612  : 		return ((char&)(*_Pnode)._Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 25	 add	 eax, 37			; 00000025H

; 613  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Left
; Function compile flags: /Ogsp
;	COMDAT ?_Left@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Left, COMDAT

; 621  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 622  : 		return ((_Nodepref)(*_Pnode)._Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 623  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Parent
; Function compile flags: /Ogsp
;	COMDAT ?_Parent@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Parent, COMDAT

; 626  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 627  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 628  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Right
; Function compile flags: /Ogsp
;	COMDAT ?_Right@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Right, COMDAT

; 631  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 632  : 		return ((_Nodepref)(*_Pnode)._Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 633  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAU?$pair@$$CBVCZString@Value@Json@@V23@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Myval
; Function compile flags: /Ogsp
;	COMDAT ?_Myval@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAU?$pair@$$CBVCZString@Value@Json@@V23@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAU?$pair@$$CBVCZString@Value@Json@@V23@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Myval, COMDAT

; 636  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 637  : 		return ((reference)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 638  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAU?$pair@$$CBVCZString@Value@Json@@V23@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Max
; Function compile flags: /Ogsp
;	COMDAT ?_Max@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Max, COMDAT

; 641  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		while (!_Isnil(_Right(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	eb 02		 jmp	 SHORT $LN14@Max
$LL2@Max:

; 643  : 			_Pnode = _Right(_Pnode);

  00008	8b c1		 mov	 eax, ecx
$LN14@Max:

; 642  : 		while (!_Isnil(_Right(_Pnode)))

  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000d	80 79 25 00	 cmp	 BYTE PTR [ecx+37], 0
  00011	74 f5		 je	 SHORT $LL2@Max

; 644  : 		return (_Pnode);
; 645  : 		}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Max@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Max
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Min
; Function compile flags: /Ogsp
;	COMDAT ?_Min@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Min, COMDAT

; 648  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 649  : 		while (!_Isnil(_Left(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	eb 02		 jmp	 SHORT $LN14@Min
$LL2@Min:

; 650  : 			_Pnode = _Left(_Pnode);

  00008	8b c1		 mov	 eax, ecx
$LN14@Min:

; 649  : 		while (!_Isnil(_Left(_Pnode)))

  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	80 79 25 00	 cmp	 BYTE PTR [ecx+37], 0
  00010	74 f6		 je	 SHORT $LL2@Min

; 651  : 		return (_Pnode);
; 652  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?_Min@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Min
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAE@XZ ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::allocator<std::pair<Json::Value::CZString const ,Json::Value> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::allocator<std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::allocator<std::pair<Json::Value::CZString const ,Json::Value> >
_TEXT	ENDS
PUBLIC	??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z ; std::less<Json::Value::CZString>::operator()
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xfunctional
;	COMDAT ??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z PROC ; std::less<Json::Value::CZString>::operator(), COMDAT
; _this$ = ecx

; 124  : 		{	// apply operator< to operands

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		return (_Left < _Right);

  00003	ff 75 0c	 push	 DWORD PTR __Right$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00009	e8 00 00 00 00	 call	 ??MCZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator<

; 126  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z ENDP ; std::less<Json::Value::CZString>::operator()
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 58   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 59   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	53		 push	 ebx
  00005	32 db		 xor	 bl, bl
  00007	38 59 25	 cmp	 BYTE PTR [ecx+37], bl
  0000a	75 2d		 jne	 SHORT $LN3@operator@3

; 60   : 			;	// end() shouldn't be incremented, don't move
; 61   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0000c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0000f	38 5a 25	 cmp	 BYTE PTR [edx+37], bl
  00012	75 0d		 jne	 SHORT $LN34@operator@3

; 62   : 			_Ptr = _Mytree::_Min(
; 63   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree

$LL18@operator@3:
  00014	8b ca		 mov	 ecx, edx
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	38 5a 25	 cmp	 BYTE PTR [edx+37], bl
  0001b	74 f7		 je	 SHORT $LL18@operator@3
  0001d	89 08		 mov	 DWORD PTR [eax], ecx
  0001f	5b		 pop	 ebx

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  00020	c3		 ret	 0
$LN34@operator@3:

; 64   : 		else
; 65   : 			{	// climb looking for right subtree
; 66   : 			_Nodeptr _Pnode;
; 67   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 68   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  00021	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00024	eb 0c		 jmp	 SHORT $LN38@operator@3
$LL2@operator@3:
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  0002b	75 0a		 jne	 SHORT $LN1@operator@3

; 69   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0002d	89 10		 mov	 DWORD PTR [eax], edx
  0002f	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
$LN38@operator@3:

; 64   : 		else
; 65   : 			{	// climb looking for right subtree
; 66   : 			_Nodeptr _Pnode;
; 67   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 68   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  00032	38 5a 25	 cmp	 BYTE PTR [edx+37], bl
  00035	74 ef		 je	 SHORT $LL2@operator@3
$LN1@operator@3:

; 70   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00037	89 10		 mov	 DWORD PTR [eax], edx
$LN3@operator@3:
  00039	5b		 pop	 ebx

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  0003a	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator++
_TEXT	ENDS
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator--
; Function compile flags: /Ogsp
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 83   : 		{	// predecrement

  00000	8b c1		 mov	 eax, ecx

; 84   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	53		 push	 ebx
  00005	32 db		 xor	 bl, bl
  00007	38 59 25	 cmp	 BYTE PTR [ecx+37], bl
  0000a	74 07		 je	 SHORT $LN8@operator@4

; 85   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0000c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
  00011	5b		 pop	 ebx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  00012	c3		 ret	 0
$LN8@operator@4:

; 86   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	38 5a 25	 cmp	 BYTE PTR [edx+37], bl
  00018	74 07		 je	 SHORT $LN44@operator@4

; 90   : 			{	// climb looking for left subtree
; 91   : 			_Nodeptr _Pnode;
; 92   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 93   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	eb 17		 jmp	 SHORT $LN46@operator@4

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

$LL22@operator@4:
  0001f	8b d1		 mov	 edx, ecx
$LN44@operator@4:
  00021	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00024	38 59 25	 cmp	 BYTE PTR [ecx+37], bl
  00027	74 f6		 je	 SHORT $LL22@operator@4

; 89   : 		else

  00029	eb 17		 jmp	 SHORT $LN45@operator@4
$LL4@operator@4:

; 90   : 			{	// climb looking for left subtree
; 91   : 			_Nodeptr _Pnode;
; 92   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 93   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  0002b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002d	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0002f	75 0a		 jne	 SHORT $LN3@operator@4

; 94   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  00031	89 10		 mov	 DWORD PTR [eax], edx
  00033	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
$LN46@operator@4:

; 90   : 			{	// climb looking for left subtree
; 91   : 			_Nodeptr _Pnode;
; 92   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 93   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  00036	38 5a 25	 cmp	 BYTE PTR [edx+37], bl
  00039	74 f0		 je	 SHORT $LL4@operator@4
$LN3@operator@4:

; 95   : 			if (_Mytree::_Isnil(_Ptr))

  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	38 59 25	 cmp	 BYTE PTR [ecx+37], bl
  00040	75 02		 jne	 SHORT $LN1@operator@4
$LN45@operator@4:

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else
; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  00042	89 10		 mov	 DWORD PTR [eax], edx
$LN1@operator@4:
  00044	5b		 pop	 ebx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  00045	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator--
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::_Mynode
; Function compile flags: /Ogsp
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 122  : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 123  : 		}

  00002	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
PUBLIC	?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 1c		 push	 28			; 0000001cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 1c		 push	 28			; 0000001cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBE_NPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBE_NPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBE_NPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside@3
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside@3
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside@3
$LN3@Inside@3:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside@3:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBE_NPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Inside
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAE@PAPBVPathArgument@Json@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Vector_const_iterator<std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAE@PAPBVPathArgument@Json@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAE@PAPBVPathArgument@Json@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Vector_const_iterator<std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAE@PAPBVPathArgument@Json@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Vector_const_iterator<std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Compat
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAE@PAVPathArgument@Json@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAE@PAVPathArgument@Json@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAE@PAVPathArgument@Json@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAE@PAVPathArgument@Json@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 1905 : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1906 : 		return (this->_Alval);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1907 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2003 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2004 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr@2
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2005 : 		}

  00008	c3		 ret	 0
$LN3@Myptr@2:

; 2003 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2004 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2005 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2020 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN4@Xran:
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEXXZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEXXZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000a	cc		 int	 3
?_Xlen@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEXXZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@PBVPathArgument@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::PathArgument const *>::allocator<Json::PathArgument const *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PBVPathArgument@Json@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PBVPathArgument@Json@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Json::PathArgument const *>::allocator<Json::PathArgument const *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PBVPathArgument@Json@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Json::PathArgument const *>::allocator<Json::PathArgument const *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PBVPathArgument@Json@@@std@@QAEXPAPBVPathArgument@Json@@I@Z ; std::allocator<Json::PathArgument const *>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@PBVPathArgument@Json@@@std@@QAEXPAPBVPathArgument@Json@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PBVPathArgument@Json@@@std@@QAEXPAPBVPathArgument@Json@@I@Z PROC ; std::allocator<Json::PathArgument const *>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@PBVPathArgument@Json@@@std@@QAEXPAPBVPathArgument@Json@@I@Z ENDP ; std::allocator<Json::PathArgument const *>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 24		 push	 36			; 00000024H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 24		 push	 36			; 00000024H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEXXZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEXXZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen@3:
$LN3@Xlen@3:
  0000a	cc		 int	 3
?_Xlen@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEXXZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@VPathArgument@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::PathArgument>::allocator<Json::PathArgument>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@VPathArgument@Json@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@VPathArgument@Json@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Json::PathArgument>::allocator<Json::PathArgument>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@VPathArgument@Json@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Json::PathArgument>::allocator<Json::PathArgument>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@I@Z ; std::allocator<Json::PathArgument>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@I@Z PROC ; std::allocator<Json::PathArgument>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@I@Z ENDP ; std::allocator<Json::PathArgument>::deallocate
_TEXT	ENDS
PUBLIC	?key_comp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AU?$less@VCZString@Value@Json@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::key_comp
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?key_comp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AU?$less@VCZString@Value@Json@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?key_comp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AU?$less@VCZString@Value@Json@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::key_comp, COMDAT
; _this$ = ecx

; 888  : 		{	// return object for comparing keys

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 889  : 		return (this->comp);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 890  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?key_comp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AU?$less@VCZString@Value@Json@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::key_comp
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::allocator<std::pair<Json::Value::CZString const ,Json::Value> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::allocator<std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::allocator<std::pair<Json::Value::CZString const ,Json::Value> >
_TEXT	ENDS
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 38   : 		{	// construct with null node pointer

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 39   : 		}

  00005	c3		 ret	 0
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	?get_allocator@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::get_allocator
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?get_allocator@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::get_allocator, COMDAT
; _this$ = ecx

; 893  : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 894  : 		return (this->_Alval);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 895  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?get_allocator@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::get_allocator
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Compat
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2015 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen@4:
$LN3@Xlen@4:
  0000a	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PBVPathArgument@Json@@@std@@QBEIXZ ; std::allocator<Json::PathArgument const *>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@PBVPathArgument@Json@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PBVPathArgument@Json@@@std@@QBEIXZ PROC ; std::allocator<Json::PathArgument const *>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PBVPathArgument@Json@@@std@@QBEIXZ ENDP ; std::allocator<Json::PathArgument const *>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@VPathArgument@Json@@@std@@QBEIXZ ; std::allocator<Json::PathArgument>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@VPathArgument@Json@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@VPathArgument@Json@@@std@@QBEIXZ PROC ; std::allocator<Json::PathArgument>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 c7 71 1c 07	 mov	 eax, 119304647		; 071c71c7H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@VPathArgument@Json@@@std@@QBEIXZ ENDP ; std::allocator<Json::PathArgument>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 44   : 		this->_Adopt(_Plist);
; 45   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 1c	 add	 DWORD PTR [eax], 28	; 0000001cH

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator++
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 220  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@QAE@U?$less@VCZString@Value@Json@@@1@@Z ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??0?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@QAE@U?$less@VCZString@Value@Json@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 1
??0?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@QAE@U?$less@VCZString@Value@Json@@@1@@Z PROC ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with specified comparator

  00000	8b c1		 mov	 eax, ecx

; 41   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@QAE@U?$less@VCZString@Value@Json@@@1@@Z ENDP ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Compat
_TEXT	ENDS
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$addressof@PBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@AAPBV12@@Z ; std::addressof<Json::PathArgument const *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@PBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@AAPBV12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@AAPBV12@@Z PROC ; std::addressof<Json::PathArgument const *>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@AAPBV12@@Z ENDP ; std::addressof<Json::PathArgument const *>
_TEXT	ENDS
PUBLIC	??$forward@PBVPathArgument@Json@@@std@@YA$$QAPBVPathArgument@Json@@AAPBV12@@Z ; std::forward<Json::PathArgument const *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@PBVPathArgument@Json@@@std@@YA$$QAPBVPathArgument@Json@@AAPBV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PBVPathArgument@Json@@@std@@YA$$QAPBVPathArgument@Json@@AAPBV12@@Z PROC ; std::forward<Json::PathArgument const *>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@PBVPathArgument@Json@@@std@@YA$$QAPBVPathArgument@Json@@AAPBV12@@Z ENDP ; std::forward<Json::PathArgument const *>
_TEXT	ENDS
PUBLIC	??$addressof@VPathArgument@Json@@@std@@YAPAVPathArgument@Json@@AAV12@@Z ; std::addressof<Json::PathArgument>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@VPathArgument@Json@@@std@@YAPAVPathArgument@Json@@AAV12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@VPathArgument@Json@@@std@@YAPAVPathArgument@Json@@AAV12@@Z PROC ; std::addressof<Json::PathArgument>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@VPathArgument@Json@@@std@@YAPAVPathArgument@Json@@AAV12@@Z ENDP ; std::addressof<Json::PathArgument>
_TEXT	ENDS
PUBLIC	??$forward@VPathArgument@Json@@@std@@YA$$QAVPathArgument@Json@@AAV12@@Z ; std::forward<Json::PathArgument>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@VPathArgument@Json@@@std@@YA$$QAVPathArgument@Json@@AAV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@VPathArgument@Json@@@std@@YA$$QAVPathArgument@Json@@AAV12@@Z PROC ; std::forward<Json::PathArgument>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@VPathArgument@Json@@@std@@YA$$QAVPathArgument@Json@@AAV12@@Z ENDP ; std::forward<Json::PathArgument>
_TEXT	ENDS
PUBLIC	??$addressof@$$CBVPathArgument@Json@@@std@@YAPBVPathArgument@Json@@ABV12@@Z ; std::addressof<Json::PathArgument const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBVPathArgument@Json@@@std@@YAPBVPathArgument@Json@@ABV12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBVPathArgument@Json@@@std@@YAPBVPathArgument@Json@@ABV12@@Z PROC ; std::addressof<Json::PathArgument const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBVPathArgument@Json@@@std@@YAPBVPathArgument@Json@@ABV12@@Z ENDP ; std::addressof<Json::PathArgument const >
_TEXT	ENDS
PUBLIC	??$addressof@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAPAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU10@@Z ; std::addressof<std::pair<Json::Value::CZString const ,Json::Value> >
; Function compile flags: /Ogsp
;	COMDAT ??$addressof@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAPAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAPAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU10@@Z PROC ; std::addressof<std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAPAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU10@@Z ENDP ; std::addressof<std::pair<Json::Value::CZString const ,Json::Value> >
_TEXT	ENDS
PUBLIC	??$forward@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA$$QAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AAV10@@Z ; std::forward<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA$$QAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA$$QAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AAV10@@Z PROC ; std::forward<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA$$QAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AAV10@@Z ENDP ; std::forward<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Kfn@$$CBVCZString@Value@Json@@V23@@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAABVCZString@Value@Json@@ABU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Kfn<Json::Value::CZString const ,Json::Value>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??$_Kfn@$$CBVCZString@Value@Json@@V23@@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAABVCZString@Value@Json@@ABU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBVCZString@Value@Json@@V23@@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAABVCZString@Value@Json@@ABU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Kfn<Json::Value::CZString const ,Json::Value>, COMDAT

; 66   : 		static const _Kty& _Kfn(const _STD pair<_Ty1, _Ty2>& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   : 		{	// extract key from element value
; 68   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 69   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Kfn@$$CBVCZString@Value@Json@@V23@@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAABVCZString@Value@Json@@ABU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Kfn<Json::Value::CZString const ,Json::Value>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z
_TEXT	SEGMENT
$T42061 = -12						; size = 12
$T42066 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z PROC ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3b		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 49 92 24
	09		 cmp	 ecx, 153391689		; 09249249H
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 25		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T42066[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T42066[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T42061[ebp]
  00030	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00035	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003a	8d 45 f4	 lea	 eax, DWORD PTR $T42061[ebp]
  0003d	50		 push	 eax
  0003e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T42061[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00045	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004a	c9		 leave
  0004b	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ENDP ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Allocate@PBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@IPAPBV12@@Z ; std::_Allocate<Json::PathArgument const *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@PBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@IPAPBV12@@Z
_TEXT	SEGMENT
$T42071 = -12						; size = 12
$T42075 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@IPAPBV12@@Z PROC ; std::_Allocate<Json::PathArgument const *>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3d		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate@2
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 02	 shl	 eax, 2
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 25		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T42075[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T42075[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T42071[ebp]
  00032	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00037	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003c	8d 45 f4	 lea	 eax, DWORD PTR $T42071[ebp]
  0003f	50		 push	 eax
  00040	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T42071[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00047	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  0004c	c9		 leave
  0004d	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@PBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@IPAPBV12@@Z ENDP ; std::_Allocate<Json::PathArgument const *>
_TEXT	ENDS
PUBLIC	??$_Allocate@VPathArgument@Json@@@std@@YAPAVPathArgument@Json@@IPAV12@@Z ; std::_Allocate<Json::PathArgument>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@VPathArgument@Json@@@std@@YAPAVPathArgument@Json@@IPAV12@@Z
_TEXT	SEGMENT
$T42080 = -12						; size = 12
$T42084 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VPathArgument@Json@@@std@@YAPAVPathArgument@Json@@IPAV12@@Z PROC ; std::_Allocate<Json::PathArgument>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3b		 je	 SHORT $LN5@Allocate@3

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 c7 71 1c
	07		 cmp	 ecx, 119304647		; 071c71c7H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@3
  00017	6b c9 24	 imul	 ecx, 36			; 00000024H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 25		 jne	 SHORT $LN5@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T42084[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T42084[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T42080[ebp]
  00030	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00035	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003a	8d 45 f4	 lea	 eax, DWORD PTR $T42080[ebp]
  0003d	50		 push	 eax
  0003e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T42080[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00045	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@3:
$LN5@Allocate@3:

; 40   : 	}

  0004a	c9		 leave
  0004b	c3		 ret	 0
$LN9@Allocate@3:
??$_Allocate@VPathArgument@Json@@@std@@YAPAVPathArgument@Json@@IPAV12@@Z ENDP ; std::_Allocate<Json::PathArgument>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node><std::pair<Json::Value::CZString const ,Json::Value> >
; Function compile flags: /Ogsp
;	COMDAT ??$?0U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node><std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node><std::pair<Json::Value::CZString const ,Json::Value> >
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T42092 = -12						; size = 12
$T42096 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3b		 je	 SHORT $LN5@Allocate@4

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 66 66 66
	06		 cmp	 ecx, 107374182		; 06666666H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@4
  00017	6b c9 28	 imul	 ecx, 40			; 00000028H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 25		 jne	 SHORT $LN5@Allocate@4
$LN1@Allocate@4:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T42096[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T42096[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T42092[ebp]
  00030	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00035	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003a	8d 45 f4	 lea	 eax, DWORD PTR $T42092[ebp]
  0003d	50		 push	 eax
  0003e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T42092[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00045	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@4:
$LN5@Allocate@4:

; 40   : 	}

  0004a	c9		 leave
  0004b	c3		 ret	 0
$LN9@Allocate@4:
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T42101 = -12						; size = 12
$T42105 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;

  00003	33 c0		 xor	 eax, eax
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 32   : 
; 33   : 	if (_Count <= 0)

  00008	39 45 08	 cmp	 DWORD PTR __Count$[ebp], eax

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000b	76 38		 jbe	 SHORT $LN5@Allocate@5

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000d	83 7d 08 ff	 cmp	 DWORD PTR __Count$[ebp], -1
  00011	77 0d		 ja	 SHORT $LN1@Allocate@5
  00013	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00016	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001b	59		 pop	 ecx
  0001c	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0001e	75 25		 jne	 SHORT $LN5@Allocate@5
$LN1@Allocate@5:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00020	83 65 08 00	 and	 DWORD PTR $T42105[ebp], 0
  00024	8d 45 08	 lea	 eax, DWORD PTR $T42105[ebp]
  00027	50		 push	 eax
  00028	8d 4d f4	 lea	 ecx, DWORD PTR $T42101[ebp]
  0002b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00030	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00035	8d 45 f4	 lea	 eax, DWORD PTR $T42101[ebp]
  00038	50		 push	 eax
  00039	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T42101[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00040	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@5:
$LN5@Allocate@5:

; 40   : 	}

  00045	c9		 leave
  00046	c3		 ret	 0
$LN9@Allocate@5:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PBVPathArgument@Json@@@std@@QAEXPAPBVPathArgument@Json@@$$QAPBV34@@Z ; std::allocator<Json::PathArgument const *>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@PBVPathArgument@Json@@@std@@QAEXPAPBVPathArgument@Json@@$$QAPBV34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PBVPathArgument@Json@@@std@@QAEXPAPBVPathArgument@Json@@$$QAPBV34@@Z PROC ; std::allocator<Json::PathArgument const *>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@construct:

; 203  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@PBVPathArgument@Json@@@std@@QAEXPAPBVPathArgument@Json@@$$QAPBV34@@Z ENDP ; std::allocator<Json::PathArgument const *>::construct
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QBEIXZ ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QBEIXZ PROC ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::max_size
_TEXT	ENDS
PUBLIC	??$_Move@AAH@std@@YA$$QAHAAH@Z			; std::_Move<int &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$_Move@AAH@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAH@std@@YA$$QAHAAH@Z PROC			; std::_Move<int &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAH@std@@YA$$QAHAAH@Z ENDP			; std::_Move<int &>
_TEXT	ENDS
PUBLIC	??$_Move@AAPBD@std@@YA$$QAPBDAAPBD@Z		; std::_Move<char const * &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@AAPBD@std@@YA$$QAPBDAAPBD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAPBD@std@@YA$$QAPBDAAPBD@Z PROC		; std::_Move<char const * &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAPBD@std@@YA$$QAPBDAAPBD@Z ENDP		; std::_Move<char const * &>
_TEXT	ENDS
PUBLIC	??$_Move@AATValueHolder@Value@Json@@@std@@YA$$QATValueHolder@Value@Json@@AAT123@@Z ; std::_Move<Json::Value::ValueHolder &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@AATValueHolder@Value@Json@@@std@@YA$$QATValueHolder@Value@Json@@AAT123@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AATValueHolder@Value@Json@@@std@@YA$$QATValueHolder@Value@Json@@AAT123@@Z PROC ; std::_Move<Json::Value::ValueHolder &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AATValueHolder@Value@Json@@@std@@YA$$QATValueHolder@Value@Json@@AAT123@@Z ENDP ; std::_Move<Json::Value::ValueHolder &>
_TEXT	ENDS
PUBLIC	??$forward@AAVCZString@Value@Json@@@std@@YAAAVCZString@Value@Json@@AAV123@@Z ; std::forward<Json::Value::CZString &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAVCZString@Value@Json@@@std@@YAAAVCZString@Value@Json@@AAV123@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAVCZString@Value@Json@@@std@@YAAAVCZString@Value@Json@@AAV123@@Z PROC ; std::forward<Json::Value::CZString &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAVCZString@Value@Json@@@std@@YAAAVCZString@Value@Json@@AAV123@@Z ENDP ; std::forward<Json::Value::CZString &>
_TEXT	ENDS
PUBLIC	??$forward@ABVValue@Json@@@std@@YAABVValue@Json@@ABV12@@Z ; std::forward<Json::Value const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABVValue@Json@@@std@@YAABVValue@Json@@ABV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVValue@Json@@@std@@YAABVValue@Json@@ABV12@@Z PROC ; std::forward<Json::Value const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABVValue@Json@@@std@@YAABVValue@Json@@ABV12@@Z ENDP ; std::forward<Json::Value const &>
_TEXT	ENDS
PUBLIC	??$forward@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAAAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU10@@Z ; std::forward<std::pair<Json::Value::CZString const ,Json::Value> &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAAAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAAAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU10@@Z PROC ; std::forward<std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAAAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU10@@Z ENDP ; std::forward<std::pair<Json::Value::CZString const ,Json::Value> &>
_TEXT	ENDS
PUBLIC	??$forward@AAVPathArgument@Json@@@std@@YAAAVPathArgument@Json@@AAV12@@Z ; std::forward<Json::PathArgument &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAVPathArgument@Json@@@std@@YAAAVPathArgument@Json@@AAV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAVPathArgument@Json@@@std@@YAAAVPathArgument@Json@@AAV12@@Z PROC ; std::forward<Json::PathArgument &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAVPathArgument@Json@@@std@@YAAAVPathArgument@Json@@AAV12@@Z ENDP ; std::forward<Json::PathArgument &>
_TEXT	ENDS
PUBLIC	??$forward@ABVPathArgument@Json@@@std@@YAABVPathArgument@Json@@ABV12@@Z ; std::forward<Json::PathArgument const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABVPathArgument@Json@@@std@@YAABVPathArgument@Json@@ABV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVPathArgument@Json@@@std@@YAABVPathArgument@Json@@ABV12@@Z PROC ; std::forward<Json::PathArgument const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABVPathArgument@Json@@@std@@YAABVPathArgument@Json@@ABV12@@Z ENDP ; std::forward<Json::PathArgument const &>
_TEXT	ENDS
PUBLIC	??$_Move@AAD@std@@YA$$QADAAD@Z			; std::_Move<char &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAD@std@@YA$$QADAAD@Z PROC			; std::_Move<char &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAD@std@@YA$$QADAAD@Z ENDP			; std::_Move<char &>
_TEXT	ENDS
PUBLIC	??$_Iter_cat@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@@Z ; std::_Iter_cat<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Iter_cat@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@@Z PROC ; std::_Iter_cat<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > >, COMDAT

; 476  : 	{	// return category from iterator argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 477  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 478  : 	return (_Cat);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 479  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Iter_cat@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@@Z ENDP ; std::_Iter_cat<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > >
_TEXT	ENDS
PUBLIC	??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator==<char,char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator==<char,char>, COMDAT

; 263  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 264  : 	}

  00002	c3		 ret	 0
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator==<char,char>
_TEXT	ENDS
PUBLIC	??$?8V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@@std@@YA_NABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0@Z ; std::operator==<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??$?8V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@@std@@YA_NABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@@std@@YA_NABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0@Z PROC ; std::operator==<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 263  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 264  : 	}

  00002	c3		 ret	 0
??$?8V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@@std@@YA_NABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0@Z ENDP ; std::operator==<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PBVPathArgument@Json@@PBV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPBVPathArgument@Json@@0@Z ; std::_Ptr_cat<Json::PathArgument const *,Json::PathArgument const *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@PBVPathArgument@Json@@PBV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPBVPathArgument@Json@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PBVPathArgument@Json@@PBV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPBVPathArgument@Json@@0@Z PROC ; std::_Ptr_cat<Json::PathArgument const *,Json::PathArgument const *>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@PBVPathArgument@Json@@PBV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPBVPathArgument@Json@@0@Z ENDP ; std::_Ptr_cat<Json::PathArgument const *,Json::PathArgument const *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAXPAPBVPathArgument@Json@@0AAV?$allocator@PBVPathArgument@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Json::PathArgument const *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAXPAPBVPathArgument@Json@@0AAV?$allocator@PBVPathArgument@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAXPAPBVPathArgument@Json@@0AAV?$allocator@PBVPathArgument@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Json::PathArgument const *> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAXPAPBVPathArgument@Json@@0AAV?$allocator@PBVPathArgument@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Json::PathArgument const *> >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@VPathArgument@Json@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVPathArgument@Json@@0@Z ; std::_Ptr_cat<Json::PathArgument,Json::PathArgument>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@VPathArgument@Json@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVPathArgument@Json@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VPathArgument@Json@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVPathArgument@Json@@0@Z PROC ; std::_Ptr_cat<Json::PathArgument,Json::PathArgument>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@VPathArgument@Json@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVPathArgument@Json@@0@Z ENDP ; std::_Ptr_cat<Json::PathArgument,Json::PathArgument>
_TEXT	ENDS
PUBLIC	??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &>
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@AAV01@@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@0@Z ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > >::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > ><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &>
; Function compile flags: /Ogsp
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@AAV01@@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@AAV01@@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@0@Z PROC ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > >::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > ><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00011	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@AAV01@@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@0@Z ENDP ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > >::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > ><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &>
_TEXT	ENDS
PUBLIC	??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@AAV10@@Z ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &>
; Function compile flags: /Ogsp
;	COMDAT ??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &>
_TEXT	ENDS
PUBLIC	??$move@AA_N@std@@YA$$QA_NAA_N@Z		; std::move<bool &>
; Function compile flags: /Ogsp
;	COMDAT ??$move@AA_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AA_N@std@@YA$$QA_NAA_N@Z PROC			; std::move<bool &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AA_N@std@@YA$$QA_NAA_N@Z ENDP			; std::move<bool &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Val_type<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z PROC ; std::_Val_type<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ENDP ; std::_Val_type<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAPBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@@Z ; std::_Val_type<Json::PathArgument const * *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Val_type@PAPBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@@Z PROC ; std::_Val_type<Json::PathArgument const * *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@@Z ENDP ; std::_Val_type<Json::PathArgument const * *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PBVPathArgument@Json@@PBV12@PBV12@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAV?$allocator@PBVPathArgument@Json@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<Json::PathArgument const *,Json::PathArgument const *,Json::PathArgument const *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PBVPathArgument@Json@@PBV12@PBV12@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAV?$allocator@PBVPathArgument@Json@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PBVPathArgument@Json@@PBV12@PBV12@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAV?$allocator@PBVPathArgument@Json@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<Json::PathArgument const *,Json::PathArgument const *,Json::PathArgument const *>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 457  : 	_DEBUG_RANGE(_First, _Last);
; 458  : 	_DEBUG_POINTER(_Dest);
; 459  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	e8 00 00 00 00	 call	 _memmove
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001f	03 c6		 add	 eax, esi
  00021	5e		 pop	 esi

; 462  : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Uninit_move@PBVPathArgument@Json@@PBV12@PBV12@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAV?$allocator@PBVPathArgument@Json@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Json::PathArgument const *,Json::PathArgument const *,Json::PathArgument const *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAVPathArgument@Json@@@std@@YAPAVPathArgument@Json@@PAV12@@Z ; std::_Val_type<Json::PathArgument *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAVPathArgument@Json@@@std@@YAPAVPathArgument@Json@@PAV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAVPathArgument@Json@@@std@@YAPAVPathArgument@Json@@PAV12@@Z PROC ; std::_Val_type<Json::PathArgument *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAVPathArgument@Json@@@std@@YAPAVPathArgument@Json@@PAV12@@Z ENDP ; std::_Val_type<Json::PathArgument *>
_TEXT	ENDS
PUBLIC	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &,bool>
; Function compile flags: /Ogsp
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &,bool>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000f	8a 09		 mov	 cl, BYTE PTR [ecx]
  00011	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &,bool>
_TEXT	ENDS
PUBLIC	?_Unchecked@?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@2@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::_Unchecked
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Unchecked@?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unchecked@?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@2@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::_Unchecked, COMDAT
; _this$ = ecx

; 225  : 		{	// make an unchecked iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 226  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 227  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Unchecked@?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@2@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::_Unchecked
_TEXT	ENDS
PUBLIC	??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator*, COMDAT
; _this$ = ecx

; 49   : 		return (_Mytree::_Myval(_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 50   : 		}

  00005	c3		 ret	 0
??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator*
_TEXT	ENDS
PUBLIC	??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator==, COMDAT
; _this$ = ecx

; 111  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 112  : 		return (_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 113  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator==
_TEXT	ENDS
PUBLIC	??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator!=, COMDAT
; _this$ = ecx

; 116  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 117  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 118  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator!=
_TEXT	ENDS
PUBLIC	??$forward@ABVCZString@Value@Json@@@std@@YAABVCZString@Value@Json@@ABV123@@Z ; std::forward<Json::Value::CZString const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABVCZString@Value@Json@@@std@@YAABVCZString@Value@Json@@ABV123@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVCZString@Value@Json@@@std@@YAABVCZString@Value@Json@@ABV123@@Z PROC ; std::forward<Json::Value::CZString const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABVCZString@Value@Json@@@std@@YAABVCZString@Value@Json@@ABV123@@Z ENDP ; std::forward<Json::Value::CZString const &>
_TEXT	ENDS
PUBLIC	??$forward@AAVValue@Json@@@std@@YAAAVValue@Json@@AAV12@@Z ; std::forward<Json::Value &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAVValue@Json@@@std@@YAAAVValue@Json@@AAV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAVValue@Json@@@std@@YAAAVValue@Json@@AAV12@@Z PROC ; std::forward<Json::Value &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAVValue@Json@@@std@@YAAAVValue@Json@@AAV12@@Z ENDP ; std::forward<Json::Value &>
_TEXT	ENDS
PUBLIC	??_7DefaultValueAllocator@Json@@6B@		; Json::DefaultValueAllocator::`vftable'
PUBLIC	??0DefaultValueAllocator@Json@@QAE@XZ		; Json::DefaultValueAllocator::DefaultValueAllocator
PUBLIC	??_R4DefaultValueAllocator@Json@@6B@		; Json::DefaultValueAllocator::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDefaultValueAllocator@Json@@@8		; Json::DefaultValueAllocator `RTTI Type Descriptor'
PUBLIC	??_R3DefaultValueAllocator@Json@@8		; Json::DefaultValueAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DefaultValueAllocator@Json@@8		; Json::DefaultValueAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DefaultValueAllocator@Json@@8	; Json::DefaultValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?makeMemberName@DefaultValueAllocator@Json@@UAEPADPBD@Z ; Json::DefaultValueAllocator::makeMemberName
PUBLIC	?releaseMemberName@DefaultValueAllocator@Json@@UAEXPAD@Z ; Json::DefaultValueAllocator::releaseMemberName
PUBLIC	?duplicateStringValue@DefaultValueAllocator@Json@@UAEPADPBDI@Z ; Json::DefaultValueAllocator::duplicateStringValue
PUBLIC	?releaseStringValue@DefaultValueAllocator@Json@@UAEXPAD@Z ; Json::DefaultValueAllocator::releaseStringValue
EXTRN	??_EDefaultValueAllocator@Json@@UAEPAXI@Z:PROC	; Json::DefaultValueAllocator::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@DefaultValueAllocator@Json@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DefaultValueAllocator@Json@@8 DD FLAT:??_R0?AVDefaultValueAllocator@Json@@@8 ; Json::DefaultValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DefaultValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R2DefaultValueAllocator@Json@@8
rdata$r	SEGMENT
??_R2DefaultValueAllocator@Json@@8 DD FLAT:??_R1A@?0A@EA@DefaultValueAllocator@Json@@8 ; Json::DefaultValueAllocator::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R3DefaultValueAllocator@Json@@8
rdata$r	SEGMENT
??_R3DefaultValueAllocator@Json@@8 DD 00H		; Json::DefaultValueAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2DefaultValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDefaultValueAllocator@Json@@@8
_DATA	SEGMENT
??_R0?AVDefaultValueAllocator@Json@@@8 DD FLAT:??_7type_info@@6B@ ; Json::DefaultValueAllocator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDefaultValueAllocator@Json@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DefaultValueAllocator@Json@@6B@
rdata$r	SEGMENT
??_R4DefaultValueAllocator@Json@@6B@ DD 00H		; Json::DefaultValueAllocator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDefaultValueAllocator@Json@@@8
	DD	FLAT:??_R3DefaultValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_7DefaultValueAllocator@Json@@6B@
CONST	SEGMENT
??_7DefaultValueAllocator@Json@@6B@ DD FLAT:??_R4DefaultValueAllocator@Json@@6B@ ; Json::DefaultValueAllocator::`vftable'
	DD	FLAT:??_EDefaultValueAllocator@Json@@UAEPAXI@Z
	DD	FLAT:?makeMemberName@DefaultValueAllocator@Json@@UAEPADPBD@Z
	DD	FLAT:?releaseMemberName@DefaultValueAllocator@Json@@UAEXPAD@Z
	DD	FLAT:?duplicateStringValue@DefaultValueAllocator@Json@@UAEPADPBDI@Z
	DD	FLAT:?releaseStringValue@DefaultValueAllocator@Json@@UAEXPAD@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0DefaultValueAllocator@Json@@QAE@XZ
_TEXT	SEGMENT
??0DefaultValueAllocator@Json@@QAE@XZ PROC		; Json::DefaultValueAllocator::DefaultValueAllocator, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7DefaultValueAllocator@Json@@6B@
  00008	c3		 ret	 0
??0DefaultValueAllocator@Json@@QAE@XZ ENDP		; Json::DefaultValueAllocator::DefaultValueAllocator
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
_TEXT	ENDS
;	COMDAT ?makeMemberName@DefaultValueAllocator@Json@@UAEPADPBD@Z
_TEXT	SEGMENT
_memberName$ = 8					; size = 4
?makeMemberName@DefaultValueAllocator@Json@@UAEPADPBD@Z PROC ; Json::DefaultValueAllocator::makeMemberName, COMDAT
; _this$ = ecx

; 67   :    {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   :       return duplicateStringValue( memberName );

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	6a ff		 push	 -1
  00007	ff 75 08	 push	 DWORD PTR _memberName$[ebp]
  0000a	ff 50 0c	 call	 DWORD PTR [eax+12]

; 69   :    }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?makeMemberName@DefaultValueAllocator@Json@@UAEPADPBD@Z ENDP ; Json::DefaultValueAllocator::makeMemberName
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?releaseMemberName@DefaultValueAllocator@Json@@UAEXPAD@Z
_TEXT	SEGMENT
_memberName$ = 8					; size = 4
?releaseMemberName@DefaultValueAllocator@Json@@UAEXPAD@Z PROC ; Json::DefaultValueAllocator::releaseMemberName, COMDAT
; _this$ = ecx

; 72   :    {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :       releaseStringValue( memberName );

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 74   :    }

  00005	5d		 pop	 ebp

; 73   :       releaseStringValue( memberName );

  00006	ff 60 10	 jmp	 DWORD PTR [eax+16]
?releaseMemberName@DefaultValueAllocator@Json@@UAEXPAD@Z ENDP ; Json::DefaultValueAllocator::releaseMemberName
_TEXT	ENDS
EXTRN	_malloc:PROC
; Function compile flags: /Ogsp
;	COMDAT ?duplicateStringValue@DefaultValueAllocator@Json@@UAEPADPBDI@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_length$ = 12						; size = 4
?duplicateStringValue@DefaultValueAllocator@Json@@UAEPADPBDI@Z PROC ; Json::DefaultValueAllocator::duplicateStringValue, COMDAT
; _this$ = ecx

; 78   :    {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 79   :       //@todo invesgate this old optimization
; 80   :       //if ( !value  ||  value[0] == 0 )
; 81   :       //   return 0;
; 82   : 
; 83   :       if ( length == unknown )

  00004	8b 75 0c	 mov	 esi, DWORD PTR _length$[ebp]
  00007	57		 push	 edi
  00008	83 fe ff	 cmp	 esi, -1
  0000b	75 0b		 jne	 SHORT $LN1@duplicateS

; 84   :          length = (unsigned int)strlen(value);

  0000d	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00010	e8 00 00 00 00	 call	 _strlen
  00015	59		 pop	 ecx
  00016	8b f0		 mov	 esi, eax
$LN1@duplicateS:

; 85   :       char *newString = static_cast<char *>( malloc( length + 1 ) );

  00018	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _malloc

; 86   :       memcpy( newString, value, length );

  00021	56		 push	 esi
  00022	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00025	8b f8		 mov	 edi, eax
  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 _memcpy
  0002d	83 c4 10	 add	 esp, 16			; 00000010H

; 87   :       newString[length] = 0;

  00030	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 88   :       return newString;

  00034	8b c7		 mov	 eax, edi
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi

; 89   :    }

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?duplicateStringValue@DefaultValueAllocator@Json@@UAEPADPBDI@Z ENDP ; Json::DefaultValueAllocator::duplicateStringValue
_TEXT	ENDS
EXTRN	_free:PROC
; Function compile flags: /Ogsp
;	COMDAT ?releaseStringValue@DefaultValueAllocator@Json@@UAEXPAD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?releaseStringValue@DefaultValueAllocator@Json@@UAEXPAD@Z PROC ; Json::DefaultValueAllocator::releaseStringValue, COMDAT
; _this$ = ecx

; 92   :    {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   :       if ( value )

  00003	83 7d 08 00	 cmp	 DWORD PTR _value$[ebp], 0
  00007	74 09		 je	 SHORT $LN1@releaseStr

; 94   :          free( value );

  00009	ff 75 08	 push	 DWORD PTR _value$[ebp]
  0000c	e8 00 00 00 00	 call	 _free
  00011	59		 pop	 ecx
$LN1@releaseStr:

; 95   :    }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?releaseStringValue@DefaultValueAllocator@Json@@UAEXPAD@Z ENDP ; Json::DefaultValueAllocator::releaseStringValue
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GDefaultValueAllocator@Json@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GDefaultValueAllocator@Json@@UAEPAXI@Z PROC		; Json::DefaultValueAllocator::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ValueAllocator@Json@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar@3
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@3:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GDefaultValueAllocator@Json@@UAEPAXI@Z ENDP		; Json::DefaultValueAllocator::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?isEqual@ValueIteratorBase@Json@@IBE_NABV12@@Z	; Json::ValueIteratorBase::isEqual
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_valueiterator.inl
;	COMDAT ?isEqual@ValueIteratorBase@Json@@IBE_NABV12@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?isEqual@ValueIteratorBase@Json@@IBE_NABV12@@Z PROC	; Json::ValueIteratorBase::isEqual, COMDAT
; _this$ = ecx

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 129  :    if ( isNull_ )

  00003	80 79 04 00	 cmp	 BYTE PTR [ecx+4], 0
  00007	74 08		 je	 SHORT $LN1@isEqual

; 130  :    {
; 131  :       return other.isNull_;

  00009	8b 45 08	 mov	 eax, DWORD PTR _other$[ebp]
  0000c	8a 40 04	 mov	 al, BYTE PTR [eax+4]
  0000f	eb 0c		 jmp	 SHORT $LN2@isEqual
$LN1@isEqual:

; 132  :    }
; 133  :    return current_ == other.current_;

  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _other$[ebp]
  00016	2b 01		 sub	 eax, DWORD PTR [ecx]
  00018	f7 d8		 neg	 eax
  0001a	1b c0		 sbb	 eax, eax
  0001c	40		 inc	 eax
$LN2@isEqual:

; 134  : #else
; 135  :    if ( isArray_ )
; 136  :       return ValueInternalArray::equals( iterator_.array_, other.iterator_.array_ );
; 137  :    return ValueInternalMap::equals( iterator_.map_, other.iterator_.map_ );
; 138  : #endif
; 139  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?isEqual@ValueIteratorBase@Json@@IBE_NABV12@@Z ENDP	; Json::ValueIteratorBase::isEqual
_TEXT	ENDS
PUBLIC	?asBool@Value@Json@@QBE_NXZ			; Json::Value::asBool
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
;	COMDAT ?asBool@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?asBool@Value@Json@@QBE_NXZ PROC			; Json::Value::asBool, COMDAT
; _this$ = ecx

; 798  :    switch ( type_ )

  00000	0f be 41 08	 movsx	 eax, BYTE PTR [ecx+8]
  00004	83 f8 07	 cmp	 eax, 7
  00007	77 3d		 ja	 SHORT $LN1@asBool
  00009	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN19@asBool[eax*4]
$LN6@asBool:

; 799  :    {
; 800  :    case nullValue:
; 801  :       return false;
; 802  :    case intValue:
; 803  :    case uintValue:
; 804  :       return value_.int_ != 0;

  00010	33 c0		 xor	 eax, eax
  00012	39 01		 cmp	 DWORD PTR [ecx], eax
  00014	0f 95 c0	 setne	 al

; 818  : }

  00017	c3		 ret	 0
$LN5@asBool:

; 805  :    case realValue:
; 806  :       return value_.real_ != 0.0;

  00018	dd 01		 fld	 QWORD PTR [ecx]
  0001a	d9 ee		 fldz
  0001c	da e9		 fucompp
  0001e	df e0		 fnstsw	 ax
  00020	f6 c4 44	 test	 ah, 68			; 00000044H
  00023	7a 12		 jp	 SHORT $LN18@asBool
  00025	33 c0		 xor	 eax, eax

; 818  : }

  00027	c3		 ret	 0
$LN4@asBool:

; 807  :    case booleanValue:
; 808  :       return value_.bool_;

  00028	8a 01		 mov	 al, BYTE PTR [ecx]

; 818  : }

  0002a	c3		 ret	 0
$LN3@asBool:

; 809  :    case stringValue:
; 810  :       return value_.string_  &&  value_.string_[0] != 0;

  0002b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0002d	33 c0		 xor	 eax, eax
  0002f	3b c8		 cmp	 ecx, eax
  00031	74 15		 je	 SHORT $LN10@asBool
  00033	38 01		 cmp	 BYTE PTR [ecx], al
  00035	74 11		 je	 SHORT $LN10@asBool
$LN18@asBool:
  00037	33 c0		 xor	 eax, eax
  00039	40		 inc	 eax

; 818  : }

  0003a	c3		 ret	 0
$LN2@asBool:

; 811  :    case arrayValue:
; 812  :    case objectValue:
; 813  :       return value_.map_->size() != 0;

  0003b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003d	33 c9		 xor	 ecx, ecx
  0003f	39 48 08	 cmp	 DWORD PTR [eax+8], ecx
  00042	0f 95 c0	 setne	 al

; 818  : }

  00045	c3		 ret	 0
$LN1@asBool:

; 814  :    default:
; 815  :       JSON_ASSERT_UNREACHABLE;
; 816  :    }
; 817  :    return false; // unreachable;

  00046	32 c0		 xor	 al, al
$LN10@asBool:

; 818  : }

  00048	c3		 ret	 0
  00049	8d 49 00	 npad	 3
$LN19@asBool:
  0004c	00 00 00 00	 DD	 $LN1@asBool
  00050	00 00 00 00	 DD	 $LN6@asBool
  00054	00 00 00 00	 DD	 $LN6@asBool
  00058	00 00 00 00	 DD	 $LN5@asBool
  0005c	00 00 00 00	 DD	 $LN3@asBool
  00060	00 00 00 00	 DD	 $LN4@asBool
  00064	00 00 00 00	 DD	 $LN2@asBool
  00068	00 00 00 00	 DD	 $LN2@asBool
?asBool@Value@Json@@QBE_NXZ ENDP			; Json::Value::asBool
_TEXT	ENDS
PUBLIC	__real@41efffffffe00000
PUBLIC	__real@41dfffffffc00000
PUBLIC	__real@c1e0000000000000
PUBLIC	?isConvertibleTo@Value@Json@@QBE_NW4ValueType@2@@Z ; Json::Value::isConvertibleTo
;	COMDAT __real@41efffffffe00000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
CONST	SEGMENT
__real@41efffffffe00000 DQ 041efffffffe00000r	; 4.29497e+009
CONST	ENDS
;	COMDAT __real@41dfffffffc00000
CONST	SEGMENT
__real@41dfffffffc00000 DQ 041dfffffffc00000r	; 2.14748e+009
CONST	ENDS
;	COMDAT __real@c1e0000000000000
CONST	SEGMENT
__real@c1e0000000000000 DQ 0c1e0000000000000r	; -2.14748e+009
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
CONST	ENDS
;	COMDAT ?isConvertibleTo@Value@Json@@QBE_NW4ValueType@2@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?isConvertibleTo@Value@Json@@QBE_NW4ValueType@2@@Z PROC	; Json::Value::isConvertibleTo, COMDAT
; _this$ = ecx

; 823  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 824  :    switch ( type_ )

  00003	0f be 41 08	 movsx	 eax, BYTE PTR [ecx+8]
  00007	83 f8 07	 cmp	 eax, 7
  0000a	0f 87 46 01 00
	00		 ja	 $LN1@isConverti
  00010	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN63@isConverti[eax*4]
$LN9@isConverti:

; 825  :    {
; 826  :    case nullValue:
; 827  :       return true;

  00017	b0 01		 mov	 al, 1
  00019	e9 3a 01 00 00	 jmp	 $LN12@isConverti
$LN8@isConverti:

; 828  :    case intValue:
; 829  :       return ( other == nullValue  &&  value_.int_ == 0 )
; 830  :              || other == intValue
; 831  :              || ( other == uintValue  && value_.int_ >= 0 )
; 832  :              || other == realValue
; 833  :              || other == stringValue
; 834  :              || other == booleanValue;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _other$[ebp]
  00021	85 c0		 test	 eax, eax
  00023	75 08		 jne	 SHORT $LN14@isConverti
  00025	39 01		 cmp	 DWORD PTR [ecx], eax
  00027	0f 84 d0 00 00
	00		 je	 $LN15@isConverti
$LN14@isConverti:
  0002d	83 f8 01	 cmp	 eax, 1
  00030	0f 84 c7 00 00
	00		 je	 $LN15@isConverti
  00036	83 f8 02	 cmp	 eax, 2
  00039	75 09		 jne	 SHORT $LN16@isConverti
  0003b	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0003e	0f 8d b9 00 00
	00		 jge	 $LN15@isConverti
$LN16@isConverti:
  00044	83 f8 03	 cmp	 eax, 3
  00047	0f 84 b0 00 00
	00		 je	 $LN15@isConverti
  0004d	83 f8 04	 cmp	 eax, 4
  00050	0f 84 a7 00 00
	00		 je	 $LN15@isConverti
  00056	83 f8 05	 cmp	 eax, 5
$LN61@isConverti:
  00059	0f 84 9e 00 00
	00		 je	 $LN15@isConverti
$LN46@isConverti:
  0005f	33 c0		 xor	 eax, eax
  00061	e9 f2 00 00 00	 jmp	 $LN12@isConverti
$LN7@isConverti:

; 835  :    case uintValue:
; 836  :       return ( other == nullValue  &&  value_.uint_ == 0 )
; 837  :              || ( other == intValue  && value_.uint_ <= (unsigned)maxInt )
; 838  :              || other == uintValue
; 839  :              || other == realValue
; 840  :              || other == stringValue
; 841  :              || other == booleanValue;

  00066	8b 45 08	 mov	 eax, DWORD PTR _other$[ebp]
  00069	85 c0		 test	 eax, eax
  0006b	75 08		 jne	 SHORT $LN18@isConverti
  0006d	39 01		 cmp	 DWORD PTR [ecx], eax
  0006f	0f 84 88 00 00
	00		 je	 $LN15@isConverti
$LN18@isConverti:
  00075	83 f8 01	 cmp	 eax, 1
  00078	75 08		 jne	 SHORT $LN19@isConverti
  0007a	81 39 ff ff ff
	7f		 cmp	 DWORD PTR [ecx], 2147483647 ; 7fffffffH
  00080	76 7b		 jbe	 SHORT $LN15@isConverti
$LN19@isConverti:
  00082	83 f8 02	 cmp	 eax, 2
  00085	74 76		 je	 SHORT $LN15@isConverti
  00087	eb bb		 jmp	 SHORT $LN16@isConverti
$LN6@isConverti:

; 842  :    case realValue:
; 843  :       return ( other == nullValue  &&  value_.real_ == 0.0 )
; 844  :              || ( other == intValue  &&  value_.real_ >= minInt  &&  value_.real_ <= maxInt )
; 845  :              || ( other == uintValue  &&  value_.real_ >= 0  &&  value_.real_ <= maxUInt )
; 846  :              || other == realValue
; 847  :              || other == stringValue
; 848  :              || other == booleanValue;

  00089	8b 55 08	 mov	 edx, DWORD PTR _other$[ebp]
  0008c	d9 ee		 fldz
  0008e	85 d2		 test	 edx, edx
  00090	75 0d		 jne	 SHORT $LN22@isConverti
  00092	dd 01		 fld	 QWORD PTR [ecx]
  00094	d9 c1		 fld	 ST(1)
  00096	da e9		 fucompp
  00098	df e0		 fnstsw	 ax
  0009a	f6 c4 44	 test	 ah, 68			; 00000044H
  0009d	7b 5c		 jnp	 SHORT $LN57@isConverti
$LN22@isConverti:
  0009f	83 fa 01	 cmp	 edx, 1
  000a2	75 1d		 jne	 SHORT $LN23@isConverti
  000a4	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@c1e0000000000000
  000aa	dc 19		 fcomp	 QWORD PTR [ecx]
  000ac	df e0		 fnstsw	 ax
  000ae	f6 c4 41	 test	 ah, 65			; 00000041H
  000b1	7a 41		 jp	 SHORT $LN55@isConverti
  000b3	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@41dfffffffc00000
  000b9	dc 19		 fcomp	 QWORD PTR [ecx]
  000bb	df e0		 fnstsw	 ax
  000bd	84 e2		 test	 ah, dl
  000bf	74 3a		 je	 SHORT $LN57@isConverti
$LN23@isConverti:
  000c1	83 fa 02	 cmp	 edx, 2
  000c4	75 1a		 jne	 SHORT $LN59@isConverti
  000c6	dc 19		 fcomp	 QWORD PTR [ecx]
  000c8	df e0		 fnstsw	 ax
  000ca	f6 c4 41	 test	 ah, 65			; 00000041H
  000cd	7a 90		 jp	 SHORT $LN46@isConverti
  000cf	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@41efffffffe00000
  000d5	dc 19		 fcomp	 QWORD PTR [ecx]
  000d7	df e0		 fnstsw	 ax
  000d9	f6 c4 01	 test	 ah, 1
  000dc	74 1f		 je	 SHORT $LN15@isConverti
  000de	eb 02		 jmp	 SHORT $LN25@isConverti
$LN59@isConverti:
  000e0	dd d8		 fstp	 ST(0)
$LN25@isConverti:
  000e2	83 fa 03	 cmp	 edx, 3
  000e5	74 16		 je	 SHORT $LN15@isConverti
  000e7	83 fa 04	 cmp	 edx, 4
  000ea	74 11		 je	 SHORT $LN15@isConverti
  000ec	83 fa 05	 cmp	 edx, 5
  000ef	e9 65 ff ff ff	 jmp	 $LN61@isConverti
$LN55@isConverti:
  000f4	dd d8		 fstp	 ST(0)
  000f6	e9 64 ff ff ff	 jmp	 $LN46@isConverti
$LN57@isConverti:
  000fb	dd d8		 fstp	 ST(0)
$LN15@isConverti:

; 828  :    case intValue:
; 829  :       return ( other == nullValue  &&  value_.int_ == 0 )
; 830  :              || other == intValue
; 831  :              || ( other == uintValue  && value_.int_ >= 0 )
; 832  :              || other == realValue
; 833  :              || other == stringValue
; 834  :              || other == booleanValue;

  000fd	33 c0		 xor	 eax, eax
  000ff	40		 inc	 eax
  00100	eb 56		 jmp	 SHORT $LN12@isConverti
$LN5@isConverti:

; 849  :    case booleanValue:
; 850  :       return ( other == nullValue  &&  value_.bool_ == false )
; 851  :              || other == intValue
; 852  :              || other == uintValue
; 853  :              || other == realValue
; 854  :              || other == stringValue
; 855  :              || other == booleanValue;

  00102	8b 45 08	 mov	 eax, DWORD PTR _other$[ebp]
  00105	85 c0		 test	 eax, eax
  00107	75 04		 jne	 SHORT $LN27@isConverti
  00109	38 01		 cmp	 BYTE PTR [ecx], al
  0010b	74 f0		 je	 SHORT $LN15@isConverti
$LN27@isConverti:
  0010d	83 f8 01	 cmp	 eax, 1
  00110	74 eb		 je	 SHORT $LN15@isConverti
  00112	e9 6b ff ff ff	 jmp	 $LN19@isConverti
$LN4@isConverti:

; 856  :    case stringValue:
; 857  :       return other == stringValue
; 858  :              || ( other == nullValue  &&  (!value_.string_  ||  value_.string_[0] == 0) );

  00117	83 7d 08 04	 cmp	 DWORD PTR _other$[ebp], 4
  0011b	74 e0		 je	 SHORT $LN15@isConverti
  0011d	83 7d 08 00	 cmp	 DWORD PTR _other$[ebp], 0
  00121	0f 85 38 ff ff
	ff		 jne	 $LN46@isConverti
  00127	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00129	85 c9		 test	 ecx, ecx
  0012b	74 d0		 je	 SHORT $LN15@isConverti
  0012d	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00130	e9 24 ff ff ff	 jmp	 $LN61@isConverti
$LN3@isConverti:

; 859  :    case arrayValue:
; 860  :       return other == arrayValue
; 861  :              ||  ( other == nullValue  &&  value_.map_->size() == 0 );

  00135	83 7d 08 06	 cmp	 DWORD PTR _other$[ebp], 6
$LN62@isConverti:
  00139	74 c2		 je	 SHORT $LN15@isConverti
  0013b	83 7d 08 00	 cmp	 DWORD PTR _other$[ebp], 0
  0013f	0f 85 1a ff ff
	ff		 jne	 $LN46@isConverti
  00145	8b 01		 mov	 eax, DWORD PTR [ecx]
  00147	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0014b	e9 09 ff ff ff	 jmp	 $LN61@isConverti
$LN2@isConverti:

; 862  :    case objectValue:
; 863  :       return other == objectValue
; 864  :              ||  ( other == nullValue  &&  value_.map_->size() == 0 );

  00150	83 7d 08 07	 cmp	 DWORD PTR _other$[ebp], 7
  00154	eb e3		 jmp	 SHORT $LN62@isConverti
$LN1@isConverti:

; 865  :    default:
; 866  :       JSON_ASSERT_UNREACHABLE;
; 867  :    }
; 868  :    return false; // unreachable;

  00156	32 c0		 xor	 al, al
$LN12@isConverti:

; 869  : }

  00158	5d		 pop	 ebp
  00159	c2 04 00	 ret	 4
$LN63@isConverti:
  0015c	00 00 00 00	 DD	 $LN9@isConverti
  00160	00 00 00 00	 DD	 $LN8@isConverti
  00164	00 00 00 00	 DD	 $LN7@isConverti
  00168	00 00 00 00	 DD	 $LN6@isConverti
  0016c	00 00 00 00	 DD	 $LN4@isConverti
  00170	00 00 00 00	 DD	 $LN5@isConverti
  00174	00 00 00 00	 DD	 $LN3@isConverti
  00178	00 00 00 00	 DD	 $LN2@isConverti
?isConvertibleTo@Value@Json@@QBE_NW4ValueType@2@@Z ENDP	; Json::Value::isConvertibleTo
_TEXT	ENDS
PUBLIC	??7Value@Json@@QBE_NXZ				; Json::Value::operator!
; Function compile flags: /Ogsp
;	COMDAT ??7Value@Json@@QBE_NXZ
_TEXT	SEGMENT
??7Value@Json@@QBE_NXZ PROC				; Json::Value::operator!, COMDAT
; _this$ = ecx

; 922  :    return isNull();

  00000	33 c0		 xor	 eax, eax
  00002	38 41 08	 cmp	 BYTE PTR [ecx+8], al
  00005	0f 94 c0	 sete	 al

; 923  : }

  00008	c3		 ret	 0
??7Value@Json@@QBE_NXZ ENDP				; Json::Value::operator!
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1496 : 		return (_Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN5@c_str
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1497 : 		}

  00008	c3		 ret	 0

; 1496 : 		return (_Myptr());

$LN5@c_str:
  00009	8b c1		 mov	 eax, ecx

; 1497 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	?begin@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@2@XZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@2@XZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@2@XZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@2@XZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@2@XZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@2@XZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@2@XZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@2@XZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@2@XZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@2@XZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@2@XZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@2@XZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::end
_TEXT	ENDS
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator*, COMDAT
; _this$ = ecx

; 231  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 232  : 		if (this->_Getcont() == 0
; 233  : 			|| this->_Ptr == 0
; 234  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 235  : 			{	// report error
; 236  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 237  : 			_SCL_SECURE_OUT_OF_RANGE;
; 238  : 			}
; 239  : 
; 240  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 241  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 242  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 243  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 244  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 245  : 
; 246  : 		return (_Mytree::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 247  : 		}

  00005	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 250  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 251  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 252  : 		if (this->_Getcont() == 0
; 253  : 			|| this->_Ptr == 0
; 254  : 			|| _Mytree::_Isnil(this->_Ptr))
; 255  : 			{	// report error
; 256  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 257  : 			_SCL_SECURE_OUT_OF_RANGE;
; 258  : 			}
; 259  : 
; 260  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 261  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 262  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 263  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 264  : 
; 265  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator++

; 266  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 267  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator--
; Function compile flags: /Ogsp
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator--, COMDAT
; _this$ = ecx

; 277  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 278  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 279  : 		if (this->_Getcont() == 0
; 280  : 			|| this->_Ptr == 0)
; 281  : 			{	// report error
; 282  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 283  : 			_SCL_SECURE_OUT_OF_RANGE;
; 284  : 			}
; 285  : 
; 286  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 287  : 		--(*(_Mybase *)this);
; 288  : 		if (_Ptrsav == this->_Ptr)
; 289  : 			{	// report error
; 290  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 291  : 			_SCL_SECURE_OUT_OF_RANGE;
; 292  : 			}
; 293  : 
; 294  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 295  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 296  : 
; 297  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 298  : 		--(*(_Mybase *)this);
; 299  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 300  : 
; 301  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 302  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator--

; 303  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 304  : 
; 305  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 306  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator--
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::operator==
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@V?$allocator@PBVPathArgument@Json@@@1@@Z ; std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@V?$allocator@PBVPathArgument@Json@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@V?$allocator@PBVPathArgument@Json@@@1@@Z PROC ; std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@V?$allocator@PBVPathArgument@Json@@@1@@Z ENDP ; std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@V?$allocator@VPathArgument@Json@@@1@@Z ; std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> >::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@V?$allocator@VPathArgument@Json@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@V?$allocator@VPathArgument@Json@@@1@@Z PROC ; std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> >::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@V?$allocator@VPathArgument@Json@@@1@@Z ENDP ; std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> >::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> >
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lmost
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1759 : 		return (this->_Left(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1760 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rmost
; Function compile flags: /Ogsp
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1784 : 		return (this->_Right(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 1785 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Root
; Function compile flags: /Ogsp
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1789 : 		return (this->_Parent(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1790 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Root
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate
; Function compile flags: /Ogsp
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1793 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1794 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	56		 push	 esi

; 1795 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  00009	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000c	89 32		 mov	 DWORD PTR [edx], esi

; 1796 : 
; 1797 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  0000e	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00011	80 7e 25 00	 cmp	 BYTE PTR [esi+37], 0
  00015	75 03		 jne	 SHORT $LN5@Rrotate

; 1798 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Rrotate:

; 1799 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1800 : 
; 1801 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	5e		 pop	 esi
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	75 05		 jne	 SHORT $LN4@Rrotate

; 1802 : 			_Root() = _Pnode;

  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1803 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  0002c	eb 0f		 jmp	 SHORT $LN1@Rrotate
$LN4@Rrotate:
  0002e	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00031	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00034	75 05		 jne	 SHORT $LN2@Rrotate

; 1804 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00036	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1805 : 		else

  00039	eb 02		 jmp	 SHORT $LN1@Rrotate
$LN2@Rrotate:

; 1806 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0003b	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@Rrotate:

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  0003d	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00040	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	??1?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT
; _this$ = ecx

; 555  : 		this->_Alnod.deallocate(this->_Myhead, 1);

  00000	ff 71 04	 push	 DWORD PTR [ecx+4]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 556  : 		}

  00009	c3		 ret	 0
??1?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAVCZString@Value@Json@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Key
; Function compile flags: /Ogsp
;	COMDAT ?_Key@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAVCZString@Value@Json@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAVCZString@Value@Json@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Key, COMDAT

; 616  : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : 		return ((key_type&)_Traits::_Kfn(_Myval(_Pnode)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 618  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Key@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAVCZString@Value@Json@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Key
_TEXT	ENDS
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >, COMDAT
; _this$ = ecx

; 208  : 		{	// construct with null node pointer

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 209  : 		}

  00005	c3		 ret	 0
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::operator==
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1952 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1953 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1954 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1972 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1973 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)

  00003	83 7d 08 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00007	74 2c		 je	 SHORT $LN2@Inside@4
  00009	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0000c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0000f	72 04		 jb	 SHORT $LN8@Inside@4
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	eb 02		 jmp	 SHORT $LN9@Inside@4
$LN8@Inside@4:
  00015	8b c1		 mov	 eax, ecx
$LN9@Inside@4:
  00017	39 45 08	 cmp	 DWORD PTR __Ptr$[ebp], eax
  0001a	72 19		 jb	 SHORT $LN2@Inside@4
  0001c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0001f	72 04		 jb	 SHORT $LN12@Inside@4
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	eb 02		 jmp	 SHORT $LN13@Inside@4
$LN12@Inside@4:
  00025	8b c1		 mov	 eax, ecx
$LN13@Inside@4:
  00027	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0002a	03 c8		 add	 ecx, eax
  0002c	3b 4d 08	 cmp	 ecx, DWORD PTR __Ptr$[ebp]
  0002f	76 04		 jbe	 SHORT $LN2@Inside@4

; 1975 : 		else
; 1976 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	eb 02		 jmp	 SHORT $LN1@Inside@4
$LN2@Inside@4:

; 1974 : 			return (false);	// don't ask

  00035	32 c0		 xor	 al, al
$LN1@Inside@4:

; 1977 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEII@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEII@Z PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0000d	c1 f8 02	 sar	 eax, 2
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00023	73 03		 jae	 SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;

  00025	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
$LN1@Grow_to:

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?_Grow_to@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEII@Z ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Grow_to
_TEXT	ENDS
PUBLIC	?max_size@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 c7 71 1c 07	 mov	 eax, 119304647		; 071c71c7H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEII@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEII@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 24		 push	 36			; 00000024H
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba c7 71 1c 07	 mov	 edx, 119304647		; 071c71c7H
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to@2
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to@2:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00026	73 03		 jae	 SHORT $LN1@Grow_to@2

; 1280 : 			_Capacity = _Count;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
$LN1@Grow_to@2:

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?_Grow_to@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEII@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >, COMDAT
; _this$ = ecx

; 213  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 214  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 270  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : 		_Myiter _Tmp = *this;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 272  : 		++*this;

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator++

; 273  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 274  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Grow_to
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 1c		 push	 28			; 0000001cH
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba 49 92 24 09	 mov	 edx, 153391689		; 09249249H
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to@3
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to@3
$LN4@Grow_to@3:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to@3:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00026	73 03		 jae	 SHORT $LN1@Grow_to@3

; 1280 : 			_Capacity = _Count;

  00028	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
$LN1@Grow_to@3:

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Grow_to
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 1c	 add	 DWORD PTR [eax], 28	; 0000001cH

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator++
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1108 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1109 : 		if (this->_Mysize < _Off)

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000d	3b c1		 cmp	 eax, ecx
  0000f	73 0a		 jae	 SHORT $LN3@erase

; 1110 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN28@erase:
$LN3@erase:

; 1111 : 		if (this->_Mysize - _Off < _Count)

  0001b	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0001e	2b c1		 sub	 eax, ecx
  00020	3b c3		 cmp	 eax, ebx
  00022	73 02		 jae	 SHORT $LN2@erase

; 1112 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00024	8b d8		 mov	 ebx, eax
$LN2@erase:

; 1113 : 		if (0 < _Count)

  00026	85 db		 test	 ebx, ebx
  00028	74 46		 je	 SHORT $LN25@erase

; 1114 : 			{	// move elements down
; 1115 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1116 : 				this->_Mysize - _Off - _Count);

  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	57		 push	 edi
  0002e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00031	72 04		 jb	 SHORT $LN11@erase
  00033	8b 3e		 mov	 edi, DWORD PTR [esi]
  00035	eb 02		 jmp	 SHORT $LN12@erase
$LN11@erase:
  00037	8b fe		 mov	 edi, esi
$LN12@erase:
  00039	83 fa 10	 cmp	 edx, 16			; 00000010H
  0003c	72 04		 jb	 SHORT $LN15@erase
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	eb 02		 jmp	 SHORT $LN16@erase
$LN15@erase:
  00042	8b d6		 mov	 edx, esi
$LN16@erase:
  00044	2b c3		 sub	 eax, ebx
  00046	03 f9		 add	 edi, ecx
  00048	50		 push	 eax
  00049	03 fb		 add	 edi, ebx
  0004b	03 d1		 add	 edx, ecx
  0004d	57		 push	 edi
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 _memmove

; 1117 : 			size_type _Newsize = this->_Mysize - _Count;

  00054	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	2b c3		 sub	 eax, ebx

; 1118 : 			_Eos(_Newsize);

  0005c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00060	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00063	5f		 pop	 edi
  00064	72 04		 jb	 SHORT $LN23@erase
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	eb 02		 jmp	 SHORT $LN24@erase
$LN23@erase:
  0006a	8b ce		 mov	 ecx, esi
$LN24@erase:
  0006c	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN25@erase:

; 1119 : 			}
; 1120 : 		return (*this);

  00070	8b c6		 mov	 eax, esi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx

; 1121 : 		}

  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1516 : 		size_type _Num = this->_Alval.max_size();
; 1517 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	6a fe		 push	 -2			; fffffffeH
  00002	58		 pop	 eax

; 1518 : 		}

  00003	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PBVPathArgument@Json@@@std@@QAEPAPBVPathArgument@Json@@I@Z ; std::allocator<Json::PathArgument const *>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PBVPathArgument@Json@@@std@@QAEPAPBVPathArgument@Json@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PBVPathArgument@Json@@@std@@QAEPAPBVPathArgument@Json@@I@Z PROC ; std::allocator<Json::PathArgument const *>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@PBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@IPAPBV12@@Z ; std::_Allocate<Json::PathArgument const *>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@PBVPathArgument@Json@@@std@@QAEPAPBVPathArgument@Json@@I@Z ENDP ; std::allocator<Json::PathArgument const *>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@VPathArgument@Json@@@std@@QAEPAVPathArgument@Json@@I@Z ; std::allocator<Json::PathArgument>::allocate
; Function compile flags: /Ogsp
;	COMDAT ?allocate@?$allocator@VPathArgument@Json@@@std@@QAEPAVPathArgument@Json@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@VPathArgument@Json@@@std@@QAEPAVPathArgument@Json@@I@Z PROC ; std::allocator<Json::PathArgument>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@VPathArgument@Json@@@std@@YAPAVPathArgument@Json@@IPAV12@@Z ; std::_Allocate<Json::PathArgument>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@VPathArgument@Json@@@std@@QAEPAVPathArgument@Json@@I@Z ENDP ; std::allocator<Json::PathArgument>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z PROC ; std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT
; _this$ = ecx

; 482  : 		{	// construct traits from _Parg and allocators from _Al

  00000	8b c1		 mov	 eax, ecx

; 483  : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator==
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Make_iter
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Make_iter
_TEXT	ENDS
PUBLIC	??$swap@H@std@@YAXAAH0@Z			; std::swap<int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$swap@H@std@@YAXAAH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@H@std@@YAXAAH0@Z PROC				; std::swap<int>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 102  : 	_Ty _Tmp = _Move(_Left);
; 103  : 	_Left = _Move(_Right);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	56		 push	 esi
  0000c	8b 32		 mov	 esi, DWORD PTR [edx]
  0000e	89 30		 mov	 DWORD PTR [eax], esi

; 104  : 	_Right = _Move(_Tmp);

  00010	89 0a		 mov	 DWORD PTR [edx], ecx
  00012	5e		 pop	 esi

; 105  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@H@std@@YAXAAH0@Z ENDP				; std::swap<int>
_TEXT	ENDS
PUBLIC	??$swap@PBD@std@@YAXAAPBD0@Z			; std::swap<char const *>
; Function compile flags: /Ogsp
;	COMDAT ??$swap@PBD@std@@YAXAAPBD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PBD@std@@YAXAAPBD0@Z PROC			; std::swap<char const *>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 102  : 	_Ty _Tmp = _Move(_Left);
; 103  : 	_Left = _Move(_Right);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	56		 push	 esi
  0000c	8b 32		 mov	 esi, DWORD PTR [edx]
  0000e	89 30		 mov	 DWORD PTR [eax], esi

; 104  : 	_Right = _Move(_Tmp);

  00010	89 0a		 mov	 DWORD PTR [edx], ecx
  00012	5e		 pop	 esi

; 105  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@PBD@std@@YAXAAPBD0@Z ENDP			; std::swap<char const *>
_TEXT	ENDS
PUBLIC	??$swap@TValueHolder@Value@Json@@@std@@YAXAATValueHolder@Value@Json@@0@Z ; std::swap<Json::Value::ValueHolder>
; Function compile flags: /Ogsp
;	COMDAT ??$swap@TValueHolder@Value@Json@@@std@@YAXAATValueHolder@Value@Json@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@TValueHolder@Value@Json@@@std@@YAXAATValueHolder@Value@Json@@0@Z PROC ; std::swap<Json::Value::ValueHolder>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 102  : 	_Ty _Tmp = _Move(_Left);
; 103  : 	_Left = _Move(_Right);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00009	8b 10		 mov	 edx, DWORD PTR [eax]
  0000b	56		 push	 esi
  0000c	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000f	57		 push	 edi
  00010	8b 39		 mov	 edi, DWORD PTR [ecx]
  00012	89 38		 mov	 DWORD PTR [eax], edi
  00014	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00017	89 78 04	 mov	 DWORD PTR [eax+4], edi
  0001a	5f		 pop	 edi

; 104  : 	_Right = _Move(_Tmp);

  0001b	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  0001e	89 11		 mov	 DWORD PTR [ecx], edx
  00020	5e		 pop	 esi

; 105  : 	}

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??$swap@TValueHolder@Value@Json@@@std@@YAXAATValueHolder@Value@Json@@0@Z ENDP ; std::swap<Json::Value::ValueHolder>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PBVPathArgument@Json@@@std@@PBVPathArgument@Json@@PBV34@@std@@YAXAAV?$allocator@PBVPathArgument@Json@@@0@PAPBVPathArgument@Json@@$$QAPBV23@@Z ; std::_Cons_val<std::allocator<Json::PathArgument const *>,Json::PathArgument const *,Json::PathArgument const *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@PBVPathArgument@Json@@@std@@PBVPathArgument@Json@@PBV34@@std@@YAXAAV?$allocator@PBVPathArgument@Json@@@0@PAPBVPathArgument@Json@@$$QAPBV23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PBVPathArgument@Json@@@std@@PBVPathArgument@Json@@PBV34@@std@@YAXAAV?$allocator@PBVPathArgument@Json@@@0@PAPBVPathArgument@Json@@$$QAPBV23@@Z PROC ; std::_Cons_val<std::allocator<Json::PathArgument const *>,Json::PathArgument const *,Json::PathArgument const *>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Cons_val:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PBVPathArgument@Json@@@std@@PBVPathArgument@Json@@PBV34@@std@@YAXAAV?$allocator@PBVPathArgument@Json@@@0@PAPBVPathArgument@Json@@$$QAPBV23@@Z ENDP ; std::_Cons_val<std::allocator<Json::PathArgument const *>,Json::PathArgument const *,Json::PathArgument const *>
_TEXT	ENDS
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 102  : 	_Ty _Tmp = _Move(_Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	56		 push	 esi

; 103  : 	_Left = _Move(_Right);

  00009	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
  0000c	8a 16		 mov	 dl, BYTE PTR [esi]
  0000e	88 10		 mov	 BYTE PTR [eax], dl

; 104  : 	_Right = _Move(_Tmp);

  00010	88 0e		 mov	 BYTE PTR [esi], cl
  00012	5e		 pop	 esi

; 105  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
PUBLIC	??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator!=<char,char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT

; 271  : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 272  : 	}

  00002	c3		 ret	 0
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
_TEXT	ENDS
PUBLIC	??$?9V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@@std@@YA_NABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0@Z ; std::operator!=<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??$?9V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@@std@@YA_NABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@@std@@YA_NABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0@Z PROC ; std::operator!=<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 271  : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 272  : 	}

  00002	c3		 ret	 0
??$?9V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@@std@@YA_NABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0@Z ENDP ; std::operator!=<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAXPAPBVPathArgument@Json@@0AAV?$allocator@PBVPathArgument@Json@@@0@@Z ; std::_Destroy_range<std::allocator<Json::PathArgument const *> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAXPAPBVPathArgument@Json@@0AAV?$allocator@PBVPathArgument@Json@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAXPAPBVPathArgument@Json@@0AAV?$allocator@PBVPathArgument@Json@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Json::PathArgument const *> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAXPAPBVPathArgument@Json@@0AAV?$allocator@PBVPathArgument@Json@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Json::PathArgument const *> >
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@AAV01@@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@0@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > >::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > ><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@AAV01@@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@AAV01@@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@0@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > >::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > ><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00011	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@AAV01@@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@0@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > >::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > ><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &>
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin, COMDAT
; _this$ = ecx

; 811  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 812  : 		return (const_iterator(_Lmost(), this));

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 813  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end, COMDAT
; _this$ = ecx

; 821  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 822  : 		return (const_iterator(this->_Myhead, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 823  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode
; Function compile flags: /Ogsp
;	COMDAT ?_Buynode@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ
_TEXT	SEGMENT
$T43016 = -16						; size = 12
$T42993 = -4						; size = 4
?_Buynode@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ PROC ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 559  : 		{	// allocate a node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00007	6a 28		 push	 40			; 00000028H
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	59		 pop	 ecx
  00011	33 c9		 xor	 ecx, ecx
  00013	3b c1		 cmp	 eax, ecx
  00015	74 18		 je	 SHORT $LN5@Buynode

; 561  : 
; 562  : 		this->_Left(_Wherenode) = this->_Myhead;

  00017	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001a	89 10		 mov	 DWORD PTR [eax], edx

; 563  : 		this->_Parent(_Wherenode) = this->_Myhead;

  0001c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001f	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 564  : 		this->_Right(_Wherenode) = this->_Myhead;

  00022	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00025	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 565  : 		this->_Color(_Wherenode) = this->_Red;

  00028	66 89 48 24	 mov	 WORD PTR [eax+36], cx
  0002c	5e		 pop	 esi

; 566  : 		this->_Isnil(_Wherenode) = false;
; 567  : 		return (_Wherenode);
; 568  : 		}

  0002d	c9		 leave
  0002e	c3		 ret	 0

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

$LN5@Buynode:
  0002f	8d 45 fc	 lea	 eax, DWORD PTR $T42993[ebp]
  00032	89 4d fc	 mov	 DWORD PTR $T42993[ebp], ecx
  00035	50		 push	 eax
  00036	8d 4d f0	 lea	 ecx, DWORD PTR $T43016[ebp]
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 45 f0	 lea	 eax, DWORD PTR $T43016[ebp]
  00046	50		 push	 eax
  00047	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T43016[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN27@Buynode:
$LN26@Buynode:
  00053	cc		 int	 3
?_Buynode@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::max_size, COMDAT
; _this$ = ecx

; 874  : 		return (this->_Alval.max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 875  : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::max_size
_TEXT	ENDS
PUBLIC	??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000f	8a 09		 mov	 cl, BYTE PTR [ecx]
  00011	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 146  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAPBVPathArgument@Json@@PAPBV12@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAV?$allocator@PBVPathArgument@Json@@@0@@Z ; std::_Uninitialized_move<Json::PathArgument const * *,Json::PathArgument const * *,std::allocator<Json::PathArgument const *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAPBVPathArgument@Json@@PAPBV12@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAV?$allocator@PBVPathArgument@Json@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPBVPathArgument@Json@@PAPBV12@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAV?$allocator@PBVPathArgument@Json@@@0@@Z PROC ; std::_Uninitialized_move<Json::PathArgument const * *,Json::PathArgument const * *,std::allocator<Json::PathArgument const *> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2
  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	e8 00 00 00 00	 call	 _memmove
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001f	03 c6		 add	 eax, esi
  00021	5e		 pop	 esi

; 472  : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Uninitialized_move@PAPBVPathArgument@Json@@PAPBV12@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAV?$allocator@PBVPathArgument@Json@@@0@@Z ENDP ; std::_Uninitialized_move<Json::PathArgument const * *,Json::PathArgument const * *,std::allocator<Json::PathArgument const *> >
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &,bool>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &,bool>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000f	8a 09		 mov	 cl, BYTE PTR [ecx]
  00011	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > &,bool>
_TEXT	ENDS
PUBLIC	??$_Unchecked@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@0@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??$_Unchecked@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@0@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Iter$ = 12						; size = 4
??$_Unchecked@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@0@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >, COMDAT

; 342  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 343  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Iter$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 344  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Unchecked@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@0@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >
_TEXT	ENDS
PUBLIC	??$?M$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z ; std::operator<<Json::Value::CZString const ,Json::Value>
PUBLIC	??$_Lexicographical_compare@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@0@000@Z ; std::_Lexicographical_compare<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Lexicographical_compare@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@0@000@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
??$_Lexicographical_compare@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@0@000@Z PROC ; std::_Lexicographical_compare<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0> >, COMDAT

; 3140 : 	{	// order [_First1, _Last1) vs. [First2, Last2)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3141 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First1$[ebp]
  00006	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last1$[ebp]
  00009	74 51		 je	 SHORT $LN55@Lexicograp
$LL6@Lexicograp:
  0000b	8b 45 10	 mov	 eax, DWORD PTR __First2$[ebp]
  0000e	3b 45 14	 cmp	 eax, DWORD PTR __Last2$[ebp]
  00011	74 44		 je	 SHORT $LN4@Lexicograp

; 3142 : 		if (_DEBUG_LT(*_First1, *_First2))

  00013	83 c0 0c	 add	 eax, 12			; 0000000cH
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	50		 push	 eax
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??$?M$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z ; std::operator<<Json::Value::CZString const ,Json::Value>
  00020	59		 pop	 ecx
  00021	59		 pop	 ecx
  00022	84 c0		 test	 al, al
  00024	75 43		 jne	 SHORT $LN52@Lexicograp

; 3144 : 		else if (*_First2 < *_First1)

  00026	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]
  00029	8b 4d 10	 mov	 ecx, DWORD PTR __First2$[ebp]
  0002c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0002f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00032	50		 push	 eax
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ??$?M$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z ; std::operator<<Json::Value::CZString const ,Json::Value>
  00039	59		 pop	 ecx
  0003a	59		 pop	 ecx
  0003b	84 c0		 test	 al, al
  0003d	75 2e		 jne	 SHORT $LN53@Lexicograp

; 3141 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)

  0003f	8d 4d 08	 lea	 ecx, DWORD PTR __First1$[ebp]
  00042	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator++
  00047	8d 4d 10	 lea	 ecx, DWORD PTR __First2$[ebp]
  0004a	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator++
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR __First1$[ebp]
  00052	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last1$[ebp]
  00055	75 b4		 jne	 SHORT $LL6@Lexicograp
$LN4@Lexicograp:

; 3146 : 	return (_First1 == _Last1 && _First2 != _Last2);

  00057	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last1$[ebp]
  0005a	75 15		 jne	 SHORT $LN9@Lexicograp
$LN55@Lexicograp:
  0005c	8b 45 14	 mov	 eax, DWORD PTR __Last2$[ebp]
  0005f	39 45 10	 cmp	 DWORD PTR __First2$[ebp], eax
  00062	74 0d		 je	 SHORT $LN9@Lexicograp
  00064	33 c0		 xor	 eax, eax
  00066	40		 inc	 eax

; 3147 : 	}

  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
$LN52@Lexicograp:

; 3143 : 			return (true);

  00069	b0 01		 mov	 al, 1

; 3147 : 	}

  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
$LN53@Lexicograp:

; 3145 : 			return (false);

  0006d	32 c0		 xor	 al, al

; 3147 : 	}

  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
$LN9@Lexicograp:

; 3146 : 	return (_First1 == _Last1 && _First2 != _Last2);

  00071	33 c0		 xor	 eax, eax

; 3147 : 	}

  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
??$_Lexicographical_compare@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@0@000@Z ENDP ; std::_Lexicographical_compare<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0> >
_TEXT	ENDS
PUBLIC	??$?8$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z ; std::operator==<Json::Value::CZString const ,Json::Value>
PUBLIC	??$_Equal@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@0@00@Z ; std::_Equal<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Equal@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@0@00@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
??$_Equal@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@0@00@Z PROC ; std::_Equal<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0> >, COMDAT

; 2988 : 	{	// compare [_First1, _Last1) to [First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2989 : 	for (; _First1 != _Last1; ++_First1, ++_First2)

  00003	eb 26		 jmp	 SHORT $LN27@Equal
$LL4@Equal:

; 2990 : 		if (!(*_First1 == *_First2))

  00005	8b 4d 10	 mov	 ecx, DWORD PTR __First2$[ebp]
  00008	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000b	83 c0 0c	 add	 eax, 12			; 0000000cH
  0000e	51		 push	 ecx
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$?8$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z ; std::operator==<Json::Value::CZString const ,Json::Value>
  00015	59		 pop	 ecx
  00016	59		 pop	 ecx
  00017	84 c0		 test	 al, al
  00019	74 1c		 je	 SHORT $LN24@Equal

; 2989 : 	for (; _First1 != _Last1; ++_First1, ++_First2)

  0001b	8d 4d 08	 lea	 ecx, DWORD PTR __First1$[ebp]
  0001e	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator++
  00023	8d 4d 10	 lea	 ecx, DWORD PTR __First2$[ebp]
  00026	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator++
$LN27@Equal:
  0002b	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]
  0002e	3b 45 0c	 cmp	 eax, DWORD PTR __Last1$[ebp]
  00031	75 d2		 jne	 SHORT $LL4@Equal

; 2992 : 	return (true);

  00033	b0 01		 mov	 al, 1

; 2993 : 	}

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
$LN24@Equal:

; 2991 : 			return (false);

  00037	32 c0		 xor	 al, al

; 2993 : 	}

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??$_Equal@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@0@00@Z ENDP ; std::_Equal<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0> >
_TEXT	ENDS
EXTRN	_atexit:PROC
;	COMDAT ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
_BSS	SEGMENT
?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A DD 01H DUP (?) ; `Json::valueAllocator'::`2'::defaultAllocator
_BSS	ENDS
;	COMDAT ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA
_BSS	SEGMENT
?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA DD 01H DUP (?) ; `Json::valueAllocator'::`2'::$S1
_BSS	ENDS
;	COMDAT ?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A
_DATA	SEGMENT
?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A DD FLAT:?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A ; `Json::valueAllocator'::`2'::valueAllocator
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ
_TEXT	SEGMENT
?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ PROC	; Json::valueAllocator, COMDAT

; 100  :    static DefaultValueAllocator defaultAllocator;

  00000	f6 05 00 00 00
	00 01		 test	 BYTE PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, 1
  00007	75 1c		 jne	 SHORT $LN1@valueAlloc
  00009	83 0d 00 00 00
	00 01		 or	 DWORD PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, 1
  00010	68 00 00 00 00	 push	 OFFSET ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
  00015	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7DefaultValueAllocator@Json@@6B@
  0001f	e8 00 00 00 00	 call	 _atexit
  00024	59		 pop	 ecx
$LN1@valueAlloc:

; 101  :    static ValueAllocator *valueAllocator = &defaultAllocator;
; 102  :    return valueAllocator;

  00025	b8 00 00 00 00	 mov	 eax, OFFSET ?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A

; 103  : }

  0002a	c3		 ret	 0
?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ENDP	; Json::valueAllocator
_TEXT	ENDS
PUBLIC	??0DummyValueAllocatorInitializer@Json@@QAE@XZ	; Json::DummyValueAllocatorInitializer::DummyValueAllocatorInitializer
; Function compile flags: /Ogsp
;	COMDAT ??0DummyValueAllocatorInitializer@Json@@QAE@XZ
_TEXT	SEGMENT
??0DummyValueAllocatorInitializer@Json@@QAE@XZ PROC	; Json::DummyValueAllocatorInitializer::DummyValueAllocatorInitializer, COMDAT
; _this$ = ecx

; 106  :    DummyValueAllocatorInitializer() 

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 107  :    {
; 108  :       valueAllocator();      // ensure valueAllocator() statics are initialized before main().

  00003	e8 00 00 00 00	 call	 ?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator

; 109  :    }

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi
  0000b	c3		 ret	 0
??0DummyValueAllocatorInitializer@Json@@QAE@XZ ENDP	; Json::DummyValueAllocatorInitializer::DummyValueAllocatorInitializer
_TEXT	ENDS
PUBLIC	??1CommentInfo@Value@Json@@QAE@XZ		; Json::Value::CommentInfo::~CommentInfo
; Function compile flags: /Ogsp
;	COMDAT ??1CommentInfo@Value@Json@@QAE@XZ
_TEXT	SEGMENT
??1CommentInfo@Value@Json@@QAE@XZ PROC			; Json::Value::CommentInfo::~CommentInfo, COMDAT
; _this$ = ecx

; 145  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 146  :    if ( comment_ )

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN1@CommentInf

; 147  :       valueAllocator()->releaseStringValue( comment_ );

  00008	e8 00 00 00 00	 call	 ?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
  0000d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000f	ff 36		 push	 DWORD PTR [esi]
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	ff 50 10	 call	 DWORD PTR [eax+16]
$LN1@CommentInf:
  00016	5e		 pop	 esi

; 148  : }

  00017	c3		 ret	 0
??1CommentInfo@Value@Json@@QAE@XZ ENDP			; Json::Value::CommentInfo::~CommentInfo
_TEXT	ENDS
PUBLIC	?setComment@CommentInfo@Value@Json@@QAEXPBD@Z	; Json::Value::CommentInfo::setComment
; Function compile flags: /Ogsp
;	COMDAT ?setComment@CommentInfo@Value@Json@@QAEXPBD@Z
_TEXT	SEGMENT
_text$ = 8						; size = 4
?setComment@CommentInfo@Value@Json@@QAEXPBD@Z PROC	; Json::Value::CommentInfo::setComment, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 154  :    if ( comment_ )

  00006	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00009	74 0e		 je	 SHORT $LN1@setComment

; 155  :       valueAllocator()->releaseStringValue( comment_ );

  0000b	e8 00 00 00 00	 call	 ?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	ff 36		 push	 DWORD PTR [esi]
  00014	8b 01		 mov	 eax, DWORD PTR [ecx]
  00016	ff 50 10	 call	 DWORD PTR [eax+16]
$LN1@setComment:

; 156  :    JSON_ASSERT( text );
; 157  :    JSON_ASSERT_MESSAGE( text[0]=='\0' || text[0]=='/', "Comments must start with /");
; 158  :    // It seems that /**/ style comments are acceptable as well.
; 159  :    comment_ = valueAllocator()->duplicateStringValue( text );

  00019	e8 00 00 00 00	 call	 ?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	6a ff		 push	 -1
  00024	ff 75 08	 push	 DWORD PTR _text$[ebp]
  00027	ff 50 0c	 call	 DWORD PTR [eax+12]
  0002a	89 06		 mov	 DWORD PTR [esi], eax
  0002c	5e		 pop	 esi

; 160  : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?setComment@CommentInfo@Value@Json@@QAEXPBD@Z ENDP	; Json::Value::CommentInfo::setComment
_TEXT	ENDS
PUBLIC	??0CZString@Value@Json@@QAE@PBDW4DuplicationPolicy@012@@Z ; Json::Value::CZString::CZString
; Function compile flags: /Ogsp
;	COMDAT ??0CZString@Value@Json@@QAE@PBDW4DuplicationPolicy@012@@Z
_TEXT	SEGMENT
_cstr$ = 8						; size = 4
_allocate$ = 12						; size = 4
??0CZString@Value@Json@@QAE@PBDW4DuplicationPolicy@012@@Z PROC ; Json::Value::CZString::CZString, COMDAT
; _this$ = ecx

; 185  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 0c	 mov	 edi, DWORD PTR _allocate$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	83 ff 01	 cmp	 edi, 1
  0000d	75 11		 jne	 SHORT $LN3@CZString
  0000f	e8 00 00 00 00	 call	 ?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	ff 75 08	 push	 DWORD PTR _cstr$[ebp]
  00019	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001b	ff 50 04	 call	 DWORD PTR [eax+4]
  0001e	eb 03		 jmp	 SHORT $LN4@CZString
$LN3@CZString:
  00020	8b 45 08	 mov	 eax, DWORD PTR _cstr$[ebp]
$LN4@CZString:
  00023	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00026	89 06		 mov	 DWORD PTR [esi], eax
  00028	5f		 pop	 edi

; 186  : }

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
??0CZString@Value@Json@@QAE@PBDW4DuplicationPolicy@012@@Z ENDP ; Json::Value::CZString::CZString
_TEXT	ENDS
PUBLIC	??0CZString@Value@Json@@QAE@ABV012@@Z		; Json::Value::CZString::CZString
; Function compile flags: /Ogsp
;	COMDAT ??0CZString@Value@Json@@QAE@ABV012@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??0CZString@Value@Json@@QAE@ABV012@@Z PROC		; Json::Value::CZString::CZString, COMDAT
; _this$ = ecx

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR _other$[ebp]
  00007	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	74 15		 je	 SHORT $LN3@CZString@2
  00010	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00013	74 10		 je	 SHORT $LN3@CZString@2
  00015	e8 00 00 00 00	 call	 ?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	ff 36		 push	 DWORD PTR [esi]
  0001e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00020	ff 50 04	 call	 DWORD PTR [eax+4]
  00023	eb 02		 jmp	 SHORT $LN4@CZString@2
$LN3@CZString@2:
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
$LN4@CZString@2:
  00027	89 07		 mov	 DWORD PTR [edi], eax
  00029	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0002c	74 0c		 je	 SHORT $LN5@CZString@2
  0002e	33 c0		 xor	 eax, eax
  00030	39 46 04	 cmp	 DWORD PTR [esi+4], eax
  00033	0f 95 c0	 setne	 al
  00036	8b f0		 mov	 esi, eax
  00038	eb 03		 jmp	 SHORT $LN6@CZString@2
$LN5@CZString@2:
  0003a	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
$LN6@CZString@2:
  0003d	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 195  : }

  00040	8b c7		 mov	 eax, edi
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
??0CZString@Value@Json@@QAE@ABV012@@Z ENDP		; Json::Value::CZString::CZString
_TEXT	ENDS
PUBLIC	??1CZString@Value@Json@@QAE@XZ			; Json::Value::CZString::~CZString
; Function compile flags: /Ogsp
;	COMDAT ??1CZString@Value@Json@@QAE@XZ
_TEXT	SEGMENT
??1CZString@Value@Json@@QAE@XZ PROC			; Json::Value::CZString::~CZString, COMDAT
; _this$ = ecx

; 198  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 199  :    if ( cstr_  &&  index_ == duplicate )

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 14		 je	 SHORT $LN1@CZString@3
  00008	83 7e 04 01	 cmp	 DWORD PTR [esi+4], 1
  0000c	75 0e		 jne	 SHORT $LN1@CZString@3

; 200  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

  0000e	e8 00 00 00 00	 call	 ?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
  00013	8b 08		 mov	 ecx, DWORD PTR [eax]
  00015	ff 36		 push	 DWORD PTR [esi]
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	ff 50 08	 call	 DWORD PTR [eax+8]
$LN1@CZString@3:
  0001c	5e		 pop	 esi

; 201  : }

  0001d	c3		 ret	 0
??1CZString@Value@Json@@QAE@XZ ENDP			; Json::Value::CZString::~CZString
_TEXT	ENDS
PUBLIC	?swap@CZString@Value@Json@@AAEXAAV123@@Z	; Json::Value::CZString::swap
; Function compile flags: /Ogsp
;	COMDAT ?swap@CZString@Value@Json@@AAEXAAV123@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?swap@CZString@Value@Json@@AAEXAAV123@@Z PROC		; Json::Value::CZString::swap, COMDAT
; _this$ = ecx

; 205  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  :    std::swap( cstr_, other.cstr_ );

  00003	8b 45 08	 mov	 eax, DWORD PTR _other$[ebp]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	56		 push	 esi
  00009	8b 30		 mov	 esi, DWORD PTR [eax]
  0000b	89 31		 mov	 DWORD PTR [ecx], esi
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 207  :    std::swap( index_, other.index_ );

  0000f	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00018	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001b	5e		 pop	 esi

; 208  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?swap@CZString@Value@Json@@AAEXAAV123@@Z ENDP		; Json::Value::CZString::swap
_TEXT	ENDS
PUBLIC	??4CZString@Value@Json@@QAEAAV012@ABV012@@Z	; Json::Value::CZString::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4CZString@Value@Json@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
_temp$ = -8						; size = 8
_other$ = 8						; size = 4
??4CZString@Value@Json@@QAEAAV012@ABV012@@Z PROC	; Json::Value::CZString::operator=, COMDAT
; _this$ = ecx

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi

; 213  :    CZString temp( other );

  00006	ff 75 08	 push	 DWORD PTR _other$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	8d 4d f8	 lea	 ecx, DWORD PTR _temp$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CZString@Value@Json@@QAE@ABV012@@Z ; Json::Value::CZString::CZString

; 214  :    swap( temp );

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	8b 4d f8	 mov	 ecx, DWORD PTR _temp$[ebp]
  00018	89 0e		 mov	 DWORD PTR [esi], ecx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _temp$[ebp+4]
  0001d	89 45 f8	 mov	 DWORD PTR _temp$[ebp], eax
  00020	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00023	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 215  :    return *this;

  00026	8d 4d f8	 lea	 ecx, DWORD PTR _temp$[ebp]
  00029	89 45 fc	 mov	 DWORD PTR _temp$[ebp+4], eax
  0002c	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi

; 216  : }

  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??4CZString@Value@Json@@QAEAAV012@ABV012@@Z ENDP	; Json::Value::CZString::operator=
_TEXT	ENDS
PUBLIC	??0Value@Json@@QAE@PBD@Z			; Json::Value::Value
; Function compile flags: /Ogsp
;	COMDAT ??0Value@Json@@QAE@PBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
??0Value@Json@@QAE@PBD@Z PROC				; Json::Value::Value, COMDAT
; _this$ = ecx

; 351  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	83 66 0c 00	 and	 DWORD PTR [esi+12], 0
  0000a	c6 46 08 04	 mov	 BYTE PTR [esi+8], 4
  0000e	81 4e 08 00 01
	00 00		 or	 DWORD PTR [esi+8], 256	; 00000100H

; 352  :    value_.string_ = valueAllocator()->duplicateStringValue( value );

  00015	e8 00 00 00 00	 call	 ?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001e	6a ff		 push	 -1
  00020	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00023	ff 50 0c	 call	 DWORD PTR [eax+12]
  00026	89 06		 mov	 DWORD PTR [esi], eax

; 353  : }

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0Value@Json@@QAE@PBD@Z ENDP				; Json::Value::Value
_TEXT	ENDS
PUBLIC	??0Value@Json@@QAE@PBD0@Z			; Json::Value::Value
; Function compile flags: /Ogsp
;	COMDAT ??0Value@Json@@QAE@PBD0@Z
_TEXT	SEGMENT
_beginValue$ = 8					; size = 4
_endValue$ = 12						; size = 4
??0Value@Json@@QAE@PBD0@Z PROC				; Json::Value::Value, COMDAT
; _this$ = ecx

; 364  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	83 66 0c 00	 and	 DWORD PTR [esi+12], 0
  0000a	c6 46 08 04	 mov	 BYTE PTR [esi+8], 4
  0000e	81 4e 08 00 01
	00 00		 or	 DWORD PTR [esi+8], 256	; 00000100H

; 365  :    value_.string_ = valueAllocator()->duplicateStringValue( beginValue, 
; 366  :                                                             UInt(endValue - beginValue) );

  00015	e8 00 00 00 00	 call	 ?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
  0001a	8b 55 0c	 mov	 edx, DWORD PTR _endValue$[ebp]
  0001d	2b 55 08	 sub	 edx, DWORD PTR _beginValue$[ebp]
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	8b 01		 mov	 eax, DWORD PTR [ecx]
  00024	52		 push	 edx
  00025	ff 75 08	 push	 DWORD PTR _beginValue$[ebp]
  00028	ff 50 0c	 call	 DWORD PTR [eax+12]
  0002b	89 06		 mov	 DWORD PTR [esi], eax

; 367  : }

  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
??0Value@Json@@QAE@PBD0@Z ENDP				; Json::Value::Value
_TEXT	ENDS
PUBLIC	??0Value@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::Value
; Function compile flags: /Ogsp
;	COMDAT ??0Value@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
??0Value@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::Value, COMDAT
; _this$ = ecx

; 377  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	83 66 0c 00	 and	 DWORD PTR [esi+12], 0
  0000a	c6 46 08 04	 mov	 BYTE PTR [esi+8], 4
  0000e	81 4e 08 00 01
	00 00		 or	 DWORD PTR [esi+8], 256	; 00000100H
  00015	57		 push	 edi

; 378  :    value_.string_ = valueAllocator()->duplicateStringValue( value.c_str(), 
; 379  :                                                             (unsigned int)value.length() );

  00016	e8 00 00 00 00	 call	 ?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00020	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00024	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00027	72 02		 jb	 SHORT $LN9@Value
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
$LN9@Value:
  0002b	8b 39		 mov	 edi, DWORD PTR [ecx]
  0002d	52		 push	 edx
  0002e	50		 push	 eax
  0002f	ff 57 0c	 call	 DWORD PTR [edi+12]
  00032	89 06		 mov	 DWORD PTR [esi], eax
  00034	5f		 pop	 edi

; 380  : 
; 381  : }

  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
??0Value@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::Value
_TEXT	ENDS
PUBLIC	??_ECommentInfo@Value@Json@@QAEPAXI@Z		; Json::Value::CommentInfo::`vector deleting destructor'
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Ogsp
;	COMDAT ??_ECommentInfo@Value@Json@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_ECommentInfo@Value@Json@@QAEPAXI@Z PROC		; Json::Value::CommentInfo::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 02	 test	 BYTE PTR ___flags$[ebp], 2
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	74 25		 je	 SHORT $LN3@vector
  0000c	56		 push	 esi
  0000d	68 00 00 00 00	 push	 OFFSET ??1CommentInfo@Value@Json@@QAE@XZ ; Json::Value::CommentInfo::~CommentInfo
  00012	8d 77 fc	 lea	 esi, DWORD PTR [edi-4]
  00015	ff 36		 push	 DWORD PTR [esi]
  00017	6a 04		 push	 4
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0001f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00023	74 07		 je	 SHORT $LN2@vector
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002b	59		 pop	 ecx
$LN2@vector:
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	eb 14		 jmp	 SHORT $LN4@vector
$LN3@vector:
  00031	e8 00 00 00 00	 call	 ??1CommentInfo@Value@Json@@QAE@XZ ; Json::Value::CommentInfo::~CommentInfo
  00036	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003a	74 07		 je	 SHORT $LN1@vector
  0003c	57		 push	 edi
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00042	59		 pop	 ecx
$LN1@vector:
  00043	8b c7		 mov	 eax, edi
$LN4@vector:
  00045	5f		 pop	 edi
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
??_ECommentInfo@Value@Json@@QAEPAXI@Z ENDP		; Json::Value::CommentInfo::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?swap@Value@Json@@QAEXAAV12@@Z			; Json::Value::swap
; Function compile flags: /Ogsp
;	COMDAT ?swap@Value@Json@@QAEXAAV12@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?swap@Value@Json@@QAEXAAV12@@Z PROC			; Json::Value::swap, COMDAT
; _this$ = ecx

; 518  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 519  :    ValueType temp = type_;
; 520  :    type_ = other.type_;

  00003	8b 45 08	 mov	 eax, DWORD PTR _other$[ebp]
  00006	0f be 51 08	 movsx	 edx, BYTE PTR [ecx+8]
  0000a	53		 push	 ebx
  0000b	8a 58 08	 mov	 bl, BYTE PTR [eax+8]
  0000e	88 59 08	 mov	 BYTE PTR [ecx+8], bl

; 521  :    other.type_ = temp;

  00011	88 50 08	 mov	 BYTE PTR [eax+8], dl

; 522  :    std::swap( value_, other.value_ );

  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	56		 push	 esi
  00017	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0001a	57		 push	 edi
  0001b	8b 38		 mov	 edi, DWORD PTR [eax]
  0001d	89 39		 mov	 DWORD PTR [ecx], edi
  0001f	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00022	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 523  :    int temp2 = allocated_;
; 524  :    allocated_ = other.allocated_;

  00025	8b 58 08	 mov	 ebx, DWORD PTR [eax+8]
  00028	89 10		 mov	 DWORD PTR [eax], edx
  0002a	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0002d	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00030	33 df		 xor	 ebx, edi
  00032	8b d7		 mov	 edx, edi
  00034	c1 e2 17	 shl	 edx, 23			; 00000017H
  00037	be 00 01 00 00	 mov	 esi, 256		; 00000100H
  0003c	23 de		 and	 ebx, esi
  0003e	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  00041	33 df		 xor	 ebx, edi

; 525  :    other.allocated_ = temp2;

  00043	c1 e2 08	 shl	 edx, 8
  00046	89 59 08	 mov	 DWORD PTR [ecx+8], ebx
  00049	33 50 08	 xor	 edx, DWORD PTR [eax+8]
  0004c	5f		 pop	 edi
  0004d	23 d6		 and	 edx, esi
  0004f	31 50 08	 xor	 DWORD PTR [eax+8], edx
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx

; 526  : }

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?swap@Value@Json@@QAEXAAV12@@Z ENDP			; Json::Value::swap
_TEXT	ENDS
PUBLIC	?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z ; Json::Value::setComment
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z$0
__ehfuncinfo$?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z
_TEXT	SEGMENT
$T43422 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_comment$ = 8						; size = 4
_placement$ = 12					; size = 4
?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z PROC ; Json::Value::setComment, COMDAT
; _this$ = ecx

; 1330 : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx

; 1331 :    if ( !comments_ )

  0000e	33 f6		 xor	 esi, esi
  00010	39 77 0c	 cmp	 DWORD PTR [edi+12], esi
  00013	75 34		 jne	 SHORT $LN1@setComment@2

; 1332 :       comments_ = new CommentInfo[numberOfCommentPlacement];

  00015	6a 10		 push	 16			; 00000010H
  00017	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0001c	59		 pop	 ecx
  0001d	89 45 f0	 mov	 DWORD PTR $T43422[ebp], eax
  00020	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  00023	3b c6		 cmp	 eax, esi
  00025	74 1b		 je	 SHORT $LN4@setComment@2
  00027	6a 03		 push	 3
  00029	59		 pop	 ecx
  0002a	68 00 00 00 00	 push	 OFFSET ??1CommentInfo@Value@Json@@QAE@XZ ; Json::Value::CommentInfo::~CommentInfo
  0002f	68 00 00 00 00	 push	 OFFSET ??0CommentInfo@Value@Json@@QAE@XZ ; Json::Value::CommentInfo::CommentInfo
  00034	51		 push	 ecx
  00035	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
  00038	6a 04		 push	 4
  0003a	56		 push	 esi
  0003b	89 08		 mov	 DWORD PTR [eax], ecx
  0003d	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
$LN4@setComment@2:
  00042	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00046	89 77 0c	 mov	 DWORD PTR [edi+12], esi
$LN1@setComment@2:

; 1333 :    comments_[placement].setComment( comment );

  00049	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _placement$[ebp]
  0004f	ff 75 08	 push	 DWORD PTR _comment$[ebp]
  00052	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00055	e8 00 00 00 00	 call	 ?setComment@CommentInfo@Value@Json@@QAEXPBD@Z ; Json::Value::CommentInfo::setComment

; 1334 : }

  0005a	e8 00 00 00 00	 call	 __EH_epilog3
  0005f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z$0:
  00000	ff 75 f0	 push	 DWORD PTR $T43422[ebp]
  00003	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z ENDP ; Json::Value::setComment
PUBLIC	?setComment@Value@Json@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::setComment
; Function compile flags: /Ogsp
;	COMDAT ?setComment@Value@Json@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
_TEXT	SEGMENT
_comment$ = 8						; size = 4
_placement$ = 12					; size = 4
?setComment@Value@Json@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z PROC ; Json::Value::setComment, COMDAT
; _this$ = ecx

; 1340 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1341 :    setComment( comment.c_str(), placement );

  00003	8b 45 08	 mov	 eax, DWORD PTR _comment$[ebp]
  00006	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0000a	72 02		 jb	 SHORT $LN7@setComment@3
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@setComment@3:
  0000e	ff 75 0c	 push	 DWORD PTR _placement$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z ; Json::Value::setComment

; 1342 : }

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?setComment@Value@Json@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ENDP ; Json::Value::setComment
_TEXT	ENDS
PUBLIC	??0?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
_TEXT	ENDS
PUBLIC	??0?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::vector<Json::PathArgument,std::allocator<Json::PathArgument> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::vector<Json::PathArgument,std::allocator<Json::PathArgument> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::vector<Json::PathArgument,std::allocator<Json::PathArgument> >
_TEXT	ENDS
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::clear
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::clear, COMDAT
; _this$ = ecx

; 1410 : 		{	// erase all

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		this->_Orphan_ptr(*this, 0);
; 1413 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1414 : 
; 1415 : 		_Erase(_Root());

  00004	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00007	ff 70 04	 push	 DWORD PTR [eax+4]
  0000a	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase

; 1416 : 		_Root() = this->_Myhead;

  0000f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00012	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1417 : 		_Lmost() = this->_Myhead;

  00015	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00018	89 00		 mov	 DWORD PTR [eax], eax

; 1418 : 		_Rmost() = this->_Myhead;

  0001a	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0001d	89 76 08	 mov	 DWORD PTR [esi+8], esi

; 1419 : 		this->_Mysize = 0;

  00020	83 67 08 00	 and	 DWORD PTR [edi+8], 0
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi

; 1420 : 		}

  00026	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::clear
_TEXT	ENDS
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >, COMDAT
; _this$ = ecx

; 372  : 	_Tree_iterator()

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 373  : 		{	// construct with null node
; 374  : 		}

  00005	c3		 ret	 0
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >
_TEXT	ENDS
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator*, COMDAT
; _this$ = ecx

; 396  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 397  : 		}

  00005	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator*
_TEXT	ENDS
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator->
; Function compile flags: /Ogsp
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator->, COMDAT
; _this$ = ecx

; 401  : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 402  : 		}

  00005	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator->
_TEXT	ENDS
PUBLIC	??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 405  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 406  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator++

; 407  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 408  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator--
; Function compile flags: /Ogsp
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator--, COMDAT
; _this$ = ecx

; 418  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 419  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator--

; 420  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 421  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::operator--
_TEXT	ENDS
PUBLIC	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1987 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1988 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 20		 je	 SHORT $LN9@Tidy

; 1989 : 			;
; 1990 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1a		 jb	 SHORT $LN9@Tidy

; 1991 : 			{	// copy any leftovers to small buffer and deallocate
; 1992 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1993 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy

; 1994 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy:

; 1995 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	59		 pop	 ecx
  0002f	5b		 pop	 ebx
$LN9@Tidy:

; 1996 : 			}
; 1997 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1998 : 		_Eos(_Newsize);

  00030	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00033	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 1999 : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABVCZString@Value@Json@@@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 1741 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1742 : 		_Nodeptr _Pnode = _Root();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	56		 push	 esi
  00007	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000a	57		 push	 edi

; 1743 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails

  0000b	8b f8		 mov	 edi, eax
  0000d	eb 18		 jmp	 SHORT $LN26@Lbound
$LL4@Lbound:

; 1746 : 			if (_DEBUG_LT_PRED(this->comp, this->_Key(_Pnode), _Keyval))

  0000f	ff 75 08	 push	 DWORD PTR __Keyval$[ebp]
  00012	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00015	e8 00 00 00 00	 call	 ??MCZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator<
  0001a	84 c0		 test	 al, al
  0001c	74 05		 je	 SHORT $LN2@Lbound

; 1747 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  0001e	8b 76 08	 mov	 esi, DWORD PTR [esi+8]

; 1748 : 			else

  00021	eb 04		 jmp	 SHORT $LN26@Lbound
$LN2@Lbound:

; 1749 : 				{	// _Pnode not less than _Keyval, remember it
; 1750 : 				_Wherenode = _Pnode;

  00023	8b fe		 mov	 edi, esi

; 1751 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00025	8b 36		 mov	 esi, DWORD PTR [esi]
$LN26@Lbound:

; 1744 : 
; 1745 : 		while (!this->_Isnil(_Pnode))

  00027	80 7e 25 00	 cmp	 BYTE PTR [esi+37], 0
  0002b	74 e2		 je	 SHORT $LL4@Lbound

; 1752 : 				}
; 1753 : 
; 1754 : 		return (_Wherenode);	// return best remembered candidate

  0002d	8b c7		 mov	 eax, edi
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi

; 1755 : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?_Lbound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate
; Function compile flags: /Ogsp
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1763 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1764 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00009	56		 push	 esi

; 1765 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0000a	8b 30		 mov	 esi, DWORD PTR [eax]
  0000c	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1766 : 
; 1767 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  0000f	8b 30		 mov	 esi, DWORD PTR [eax]
  00011	80 7e 25 00	 cmp	 BYTE PTR [esi+37], 0
  00015	75 03		 jne	 SHORT $LN5@Lrotate

; 1768 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Lrotate:

; 1769 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1770 : 
; 1771 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	5e		 pop	 esi
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	75 05		 jne	 SHORT $LN4@Lrotate

; 1772 : 			_Root() = _Pnode;

  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1773 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  0002c	eb 0e		 jmp	 SHORT $LN1@Lrotate
$LN4@Lrotate:
  0002e	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00031	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00033	75 04		 jne	 SHORT $LN2@Lrotate

; 1774 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  00035	89 01		 mov	 DWORD PTR [ecx], eax

; 1775 : 		else

  00037	eb 03		 jmp	 SHORT $LN1@Lrotate
$LN2@Lrotate:

; 1776 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00039	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN1@Lrotate:

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0003c	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  0003e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >, COMDAT
; _this$ = ecx

; 378  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 379  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXPAPBVPathArgument@Json@@0@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXPAPBVPathArgument@Json@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXPAPBVPathArgument@Json@@0@Z PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXPAPBVPathArgument@Json@@0@Z ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Eqrange@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Eqrange
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Eqrange@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@2@ABVCZString@Value@Json@@@Z
_TEXT	SEGMENT
__Lonode$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?_Eqrange@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@2@ABVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Eqrange, COMDAT
; _this$ = ecx

; 1575 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx

; 1576 : 		_Nodeptr _Pnode = _Root();

  00008	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0000b	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000e	57		 push	 edi

; 1577 : 		_Nodeptr _Lonode = this->_Myhead;	// end() if search fails

  0000f	89 45 fc	 mov	 DWORD PTR __Lonode$[ebp], eax

; 1578 : 		_Nodeptr _Hinode = this->_Myhead;	// end() if search fails

  00012	8b f8		 mov	 edi, eax
  00014	eb 31		 jmp	 SHORT $LN94@Eqrange
$LL9@Eqrange:

; 1581 : 			if (_DEBUG_LT_PRED(this->comp, this->_Key(_Pnode), _Keyval))

  00016	ff 75 0c	 push	 DWORD PTR __Keyval$[ebp]
  00019	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0001c	e8 00 00 00 00	 call	 ??MCZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator<
  00021	84 c0		 test	 al, al
  00023	74 05		 je	 SHORT $LN7@Eqrange

; 1582 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00025	8b 76 08	 mov	 esi, DWORD PTR [esi+8]

; 1583 : 			else

  00028	eb 1d		 jmp	 SHORT $LN94@Eqrange
$LN7@Eqrange:

; 1584 : 				{	// _Pnode not less than _Keyval, remember it
; 1585 : 				if (this->_Isnil(_Hinode)
; 1586 : 						&& _DEBUG_LT_PRED(this->comp, _Keyval,

  0002a	80 7f 25 00	 cmp	 BYTE PTR [edi+37], 0
  0002e	74 12		 je	 SHORT $LN5@Eqrange
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00033	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??MCZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator<
  0003c	84 c0		 test	 al, al
  0003e	74 02		 je	 SHORT $LN5@Eqrange

; 1587 : 						 this->_Key(_Pnode)))
; 1588 : 					_Hinode = _Pnode;	// _Pnode greater, remember it

  00040	8b fe		 mov	 edi, esi
$LN5@Eqrange:

; 1589 : 				_Lonode = _Pnode;

  00042	89 75 fc	 mov	 DWORD PTR __Lonode$[ebp], esi

; 1590 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00045	8b 36		 mov	 esi, DWORD PTR [esi]
$LN94@Eqrange:

; 1579 : 
; 1580 : 		while (!this->_Isnil(_Pnode))

  00047	80 7e 25 00	 cmp	 BYTE PTR [esi+37], 0
  0004b	74 c9		 je	 SHORT $LL9@Eqrange

; 1591 : 				}
; 1592 : 
; 1593 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 1594 : 			: this->_Left(_Hinode);	// continue scan for upper bound

  0004d	80 7f 25 00	 cmp	 BYTE PTR [edi+37], 0
  00051	74 08		 je	 SHORT $LN12@Eqrange
  00053	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00056	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00059	eb 1d		 jmp	 SHORT $LN95@Eqrange
$LN12@Eqrange:
  0005b	8b 37		 mov	 esi, DWORD PTR [edi]

; 1595 : 		while (!this->_Isnil(_Pnode))

  0005d	eb 19		 jmp	 SHORT $LN95@Eqrange
$LL4@Eqrange:

; 1596 : 			if (_DEBUG_LT_PRED(this->comp, _Keyval, this->_Key(_Pnode)))

  0005f	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00062	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??MCZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator<
  0006b	84 c0		 test	 al, al
  0006d	74 06		 je	 SHORT $LN2@Eqrange

; 1597 : 				{	// _Pnode greater than _Keyval, remember it
; 1598 : 				_Hinode = _Pnode;

  0006f	8b fe		 mov	 edi, esi

; 1599 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00071	8b 36		 mov	 esi, DWORD PTR [esi]

; 1600 : 				}
; 1601 : 			else

  00073	eb 03		 jmp	 SHORT $LN95@Eqrange
$LN2@Eqrange:

; 1602 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00075	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
$LN95@Eqrange:

; 1595 : 		while (!this->_Isnil(_Pnode))

  00078	80 7e 25 00	 cmp	 BYTE PTR [esi+37], 0
  0007c	74 e1		 je	 SHORT $LL4@Eqrange

; 1603 : 
; 1604 : 		iterator _First = iterator(_Lonode, this);
; 1605 : 		iterator _Last = iterator(_Hinode, this);
; 1606 : 		return (_Pairii(_First, _Last));

  0007e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00081	8b 4d fc	 mov	 ecx, DWORD PTR __Lonode$[ebp]
  00084	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	89 08		 mov	 DWORD PTR [eax], ecx
  0008b	5b		 pop	 ebx

; 1607 : 		}

  0008c	c9		 leave
  0008d	c2 08 00	 ret	 8
?_Eqrange@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@2@ABVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Eqrange
_TEXT	ENDS
PUBLIC	??0?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z
_TEXT	SEGMENT
$T44050 = -16						; size = 12
$T44036 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT
; _this$ = ecx

; 542  : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 543  : 		this->_Mysize = 0;

  00009	83 66 08 00	 and	 DWORD PTR [esi+8], 0

; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

  0000d	6a 28		 push	 40			; 00000028H
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00014	59		 pop	 ecx
  00015	85 c0		 test	 eax, eax
  00017	74 26		 je	 SHORT $LN15@Tree_val
  00019	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 545  : 
; 546  : 		this->_Left(this->_Myhead) = this->_Myhead;

  0001c	89 00		 mov	 DWORD PTR [eax], eax

; 547  : 		this->_Parent(this->_Myhead) = this->_Myhead;

  0001e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00021	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 548  : 		this->_Right(this->_Myhead) = this->_Myhead;

  00024	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00027	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 549  : 		this->_Color(this->_Myhead) = this->_Black;

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	c6 40 24 01	 mov	 BYTE PTR [eax+36], 1

; 550  : 		this->_Isnil(this->_Myhead) = true;

  00031	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00034	c6 40 25 01	 mov	 BYTE PTR [eax+37], 1

; 551  : 		}

  00038	8b c6		 mov	 eax, esi
  0003a	5e		 pop	 esi
  0003b	c9		 leave
  0003c	c2 08 00	 ret	 8

; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

$LN15@Tree_val:
  0003f	83 65 fc 00	 and	 DWORD PTR $T44036[ebp], 0
  00043	8d 45 fc	 lea	 eax, DWORD PTR $T44036[ebp]
  00046	50		 push	 eax
  00047	8d 4d f0	 lea	 ecx, DWORD PTR $T44050[ebp]
  0004a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0004f	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00054	8d 45 f0	 lea	 eax, DWORD PTR $T44050[ebp]
  00057	50		 push	 eax
  00058	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T44050[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0005f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN37@Tree_val:
$LN36@Tree_val:
  00064	cc		 int	 3
??0?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator!=
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
tv296 = -20						; size = 4
__Newres$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1918 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 1919 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00014	83 cf 0f	 or	 edi, 15			; 0000000fH

; 1920 : 		if (max_size() < _Newres)

  00017	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0001a	76 05		 jbe	 SHORT $LN9@Copy

; 1921 : 			_Newres = _Newsize;	// undo roundup if too big

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0001f	eb 27		 jmp	 SHORT $LN5@Copy
$LN9@Copy:

; 1922 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00021	33 d2		 xor	 edx, edx
  00023	6a 03		 push	 3
  00025	8b c7		 mov	 eax, edi
  00027	5b		 pop	 ebx
  00028	f7 f3		 div	 ebx
  0002a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002d	89 4d ec	 mov	 DWORD PTR tv296[ebp], ecx
  00030	d1 6d ec	 shr	 DWORD PTR tv296[ebp], 1
  00033	8b 55 ec	 mov	 edx, DWORD PTR tv296[ebp]
  00036	3b d0		 cmp	 edx, eax
  00038	76 0e		 jbe	 SHORT $LN5@Copy

; 1923 : 			;
; 1924 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  0003a	6a fe		 push	 -2			; fffffffeH
  0003c	5f		 pop	 edi
  0003d	8b c7		 mov	 eax, edi
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	77 03		 ja	 SHORT $LN5@Copy

; 1925 : 			_Newres = this->_Myres
; 1926 : 				+ this->_Myres / 2;	// grow exponentially if possible

  00045	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]
$LN5@Copy:

; 1927 : 		else
; 1928 : 			_Newres = max_size();	// settle for max_size()
; 1929 : 
; 1930 : 		_Elem *_Ptr;
; 1931 : 		_TRY_BEGIN

  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1932 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  0004c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0004f	6a 00		 push	 0
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00057	59		 pop	 ecx
  00058	59		 pop	 ecx
  00059	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0005c	eb 27		 jmp	 SHORT $LN19@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1933 : 		_CATCH_ALL
; 1934 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0005e	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00061	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00064	89 45 ec	 mov	 DWORD PTR __Newres$[ebp], eax

; 1935 : 			_TRY_BEGIN
; 1936 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  00067	40		 inc	 eax
  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00074	59		 pop	 ecx
  00075	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00078	59		 pop	 ecx

; 1940 : 			_CATCH_END
; 1941 : 		_CATCH_END

  00079	b8 00 00 00 00	 mov	 eax, $LN63@Copy
  0007e	c3		 ret	 0
$LN63@Copy:
  0007f	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00082	8b 7d ec	 mov	 edi, DWORD PTR __Newres$[ebp]
$LN19@Copy:

; 1942 : 
; 1943 : 		if (0 < _Oldlen)

  00085	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  00088	85 db		 test	 ebx, ebx
  0008a	74 19		 je	 SHORT $LN52@Copy

; 1944 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  0008c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00090	72 04		 jb	 SHORT $LN50@Copy
  00092	8b 06		 mov	 eax, DWORD PTR [esi]
  00094	eb 02		 jmp	 SHORT $LN51@Copy
$LN50@Copy:
  00096	8b c6		 mov	 eax, esi
$LN51@Copy:
  00098	53		 push	 ebx
  00099	50		 push	 eax
  0009a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0009d	e8 00 00 00 00	 call	 _memcpy
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@Copy:

; 1945 : 		_Tidy(true);

  000a5	6a 00		 push	 0
  000a7	6a 01		 push	 1
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1946 : 		this->_Bx._Ptr = _Ptr;

  000b0	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b3	89 06		 mov	 DWORD PTR [esi], eax

; 1947 : 		this->_Myres = _Newres;

  000b5	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 1948 : 		_Eos(_Oldlen);

  000b8	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000bb	83 ff 10	 cmp	 edi, 16			; 00000010H
  000be	73 02		 jae	 SHORT $LN59@Copy
  000c0	8b c6		 mov	 eax, esi
$LN59@Copy:
  000c2	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 1949 : 		}

  000c6	e8 00 00 00 00	 call	 __EH_epilog3
  000cb	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1937 : 			_CATCH_ALL
; 1938 : 			_Tidy(true);	// failed again, discard storage and reraise

  000ce	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	33 f6		 xor	 esi, esi
  000d3	56		 push	 esi
  000d4	6a 01		 push	 1
  000d6	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1939 : 			_RERAISE;

  000db	56		 push	 esi
  000dc	56		 push	 esi
  000dd	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN67@Copy:
$LN66@Copy:
  000e2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??$_Umove@PAPBVPathArgument@Json@@@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEPAPBVPathArgument@Json@@PAPBV23@00@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Umove<Json::PathArgument const * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAPBVPathArgument@Json@@@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEPAPBVPathArgument@Json@@PAPBV23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPBVPathArgument@Json@@@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEPAPBVPathArgument@Json@@PAPBV23@00@Z PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Umove<Json::PathArgument const * *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPBVPathArgument@Json@@PAPBV12@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAV?$allocator@PBVPathArgument@Json@@@0@@Z ; std::_Uninitialized_move<Json::PathArgument const * *,Json::PathArgument const * *,std::allocator<Json::PathArgument const *> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPBVPathArgument@Json@@@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEPAPBVPathArgument@Json@@PAPBV23@00@Z ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Umove<Json::PathArgument const * *>
_TEXT	ENDS
PUBLIC	??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>, COMDAT
; _this$ = ecx

; 227  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000f	8a 09		 mov	 cl, BYTE PTR [ecx]
  00011	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 228  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,bool>
_TEXT	ENDS
PUBLIC	??$lexicographical_compare@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@000@Z ; std::lexicographical_compare<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$lexicographical_compare@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@000@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
??$lexicographical_compare@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@000@Z PROC ; std::lexicographical_compare<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > >, COMDAT

; 3175 : 	{	// order [_First1, _Last1) vs. [First2, Last2)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3176 : 	_DEBUG_RANGE(_First1, _Last1);
; 3177 : 	_DEBUG_RANGE(_First2, _Last2);
; 3178 : 	return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
; 3179 : 		_Unchecked(_First2), _Unchecked(_Last2)));

  00003	ff 75 14	 push	 DWORD PTR __Last2$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __First2$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Last1$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __First1$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Lexicographical_compare@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@0@000@Z ; std::_Lexicographical_compare<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0> >
  00014	83 c4 10	 add	 esp, 16			; 00000010H

; 3180 : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$lexicographical_compare@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@000@Z ENDP ; std::lexicographical_compare<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > >
_TEXT	ENDS
PUBLIC	??$equal@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@00@Z ; std::equal<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$equal@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@00@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
??$equal@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@00@Z PROC ; std::equal<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > >, COMDAT

; 3018 : 	{	// compare [_First1, _Last1) to [First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3019 : 	return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
; 3020 : 		_Unchecked(_First2)));

  00003	ff 75 10	 push	 DWORD PTR __First2$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Last1$[ebp]
  00009	ff 75 08	 push	 DWORD PTR __First1$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$_Equal@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@0@00@Z ; std::_Equal<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0> >
  00011	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3021 : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$equal@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@00@Z ENDP ; std::equal<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > > >
_TEXT	ENDS
PUBLIC	??$_Distance2@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@I@std@@YAXV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z ; std::_Distance2<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,unsigned int>
; Function compile flags: /Ogsp
;	COMDAT ??$_Distance2@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@I@std@@YAXV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Distance2@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@I@std@@YAXV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z PROC ; std::_Distance2<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,unsigned int>, COMDAT

; 876  : 	{	// add to _Off distance between bidirectional iterators (redundant)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 877  : 	for (; _First != _Last; ++_First)

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  00007	39 7d 08	 cmp	 DWORD PTR __First$[ebp], edi
  0000a	74 14		 je	 SHORT $LN1@Distance2@2
  0000c	56		 push	 esi
  0000d	8b 75 10	 mov	 esi, DWORD PTR __Off$[ebp]
$LL8@Distance2@2:

; 878  : 		++_Off;

  00010	ff 06		 inc	 DWORD PTR [esi]
  00012	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator++
  0001a	39 7d 08	 cmp	 DWORD PTR __First$[ebp], edi
  0001d	75 f1		 jne	 SHORT $LL8@Distance2@2
  0001f	5e		 pop	 esi
$LN1@Distance2@2:
  00020	5f		 pop	 edi

; 879  : 	}

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??$_Distance2@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@I@std@@YAXV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z ENDP ; std::_Distance2<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,unsigned int>
_TEXT	ENDS
PUBLIC	??0ValueIteratorBase@Json@@QAE@XZ		; Json::ValueIteratorBase::ValueIteratorBase
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_valueiterator.inl
;	COMDAT ??0ValueIteratorBase@Json@@QAE@XZ
_TEXT	SEGMENT
??0ValueIteratorBase@Json@@QAE@XZ PROC			; Json::ValueIteratorBase::ValueIteratorBase, COMDAT
; _this$ = ecx

; 17   : {

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0
  00005	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 18   : }

  00009	c3		 ret	 0
??0ValueIteratorBase@Json@@QAE@XZ ENDP			; Json::ValueIteratorBase::ValueIteratorBase
_TEXT	ENDS
PUBLIC	?deref@ValueIteratorBase@Json@@IBEAAVValue@2@XZ	; Json::ValueIteratorBase::deref
; Function compile flags: /Ogsp
;	COMDAT ?deref@ValueIteratorBase@Json@@IBEAAVValue@2@XZ
_TEXT	SEGMENT
?deref@ValueIteratorBase@Json@@IBEAAVValue@2@XZ PROC	; Json::ValueIteratorBase::deref, COMDAT
; _this$ = ecx

; 52   : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 53   :    return current_->second;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 14	 add	 eax, 20			; 00000014H

; 54   : #else
; 55   :    if ( isArray_ )
; 56   :       return ValueInternalArray::dereference( iterator_.array_ );
; 57   :    return ValueInternalMap::value( iterator_.map_ );
; 58   : #endif
; 59   : }

  00005	c3		 ret	 0
?deref@ValueIteratorBase@Json@@IBEAAVValue@2@XZ ENDP	; Json::ValueIteratorBase::deref
_TEXT	ENDS
PUBLIC	?increment@ValueIteratorBase@Json@@IAEXXZ	; Json::ValueIteratorBase::increment
; Function compile flags: /Ogsp
;	COMDAT ?increment@ValueIteratorBase@Json@@IAEXXZ
_TEXT	SEGMENT
?increment@ValueIteratorBase@Json@@IAEXXZ PROC		; Json::ValueIteratorBase::increment, COMDAT
; _this$ = ecx

; 65   : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 66   :    ++current_;

  00000	e9 00 00 00 00	 jmp	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator++
?increment@ValueIteratorBase@Json@@IAEXXZ ENDP		; Json::ValueIteratorBase::increment
_TEXT	ENDS
PUBLIC	?decrement@ValueIteratorBase@Json@@IAEXXZ	; Json::ValueIteratorBase::decrement
; Function compile flags: /Ogsp
;	COMDAT ?decrement@ValueIteratorBase@Json@@IAEXXZ
_TEXT	SEGMENT
?decrement@ValueIteratorBase@Json@@IAEXXZ PROC		; Json::ValueIteratorBase::decrement, COMDAT
; _this$ = ecx

; 78   : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 79   :    --current_;

  00000	e9 00 00 00 00	 jmp	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator--
?decrement@ValueIteratorBase@Json@@IAEXXZ ENDP		; Json::ValueIteratorBase::decrement
_TEXT	ENDS
PUBLIC	?computeDistance@ValueIteratorBase@Json@@IBEHABV12@@Z ; Json::ValueIteratorBase::computeDistance
; Function compile flags: /Ogsp
;	COMDAT ?computeDistance@ValueIteratorBase@Json@@IBEHABV12@@Z
_TEXT	SEGMENT
_it$33470 = 8						; size = 4
_other$ = 8						; size = 4
?computeDistance@ValueIteratorBase@Json@@IBEHABV12@@Z PROC ; Json::ValueIteratorBase::computeDistance, COMDAT
; _this$ = ecx

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 91   : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 92   : # ifdef JSON_USE_CPPTL_SMALLMAP
; 93   :    return current_ - other.current_;
; 94   : # else
; 95   :    // Iterator for null value are initialized using the default
; 96   :    // constructor, which initialize current_ to the default
; 97   :    // std::map::iterator. As begin() and end() are two instance 
; 98   :    // of the default std::map::iterator, they can not be compared.
; 99   :    // To allow this, we handle this comparison specifically.
; 100  :    if ( isNull_  &&  other.isNull_ )

  00003	80 79 04 00	 cmp	 BYTE PTR [ecx+4], 0
  00007	8b 45 08	 mov	 eax, DWORD PTR _other$[ebp]
  0000a	74 0a		 je	 SHORT $LN4@computeDis
  0000c	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0
  00010	74 04		 je	 SHORT $LN4@computeDis

; 101  :    {
; 102  :       return 0;

  00012	33 c0		 xor	 eax, eax
  00014	eb 21		 jmp	 SHORT $LN5@computeDis
$LN4@computeDis:

; 103  :    }
; 104  : 
; 105  : 
; 106  :    // Usage of std::distance is not portable (does not compile with Sun Studio 12 RogueWave STL,
; 107  :    // which is the one used by default).
; 108  :    // Using a portable hand-made version for non random iterator instead:
; 109  :    //   return difference_type( std::distance( current_, other.current_ ) );
; 110  :    difference_type myDistance = 0;
; 111  :    for ( Value::ObjectValues::iterator it = current_; it != other.current_; ++it )

  00016	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00018	56		 push	 esi
  00019	8b 30		 mov	 esi, DWORD PTR [eax]
  0001b	57		 push	 edi
  0001c	33 ff		 xor	 edi, edi
  0001e	89 4d 08	 mov	 DWORD PTR _it$33470[ebp], ecx
  00021	3b ce		 cmp	 ecx, esi
  00023	74 0e		 je	 SHORT $LN1@computeDis
$LL9@computeDis:
  00025	8d 4d 08	 lea	 ecx, DWORD PTR _it$33470[ebp]

; 112  :    {
; 113  :       ++myDistance;

  00028	47		 inc	 edi
  00029	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator++
  0002e	39 75 08	 cmp	 DWORD PTR _it$33470[ebp], esi
  00031	75 f2		 jne	 SHORT $LL9@computeDis
$LN1@computeDis:

; 114  :    }
; 115  :    return myDistance;

  00033	8b c7		 mov	 eax, edi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
$LN5@computeDis:

; 116  : # endif
; 117  : #else
; 118  :    if ( isArray_ )
; 119  :       return ValueInternalArray::distance( iterator_.array_, other.iterator_.array_ );
; 120  :    return ValueInternalMap::distance( iterator_.map_, other.iterator_.map_ );
; 121  : #endif
; 122  : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?computeDistance@ValueIteratorBase@Json@@IBEHABV12@@Z ENDP ; Json::ValueIteratorBase::computeDistance
_TEXT	ENDS
PUBLIC	?index@ValueIteratorBase@Json@@QBEIXZ		; Json::ValueIteratorBase::index
;	COMDAT xdata$x
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	SEGMENT
__unwindtable$?index@ValueIteratorBase@Json@@QBEIXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?index@ValueIteratorBase@Json@@QBEIXZ$0
__ehfuncinfo$?index@ValueIteratorBase@Json@@QBEIXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?index@ValueIteratorBase@Json@@QBEIXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_valueiterator.inl
xdata$x	ENDS
;	COMDAT ?index@ValueIteratorBase@Json@@QBEIXZ
_TEXT	SEGMENT
_czstring$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
?index@ValueIteratorBase@Json@@QBEIXZ PROC		; Json::ValueIteratorBase::index, COMDAT
; _this$ = ecx

; 181  : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?index@ValueIteratorBase@Json@@QBEIXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 182  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 183  :    const Value::CZString czstring = (*current_).first;

  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00011	50		 push	 eax
  00012	8d 4d ec	 lea	 ecx, DWORD PTR _czstring$[ebp]
  00015	e8 00 00 00 00	 call	 ??0CZString@Value@Json@@QAE@ABV012@@Z ; Json::Value::CZString::CZString

; 184  :    if ( !czstring.c_str() )

  0001a	83 7d ec 00	 cmp	 DWORD PTR _czstring$[ebp], 0
  0001e	75 17		 jne	 SHORT $LN1@index
  00020	8b 75 f0	 mov	 esi, DWORD PTR _czstring$[ebp+4]
$LN15@index:

; 185  :       return czstring.index();

  00023	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00027	8d 4d ec	 lea	 ecx, DWORD PTR _czstring$[ebp]
  0002a	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  0002f	8b c6		 mov	 eax, esi

; 186  :    return Value::UInt( -1 );
; 187  : #else
; 188  :    if ( isArray_ )
; 189  :       return Value::UInt( ValueInternalArray::indexOf( iterator_.array_ ) );
; 190  :    return Value::UInt( -1 );
; 191  : #endif
; 192  : }

  00031	e8 00 00 00 00	 call	 __EH_epilog3
  00036	c3		 ret	 0
$LN1@index:
  00037	83 ce ff	 or	 esi, -1
  0003a	eb e7		 jmp	 SHORT $LN15@index
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?index@ValueIteratorBase@Json@@QBEIXZ$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _czstring$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__ehhandler$?index@ValueIteratorBase@Json@@QBEIXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?index@ValueIteratorBase@Json@@QBEIXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?index@ValueIteratorBase@Json@@QBEIXZ ENDP		; Json::ValueIteratorBase::index
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?memberName@ValueIteratorBase@Json@@QBEPBDXZ	; Json::ValueIteratorBase::memberName
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_valueiterator.inl
CONST	ENDS
;	COMDAT ?memberName@ValueIteratorBase@Json@@QBEPBDXZ
_TEXT	SEGMENT
?memberName@ValueIteratorBase@Json@@QBEPBDXZ PROC	; Json::ValueIteratorBase::memberName, COMDAT
; _this$ = ecx

; 198  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 199  :    const char *name = (*current_).first.c_str();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 200  :    return name ? name : "";

  00005	85 c0		 test	 eax, eax
  00007	75 05		 jne	 SHORT $LN4@memberName
  00009	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN4@memberName:

; 201  : #else
; 202  :    if ( !isArray_ )
; 203  :       return ValueInternalMap::key( iterator_.map_ );
; 204  :    return "";
; 205  : #endif
; 206  : }

  0000e	c3		 ret	 0
?memberName@ValueIteratorBase@Json@@QBEPBDXZ ENDP	; Json::ValueIteratorBase::memberName
_TEXT	ENDS
PUBLIC	??0ValueConstIterator@Json@@QAE@XZ		; Json::ValueConstIterator::ValueConstIterator
; Function compile flags: /Ogsp
;	COMDAT ??0ValueConstIterator@Json@@QAE@XZ
_TEXT	SEGMENT
??0ValueConstIterator@Json@@QAE@XZ PROC			; Json::ValueConstIterator::ValueConstIterator, COMDAT
; _this$ = ecx

; 218  : {

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0
  00005	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 219  : }

  00009	c3		 ret	 0
??0ValueConstIterator@Json@@QAE@XZ ENDP			; Json::ValueConstIterator::ValueConstIterator
_TEXT	ENDS
PUBLIC	??0ValueIterator@Json@@QAE@XZ			; Json::ValueIterator::ValueIterator
; Function compile flags: /Ogsp
;	COMDAT ??0ValueIterator@Json@@QAE@XZ
_TEXT	SEGMENT
??0ValueIterator@Json@@QAE@XZ PROC			; Json::ValueIterator::ValueIterator, COMDAT
; _this$ = ecx

; 256  : {

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0
  00005	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 257  : }

  00009	c3		 ret	 0
??0ValueIterator@Json@@QAE@XZ ENDP			; Json::ValueIterator::ValueIterator
_TEXT	ENDS
PUBLIC	?clear@Value@Json@@QAEXXZ			; Json::Value::clear
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
;	COMDAT ?clear@Value@Json@@QAEXXZ
_TEXT	SEGMENT
?clear@Value@Json@@QAEXXZ PROC				; Json::Value::clear, COMDAT
; _this$ = ecx

; 929  :    JSON_ASSERT( type_ == nullValue  ||  type_ == arrayValue  || type_ == objectValue );
; 930  : 
; 931  :    switch ( type_ )

  00000	0f be 41 08	 movsx	 eax, BYTE PTR [ecx+8]
  00004	83 c0 fa	 add	 eax, -6			; fffffffaH
  00007	83 f8 01	 cmp	 eax, 1
  0000a	77 07		 ja	 SHORT $LN1@clear

; 932  :    {
; 933  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 934  :    case arrayValue:
; 935  :    case objectValue:
; 936  :       value_.map_->clear();

  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000e	e9 00 00 00 00	 jmp	 ?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::clear
$LN1@clear:

; 937  :       break;
; 938  : #else
; 939  :    case arrayValue:
; 940  :       value_.array_->clear();
; 941  :       break;
; 942  :    case objectValue:
; 943  :       value_.map_->clear();
; 944  :       break;
; 945  : #endif
; 946  :    default:
; 947  :       break;
; 948  :    }
; 949  : }

  00013	c3		 ret	 0
?clear@Value@Json@@QAEXXZ ENDP				; Json::Value::clear
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 550  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 551  : 		_Tidy();

  00002	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00006	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
  0000d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 552  : 		}

  00010	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 753  : 		_Tidy(true);

  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 754  : 		}

  00009	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin, COMDAT
; _this$ = ecx

; 806  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 807  : 		return (iterator(_Lmost(), this));

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 808  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end, COMDAT
; _this$ = ecx

; 816  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 817  : 		return (iterator(this->_Myhead, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 818  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end
_TEXT	ENDS
PUBLIC	??$_Destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAXPAU?$pair@$$CBVCZString@Value@Json@@V23@@0@@Z ; std::_Destroy<std::pair<Json::Value::CZString const ,Json::Value> >
PUBLIC	??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ ; `string'
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
CONST	SEGMENT
??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ DB 'invalid '
	DB	'map/set<T> iterator', 00H			; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
CONST	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase, COMDAT
; _this$ = ecx

; 1195 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 		if (_Where._Getcont() != this || this->_Isnil(_Where._Mynode()))
; 1198 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1199 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1200 : 		++_Where;	// save successor iterator for return
; 1201 : 		_Orphan_ptr(*this, _Erasednode);
; 1202 : 
; 1203 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1204 : 		if (this->_Isnil(_Where._Mynode()))

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Where$[ebp]
  00008	80 7b 25 00	 cmp	 BYTE PTR [ebx+37], 0
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00011	74 0a		 je	 SHORT $LN40@erase@2

; 1205 : 			_Xout_of_range("invalid map/set<T> iterator");

  00013	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
  00018	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN339@erase@2:
$LN40@erase@2:

; 1206 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1207 : 		++_Where;	// save successor iterator for return

  0001d	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00020	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator++

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1211 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1212 : 		_Nodeptr _Pnode = _Erasednode;
; 1213 : 
; 1214 : 		if (this->_Isnil(this->_Left(_Pnode)))

  00025	8b 13		 mov	 edx, DWORD PTR [ebx]
  00027	80 7a 25 00	 cmp	 BYTE PTR [edx+37], 0
  0002b	74 05		 je	 SHORT $LN39@erase@2

; 1215 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  0002d	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 1216 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  00030	eb 17		 jmp	 SHORT $LN331@erase@2
$LN39@erase@2:
  00032	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00035	80 78 25 00	 cmp	 BYTE PTR [eax+37], 0
  00039	74 04		 je	 SHORT $LN37@erase@2

; 1217 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  0003b	8b fa		 mov	 edi, edx

; 1218 : 		else

  0003d	eb 0a		 jmp	 SHORT $LN331@erase@2
$LN37@erase@2:

; 1219 : 			{	// two subtrees, must lift successor node to replace erased
; 1220 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

  0003f	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 1221 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  00042	8b 78 08	 mov	 edi, DWORD PTR [eax+8]

; 1222 : 			}
; 1223 : 
; 1224 : 		if (_Pnode == _Erasednode)

  00045	3b c3		 cmp	 eax, ebx
  00047	75 76		 jne	 SHORT $LN35@erase@2
$LN331@erase@2:

; 1225 : 			{	// at most one subtree, relink it
; 1226 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1227 : 			if (!this->_Isnil(_Fixnode))

  00049	80 7f 25 00	 cmp	 BYTE PTR [edi+37], 0
  0004d	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00050	75 03		 jne	 SHORT $LN34@erase@2

; 1228 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  00052	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN34@erase@2:

; 1229 : 
; 1230 : 			if (_Root() == _Erasednode)

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0005b	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0005e	75 05		 jne	 SHORT $LN33@erase@2

; 1231 : 				_Root() = _Fixnode;	// link down from root

  00060	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1232 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  00063	eb 0b		 jmp	 SHORT $LN30@erase@2
$LN33@erase@2:
  00065	39 1e		 cmp	 DWORD PTR [esi], ebx
  00067	75 04		 jne	 SHORT $LN31@erase@2

; 1233 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  00069	89 3e		 mov	 DWORD PTR [esi], edi

; 1234 : 			else

  0006b	eb 03		 jmp	 SHORT $LN30@erase@2
$LN31@erase@2:

; 1235 : 				this->_Right(_Fixnodeparent) =
; 1236 : 					_Fixnode;	// link down to right

  0006d	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN30@erase@2:

; 1237 : 
; 1238 : 			if (_Lmost() == _Erasednode)

  00070	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00073	39 19		 cmp	 DWORD PTR [ecx], ebx
  00075	75 1c		 jne	 SHORT $LN29@erase@2

; 1239 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1240 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1241 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree

  00077	80 7f 25 00	 cmp	 BYTE PTR [edi+37], 0
  0007b	74 04		 je	 SHORT $LN43@erase@2
  0007d	8b d6		 mov	 edx, esi
  0007f	eb 10		 jmp	 SHORT $LN97@erase@2
$LN43@erase@2:
  00081	8b 07		 mov	 eax, DWORD PTR [edi]
  00083	8b d7		 mov	 edx, edi
  00085	eb 04		 jmp	 SHORT $LN333@erase@2
$LL98@erase@2:
  00087	8b d0		 mov	 edx, eax
  00089	8b 02		 mov	 eax, DWORD PTR [edx]
$LN333@erase@2:
  0008b	80 78 25 00	 cmp	 BYTE PTR [eax+37], 0
  0008f	74 f6		 je	 SHORT $LL98@erase@2
$LN97@erase@2:
  00091	89 11		 mov	 DWORD PTR [ecx], edx
$LN29@erase@2:

; 1242 : 
; 1243 : 			if (_Rmost() == _Erasednode)

  00093	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00096	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00099	39 59 08	 cmp	 DWORD PTR [ecx+8], ebx
  0009c	75 7b		 jne	 SHORT $LN185@erase@2

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  0009e	80 7f 25 00	 cmp	 BYTE PTR [edi+37], 0
  000a2	74 04		 je	 SHORT $LN45@erase@2
  000a4	8b d6		 mov	 edx, esi
  000a6	eb 12		 jmp	 SHORT $LN117@erase@2
$LN45@erase@2:
  000a8	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000ab	8b d7		 mov	 edx, edi
  000ad	eb 05		 jmp	 SHORT $LN334@erase@2
$LL118@erase@2:
  000af	8b d0		 mov	 edx, eax
  000b1	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
$LN334@erase@2:
  000b4	80 78 25 00	 cmp	 BYTE PTR [eax+37], 0
  000b8	74 f5		 je	 SHORT $LL118@erase@2
$LN117@erase@2:
  000ba	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 1247 : 			}
; 1248 : 		else

  000bd	eb 5a		 jmp	 SHORT $LN185@erase@2
$LN35@erase@2:

; 1249 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1250 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1251 : 				_Pnode;	// link left up

  000bf	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1252 : 			this->_Left(_Pnode) =
; 1253 : 				this->_Left(_Erasednode);	// link successor down

  000c2	8b 13		 mov	 edx, DWORD PTR [ebx]
  000c4	89 10		 mov	 DWORD PTR [eax], edx

; 1254 : 
; 1255 : 			if (_Pnode == this->_Right(_Erasednode))

  000c6	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  000c9	75 04		 jne	 SHORT $LN26@erase@2

; 1256 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  000cb	8b f0		 mov	 esi, eax

; 1257 : 			else

  000cd	eb 1a		 jmp	 SHORT $LN25@erase@2
$LN26@erase@2:

; 1258 : 				{	// successor further down, link in place of erased
; 1259 : 				_Fixnodeparent =
; 1260 : 					this->_Parent(_Pnode);	// parent is successor's
; 1261 : 				if (!this->_Isnil(_Fixnode))

  000cf	80 7f 25 00	 cmp	 BYTE PTR [edi+37], 0
  000d3	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000d6	75 03		 jne	 SHORT $LN24@erase@2

; 1262 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  000d8	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN24@erase@2:

; 1263 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  000db	89 3e		 mov	 DWORD PTR [esi], edi

; 1264 : 				this->_Right(_Pnode) =
; 1265 : 					this->_Right(_Erasednode);	// link next down

  000dd	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  000e0	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1266 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1267 : 					_Pnode;	// right up

  000e3	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000e6	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN25@erase@2:

; 1268 : 				}
; 1269 : 
; 1270 : 			if (_Root() == _Erasednode)

  000e9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000ef	39 59 04	 cmp	 DWORD PTR [ecx+4], ebx
  000f2	75 05		 jne	 SHORT $LN23@erase@2

; 1271 : 				_Root() = _Pnode;	// link down from root

  000f4	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1272 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  000f7	eb 0e		 jmp	 SHORT $LN20@erase@2
$LN23@erase@2:
  000f9	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000fc	39 19		 cmp	 DWORD PTR [ecx], ebx
  000fe	75 04		 jne	 SHORT $LN21@erase@2

; 1273 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1274 : 					_Pnode;	// link down to left

  00100	89 01		 mov	 DWORD PTR [ecx], eax

; 1275 : 			else

  00102	eb 03		 jmp	 SHORT $LN20@erase@2
$LN21@erase@2:

; 1276 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1277 : 					_Pnode;	// link down to right

  00104	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN20@erase@2:

; 1278 : 
; 1279 : 			this->_Parent(_Pnode) =
; 1280 : 				this->_Parent(_Erasednode);	// link successor up

  00107	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0010a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1281 : 			_STD swap(this->_Color(_Pnode),
; 1282 : 				this->_Color(_Erasednode));	// recolor it

  0010d	8a 53 24	 mov	 dl, BYTE PTR [ebx+36]
  00110	8a 48 24	 mov	 cl, BYTE PTR [eax+36]
  00113	88 50 24	 mov	 BYTE PTR [eax+36], dl
  00116	88 4b 24	 mov	 BYTE PTR [ebx+36], cl
$LN185@erase@2:

; 1283 : 			}
; 1284 : 
; 1285 : 		if (this->_Color(_Erasednode) == this->_Black)

  00119	80 7b 24 01	 cmp	 BYTE PTR [ebx+36], 1
  0011d	0f 85 03 01 00
	00		 jne	 $LN19@erase@2

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  00123	e9 b2 00 00 00	 jmp	 $LN336@erase@2
$LL18@erase@2:
  00128	80 7f 24 01	 cmp	 BYTE PTR [edi+36], 1
  0012c	0f 85 f0 00 00
	00		 jne	 $LN16@erase@2

; 1290 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  00132	8b 06		 mov	 eax, DWORD PTR [esi]
  00134	3b f8		 cmp	 edi, eax
  00136	75 6c		 jne	 SHORT $LN15@erase@2

; 1291 : 					{	// fixup left subtree
; 1292 : 					_Pnode = this->_Right(_Fixnodeparent);

  00138	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 1293 : 					if (this->_Color(_Pnode) == this->_Red)

  0013b	80 78 24 00	 cmp	 BYTE PTR [eax+36], 0
  0013f	75 11		 jne	 SHORT $LN14@erase@2

; 1294 : 						{	// rotate red up from right subtree
; 1295 : 						this->_Color(_Pnode) = this->_Black;

  00141	c6 40 24 01	 mov	 BYTE PTR [eax+36], 1

; 1296 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1297 : 						_Lrotate(_Fixnodeparent);

  00145	56		 push	 esi
  00146	c6 46 24 00	 mov	 BYTE PTR [esi+36], 0
  0014a	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate

; 1298 : 						_Pnode = this->_Right(_Fixnodeparent);

  0014f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$LN14@erase@2:

; 1299 : 						}
; 1300 : 
; 1301 : 					if (this->_Isnil(_Pnode))

  00152	80 78 25 00	 cmp	 BYTE PTR [eax+37], 0

; 1302 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1303 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black

  00156	75 7d		 jne	 SHORT $LN337@erase@2

; 1304 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  00158	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015a	80 79 24 01	 cmp	 BYTE PTR [ecx+36], 1
  0015e	75 09		 jne	 SHORT $LN11@erase@2
  00160	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00163	80 79 24 01	 cmp	 BYTE PTR [ecx+36], 1
  00167	74 68		 je	 SHORT $LN338@erase@2
$LN11@erase@2:

; 1305 : 						{	// redden right subtree with black children
; 1306 : 						this->_Color(_Pnode) = this->_Red;
; 1307 : 						_Fixnode = _Fixnodeparent;
; 1308 : 						}
; 1309 : 					else
; 1310 : 						{	// must rearrange right subtree
; 1311 : 						if (this->_Color(this->_Right(_Pnode))
; 1312 : 							== this->_Black)

  00169	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0016c	80 79 24 01	 cmp	 BYTE PTR [ecx+36], 1
  00170	75 16		 jne	 SHORT $LN9@erase@2

; 1313 : 							{	// rotate red up from left sub-subtree
; 1314 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  00172	8b 08		 mov	 ecx, DWORD PTR [eax]
  00174	c6 41 24 01	 mov	 BYTE PTR [ecx+36], 1

; 1315 : 							this->_Color(_Pnode) = this->_Red;
; 1316 : 							_Rrotate(_Pnode);

  00178	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017b	50		 push	 eax
  0017c	c6 40 24 00	 mov	 BYTE PTR [eax+36], 0
  00180	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate

; 1317 : 							_Pnode = this->_Right(_Fixnodeparent);

  00185	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$LN9@erase@2:

; 1318 : 							}
; 1319 : 
; 1320 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  00188	8a 4e 24	 mov	 cl, BYTE PTR [esi+36]
  0018b	88 48 24	 mov	 BYTE PTR [eax+36], cl

; 1321 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1322 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1323 : 						_Lrotate(_Fixnodeparent);

  0018e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00191	c6 46 24 01	 mov	 BYTE PTR [esi+36], 1
  00195	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00198	56		 push	 esi
  00199	c6 40 24 01	 mov	 BYTE PTR [eax+36], 1
  0019d	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate

; 1324 : 						break;	// tree now recolored/rebalanced

  001a2	eb 7e		 jmp	 SHORT $LN16@erase@2
$LN15@erase@2:

; 1325 : 						}
; 1326 : 					}
; 1327 : 				else
; 1328 : 					{	// fixup right subtree
; 1329 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1330 : 					if (this->_Color(_Pnode) == this->_Red)

  001a4	80 78 24 00	 cmp	 BYTE PTR [eax+36], 0
  001a8	75 10		 jne	 SHORT $LN7@erase@2

; 1331 : 						{	// rotate red up from left subtree
; 1332 : 						this->_Color(_Pnode) = this->_Black;

  001aa	c6 40 24 01	 mov	 BYTE PTR [eax+36], 1

; 1333 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1334 : 						_Rrotate(_Fixnodeparent);

  001ae	56		 push	 esi
  001af	c6 46 24 00	 mov	 BYTE PTR [esi+36], 0
  001b3	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate

; 1335 : 						_Pnode = this->_Left(_Fixnodeparent);

  001b8	8b 06		 mov	 eax, DWORD PTR [esi]
$LN7@erase@2:

; 1336 : 						}
; 1337 : 					if (this->_Isnil(_Pnode))

  001ba	80 78 25 00	 cmp	 BYTE PTR [eax+37], 0

; 1338 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1339 : 					else if (this->_Color(this->_Right(_Pnode)) ==

  001be	75 15		 jne	 SHORT $LN337@erase@2

; 1340 : 						this->_Black
; 1341 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  001c0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001c3	80 79 24 01	 cmp	 BYTE PTR [ecx+36], 1
  001c7	75 22		 jne	 SHORT $LN4@erase@2
  001c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001cb	80 79 24 01	 cmp	 BYTE PTR [ecx+36], 1
  001cf	75 1a		 jne	 SHORT $LN4@erase@2
$LN338@erase@2:

; 1342 : 						{	// redden left subtree with black children
; 1343 : 						this->_Color(_Pnode) = this->_Red;

  001d1	c6 40 24 00	 mov	 BYTE PTR [eax+36], 0
$LN337@erase@2:

; 1344 : 						_Fixnode = _Fixnodeparent;

  001d5	8b fe		 mov	 edi, esi
  001d7	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
$LN336@erase@2:

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  001da	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001dd	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001e0	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  001e3	0f 85 3f ff ff
	ff		 jne	 $LL18@erase@2
  001e9	eb 37		 jmp	 SHORT $LN16@erase@2
$LN4@erase@2:

; 1345 : 						}
; 1346 : 					else
; 1347 : 						{	// must rearrange left subtree
; 1348 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  001eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ed	80 79 24 01	 cmp	 BYTE PTR [ecx+36], 1
  001f1	75 16		 jne	 SHORT $LN2@erase@2

; 1349 : 							{	// rotate red up from right sub-subtree
; 1350 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  001f3	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001f6	c6 41 24 01	 mov	 BYTE PTR [ecx+36], 1

; 1351 : 							this->_Color(_Pnode) = this->_Red;
; 1352 : 							_Lrotate(_Pnode);

  001fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001fd	50		 push	 eax
  001fe	c6 40 24 00	 mov	 BYTE PTR [eax+36], 0
  00202	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate

; 1353 : 							_Pnode = this->_Left(_Fixnodeparent);

  00207	8b 06		 mov	 eax, DWORD PTR [esi]
$LN2@erase@2:

; 1354 : 							}
; 1355 : 
; 1356 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  00209	8a 4e 24	 mov	 cl, BYTE PTR [esi+36]
  0020c	88 48 24	 mov	 BYTE PTR [eax+36], cl

; 1357 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1358 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1359 : 						_Rrotate(_Fixnodeparent);

  0020f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00212	c6 46 24 01	 mov	 BYTE PTR [esi+36], 1
  00216	8b 00		 mov	 eax, DWORD PTR [eax]
  00218	56		 push	 esi
  00219	c6 40 24 01	 mov	 BYTE PTR [eax+36], 1
  0021d	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate
$LN16@erase@2:

; 1360 : 						break;	// tree now recolored/rebalanced
; 1361 : 						}
; 1362 : 					}
; 1363 : 
; 1364 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  00222	c6 47 24 01	 mov	 BYTE PTR [edi+36], 1
$LN19@erase@2:

; 1365 : 			}
; 1366 : 
; 1367 : 		_Dest_val(this->_Alval,
; 1368 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node

  00226	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  00229	50		 push	 eax
  0022a	e8 00 00 00 00	 call	 ??$_Destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAXPAU?$pair@$$CBVCZString@Value@Json@@V23@@0@@Z ; std::_Destroy<std::pair<Json::Value::CZString const ,Json::Value> >

; 1369 : 
; 1370 : 		this->_Alnod.deallocate(_Erasednode, 1);

  0022f	53		 push	 ebx
  00230	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00235	59		 pop	 ecx
  00236	59		 pop	 ecx

; 1371 : 
; 1372 : 		if (0 < this->_Mysize)

  00237	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0023a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0023d	5f		 pop	 edi
  0023e	5e		 pop	 esi
  0023f	5b		 pop	 ebx
  00240	85 c0		 test	 eax, eax
  00242	74 04		 je	 SHORT $LN1@erase@2

; 1373 : 			--this->_Mysize;

  00244	48		 dec	 eax
  00245	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN1@erase@2:

; 1374 : 
; 1375 : 		return (iterator(_Where._Ptr, this));	// return successor iterator

  00248	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0024b	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0024e	89 08		 mov	 DWORD PTR [eax], ecx

; 1376 : 		}

  00250	c9		 leave
  00251	c2 08 00	 ret	 8
$LN332@erase@2:
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
_TEXT	ENDS
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::lower_bound
; Function compile flags: /Ogsp
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@ABVCZString@Value@Json@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@ABVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1449 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1450 : 		return (iterator(_Lbound(_Keyval), this));

  00003	ff 75 0c	 push	 DWORD PTR __Keyval$[ebp]
  00006	e8 00 00 00 00	 call	 ?_Lbound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	89 01		 mov	 DWORD PTR [ecx], eax
  00010	8b c1		 mov	 eax, ecx

; 1451 : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@ABVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::lower_bound
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXXZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXXZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 07		 je	 SHORT $LN14@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	59		 pop	 ecx
$LN14@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00010	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00013	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  00017	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  0001b	5e		 pop	 esi

; 1312 : 		}

  0001c	c3		 ret	 0
?_Tidy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXXZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z
_TEXT	SEGMENT
$T45444 = -4						; size = 4
$T45439 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT
; _this$ = ecx

; 698  : 		{	// construct empty tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	51		 push	 ecx
  00006	89 65 fc	 mov	 DWORD PTR $T45439[ebp], esp
  00009	89 65 fc	 mov	 DWORD PTR $T45444[ebp], esp
  0000c	ff 75 08	 push	 DWORD PTR __Parg$[ebp]
  0000f	8b f1		 mov	 esi, ecx
  00011	e8 00 00 00 00	 call	 ??0?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >

; 699  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	c9		 leave
  0001a	c2 08 00	 ret	 8
??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T45450 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase, COMDAT
; _this$ = ecx

; 1379 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1380 : 		if (_First == begin() && _Last == end())

  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  0000d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000f	75 13		 jne	 SHORT $LN65@erase@3
  00011	39 45 10	 cmp	 DWORD PTR __Last$[ebp], eax
  00014	75 0e		 jne	 SHORT $LN65@erase@3

; 1381 : 			{	// erase all
; 1382 : 			clear();

  00016	8b ce		 mov	 ecx, esi
  00018	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::clear

; 1383 : 			return (begin());

  0001d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	eb 25		 jmp	 SHORT $LN1@erase@3
$LN65@erase@3:

; 1384 : 			}
; 1385 : 		else
; 1386 : 			{	// partial erase, one at a time
; 1387 : 			while (_First != _Last)

  00024	3b 4d 10	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00027	74 20		 je	 SHORT $LN1@erase@3
  00029	57		 push	 edi
$LL2@erase@3:

; 1388 : 				erase(_First++);

  0002a	8b f9		 mov	 edi, ecx
  0002c	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  0002f	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator++
  00034	57		 push	 edi
  00035	8d 45 fc	 lea	 eax, DWORD PTR $T45450[ebp]
  00038	50		 push	 eax
  00039	8b ce		 mov	 ecx, esi
  0003b	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
  00040	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00043	3b 4d 10	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00046	75 e2		 jne	 SHORT $LL2@erase@3
  00048	5f		 pop	 edi
$LN1@erase@3:

; 1389 : 			return (iterator(_First._Ptr, this));

  00049	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004c	89 08		 mov	 DWORD PTR [eax], ecx
  0004e	5e		 pop	 esi

; 1390 : 			}
; 1391 : 		}

  0004f	c9		 leave
  00050	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
_TEXT	ENDS
PUBLIC	?equal_range@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::equal_range
; Function compile flags: /Ogsp
;	COMDAT ?equal_range@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@2@ABVCZString@Value@Json@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?equal_range@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@2@ABVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::equal_range, COMDAT
; _this$ = ecx

; 1469 : 		{	// find range equivalent to _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1470 : 		return (_Eqrange(_Keyval));

  00003	ff 75 0c	 push	 DWORD PTR __Keyval$[ebp]
  00006	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00009	e8 00 00 00 00	 call	 ?_Eqrange@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Eqrange
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1471 : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?equal_range@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@2@ABVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::equal_range
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T45643 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1865 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1866 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 10		 mov	 edx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T45643[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase

; 1867 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1958 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1959 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0000a	76 0a		 jbe	 SHORT $LN6@Grow

; 1960 : 			_Xlen();	// result too long

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN31@Grow:
$LN6@Grow:

; 1961 : 		if (this->_Myres < _Newsize)

  00016	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00019	3b c6		 cmp	 eax, esi
  0001b	73 0b		 jae	 SHORT $LN5@Grow

; 1962 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0001d	ff 71 10	 push	 DWORD PTR [ecx+16]
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00026	eb 2f		 jmp	 SHORT $LN28@Grow
$LN5@Grow:

; 1963 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00028	33 d2		 xor	 edx, edx
  0002a	38 55 0c	 cmp	 BYTE PTR __Trim$[ebp], dl
  0002d	74 18		 je	 SHORT $LN3@Grow
  0002f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00032	73 13		 jae	 SHORT $LN3@Grow

; 1964 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1965 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00034	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00037	3b f0		 cmp	 esi, eax
  00039	73 02		 jae	 SHORT $LN9@Grow
  0003b	8b c6		 mov	 eax, esi
$LN9@Grow:
  0003d	50		 push	 eax
  0003e	6a 01		 push	 1
  00040	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00045	eb 10		 jmp	 SHORT $LN28@Grow
$LN3@Grow:

; 1966 : 		else if (_Newsize == 0)

  00047	3b f2		 cmp	 esi, edx
  00049	75 0c		 jne	 SHORT $LN28@Grow

; 1967 : 			_Eos(0);	// new size is zero, just null terminate

  0004b	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0004e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00051	72 02		 jb	 SHORT $LN26@Grow
  00053	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN26@Grow:
  00055	88 11		 mov	 BYTE PTR [ecx], dl
$LN28@Grow:

; 1968 : 		return (0 < _Newsize);	// return true only if more work to do

  00057	33 c0		 xor	 eax, eax
  00059	3b c6		 cmp	 eax, esi
  0005b	1b c0		 sbb	 eax, eax
  0005d	f7 d8		 neg	 eax
  0005f	5e		 pop	 esi

; 1969 : 		}

  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN30@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::reserve
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEXI@Z PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  : 		if (max_size() < _Count)

  00003	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	76 0a		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00014	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN45@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00019	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001c	2b 06		 sub	 eax, DWORD PTR [esi]
  0001e	c1 f8 02	 sar	 eax, 2
  00021	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00024	73 48		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00026	53		 push	 ebx
  00027	57		 push	 edi
  00028	6a 00		 push	 0
  0002a	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0002d	e8 00 00 00 00	 call	 ??$_Allocate@PBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@IPAPBV12@@Z ; std::_Allocate<Json::PathArgument const *>
  00032	8b d8		 mov	 ebx, eax

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00034	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00037	50		 push	 eax
  00038	53		 push	 ebx
  00039	ff 76 04	 push	 DWORD PTR [esi+4]
  0003c	ff 36		 push	 DWORD PTR [esi]
  0003e	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPBVPathArgument@Json@@PAPBV12@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAV?$allocator@PBVPathArgument@Json@@@0@@Z ; std::_Uninitialized_move<Json::PathArgument const * *,Json::PathArgument const * *,std::allocator<Json::PathArgument const *> >

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00043	8b 06		 mov	 eax, DWORD PTR [esi]
  00045	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00048	2b f8		 sub	 edi, eax
  0004a	83 c4 18	 add	 esp, 24			; 00000018H
  0004d	c1 ff 02	 sar	 edi, 2

; 761  : 			if (this->_Myfirst != 0)

  00050	85 c0		 test	 eax, eax
  00052	74 07		 je	 SHORT $LN39@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005a	59		 pop	 ecx
$LN39@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  0005b	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0005e	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  00061	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  00064	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00067	5f		 pop	 edi

; 771  : 			this->_Myfirst = _Ptr;

  00068	89 1e		 mov	 DWORD PTR [esi], ebx
  0006a	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0006d	5b		 pop	 ebx
$LN3@reserve:
  0006e	5e		 pop	 esi

; 772  : 			}
; 773  : 		}

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN44@reserve:
?reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::reserve
_TEXT	ENDS
PUBLIC	??$?MV?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z ; std::operator<<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??$?MV?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MV?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z PROC ; std::operator<<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT

; 1886 : 	{	// test if _Less < _Right for _Trees

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1887 : 	return (lexicographical_compare(_Left.begin(), _Left.end(),
; 1888 : 		_Right.begin(), _Right.end()));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00009	8b 10		 mov	 edx, DWORD PTR [eax]
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00011	56		 push	 esi
  00012	8b 31		 mov	 esi, DWORD PTR [ecx]
  00014	50		 push	 eax
  00015	52		 push	 edx
  00016	51		 push	 ecx
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??$_Lexicographical_compare@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@0@000@Z ; std::_Lexicographical_compare<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0> >
  0001d	83 c4 10	 add	 esp, 16			; 00000010H
  00020	5e		 pop	 esi

; 1889 : 	}

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??$?MV?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z ENDP ; std::operator<<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
_TEXT	ENDS
PUBLIC	??$?8V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z ; std::operator==<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
; Function compile flags: /Ogsp
;	COMDAT ??$?8V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z PROC ; std::operator==<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT

; 1873 : 	{	// test for _Tree equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1874 : 	return (_Left.size() == _Right.size()
; 1875 : 		&& equal(_Left.begin(), _Left.end(), _Right.begin()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000c	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0000f	75 1e		 jne	 SHORT $LN3@operator@5
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00016	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00019	8b 10		 mov	 edx, DWORD PTR [eax]
  0001b	51		 push	 ecx
  0001c	50		 push	 eax
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ??$_Equal@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@0@00@Z ; std::_Equal<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0> >
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	84 c0		 test	 al, al
  00028	74 05		 je	 SHORT $LN3@operator@5
  0002a	33 c0		 xor	 eax, eax
  0002c	40		 inc	 eax

; 1876 : 	}

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN3@operator@5:

; 1874 : 	return (_Left.size() == _Right.size()
; 1875 : 		&& equal(_Left.begin(), _Left.end(), _Right.begin()));

  0002f	33 c0		 xor	 eax, eax

; 1876 : 	}

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$?8V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z ENDP ; std::operator==<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
_TEXT	ENDS
PUBLIC	??$_Distance@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@I@std@@YAXV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@0AAI@Z ; std::_Distance<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,unsigned int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Distance@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@I@std@@YAXV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@0AAI@Z
_TEXT	SEGMENT
$T46436 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
??$_Distance@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@I@std@@YAXV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@0AAI@Z PROC ; std::_Distance<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,unsigned int>, COMDAT

; 909  : 	{	// add to _Off distance between iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 910  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));

  00004	ff 75 fc	 push	 DWORD PTR $T46436[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Off$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Distance2@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@I@std@@YAXV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z ; std::_Distance2<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,unsigned int>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 911  : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Distance@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@I@std@@YAXV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@0AAI@Z ENDP ; std::_Distance<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,unsigned int>
_TEXT	ENDS
PUBLIC	??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	6a 00		 push	 0
  00006	6a 01		 push	 1
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	74 07		 je	 SHORT $LN1@scalar@4
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	59		 pop	 ecx
$LN1@scalar@4:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1PathArgument@Json@@QAE@XZ			; Json::PathArgument::~PathArgument
; Function compile flags: /Ogsp
;	COMDAT ??1PathArgument@Json@@QAE@XZ
_TEXT	SEGMENT
??1PathArgument@Json@@QAE@XZ PROC			; Json::PathArgument::~PathArgument, COMDAT
; _this$ = ecx
  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00009	c3		 ret	 0
??1PathArgument@Json@@QAE@XZ ENDP			; Json::PathArgument::~PathArgument
_TEXT	ENDS
PUBLIC	??MValue@Json@@QBE_NABV01@@Z			; Json::Value::operator<
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
;	COMDAT ??MValue@Json@@QBE_NABV01@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??MValue@Json@@QBE_NABV01@@Z PROC			; Json::Value::operator<, COMDAT
; _this$ = ecx

; 567  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 568  :    int typeDelta = type_ - other.type_;

  00003	8b 45 08	 mov	 eax, DWORD PTR _other$[ebp]
  00006	56		 push	 esi
  00007	0f be 71 08	 movsx	 esi, BYTE PTR [ecx+8]
  0000b	57		 push	 edi
  0000c	0f be 78 08	 movsx	 edi, BYTE PTR [eax+8]
  00010	8b d6		 mov	 edx, esi
  00012	2b d7		 sub	 edx, edi

; 569  :    if ( typeDelta )

  00014	74 0a		 je	 SHORT $LN12@operator@6

; 570  :       return typeDelta < 0 ? true : false;

  00016	85 d2		 test	 edx, edx
  00018	0f 98 c0	 sets	 al
  0001b	e9 91 00 00 00	 jmp	 $LN13@operator@6
$LN12@operator@6:

; 571  :    switch ( type_ )

  00020	83 fe 07	 cmp	 esi, 7
  00023	0f 87 86 00 00
	00		 ja	 $LN1@operator@6
  00029	ff 24 b5 00 00
	00 00		 jmp	 DWORD PTR $LN110@operator@6[esi*4]
$LN8@operator@6:

; 572  :    {
; 573  :    case nullValue:
; 574  :       return false;
; 575  :    case intValue:
; 576  :       return value_.int_ < other.value_.int_;

  00030	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00032	33 d2		 xor	 edx, edx
  00034	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00036	0f 9c c0	 setl	 al
  00039	eb 76		 jmp	 SHORT $LN13@operator@6
$LN7@operator@6:

; 577  :    case uintValue:
; 578  :       return value_.uint_ < other.value_.uint_;

  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003d	3b 08		 cmp	 ecx, DWORD PTR [eax]
$LN109@operator@6:
  0003f	1b c0		 sbb	 eax, eax
  00041	f7 d8		 neg	 eax
  00043	eb 6c		 jmp	 SHORT $LN13@operator@6
$LN6@operator@6:

; 579  :    case realValue:
; 580  :       return value_.real_ < other.value_.real_;

  00045	dd 00		 fld	 QWORD PTR [eax]
  00047	dc 19		 fcomp	 QWORD PTR [ecx]
  00049	df e0		 fnstsw	 ax
  0004b	f6 c4 41	 test	 ah, 65			; 00000041H
  0004e	75 05		 jne	 SHORT $LN15@operator@6
$LN19@operator@6:
  00050	33 c0		 xor	 eax, eax
  00052	40		 inc	 eax
  00053	eb 5c		 jmp	 SHORT $LN13@operator@6
$LN15@operator@6:
  00055	33 c0		 xor	 eax, eax
  00057	eb 58		 jmp	 SHORT $LN13@operator@6
$LN5@operator@6:

; 581  :    case booleanValue:
; 582  :       return value_.bool_ < other.value_.bool_;

  00059	8a 09		 mov	 cl, BYTE PTR [ecx]
  0005b	3a 08		 cmp	 cl, BYTE PTR [eax]
  0005d	eb e0		 jmp	 SHORT $LN109@operator@6
$LN4@operator@6:

; 583  :    case stringValue:
; 584  :       return ( value_.string_ == 0  &&  other.value_.string_ )
; 585  :              || ( other.value_.string_  
; 586  :                   &&  value_.string_  
; 587  :                   && strcmp( value_.string_, other.value_.string_ ) < 0 );

  0005f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00061	85 c9		 test	 ecx, ecx
  00063	75 04		 jne	 SHORT $LN17@operator@6
  00065	39 08		 cmp	 DWORD PTR [eax], ecx
  00067	75 e7		 jne	 SHORT $LN19@operator@6
$LN17@operator@6:
  00069	8b 00		 mov	 eax, DWORD PTR [eax]
  0006b	85 c0		 test	 eax, eax
  0006d	74 e6		 je	 SHORT $LN15@operator@6
  0006f	85 c9		 test	 ecx, ecx
  00071	74 e2		 je	 SHORT $LN15@operator@6
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _strcmp
  0007a	59		 pop	 ecx
  0007b	59		 pop	 ecx
  0007c	85 c0		 test	 eax, eax
  0007e	79 d5		 jns	 SHORT $LN15@operator@6
  00080	eb ce		 jmp	 SHORT $LN19@operator@6
$LN3@operator@6:

; 588  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 589  :    case arrayValue:
; 590  :    case objectValue:
; 591  :       {
; 592  :          int delta = int( value_.map_->size() - other.value_.map_->size() );

  00082	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00084	8b 00		 mov	 eax, DWORD PTR [eax]
  00086	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00089	2b 50 08	 sub	 edx, DWORD PTR [eax+8]

; 593  :          if ( delta )

  0008c	74 09		 je	 SHORT $LN2@operator@6

; 594  :             return delta < 0;

  0008e	33 c0		 xor	 eax, eax
  00090	85 d2		 test	 edx, edx
  00092	0f 98 c0	 sets	 al
  00095	eb 1a		 jmp	 SHORT $LN13@operator@6
$LN2@operator@6:

; 595  :          return (*value_.map_) < (*other.value_.map_);

  00097	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0009a	8b 10		 mov	 edx, DWORD PTR [eax]
  0009c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0009f	8b 31		 mov	 esi, DWORD PTR [ecx]
  000a1	50		 push	 eax
  000a2	52		 push	 edx
  000a3	51		 push	 ecx
  000a4	56		 push	 esi
  000a5	e8 00 00 00 00	 call	 ??$_Lexicographical_compare@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@0@000@Z ; std::_Lexicographical_compare<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0> >
  000aa	83 c4 10	 add	 esp, 16			; 00000010H
  000ad	eb 02		 jmp	 SHORT $LN13@operator@6
$LN1@operator@6:

; 596  :       }
; 597  : #else
; 598  :    case arrayValue:
; 599  :       return value_.array_->compare( *(other.value_.array_) ) < 0;
; 600  :    case objectValue:
; 601  :       return value_.map_->compare( *(other.value_.map_) ) < 0;
; 602  : #endif
; 603  :    default:
; 604  :       JSON_ASSERT_UNREACHABLE;
; 605  :    }
; 606  :    return 0;  // unreachable

  000af	32 c0		 xor	 al, al
$LN13@operator@6:
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi

; 607  : }

  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
  000b7	90		 npad	 1
$LN110@operator@6:
  000b8	00 00 00 00	 DD	 $LN1@operator@6
  000bc	00 00 00 00	 DD	 $LN8@operator@6
  000c0	00 00 00 00	 DD	 $LN7@operator@6
  000c4	00 00 00 00	 DD	 $LN6@operator@6
  000c8	00 00 00 00	 DD	 $LN4@operator@6
  000cc	00 00 00 00	 DD	 $LN5@operator@6
  000d0	00 00 00 00	 DD	 $LN3@operator@6
  000d4	00 00 00 00	 DD	 $LN3@operator@6
??MValue@Json@@QBE_NABV01@@Z ENDP			; Json::Value::operator<
_TEXT	ENDS
PUBLIC	??PValue@Json@@QBE_NABV01@@Z			; Json::Value::operator>=
; Function compile flags: /Ogsp
;	COMDAT ??PValue@Json@@QBE_NABV01@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??PValue@Json@@QBE_NABV01@@Z PROC			; Json::Value::operator>=, COMDAT
; _this$ = ecx

; 617  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 618  :    return !(*this < other);

  00003	ff 75 08	 push	 DWORD PTR _other$[ebp]
  00006	e8 00 00 00 00	 call	 ??MValue@Json@@QBE_NABV01@@Z ; Json::Value::operator<
  0000b	33 c9		 xor	 ecx, ecx
  0000d	84 c0		 test	 al, al
  0000f	0f 94 c0	 sete	 al

; 619  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??PValue@Json@@QBE_NABV01@@Z ENDP			; Json::Value::operator>=
_TEXT	ENDS
PUBLIC	??OValue@Json@@QBE_NABV01@@Z			; Json::Value::operator>
; Function compile flags: /Ogsp
;	COMDAT ??OValue@Json@@QBE_NABV01@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??OValue@Json@@QBE_NABV01@@Z PROC			; Json::Value::operator>, COMDAT
; _this$ = ecx

; 623  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 624  :    return other < *this;

  00003	51		 push	 ecx
  00004	8b 4d 08	 mov	 ecx, DWORD PTR _other$[ebp]
  00007	e8 00 00 00 00	 call	 ??MValue@Json@@QBE_NABV01@@Z ; Json::Value::operator<

; 625  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
??OValue@Json@@QBE_NABV01@@Z ENDP			; Json::Value::operator>
_TEXT	ENDS
PUBLIC	??8Value@Json@@QBE_NABV01@@Z			; Json::Value::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8Value@Json@@QBE_NABV01@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??8Value@Json@@QBE_NABV01@@Z PROC			; Json::Value::operator==, COMDAT
; _this$ = ecx

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 630  :    //if ( type_ != other.type_ )
; 631  :    // GCC 2.95.3 says:
; 632  :    // attempt to take address of bit-field structure member `Json::Value::type_'
; 633  :    // Beats me, but a temp solves the problem.
; 634  :    int temp = other.type_;
; 635  :    if ( type_ != temp )

  00003	8a 41 08	 mov	 al, BYTE PTR [ecx+8]
  00006	8b 55 08	 mov	 edx, DWORD PTR _other$[ebp]
  00009	3a 42 08	 cmp	 al, BYTE PTR [edx+8]

; 636  :       return false;

  0000c	75 77		 jne	 SHORT $LN1@operator@7

; 637  :    switch ( type_ )

  0000e	0f be c0	 movsx	 eax, al
  00011	83 f8 07	 cmp	 eax, 7
  00014	77 6f		 ja	 SHORT $LN1@operator@7
  00016	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN25@operator@7[eax*4]
$LN8@operator@7:

; 638  :    {
; 639  :    case nullValue:
; 640  :       return true;

  0001d	b0 01		 mov	 al, 1
  0001f	eb 66		 jmp	 SHORT $LN12@operator@7
$LN7@operator@7:

; 641  :    case intValue:
; 642  :       return value_.int_ == other.value_.int_;

  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	2b 02		 sub	 eax, DWORD PTR [edx]
  00025	f7 d8		 neg	 eax
  00027	1b c0		 sbb	 eax, eax
  00029	40		 inc	 eax
  0002a	eb 5b		 jmp	 SHORT $LN12@operator@7
$LN5@operator@7:

; 643  :    case uintValue:
; 644  :       return value_.uint_ == other.value_.uint_;
; 645  :    case realValue:
; 646  :       return value_.real_ == other.value_.real_;

  0002c	dd 01		 fld	 QWORD PTR [ecx]
  0002e	dd 02		 fld	 QWORD PTR [edx]
  00030	da e9		 fucompp
  00032	df e0		 fnstsw	 ax
  00034	f6 c4 44	 test	 ah, 68			; 00000044H
  00037	7b 2c		 jnp	 SHORT $LN17@operator@7
$LN14@operator@7:
  00039	33 c0		 xor	 eax, eax
  0003b	eb 4a		 jmp	 SHORT $LN12@operator@7
$LN4@operator@7:

; 647  :    case booleanValue:
; 648  :       return value_.bool_ == other.value_.bool_;

  0003d	8a 01		 mov	 al, BYTE PTR [ecx]
  0003f	33 c9		 xor	 ecx, ecx
  00041	3a 02		 cmp	 al, BYTE PTR [edx]
  00043	0f 94 c0	 sete	 al
  00046	eb 3f		 jmp	 SHORT $LN12@operator@7
$LN3@operator@7:

; 649  :    case stringValue:
; 650  :       return ( value_.string_ == other.value_.string_ )
; 651  :              || ( other.value_.string_  
; 652  :                   &&  value_.string_  
; 653  :                   && strcmp( value_.string_, other.value_.string_ ) == 0 );

  00048	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0004a	8b 12		 mov	 edx, DWORD PTR [edx]
  0004c	3b ca		 cmp	 ecx, edx
  0004e	74 15		 je	 SHORT $LN17@operator@7
  00050	85 d2		 test	 edx, edx
  00052	74 e5		 je	 SHORT $LN14@operator@7
  00054	85 c9		 test	 ecx, ecx
  00056	74 e1		 je	 SHORT $LN14@operator@7
  00058	52		 push	 edx
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 _strcmp
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
  00061	85 c0		 test	 eax, eax
  00063	75 d4		 jne	 SHORT $LN14@operator@7
$LN17@operator@7:
  00065	33 c0		 xor	 eax, eax
  00067	40		 inc	 eax
  00068	eb 1d		 jmp	 SHORT $LN12@operator@7
$LN2@operator@7:

; 654  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 655  :    case arrayValue:
; 656  :    case objectValue:
; 657  :       return value_.map_->size() == other.value_.map_->size()
; 658  :              && (*value_.map_) == (*other.value_.map_);

  0006a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0006c	8b 12		 mov	 edx, DWORD PTR [edx]
  0006e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00071	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00074	75 c3		 jne	 SHORT $LN14@operator@7
  00076	52		 push	 edx
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 ??$?8V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z ; std::operator==<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
  0007d	59		 pop	 ecx
  0007e	59		 pop	 ecx
  0007f	84 c0		 test	 al, al
  00081	74 b6		 je	 SHORT $LN14@operator@7
  00083	eb e0		 jmp	 SHORT $LN17@operator@7
$LN1@operator@7:

; 659  : #else
; 660  :    case arrayValue:
; 661  :       return value_.array_->compare( *(other.value_.array_) ) == 0;
; 662  :    case objectValue:
; 663  :       return value_.map_->compare( *(other.value_.map_) ) == 0;
; 664  : #endif
; 665  :    default:
; 666  :       JSON_ASSERT_UNREACHABLE;
; 667  :    }
; 668  :    return 0;  // unreachable

  00085	32 c0		 xor	 al, al
$LN12@operator@7:

; 669  : }

  00087	5d		 pop	 ebp
  00088	c2 04 00	 ret	 4
  0008b	90		 npad	 1
$LN25@operator@7:
  0008c	00 00 00 00	 DD	 $LN8@operator@7
  00090	00 00 00 00	 DD	 $LN7@operator@7
  00094	00 00 00 00	 DD	 $LN7@operator@7
  00098	00 00 00 00	 DD	 $LN5@operator@7
  0009c	00 00 00 00	 DD	 $LN3@operator@7
  000a0	00 00 00 00	 DD	 $LN4@operator@7
  000a4	00 00 00 00	 DD	 $LN2@operator@7
  000a8	00 00 00 00	 DD	 $LN2@operator@7
??8Value@Json@@QBE_NABV01@@Z ENDP			; Json::Value::operator==
_TEXT	ENDS
PUBLIC	??9Value@Json@@QBE_NABV01@@Z			; Json::Value::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9Value@Json@@QBE_NABV01@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??9Value@Json@@QBE_NABV01@@Z PROC			; Json::Value::operator!=, COMDAT
; _this$ = ecx

; 673  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 674  :    return !( *this == other );

  00003	ff 75 08	 push	 DWORD PTR _other$[ebp]
  00006	e8 00 00 00 00	 call	 ??8Value@Json@@QBE_NABV01@@Z ; Json::Value::operator==
  0000b	33 c9		 xor	 ecx, ecx
  0000d	84 c0		 test	 al, al
  0000f	0f 94 c0	 sete	 al

; 675  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??9Value@Json@@QBE_NABV01@@Z ENDP			; Json::Value::operator!=
_TEXT	ENDS
PUBLIC	?size@Value@Json@@QBEIXZ			; Json::Value::size
; Function compile flags: /Ogsp
;	COMDAT ?size@Value@Json@@QBEIXZ
_TEXT	SEGMENT
_itLast$33952 = -4					; size = 4
?size@Value@Json@@QBEIXZ PROC				; Json::Value::size, COMDAT
; _this$ = ecx

; 875  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 876  :    switch ( type_ )

  00004	0f be 41 08	 movsx	 eax, BYTE PTR [ecx+8]
  00008	85 c0		 test	 eax, eax
  0000a	78 35		 js	 SHORT $LN1@size
  0000c	83 f8 05	 cmp	 eax, 5
  0000f	7e 30		 jle	 SHORT $LN1@size
  00011	83 f8 06	 cmp	 eax, 6
  00014	74 0c		 je	 SHORT $LN4@size
  00016	83 f8 07	 cmp	 eax, 7
  00019	75 26		 jne	 SHORT $LN1@size

; 892  :       }
; 893  :       return 0;
; 894  :    case objectValue:
; 895  :       return Int( value_.map_->size() );

  0001b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 906  : }

  00020	c9		 leave
  00021	c3		 ret	 0
$LN4@size:

; 877  :    {
; 878  :    case nullValue:
; 879  :    case intValue:
; 880  :    case uintValue:
; 881  :    case realValue:
; 882  :    case booleanValue:
; 883  :    case stringValue:
; 884  :       return 0;
; 885  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 886  :    case arrayValue:  // size of the array is highest index + 1
; 887  :       if ( !value_.map_->empty() )

  00022	8b 01		 mov	 eax, DWORD PTR [ecx]
  00024	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00028	74 17		 je	 SHORT $LN1@size

; 888  :       {
; 889  :          ObjectValues::const_iterator itLast = value_.map_->end();

  0002a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 890  :          --itLast;

  0002d	8d 4d fc	 lea	 ecx, DWORD PTR _itLast$33952[ebp]
  00030	89 45 fc	 mov	 DWORD PTR _itLast$33952[ebp], eax
  00033	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator--

; 891  :          return (*itLast).first.index()+1;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _itLast$33952[ebp]
  0003b	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0003e	40		 inc	 eax

; 906  : }

  0003f	c9		 leave
  00040	c3		 ret	 0
$LN1@size:

; 896  : #else
; 897  :    case arrayValue:
; 898  :       return Int( value_.array_->size() );
; 899  :    case objectValue:
; 900  :       return Int( value_.map_->size() );
; 901  : #endif
; 902  :    default:
; 903  :       JSON_ASSERT_UNREACHABLE;
; 904  :    }
; 905  :    return 0; // unreachable;

  00041	33 c0		 xor	 eax, eax

; 906  : }

  00043	c9		 leave
  00044	c3		 ret	 0
?size@Value@Json@@QBEIXZ ENDP				; Json::Value::size
_TEXT	ENDS
PUBLIC	?empty@Value@Json@@QBE_NXZ			; Json::Value::empty
; Function compile flags: /Ogsp
;	COMDAT ?empty@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?empty@Value@Json@@QBE_NXZ PROC				; Json::Value::empty, COMDAT
; _this$ = ecx

; 912  :    if ( isNull() || isArray() || isObject() )

  00000	80 79 08 00	 cmp	 BYTE PTR [ecx+8], 0
  00004	74 13		 je	 SHORT $LN2@empty
  00006	e8 00 00 00 00	 call	 ?isArray@Value@Json@@QBE_NXZ ; Json::Value::isArray
  0000b	84 c0		 test	 al, al
  0000d	75 0a		 jne	 SHORT $LN2@empty
  0000f	e8 00 00 00 00	 call	 ?isObject@Value@Json@@QBE_NXZ ; Json::Value::isObject
  00014	84 c0		 test	 al, al
  00016	75 01		 jne	 SHORT $LN2@empty

; 914  :    else
; 915  :       return false;
; 916  : }

  00018	c3		 ret	 0
$LN2@empty:

; 913  :       return size() == 0u;

  00019	e8 00 00 00 00	 call	 ?size@Value@Json@@QBEIXZ ; Json::Value::size
  0001e	f7 d8		 neg	 eax
  00020	1b c0		 sbb	 eax, eax
  00022	40		 inc	 eax

; 914  :    else
; 915  :       return false;
; 916  : }

  00023	c3		 ret	 0
?empty@Value@Json@@QBE_NXZ ENDP				; Json::Value::empty
_TEXT	ENDS
PUBLIC	?isValidIndex@Value@Json@@QBE_NI@Z		; Json::Value::isValidIndex
; Function compile flags: /Ogsp
;	COMDAT ?isValidIndex@Value@Json@@QBE_NI@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?isValidIndex@Value@Json@@QBE_NI@Z PROC			; Json::Value::isValidIndex, COMDAT
; _this$ = ecx

; 1057 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1058 :    return index < size();

  00003	e8 00 00 00 00	 call	 ?size@Value@Json@@QBEIXZ ; Json::Value::size
  00008	39 45 08	 cmp	 DWORD PTR _index$[ebp], eax
  0000b	1b c0		 sbb	 eax, eax
  0000d	f7 d8		 neg	 eax

; 1059 : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?isValidIndex@Value@Json@@QBE_NI@Z ENDP			; Json::Value::isValidIndex
_TEXT	ENDS
PUBLIC	?begin@Value@Json@@QBE?AVValueConstIterator@2@XZ ; Json::Value::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@Value@Json@@QBE?AVValueConstIterator@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@Value@Json@@QBE?AVValueConstIterator@2@XZ PROC	; Json::Value::begin, COMDAT
; _this$ = ecx

; 1370 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1371 :    switch ( type_ )

  00003	0f be 41 08	 movsx	 eax, BYTE PTR [ecx+8]
  00007	83 c0 fa	 add	 eax, -6			; fffffffaH
  0000a	83 f8 01	 cmp	 eax, 1
  0000d	77 16		 ja	 SHORT $LN2@begin

; 1372 :    {
; 1373 : #ifdef JSON_VALUE_USE_INTERNAL_MAP
; 1374 :    case arrayValue:
; 1375 :       if ( value_.array_ )
; 1376 :       {
; 1377 :          ValueInternalArray::IteratorState it;
; 1378 :          value_.array_->makeBeginIterator( it );
; 1379 :          return const_iterator( it );
; 1380 :       }
; 1381 :       break;
; 1382 :    case objectValue:
; 1383 :       if ( value_.map_ )
; 1384 :       {
; 1385 :          ValueInternalMap::IteratorState it;
; 1386 :          value_.map_->makeBeginIterator( it );
; 1387 :          return const_iterator( it );
; 1388 :       }
; 1389 :       break;
; 1390 : #else
; 1391 :    case arrayValue:
; 1392 :    case objectValue:
; 1393 :       if ( value_.map_ )

  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00011	85 c9		 test	 ecx, ecx
  00013	74 10		 je	 SHORT $LN2@begin

; 1394 :          return const_iterator( value_.map_->begin() );

  00015	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001d	89 08		 mov	 DWORD PTR [eax], ecx
  0001f	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  00023	eb 0a		 jmp	 SHORT $LN6@begin
$LN2@begin:

; 1395 :       break;
; 1396 : #endif
; 1397 :    default:
; 1398 :       break;
; 1399 :    }
; 1400 :    return const_iterator();

  00025	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00028	83 20 00	 and	 DWORD PTR [eax], 0
  0002b	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
$LN6@begin:

; 1401 : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?begin@Value@Json@@QBE?AVValueConstIterator@2@XZ ENDP	; Json::Value::begin
_TEXT	ENDS
PUBLIC	?end@Value@Json@@QBE?AVValueConstIterator@2@XZ	; Json::Value::end
; Function compile flags: /Ogsp
;	COMDAT ?end@Value@Json@@QBE?AVValueConstIterator@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@Value@Json@@QBE?AVValueConstIterator@2@XZ PROC	; Json::Value::end, COMDAT
; _this$ = ecx

; 1405 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1406 :    switch ( type_ )

  00003	0f be 41 08	 movsx	 eax, BYTE PTR [ecx+8]
  00007	83 c0 fa	 add	 eax, -6			; fffffffaH
  0000a	83 f8 01	 cmp	 eax, 1
  0000d	77 14		 ja	 SHORT $LN2@end

; 1407 :    {
; 1408 : #ifdef JSON_VALUE_USE_INTERNAL_MAP
; 1409 :    case arrayValue:
; 1410 :       if ( value_.array_ )
; 1411 :       {
; 1412 :          ValueInternalArray::IteratorState it;
; 1413 :          value_.array_->makeEndIterator( it );
; 1414 :          return const_iterator( it );
; 1415 :       }
; 1416 :       break;
; 1417 :    case objectValue:
; 1418 :       if ( value_.map_ )
; 1419 :       {
; 1420 :          ValueInternalMap::IteratorState it;
; 1421 :          value_.map_->makeEndIterator( it );
; 1422 :          return const_iterator( it );
; 1423 :       }
; 1424 :       break;
; 1425 : #else
; 1426 :    case arrayValue:
; 1427 :    case objectValue:
; 1428 :       if ( value_.map_ )

  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00011	85 c9		 test	 ecx, ecx
  00013	74 0e		 je	 SHORT $LN2@end

; 1429 :          return const_iterator( value_.map_->end() );

  00015	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00018	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001b	89 08		 mov	 DWORD PTR [eax], ecx
  0001d	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  00021	eb 0a		 jmp	 SHORT $LN6@end
$LN2@end:

; 1430 :       break;
; 1431 : #endif
; 1432 :    default:
; 1433 :       break;
; 1434 :    }
; 1435 :    return const_iterator();

  00023	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00026	83 20 00	 and	 DWORD PTR [eax], 0
  00029	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
$LN6@end:

; 1436 : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?end@Value@Json@@QBE?AVValueConstIterator@2@XZ ENDP	; Json::Value::end
_TEXT	ENDS
PUBLIC	?begin@Value@Json@@QAE?AVValueIterator@2@XZ	; Json::Value::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@Value@Json@@QAE?AVValueIterator@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@Value@Json@@QAE?AVValueIterator@2@XZ PROC	; Json::Value::begin, COMDAT
; _this$ = ecx

; 1441 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1442 :    switch ( type_ )

  00003	0f be 41 08	 movsx	 eax, BYTE PTR [ecx+8]
  00007	83 c0 fa	 add	 eax, -6			; fffffffaH
  0000a	83 f8 01	 cmp	 eax, 1
  0000d	77 16		 ja	 SHORT $LN2@begin@2

; 1443 :    {
; 1444 : #ifdef JSON_VALUE_USE_INTERNAL_MAP
; 1445 :    case arrayValue:
; 1446 :       if ( value_.array_ )
; 1447 :       {
; 1448 :          ValueInternalArray::IteratorState it;
; 1449 :          value_.array_->makeBeginIterator( it );
; 1450 :          return iterator( it );
; 1451 :       }
; 1452 :       break;
; 1453 :    case objectValue:
; 1454 :       if ( value_.map_ )
; 1455 :       {
; 1456 :          ValueInternalMap::IteratorState it;
; 1457 :          value_.map_->makeBeginIterator( it );
; 1458 :          return iterator( it );
; 1459 :       }
; 1460 :       break;
; 1461 : #else
; 1462 :    case arrayValue:
; 1463 :    case objectValue:
; 1464 :       if ( value_.map_ )

  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00011	85 c9		 test	 ecx, ecx
  00013	74 10		 je	 SHORT $LN2@begin@2

; 1465 :          return iterator( value_.map_->begin() );

  00015	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001d	89 08		 mov	 DWORD PTR [eax], ecx
  0001f	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  00023	eb 0a		 jmp	 SHORT $LN6@begin@2
$LN2@begin@2:

; 1466 :       break;
; 1467 : #endif
; 1468 :    default:
; 1469 :       break;
; 1470 :    }
; 1471 :    return iterator();

  00025	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00028	83 20 00	 and	 DWORD PTR [eax], 0
  0002b	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
$LN6@begin@2:

; 1472 : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?begin@Value@Json@@QAE?AVValueIterator@2@XZ ENDP	; Json::Value::begin
_TEXT	ENDS
PUBLIC	?end@Value@Json@@QAE?AVValueIterator@2@XZ	; Json::Value::end
; Function compile flags: /Ogsp
;	COMDAT ?end@Value@Json@@QAE?AVValueIterator@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@Value@Json@@QAE?AVValueIterator@2@XZ PROC		; Json::Value::end, COMDAT
; _this$ = ecx

; 1476 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1477 :    switch ( type_ )

  00003	0f be 41 08	 movsx	 eax, BYTE PTR [ecx+8]
  00007	83 c0 fa	 add	 eax, -6			; fffffffaH
  0000a	83 f8 01	 cmp	 eax, 1
  0000d	77 14		 ja	 SHORT $LN2@end@2

; 1478 :    {
; 1479 : #ifdef JSON_VALUE_USE_INTERNAL_MAP
; 1480 :    case arrayValue:
; 1481 :       if ( value_.array_ )
; 1482 :       {
; 1483 :          ValueInternalArray::IteratorState it;
; 1484 :          value_.array_->makeEndIterator( it );
; 1485 :          return iterator( it );
; 1486 :       }
; 1487 :       break;
; 1488 :    case objectValue:
; 1489 :       if ( value_.map_ )
; 1490 :       {
; 1491 :          ValueInternalMap::IteratorState it;
; 1492 :          value_.map_->makeEndIterator( it );
; 1493 :          return iterator( it );
; 1494 :       }
; 1495 :       break;
; 1496 : #else
; 1497 :    case arrayValue:
; 1498 :    case objectValue:
; 1499 :       if ( value_.map_ )

  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00011	85 c9		 test	 ecx, ecx
  00013	74 0e		 je	 SHORT $LN2@end@2

; 1500 :          return iterator( value_.map_->end() );

  00015	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00018	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001b	89 08		 mov	 DWORD PTR [eax], ecx
  0001d	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  00021	eb 0a		 jmp	 SHORT $LN6@end@2
$LN2@end@2:

; 1501 :       break;
; 1502 : #endif
; 1503 :    default:
; 1504 :       break;
; 1505 :    }
; 1506 :    return iterator();

  00023	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00026	83 20 00	 and	 DWORD PTR [eax], 0
  00029	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
$LN6@end@2:

; 1507 : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?end@Value@Json@@QAE?AVValueIterator@2@XZ ENDP		; Json::Value::end
_TEXT	ENDS
PUBLIC	??0PathArgument@Json@@QAE@XZ			; Json::PathArgument::PathArgument
; Function compile flags: /Ogsp
;	COMDAT ??0PathArgument@Json@@QAE@XZ
_TEXT	SEGMENT
??0PathArgument@Json@@QAE@XZ PROC			; Json::PathArgument::PathArgument, COMDAT
; _this$ = ecx

; 1515 : {

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
  0000b	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0000e	88 08		 mov	 BYTE PTR [eax], cl
  00010	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 1516 : }

  00013	c3		 ret	 0
??0PathArgument@Json@@QAE@XZ ENDP			; Json::PathArgument::PathArgument
_TEXT	ENDS
PUBLIC	??0PathArgument@Json@@QAE@I@Z			; Json::PathArgument::PathArgument
; Function compile flags: /Ogsp
;	COMDAT ??0PathArgument@Json@@QAE@I@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
??0PathArgument@Json@@QAE@I@Z PROC			; Json::PathArgument::PathArgument, COMDAT
; _this$ = ecx

; 1522 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _index$[ebp]
  0000c	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
  00013	c6 00 00	 mov	 BYTE PTR [eax], 0
  00016	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  00019	c7 40 20 01 00
	00 00		 mov	 DWORD PTR [eax+32], 1

; 1523 : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0PathArgument@Json@@QAE@I@Z ENDP			; Json::PathArgument::PathArgument
_TEXT	ENDS
PUBLIC	??1?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::~vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::~vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXXZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Tidy
??1?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::~vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
_TEXT	ENDS
PUBLIC	??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T47647 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT
; _this$ = ecx

; 790  : 		{	// destroy tree

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 791  : 		_Tidy();

  00011	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8d 45 ec	 lea	 eax, DWORD PTR $T47647[ebp]
  0001f	50		 push	 eax
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase

; 792  : 		}

  00027	ff 76 04	 push	 DWORD PTR [esi+4]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	e8 00 00 00 00	 call	 __EH_epilog3
  00035	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
__ehhandler$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEIABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEIABVCZString@Value@Json@@@Z
_TEXT	SEGMENT
__Where$ = -8						; size = 8
$T47692 = -4						; size = 4
$T47703 = 8						; size = 1
__Num$ = 8						; size = 4
__Keyval$ = 8						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEIABVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase, COMDAT
; _this$ = ecx

; 1394 : 		{	// erase and count all that match _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi

; 1395 : 		_Pairii _Where = equal_range(_Keyval);

  00006	ff 75 08	 push	 DWORD PTR __Keyval$[ebp]
  00009	8d 45 f8	 lea	 eax, DWORD PTR __Where$[ebp]
  0000c	50		 push	 eax
  0000d	8b f1		 mov	 esi, ecx
  0000f	e8 00 00 00 00	 call	 ?_Eqrange@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@V12@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Eqrange

; 1396 : 		size_type _Num = 0;

  00014	83 65 08 00	 and	 DWORD PTR __Num$[ebp], 0

; 1397 : 		_Distance(_Where.first, _Where.second, _Num);

  00018	ff 75 08	 push	 DWORD PTR $T47703[ebp]
  0001b	8d 45 08	 lea	 eax, DWORD PTR __Num$[ebp]
  0001e	50		 push	 eax
  0001f	ff 75 fc	 push	 DWORD PTR __Where$[ebp+4]
  00022	ff 75 f8	 push	 DWORD PTR __Where$[ebp]
  00025	e8 00 00 00 00	 call	 ??$_Distance2@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@I@std@@YAXV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z ; std::_Distance2<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > >,unsigned int>
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 1398 : 		erase(_Where.first, _Where.second);

  0002d	ff 75 fc	 push	 DWORD PTR __Where$[ebp+4]
  00030	8d 45 fc	 lea	 eax, DWORD PTR $T47692[ebp]
  00033	ff 75 f8	 push	 DWORD PTR __Where$[ebp]
  00036	8b ce		 mov	 ecx, esi
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase

; 1399 : 		return (_Num);

  0003e	8b 45 08	 mov	 eax, DWORD PTR __Num$[ebp]
  00041	5e		 pop	 esi

; 1400 : 		}

  00042	c9		 leave
  00043	c2 04 00	 ret	 4
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEIABVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
_TEXT	ENDS
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
; Function compile flags: /Ogsp
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@ABVCZString@Value@Json@@@Z
_TEXT	SEGMENT
__Where$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
$T47715 = 12						; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@ABVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find, COMDAT
; _this$ = ecx

; 1423 : 		{	// find an element in mutable sequence that matches _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 1424 : 		iterator _Where = lower_bound(_Keyval);

  00005	ff 75 0c	 push	 DWORD PTR __Keyval$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ?_Lbound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound
  0000f	89 45 fc	 mov	 DWORD PTR __Where$[ebp], eax

; 1425 : 		return (_Where == end()
; 1426 : 			|| _DEBUG_LT_PRED(this->comp,
; 1427 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1428 : 					? end() : _Where);

  00012	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00015	74 15		 je	 SHORT $LN3@find
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  0001a	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ??MCZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator<
  00023	84 c0		 test	 al, al
  00025	75 05		 jne	 SHORT $LN3@find
  00027	8d 45 fc	 lea	 eax, DWORD PTR __Where$[ebp]
  0002a	eb 09		 jmp	 SHORT $LN4@find
$LN3@find:
  0002c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002f	89 45 0c	 mov	 DWORD PTR $T47715[ebp], eax
  00032	8d 45 0c	 lea	 eax, DWORD PTR $T47715[ebp]
$LN4@find:
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003a	89 08		 mov	 DWORD PTR [eax], ecx
  0003c	5e		 pop	 esi

; 1429 : 		}

  0003d	c9		 leave
  0003e	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@ABVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 02	 sar	 eax, 2
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0a		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00026	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00029	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002c	2b d1		 sub	 edx, ecx
  0002e	c1 fa 02	 sar	 edx, 2
  00031	3b c2		 cmp	 eax, edx
  00033	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEII@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Grow_to
  0003d	50		 push	 eax
  0003e	8b ce		 mov	 ecx, esi
  00040	e8 00 00 00 00	 call	 ?reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::reserve
$LN1@Reserve:
  00045	5e		 pop	 esi

; 1298 : 		}

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 892  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 893  : 		if (_Right.size() < _Roff)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00010	57		 push	 edi
  00011	3b c1		 cmp	 eax, ecx
  00013	73 0a		 jae	 SHORT $LN5@assign

; 894  : 			_Xran();	// _Roff off end

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0001a	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN34@assign:
$LN5@assign:

; 895  : 		size_type _Num = _Right.size() - _Roff;

  0001f	2b c1		 sub	 eax, ecx
  00021	8b f8		 mov	 edi, eax

; 896  : 		if (_Count < _Num)

  00023	39 7d 10	 cmp	 DWORD PTR __Count$[ebp], edi
  00026	73 03		 jae	 SHORT $LN4@assign

; 897  : 			_Num = _Count;	// trim _Num to size

  00028	8b 7d 10	 mov	 edi, DWORD PTR __Count$[ebp]
$LN4@assign:

; 898  : 
; 899  : 		if (this == &_Right)

  0002b	3b f3		 cmp	 esi, ebx
  0002d	75 1a		 jne	 SHORT $LN3@assign

; 900  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002f	03 f9		 add	 edi, ecx
  00031	6a ff		 push	 -1
  00033	57		 push	 edi
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0003b	ff 75 0c	 push	 DWORD PTR __Roff$[ebp]
  0003e	8b ce		 mov	 ecx, esi
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00047	eb 47		 jmp	 SHORT $LN31@assign
$LN3@assign:

; 901  : 		else if (_Grow(_Num))

  00049	6a 00		 push	 0
  0004b	57		 push	 edi
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00053	84 c0		 test	 al, al
  00055	74 39		 je	 SHORT $LN31@assign

; 902  : 			{	// make room and assign new stuff
; 903  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  00057	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  0005b	72 04		 jb	 SHORT $LN17@assign
  0005d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005f	eb 02		 jmp	 SHORT $LN18@assign
$LN17@assign:
  00061	8b c3		 mov	 eax, ebx
$LN18@assign:
  00063	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00067	72 04		 jb	 SHORT $LN21@assign
  00069	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0006b	eb 02		 jmp	 SHORT $LN22@assign
$LN21@assign:
  0006d	8b ce		 mov	 ecx, esi
$LN22@assign:
  0006f	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memcpy
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 904  : 			_Eos(_Num);

  0007d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00081	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00084	72 04		 jb	 SHORT $LN29@assign
  00086	8b 06		 mov	 eax, DWORD PTR [esi]
  00088	eb 02		 jmp	 SHORT $LN30@assign
$LN29@assign:
  0008a	8b c6		 mov	 eax, esi
$LN30@assign:
  0008c	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN31@assign:

; 905  : 			}
; 906  : 		return (*this);

  00090	5f		 pop	 edi
  00091	8b c6		 mov	 eax, esi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx

; 907  : 		}

  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN33@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 886  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 887  : 		return (assign(_Right, 0, npos));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 888  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 543  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 544  : 		_Tidy();

  00004	33 c0		 xor	 eax, eax

; 545  : 		assign(_Right, 0, npos);

  00006	6a ff		 push	 -1
  00008	8b f1		 mov	 esi, ecx
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00015	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00018	88 06		 mov	 BYTE PTR [esi], al
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 546  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$?M$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?M$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z PROC ; std::operator<<Json::Value::CZString const ,Json::Value>, COMDAT

; 320  : 	{	// test if _Left < _Right for pairs

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 321  : 	return (_Left.first < _Right.first ||
; 322  : 		!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR __Left$[ebp]
  0000b	56		 push	 esi
  0000c	8b cf		 mov	 ecx, edi
  0000e	e8 00 00 00 00	 call	 ??MCZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator<
  00013	84 c0		 test	 al, al
  00015	75 20		 jne	 SHORT $LN4@operator@8
  00017	57		 push	 edi
  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ??MCZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator<
  0001f	84 c0		 test	 al, al
  00021	75 10		 jne	 SHORT $LN3@operator@8
  00023	83 c6 08	 add	 esi, 8
  00026	56		 push	 esi
  00027	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0002a	e8 00 00 00 00	 call	 ??MValue@Json@@QBE_NABV01@@Z ; Json::Value::operator<
  0002f	84 c0		 test	 al, al
  00031	75 04		 jne	 SHORT $LN4@operator@8
$LN3@operator@8:
  00033	33 c0		 xor	 eax, eax
  00035	eb 03		 jmp	 SHORT $LN5@operator@8
$LN4@operator@8:
  00037	33 c0		 xor	 eax, eax
  00039	40		 inc	 eax
$LN5@operator@8:
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi

; 323  : 	}

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??$?M$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z ENDP ; std::operator<<Json::Value::CZString const ,Json::Value>
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??$?8$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z PROC ; std::operator==<Json::Value::CZString const ,Json::Value>, COMDAT

; 304  : 	{	// test for pair equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 305  : 	return (_Left.first == _Right.first && _Left.second == _Right.second);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR __Left$[ebp]
  0000b	56		 push	 esi
  0000c	8b cf		 mov	 ecx, edi
  0000e	e8 00 00 00 00	 call	 ??8CZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator==
  00013	84 c0		 test	 al, al
  00015	74 15		 je	 SHORT $LN3@operator@9
  00017	83 c6 08	 add	 esi, 8
  0001a	56		 push	 esi
  0001b	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0001e	e8 00 00 00 00	 call	 ??8Value@Json@@QBE_NABV01@@Z ; Json::Value::operator==
  00023	84 c0		 test	 al, al
  00025	74 05		 je	 SHORT $LN3@operator@9
  00027	33 c0		 xor	 eax, eax
  00029	40		 inc	 eax
  0002a	eb 02		 jmp	 SHORT $LN4@operator@9
$LN3@operator@9:
  0002c	33 c0		 xor	 eax, eax
$LN4@operator@9:
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi

; 306  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??$?8$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z ENDP ; std::operator==<Json::Value::CZString const ,Json::Value>
_TEXT	ENDS
PUBLIC	??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	6a 00		 push	 0
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 64   : 	}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??_GPathArgument@Json@@QAEPAXI@Z		; Json::PathArgument::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GPathArgument@Json@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GPathArgument@Json@@QAEPAXI@Z PROC			; Json::PathArgument::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	6a 00		 push	 0
  00006	6a 01		 push	 1
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	74 07		 je	 SHORT $LN1@scalar@5
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	59		 pop	 ecx
$LN1@scalar@5:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GPathArgument@Json@@QAEPAXI@Z ENDP			; Json::PathArgument::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::~map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
; Function compile flags: /Ogsp
;	COMDAT ??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::~map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::~map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
_TEXT	ENDS
PUBLIC	??NValue@Json@@QBE_NABV01@@Z			; Json::Value::operator<=
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
;	COMDAT ??NValue@Json@@QBE_NABV01@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??NValue@Json@@QBE_NABV01@@Z PROC			; Json::Value::operator<=, COMDAT
; _this$ = ecx

; 611  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 612  :    return !(other > *this);

  00003	ff 75 08	 push	 DWORD PTR _other$[ebp]
  00006	e8 00 00 00 00	 call	 ??MValue@Json@@QBE_NABV01@@Z ; Json::Value::operator<
  0000b	33 c9		 xor	 ecx, ecx
  0000d	84 c0		 test	 al, al
  0000f	0f 94 c0	 sete	 al

; 613  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??NValue@Json@@QBE_NABV01@@Z ENDP			; Json::Value::operator<=
_TEXT	ENDS
PUBLIC	??AValue@Json@@QBEABV01@I@Z			; Json::Value::operator[]
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$??AValue@Json@@QBEABV01@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??AValue@Json@@QBEABV01@I@Z$0
__ehfuncinfo$??AValue@Json@@QBEABV01@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??AValue@Json@@QBEABV01@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	ENDS
;	COMDAT ??AValue@Json@@QBEABV01@I@Z
_TEXT	SEGMENT
_key$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
$T48056 = 8						; size = 4
_index$ = 8						; size = 4
??AValue@Json@@QBEABV01@I@Z PROC			; Json::Value::operator[], COMDAT
; _this$ = ecx

; 998  : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??AValue@Json@@QBEABV01@I@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 999  :    JSON_ASSERT( type_ == nullValue  ||  type_ == arrayValue );
; 1000 :    if ( type_ == nullValue )

  0000e	80 7e 08 00	 cmp	 BYTE PTR [esi+8], 0
  00012	75 0d		 jne	 SHORT $LN2@operator@10

; 1001 :       return null;

  00014	b8 00 00 00 00	 mov	 eax, OFFSET ?null@Value@Json@@2V12@B ; Json::Value::null
$LN3@operator@10:

; 1008 : #else
; 1009 :    Value *value = value_.array_->find( index );
; 1010 :    return value ? *value : null;
; 1011 : #endif
; 1012 : }

  00019	e8 00 00 00 00	 call	 __EH_epilog3
  0001e	c2 04 00	 ret	 4
$LN2@operator@10:

; 1002 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1003 :    CZString key( index );

  00021	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  00024	83 65 ec 00	 and	 DWORD PTR _key$[ebp], 0
  00028	89 45 f0	 mov	 DWORD PTR _key$[ebp+4], eax

; 1004 :    ObjectValues::const_iterator it = value_.map_->find( key );

  0002b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002d	8d 45 ec	 lea	 eax, DWORD PTR _key$[ebp]
  00030	50		 push	 eax
  00031	8d 45 08	 lea	 eax, DWORD PTR $T48056[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1005 :    if ( it == value_.map_->end() )

  0003c	8b 36		 mov	 esi, DWORD PTR [esi]
  0003e	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00041	75 15		 jne	 SHORT $LN1@operator@10
  00043	be 00 00 00 00	 mov	 esi, OFFSET ?null@Value@Json@@2V12@B ; Json::Value::null
$LN24@operator@10:

; 1006 :       return null;

  00048	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0004c	8d 4d ec	 lea	 ecx, DWORD PTR _key$[ebp]
  0004f	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  00054	8b c6		 mov	 eax, esi
  00056	eb c1		 jmp	 SHORT $LN3@operator@10
$LN1@operator@10:

; 1007 :    return (*it).second;

  00058	8d 70 14	 lea	 esi, DWORD PTR [eax+20]
  0005b	eb eb		 jmp	 SHORT $LN24@operator@10
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??AValue@Json@@QBEABV01@I@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _key$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__ehhandler$??AValue@Json@@QBEABV01@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??AValue@Json@@QBEABV01@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??AValue@Json@@QBEABV01@I@Z ENDP			; Json::Value::operator[]
PUBLIC	??AValue@Json@@QBEABV01@PBD@Z			; Json::Value::operator[]
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$??AValue@Json@@QBEABV01@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??AValue@Json@@QBEABV01@PBD@Z$0
__ehfuncinfo$??AValue@Json@@QBEABV01@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??AValue@Json@@QBEABV01@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	ENDS
;	COMDAT ??AValue@Json@@QBEABV01@PBD@Z
_TEXT	SEGMENT
_actualKey$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
$T48121 = 8						; size = 4
_key$ = 8						; size = 4
??AValue@Json@@QBEABV01@PBD@Z PROC			; Json::Value::operator[], COMDAT
; _this$ = ecx

; 1065 : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??AValue@Json@@QBEABV01@PBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 1066 :    JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );
; 1067 :    if ( type_ == nullValue )

  0000e	80 7e 08 00	 cmp	 BYTE PTR [esi+8], 0
  00012	75 0d		 jne	 SHORT $LN2@operator@11

; 1068 :       return null;

  00014	b8 00 00 00 00	 mov	 eax, OFFSET ?null@Value@Json@@2V12@B ; Json::Value::null
$LN3@operator@11:

; 1075 : #else
; 1076 :    const Value *value = value_.map_->find( key );
; 1077 :    return value ? *value : null;
; 1078 : #endif
; 1079 : }

  00019	e8 00 00 00 00	 call	 __EH_epilog3
  0001e	c2 04 00	 ret	 4
$LN2@operator@11:

; 1069 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1070 :    CZString actualKey( key, CZString::noDuplication );

  00021	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00024	83 65 f0 00	 and	 DWORD PTR _actualKey$[ebp+4], 0
  00028	89 45 ec	 mov	 DWORD PTR _actualKey$[ebp], eax

; 1071 :    ObjectValues::const_iterator it = value_.map_->find( actualKey );

  0002b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002d	8d 45 ec	 lea	 eax, DWORD PTR _actualKey$[ebp]
  00030	50		 push	 eax
  00031	8d 45 08	 lea	 eax, DWORD PTR $T48121[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1072 :    if ( it == value_.map_->end() )

  0003c	8b 36		 mov	 esi, DWORD PTR [esi]
  0003e	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00041	75 15		 jne	 SHORT $LN1@operator@11
  00043	be 00 00 00 00	 mov	 esi, OFFSET ?null@Value@Json@@2V12@B ; Json::Value::null
$LN26@operator@11:

; 1073 :       return null;

  00048	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0004c	8d 4d ec	 lea	 ecx, DWORD PTR _actualKey$[ebp]
  0004f	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  00054	8b c6		 mov	 eax, esi
  00056	eb c1		 jmp	 SHORT $LN3@operator@11
$LN1@operator@11:

; 1074 :    return (*it).second;

  00058	8d 70 14	 lea	 esi, DWORD PTR [eax+20]
  0005b	eb eb		 jmp	 SHORT $LN26@operator@11
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??AValue@Json@@QBEABV01@PBD@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _actualKey$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__ehhandler$??AValue@Json@@QBEABV01@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??AValue@Json@@QBEABV01@PBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??AValue@Json@@QBEABV01@PBD@Z ENDP			; Json::Value::operator[]
PUBLIC	??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::operator[]
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	ENDS
;	COMDAT ??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_actualKey$48292 = -20					; size = 8
__$EHRec$ = -12						; size = 12
$T48266 = 8						; size = 4
_key$ = 8						; size = 4
??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::operator[], COMDAT
; _this$ = ecx

; 1091 : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 1092 :    return (*this)[ key.c_str() ];

  0000e	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00011	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00015	72 02		 jb	 SHORT $LN7@operator@12
  00017	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@operator@12:
  00019	80 7e 08 00	 cmp	 BYTE PTR [esi+8], 0
  0001d	75 07		 jne	 SHORT $LN10@operator@12
$LN35@operator@12:
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET ?null@Value@Json@@2V12@B ; Json::Value::null
  00024	eb 37		 jmp	 SHORT $LN11@operator@12
$LN10@operator@12:
  00026	83 65 f0 00	 and	 DWORD PTR _actualKey$48292[ebp+4], 0
  0002a	89 45 ec	 mov	 DWORD PTR _actualKey$48292[ebp], eax
  0002d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002f	8d 45 ec	 lea	 eax, DWORD PTR _actualKey$48292[ebp]
  00032	50		 push	 eax
  00033	8d 45 08	 lea	 eax, DWORD PTR $T48266[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
  0003e	8b 36		 mov	 esi, DWORD PTR [esi]
  00040	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00044	8d 4d ec	 lea	 ecx, DWORD PTR _actualKey$48292[ebp]
  00047	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0004a	75 07		 jne	 SHORT $LN9@operator@12
  0004c	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  00051	eb cc		 jmp	 SHORT $LN35@operator@12
$LN9@operator@12:
  00053	8d 70 14	 lea	 esi, DWORD PTR [eax+20]
  00056	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  0005b	8b c6		 mov	 eax, esi
$LN11@operator@12:

; 1093 : }

  0005d	e8 00 00 00 00	 call	 __EH_epilog3
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _actualKey$48292[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__ehhandler$??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::operator[]
PUBLIC	?isMember@Value@Json@@QBE_NPBD@Z		; Json::Value::isMember
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$?isMember@Value@Json@@QBE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?isMember@Value@Json@@QBE_NPBD@Z$0
__ehfuncinfo$?isMember@Value@Json@@QBE_NPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?isMember@Value@Json@@QBE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	ENDS
;	COMDAT ?isMember@Value@Json@@QBE_NPBD@Z
_TEXT	SEGMENT
_actualKey$48394 = -20					; size = 8
__$EHRec$ = -12						; size = 12
$T48368 = 8						; size = 4
_key$ = 8						; size = 4
?isMember@Value@Json@@QBE_NPBD@Z PROC			; Json::Value::isMember, COMDAT
; _this$ = ecx

; 1184 : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?isMember@Value@Json@@QBE_NPBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 1185 :    const Value *value = &((*this)[key]);

  0000e	80 7e 08 00	 cmp	 BYTE PTR [esi+8], 0
  00012	bf 00 00 00 00	 mov	 edi, OFFSET ?null@Value@Json@@2V12@B ; Json::Value::null
  00017	75 04		 jne	 SHORT $LN4@isMember
$LN29@isMember:
  00019	8b f7		 mov	 esi, edi
  0001b	eb 38		 jmp	 SHORT $LN5@isMember
$LN4@isMember:
  0001d	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00020	83 65 f0 00	 and	 DWORD PTR _actualKey$48394[ebp+4], 0
  00024	89 45 ec	 mov	 DWORD PTR _actualKey$48394[ebp], eax
  00027	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00029	8d 45 ec	 lea	 eax, DWORD PTR _actualKey$48394[ebp]
  0002c	50		 push	 eax
  0002d	8d 45 08	 lea	 eax, DWORD PTR $T48368[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	8b 36		 mov	 esi, DWORD PTR [esi]
  0003a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003e	8d 4d ec	 lea	 ecx, DWORD PTR _actualKey$48394[ebp]
  00041	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00044	75 07		 jne	 SHORT $LN3@isMember
  00046	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  0004b	eb cc		 jmp	 SHORT $LN29@isMember
$LN3@isMember:
  0004d	8d 70 14	 lea	 esi, DWORD PTR [eax+20]
  00050	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
$LN5@isMember:

; 1186 :    return value != &null;

  00055	33 c0		 xor	 eax, eax
  00057	3b f7		 cmp	 esi, edi
  00059	0f 95 c0	 setne	 al

; 1187 : }

  0005c	e8 00 00 00 00	 call	 __EH_epilog3
  00061	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?isMember@Value@Json@@QBE_NPBD@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _actualKey$48394[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__ehhandler$?isMember@Value@Json@@QBE_NPBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?isMember@Value@Json@@QBE_NPBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?isMember@Value@Json@@QBE_NPBD@Z ENDP			; Json::Value::isMember
PUBLIC	?isMember@Value@Json@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::isMember
; Function compile flags: /Ogsp
;	COMDAT ?isMember@Value@Json@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
?isMember@Value@Json@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::isMember, COMDAT
; _this$ = ecx

; 1192 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1193 :    return isMember( key.c_str() );

  00003	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00006	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0000a	72 02		 jb	 SHORT $LN7@isMember@2
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@isMember@2:
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?isMember@Value@Json@@QBE_NPBD@Z ; Json::Value::isMember

; 1194 : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?isMember@Value@Json@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::isMember
_TEXT	ENDS
PUBLIC	?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z	; Json::Path::resolve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z$0
__ehfuncinfo$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	ENDS
;	COMDAT ?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z
_TEXT	SEGMENT
_key$48539 = -20					; size = 8
__$EHRec$ = -12						; size = 12
$T48543 = 8						; size = 4
_root$ = 8						; size = 4
?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z PROC		; Json::Path::resolve, COMDAT
; _this$ = ecx

; 1634 : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b d9		 mov	 ebx, ecx

; 1635 :    const Value *node = &root;

  0000e	8b 75 08	 mov	 esi, DWORD PTR _root$[ebp]

; 1636 :    for ( Args::const_iterator it = args_.begin(); it != args_.end(); ++it )

  00011	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00013	eb 71		 jmp	 SHORT $LN63@resolve
$LL19@resolve:

; 1637 :    {
; 1638 :       const PathArgument &arg = *it;
; 1639 :       if ( arg.kind_ == PathArgument::kindIndex )

  00015	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00018	83 f8 01	 cmp	 eax, 1
  0001b	75 57		 jne	 SHORT $LN7@resolve

; 1640 :       {
; 1641 :          if ( !node->isArray()  ||  node->isValidIndex( arg.index_ ) )

  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 ?isArray@Value@Json@@QBE_NXZ ; Json::Value::isArray
  00024	84 c0		 test	 al, al
  00026	74 05		 je	 SHORT $LN5@resolve
  00028	e8 00 00 00 00	 call	 ?size@Value@Json@@QBEIXZ ; Json::Value::size
$LN5@resolve:

; 1642 :          {
; 1643 :             // Error: unable to resolve path (array value expected at position...
; 1644 :          }
; 1645 :          node = &((*node)[arg.index_]);

  0002d	80 7e 08 00	 cmp	 BYTE PTR [esi+8], 0
  00031	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00034	75 07		 jne	 SHORT $LN38@resolve
$LN64@resolve:
  00036	be 00 00 00 00	 mov	 esi, OFFSET ?null@Value@Json@@2V12@B ; Json::Value::null
  0003b	eb 46		 jmp	 SHORT $LN9@resolve
$LN38@resolve:
  0003d	83 65 ec 00	 and	 DWORD PTR _key$48539[ebp], 0
  00041	89 45 f0	 mov	 DWORD PTR _key$48539[ebp+4], eax
  00044	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00046	8d 45 ec	 lea	 eax, DWORD PTR _key$48539[ebp]
  00049	50		 push	 eax
  0004a	8d 45 08	 lea	 eax, DWORD PTR $T48543[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
  00053	8b 00		 mov	 eax, DWORD PTR [eax]
  00055	8b 36		 mov	 esi, DWORD PTR [esi]
  00057	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0005b	8d 4d ec	 lea	 ecx, DWORD PTR _key$48539[ebp]
  0005e	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00061	75 07		 jne	 SHORT $LN37@resolve
  00063	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  00068	eb cc		 jmp	 SHORT $LN64@resolve
$LN37@resolve:
  0006a	8d 70 14	 lea	 esi, DWORD PTR [eax+20]
  0006d	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  00072	eb 0f		 jmp	 SHORT $LN9@resolve
$LN7@resolve:

; 1646 :       }
; 1647 :       else if ( arg.kind_ == PathArgument::kindKey )

  00074	83 f8 02	 cmp	 eax, 2
  00077	75 0a		 jne	 SHORT $LN9@resolve

; 1648 :       {
; 1649 :          if ( !node->isObject() )
; 1650 :          {
; 1651 :             // Error: unable to resolve path (object value expected at position...)
; 1652 :          }
; 1653 :          node = &((*node)[arg.key_]);

  00079	57		 push	 edi
  0007a	8b ce		 mov	 ecx, esi
  0007c	e8 00 00 00 00	 call	 ??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::operator[]
  00081	8b f0		 mov	 esi, eax
$LN9@resolve:

; 1636 :    for ( Args::const_iterator it = args_.begin(); it != args_.end(); ++it )

  00083	83 c7 24	 add	 edi, 36			; 00000024H
$LN63@resolve:
  00086	3b 7b 04	 cmp	 edi, DWORD PTR [ebx+4]
  00089	75 8a		 jne	 SHORT $LL19@resolve

; 1654 :          if ( node == &Value::null )
; 1655 :          {
; 1656 :             // Error: unable to resolve path (object has no member named '' at position...)
; 1657 :          }
; 1658 :       }
; 1659 :    }
; 1660 :    return *node;

  0008b	8b c6		 mov	 eax, esi

; 1661 : }

  0008d	e8 00 00 00 00	 call	 __EH_epilog3
  00092	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _key$48539[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__ehhandler$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z ENDP		; Json::Path::resolve
PUBLIC	?push_back@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEX$$QAPBVPathArgument@Json@@@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEX$$QAPBVPathArgument@Json@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEX$$QAPBVPathArgument@Json@@@Z PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::push_back, COMDAT
; _this$ = ecx

; 631  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 632  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 27		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 21		 ja	 SHORT $LN4@push_back

; 633  : 			{	// push back an element
; 634  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 635  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 636  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve
$LN3@push_back:

; 637  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 638  : 			_Cons_val(this->_Alval,
; 639  : 				this->_Mylast,
; 640  : 				_STD forward<_Ty>(this->_Myfirst[_Idx]));

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	85 c0		 test	 eax, eax
  0002f	74 20		 je	 SHORT $LN41@push_back
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]

; 641  : 			++this->_Mylast;
; 642  : 			}
; 643  : 		else

  00036	eb 17		 jmp	 SHORT $LN48@push_back
$LN4@push_back:

; 644  : 			{	// push back a non-element
; 645  : 			if (this->_Mylast == this->_Myend)

  00038	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003b	75 09		 jne	 SHORT $LN1@push_back

; 646  : 				_Reserve(1);

  0003d	6a 01		 push	 1
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve
$LN1@push_back:

; 647  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 648  : 			_Cons_val(this->_Alval,
; 649  : 				this->_Mylast,
; 650  : 				_STD forward<_Ty>(_Val));

  00046	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00049	85 c0		 test	 eax, eax
  0004b	74 04		 je	 SHORT $LN41@push_back
  0004d	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN48@push_back:
  0004f	89 08		 mov	 DWORD PTR [eax], ecx
$LN41@push_back:

; 651  : 			++this->_Mylast;

  00051	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 652  : 			}
; 653  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?push_back@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEX$$QAPBVPathArgument@Json@@@Z ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::push_back
_TEXT	ENDS
PUBLIC	??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ
_TEXT	SEGMENT
$T48700 = -8						; size = 4
$T48703 = -8						; size = 4
$T48689 = -1						; size = 1
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >, COMDAT
; _this$ = ecx

; 106  : 		{	// construct empty map from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	51		 push	 ecx
  00007	89 65 f8	 mov	 DWORD PTR $T48703[ebp], esp
  0000a	8d 45 ff	 lea	 eax, DWORD PTR $T48689[ebp]
  0000d	89 65 f8	 mov	 DWORD PTR $T48700[ebp], esp
  00010	50		 push	 eax
  00011	8b f1		 mov	 esi, ecx
  00013	e8 00 00 00 00	 call	 ??0?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >

; 107  : 		}

  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c9		 leave
  0001c	c3		 ret	 0
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 910  : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 911  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 912  : 		if (_Count != 0)
; 913  : 			_DEBUG_POINTER(_Ptr);
; 914  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 915  : 
; 916  : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	53		 push	 ebx
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 1c		 je	 SHORT $LN2@assign@2

; 917  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN7@assign@2
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN8@assign@2
$LN7@assign@2:
  0001e	8b c6		 mov	 eax, esi
$LN8@assign@2:
  00020	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00023	2b d8		 sub	 ebx, eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002e	eb 3f		 jmp	 SHORT $LN3@assign@2
$LN2@assign@2:
  00030	57		 push	 edi

; 918  : 
; 919  : 		if (_Grow(_Count))

  00031	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00034	6a 00		 push	 0
  00036	57		 push	 edi
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0003e	84 c0		 test	 al, al
  00040	74 2a		 je	 SHORT $LN21@assign@2

; 920  : 			{	// make room and assign new stuff
; 921  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

  00042	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00046	72 04		 jb	 SHORT $LN11@assign@2
  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	eb 02		 jmp	 SHORT $LN12@assign@2
$LN11@assign@2:
  0004c	8b c6		 mov	 eax, esi
$LN12@assign@2:
  0004e	57		 push	 edi
  0004f	53		 push	 ebx
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _memcpy
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 922  : 			_Eos(_Count);

  00059	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0005d	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00060	72 04		 jb	 SHORT $LN19@assign@2
  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	eb 02		 jmp	 SHORT $LN20@assign@2
$LN19@assign@2:
  00066	8b c6		 mov	 eax, esi
$LN20@assign@2:
  00068	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN21@assign@2:

; 923  : 			}
; 924  : 		return (*this);

  0006c	8b c6		 mov	 eax, esi
  0006e	5f		 pop	 edi
$LN3@assign@2:
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 925  : 		}

  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 928  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 929  : 		_DEBUG_POINTER(_Ptr);
; 930  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 _strlen
  0000e	59		 pop	 ecx
  0000f	50		 push	 eax
  00010	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0001a	5e		 pop	 esi

; 931  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 762  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 763  : 		return (assign(_Right));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 764  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??0PathArgument@Json@@QAE@ABV01@@Z		; Json::PathArgument::PathArgument
; Function compile flags: /Ogsp
;	COMDAT ??0PathArgument@Json@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0PathArgument@Json@@QAE@ABV01@@Z PROC			; Json::PathArgument::PathArgument, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00013	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00016	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00019	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0001c	5f		 pop	 edi
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0PathArgument@Json@@QAE@ABV01@@Z ENDP			; Json::PathArgument::PathArgument
_TEXT	ENDS
PUBLIC	??$construct@AAVPathArgument@Json@@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z ; std::allocator<Json::PathArgument>::construct<Json::PathArgument &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAVPathArgument@Json@@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAVPathArgument@Json@@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z$0
__ehfuncinfo$??$construct@AAVPathArgument@Json@@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAVPathArgument@Json@@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAVPathArgument@Json@@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z
_TEXT	SEGMENT
$T48764 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAVPathArgument@Json@@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z PROC ; std::allocator<Json::PathArgument>::construct<Json::PathArgument &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAVPathArgument@Json@@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T48764[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@2
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0PathArgument@Json@@QAE@ABV01@@Z
$LN3@construct@2:

; 209  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAVPathArgument@Json@@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T48764[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAVPathArgument@Json@@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAVPathArgument@Json@@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAVPathArgument@Json@@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z ENDP ; std::allocator<Json::PathArgument>::construct<Json::PathArgument &>
PUBLIC	??$_Construct@VPathArgument@Json@@ABV12@@std@@YAXPAVPathArgument@Json@@ABV12@@Z ; std::_Construct<Json::PathArgument,Json::PathArgument const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@VPathArgument@Json@@ABV12@@std@@YAXPAVPathArgument@Json@@ABV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@VPathArgument@Json@@ABV12@@std@@YAXPAVPathArgument@Json@@ABV12@@Z$0
__ehfuncinfo$??$_Construct@VPathArgument@Json@@ABV12@@std@@YAXPAVPathArgument@Json@@ABV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@VPathArgument@Json@@ABV12@@std@@YAXPAVPathArgument@Json@@ABV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@VPathArgument@Json@@ABV12@@std@@YAXPAVPathArgument@Json@@ABV12@@Z
_TEXT	SEGMENT
$T48783 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@VPathArgument@Json@@ABV12@@std@@YAXPAVPathArgument@Json@@ABV12@@Z PROC ; std::_Construct<Json::PathArgument,Json::PathArgument const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@VPathArgument@Json@@ABV12@@std@@YAXPAVPathArgument@Json@@ABV12@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T48783[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0PathArgument@Json@@QAE@ABV01@@Z
$LN3@Construct:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@VPathArgument@Json@@ABV12@@std@@YAXPAVPathArgument@Json@@ABV12@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T48783[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@VPathArgument@Json@@ABV12@@std@@YAXPAVPathArgument@Json@@ABV12@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@VPathArgument@Json@@ABV12@@std@@YAXPAVPathArgument@Json@@ABV12@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@VPathArgument@Json@@ABV12@@std@@YAXPAVPathArgument@Json@@ABV12@@Z ENDP ; std::_Construct<Json::PathArgument,Json::PathArgument const &>
PUBLIC	?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	6a 00		 push	 0
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 214  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@VPathArgument@Json@@@std@@YAXPAVPathArgument@Json@@@Z ; std::_Destroy<Json::PathArgument>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@VPathArgument@Json@@@std@@YAXPAVPathArgument@Json@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@VPathArgument@Json@@@std@@YAXPAVPathArgument@Json@@@Z PROC ; std::_Destroy<Json::PathArgument>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	6a 00		 push	 0
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 64   : 	}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??$_Destroy@VPathArgument@Json@@@std@@YAXPAVPathArgument@Json@@@Z ENDP ; std::_Destroy<Json::PathArgument>
_TEXT	ENDS
PUBLIC	??0Value@Json@@QAE@W4ValueType@1@@Z		; Json::Value::Value
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Value@Json@@QAE@W4ValueType@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Value@Json@@QAE@W4ValueType@1@@Z$0
__ehfuncinfo$??0Value@Json@@QAE@W4ValueType@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Value@Json@@QAE@W4ValueType@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	ENDS
;	COMDAT ??0Value@Json@@QAE@W4ValueType@1@@Z
_TEXT	SEGMENT
$T48874 = -16						; size = 4
$T48888 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T48857 = 8						; size = 4
_type$ = 8						; size = 4
$T48883 = 11						; size = 1
??0Value@Json@@QAE@W4ValueType@1@@Z PROC		; Json::Value::Value, COMDAT
; _this$ = ecx

; 276  : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0Value@Json@@QAE@W4ValueType@1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  00011	33 db		 xor	 ebx, ebx
  00013	88 46 08	 mov	 BYTE PTR [esi+8], al
  00016	81 66 08 ff fe
	ff ff		 and	 DWORD PTR [esi+8], -257	; fffffeffH
  0001d	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx

; 277  :    switch ( type )

  00020	3b c3		 cmp	 eax, ebx
  00022	7e 57		 jle	 SHORT $LN1@Value@2
  00024	83 f8 02	 cmp	 eax, 2
  00027	7e 50		 jle	 SHORT $LN6@Value@2
  00029	83 f8 03	 cmp	 eax, 3
  0002c	74 45		 je	 SHORT $LN5@Value@2
  0002e	83 f8 04	 cmp	 eax, 4
  00031	74 46		 je	 SHORT $LN6@Value@2
  00033	83 f8 05	 cmp	 eax, 5
  00036	74 37		 je	 SHORT $LN2@Value@2
  00038	7e 41		 jle	 SHORT $LN1@Value@2
  0003a	83 f8 07	 cmp	 eax, 7
  0003d	7f 3c		 jg	 SHORT $LN1@Value@2

; 291  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 292  :    case arrayValue:
; 293  :    case objectValue:
; 294  :       value_.map_ = new ObjectValues();

  0003f	6a 10		 push	 16			; 00000010H
  00041	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00046	8b f8		 mov	 edi, eax
  00048	59		 pop	 ecx
  00049	89 7d 08	 mov	 DWORD PTR $T48857[ebp], edi
  0004c	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0004f	3b fb		 cmp	 edi, ebx
  00051	74 16		 je	 SHORT $LN12@Value@2
  00053	51		 push	 ecx
  00054	89 65 f0	 mov	 DWORD PTR $T48888[ebp], esp
  00057	8d 45 0b	 lea	 eax, DWORD PTR $T48883[ebp]
  0005a	89 65 f0	 mov	 DWORD PTR $T48874[ebp], esp
  0005d	50		 push	 eax
  0005e	8b cf		 mov	 ecx, edi
  00060	e8 00 00 00 00	 call	 ??0?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
  00065	8b c7		 mov	 eax, edi
  00067	eb 02		 jmp	 SHORT $LN13@Value@2
$LN12@Value@2:
  00069	33 c0		 xor	 eax, eax
$LN13@Value@2:
  0006b	89 06		 mov	 DWORD PTR [esi], eax

; 295  :       break;

  0006d	eb 0c		 jmp	 SHORT $LN1@Value@2
$LN2@Value@2:

; 296  : #else
; 297  :    case arrayValue:
; 298  :       value_.array_ = arrayAllocator()->newArray();
; 299  :       break;
; 300  :    case objectValue:
; 301  :       value_.map_ = mapAllocator()->newMap();
; 302  :       break;
; 303  : #endif
; 304  :    case booleanValue:
; 305  :       value_.bool_ = false;

  0006f	88 1e		 mov	 BYTE PTR [esi], bl

; 288  :    case stringValue:
; 289  :       value_.string_ = 0;
; 290  :       break;

  00071	eb 08		 jmp	 SHORT $LN1@Value@2
$LN5@Value@2:

; 284  :       break;
; 285  :    case realValue:
; 286  :       value_.real_ = 0.0;

  00073	d9 ee		 fldz
  00075	dd 1e		 fstp	 QWORD PTR [esi]

; 287  :       break;

  00077	eb 02		 jmp	 SHORT $LN1@Value@2
$LN6@Value@2:

; 278  :    {
; 279  :    case nullValue:
; 280  :       break;
; 281  :    case intValue:
; 282  :    case uintValue:
; 283  :       value_.int_ = 0;

  00079	89 1e		 mov	 DWORD PTR [esi], ebx
$LN1@Value@2:

; 306  :       break;
; 307  :    default:
; 308  :       JSON_ASSERT_UNREACHABLE;
; 309  :    }
; 310  : }

  0007b	8b c6		 mov	 eax, esi
  0007d	e8 00 00 00 00	 call	 __EH_epilog3
  00082	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Value@Json@@QAE@W4ValueType@1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR $T48857[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$??0Value@Json@@QAE@W4ValueType@1@@Z:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Value@Json@@QAE@W4ValueType@1@@Z
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Value@Json@@QAE@W4ValueType@1@@Z ENDP		; Json::Value::Value
PUBLIC	??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@6
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@6:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 592  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 593  : 		_Tidy();
; 594  : 		assign(_Ptr);

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	e8 00 00 00 00	 call	 _strlen
  0001c	59		 pop	 ecx
  0001d	50		 push	 eax
  0001e	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 595  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 674  : 		{	// construct from [_First, _Last), const pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 675  : 		_DEBUG_RANGE(_First, _Last);
; 676  : 		_Tidy();
; 677  : 		if (_First != _Last)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	39 45 08	 cmp	 DWORD PTR __First$[ebp], eax
  0001a	74 0c		 je	 SHORT $LN1@basic_stri

; 678  : 			assign(&*_First, _Last - _First);

  0001c	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN1@basic_stri:

; 679  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 713  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 714  : 		if (this == &_Right)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	3b fe		 cmp	 edi, esi
  0000c	74 41		 je	 SHORT $LN43@assign@3

; 715  : 			;
; 716  : 		else if (get_allocator() != _Right.get_allocator()
; 717  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 718  : 			*this = _Right;
; 719  : 		else
; 720  : 			{	// not same, clear this and steal from _Right
; 721  : 			_Tidy(true);

  0000e	6a 00		 push	 0
  00010	6a 01		 push	 1
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 722  : 			if (_Right._Myres < this->_BUF_SIZE)

  00017	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0001b	73 11		 jae	 SHORT $LN2@assign@3

; 723  : 				_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 724  : 					_Right._Mysize + 1);

  0001d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00020	40		 inc	 eax
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	e8 00 00 00 00	 call	 _memmove
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 725  : 			else

  0002c	eb 07		 jmp	 SHORT $LN1@assign@3
$LN2@assign@3:

; 726  : 				{	// copy pointer
; 727  : 				this->_Bx._Ptr = _Right._Bx._Ptr;

  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	89 07		 mov	 DWORD PTR [edi], eax

; 728  : 				_Right._Bx._Ptr = 0;

  00032	83 26 00	 and	 DWORD PTR [esi], 0
$LN1@assign@3:

; 729  : 				}
; 730  : 			this->_Mysize = _Right._Mysize;

  00035	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00038	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 731  : 			this->_Myres = _Right._Myres;

  0003b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003e	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 732  : 
; 733  : 			_Right._Tidy();

  00041	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  00045	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0004c	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN43@assign@3:

; 734  : 			}
; 735  : 		return (*this);

  0004f	8b c7		 mov	 eax, edi
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi

; 736  : 		}

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@AAV34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@AAV23@@Z ; std::_Cons_val<std::allocator<Json::PathArgument>,Json::PathArgument,Json::PathArgument &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@AAV34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@AAV23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@AAV34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@AAV23@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@AAV34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@AAV23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@AAV34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@AAV23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@AAV34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@AAV23@@Z
_TEXT	SEGMENT
$T49152 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@AAV34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@AAV23@@Z PROC ; std::_Cons_val<std::allocator<Json::PathArgument>,Json::PathArgument,Json::PathArgument &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@AAV34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@AAV23@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T49152[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@2
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0PathArgument@Json@@QAE@ABV01@@Z
$LN7@Cons_val@2:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@AAV34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@AAV23@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T49152[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@AAV34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@AAV23@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@AAV34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@AAV23@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@AAV34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@AAV23@@Z ENDP ; std::_Cons_val<std::allocator<Json::PathArgument>,Json::PathArgument,Json::PathArgument &>
PUBLIC	?construct@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@ABV34@@Z ; std::allocator<Json::PathArgument>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@ABV34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@ABV34@@Z PROC ; std::allocator<Json::PathArgument>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@VPathArgument@Json@@ABV12@@std@@YAXPAVPathArgument@Json@@ABV12@@Z ; std::_Construct<Json::PathArgument,Json::PathArgument const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@ABV34@@Z ENDP ; std::allocator<Json::PathArgument>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@$$QAV34@@Z ; std::allocator<Json::PathArgument>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@$$QAV34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@$$QAV34@@Z$0
__ehfuncinfo$?construct@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@$$QAV34@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@$$QAV34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@$$QAV34@@Z
_TEXT	SEGMENT
$T49170 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@$$QAV34@@Z PROC ; std::allocator<Json::PathArgument>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@$$QAV34@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T49170[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@3
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0PathArgument@Json@@QAE@ABV01@@Z
$LN3@construct@3:

; 203  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@$$QAV34@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T49170[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@$$QAV34@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@$$QAV34@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@$$QAV34@@Z ENDP ; std::allocator<Json::PathArgument>::construct
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 708  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 710  : 		}

  00003	5d		 pop	 ebp

; 709  : 		return (assign(_STD forward<_Myt>(_Right)));

  00004	e9 00 00 00 00	 jmp	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Dest_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Dest_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	6a 00		 push	 0
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 288  : 	}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??$_Dest_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@@Z ; std::allocator<Json::PathArgument>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@@Z PROC ; std::allocator<Json::PathArgument>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	6a 00		 push	 0
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 214  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?destroy@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@@Z ENDP ; std::allocator<Json::PathArgument>::destroy
_TEXT	ENDS
PUBLIC	??1Value@Json@@QAE@XZ				; Json::Value::~Value
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
;	COMDAT ??1Value@Json@@QAE@XZ
_TEXT	SEGMENT
??1Value@Json@@QAE@XZ PROC				; Json::Value::~Value, COMDAT
; _this$ = ecx

; 474  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 475  :    switch ( type_ )

  00003	0f be 46 08	 movsx	 eax, BYTE PTR [esi+8]
  00007	57		 push	 edi
  00008	83 f8 04	 cmp	 eax, 4
  0000b	74 1e		 je	 SHORT $LN5@Value@3
  0000d	83 c0 fa	 add	 eax, -6			; fffffffaH
  00010	83 f8 01	 cmp	 eax, 1
  00013	77 2d		 ja	 SHORT $LN4@Value@3

; 486  :       break;
; 487  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 488  :    case arrayValue:
; 489  :    case objectValue:
; 490  :       delete value_.map_;

  00015	8b 3e		 mov	 edi, DWORD PTR [esi]
  00017	85 ff		 test	 edi, edi
  00019	74 27		 je	 SHORT $LN4@Value@3
  0001b	8b cf		 mov	 ecx, edi
  0001d	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
  00022	57		 push	 edi
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	59		 pop	 ecx

; 491  :       break;

  00029	eb 17		 jmp	 SHORT $LN4@Value@3
$LN5@Value@3:

; 476  :    {
; 477  :    case nullValue:
; 478  :    case intValue:
; 479  :    case uintValue:
; 480  :    case realValue:
; 481  :    case booleanValue:
; 482  :       break;
; 483  :    case stringValue:
; 484  :       if ( allocated_ )

  0002b	f7 46 08 00 01
	00 00		 test	 DWORD PTR [esi+8], 256	; 00000100H
  00032	74 0e		 je	 SHORT $LN4@Value@3

; 485  :          valueAllocator()->releaseStringValue( value_.string_ );

  00034	e8 00 00 00 00	 call	 ?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	ff 36		 push	 DWORD PTR [esi]
  0003d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003f	ff 50 10	 call	 DWORD PTR [eax+16]
$LN4@Value@3:

; 492  : #else
; 493  :    case arrayValue:
; 494  :       arrayAllocator()->destructArray( value_.array_ );
; 495  :       break;
; 496  :    case objectValue:
; 497  :       mapAllocator()->destructMap( value_.map_ );
; 498  :       break;
; 499  : #endif
; 500  :    default:
; 501  :       JSON_ASSERT_UNREACHABLE;
; 502  :    }
; 503  : 
; 504  :    if ( comments_ )

  00042	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	85 c9		 test	 ecx, ecx
  00049	74 07		 je	 SHORT $LN13@Value@3

; 505  :       delete[] comments_;

  0004b	6a 03		 push	 3
  0004d	e8 00 00 00 00	 call	 ??_ECommentInfo@Value@Json@@QAEPAXI@Z
$LN13@Value@3:

; 506  : }

  00052	c3		 ret	 0
??1Value@Json@@QAE@XZ ENDP				; Json::Value::~Value
_TEXT	ENDS
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	?asString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Json::Value::asString
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?asString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T49300 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?asString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Json::Value::asString, COMDAT
; _this$ = ecx

; 687  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 688  :    switch ( type_ )

  00004	0f be 41 08	 movsx	 eax, BYTE PTR [ecx+8]
  00008	33 d2		 xor	 edx, edx
  0000a	2b c2		 sub	 eax, edx
  0000c	89 55 fc	 mov	 DWORD PTR $T49300[ebp], edx
  0000f	74 27		 je	 SHORT $LN5@asString
  00011	83 e8 04	 sub	 eax, 4
  00014	74 14		 je	 SHORT $LN4@asString
  00016	48		 dec	 eax

; 696  :    case intValue:
; 697  :    case uintValue:
; 698  :    case realValue:
; 699  :    case arrayValue:
; 700  :    case objectValue:
; 701  :       JSON_ASSERT_MESSAGE( false, "Type is not convertible to string" );
; 702  :    default:
; 703  :       JSON_ASSERT_UNREACHABLE;
; 704  :    }
; 705  :    return ""; // unreachable

  00017	75 1f		 jne	 SHORT $LN5@asString

; 694  :    case booleanValue:
; 695  :       return value_.bool_ ? "true" : "false";

  00019	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04LOAJBDKD@true?$AA@
  0001e	38 11		 cmp	 BYTE PTR [ecx], dl
  00020	75 05		 jne	 SHORT $LN13@asString
  00022	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05LAPONLG@false?$AA@
$LN13@asString:
  00027	50		 push	 eax
  00028	eb 13		 jmp	 SHORT $LN16@asString
$LN4@asString:

; 692  :    case stringValue:
; 693  :       return value_.string_ ? value_.string_ : "";

  0002a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0002c	3b ca		 cmp	 ecx, edx
  0002e	75 05		 jne	 SHORT $LN11@asString
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN11@asString:
  00035	51		 push	 ecx
  00036	eb 05		 jmp	 SHORT $LN16@asString
$LN5@asString:

; 689  :    {
; 690  :    case nullValue:
; 691  :       return "";

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN16@asString:
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00040	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00045	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 706  : }

  00048	c9		 leave
  00049	c2 04 00	 ret	 4
?asString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Json::Value::asString
_TEXT	ENDS
PUBLIC	??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ ; std::_Pair_base<Json::Value::CZString const ,Json::Value>::~_Pair_base<Json::Value::CZString const ,Json::Value>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ PROC ; std::_Pair_base<Json::Value::CZString const ,Json::Value>::~_Pair_base<Json::Value::CZString const ,Json::Value>, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00015	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00018	e8 00 00 00 00	 call	 ??1Value@Json@@QAE@XZ	; Json::Value::~Value
  0001d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  00028	e8 00 00 00 00	 call	 __EH_epilog3
  0002d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__ehhandler$??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ ENDP ; std::_Pair_base<Json::Value::CZString const ,Json::Value>::~_Pair_base<Json::Value::CZString const ,Json::Value>
PUBLIC	?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::getComment
; Function compile flags: /Ogsp
;	COMDAT ?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
_TEXT	SEGMENT
$T49316 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_placement$ = 12					; size = 4
?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z PROC ; Json::Value::getComment, COMDAT
; _this$ = ecx

; 1353 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	83 65 fc 00	 and	 DWORD PTR $T49316[ebp], 0
  00008	56		 push	 esi

; 1354 :    if ( hasComment(placement) )

  00009	8b 75 0c	 mov	 esi, DWORD PTR _placement$[ebp]
  0000c	56		 push	 esi
  0000d	8b d1		 mov	 edx, ecx
  0000f	e8 00 00 00 00	 call	 ?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ; Json::Value::hasComment

; 1355 :       return comments_[placement].comment_;

  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	84 c0		 test	 al, al
  00019	74 08		 je	 SHORT $LN1@getComment
  0001b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0001e	ff 34 b0	 push	 DWORD PTR [eax+esi*4]
  00021	eb 05		 jmp	 SHORT $LN6@getComment
$LN1@getComment:

; 1356 :    return "";

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN6@getComment:
  00028	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00030	5e		 pop	 esi

; 1357 : }

  00031	c9		 leave
  00032	c2 08 00	 ret	 8
?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ENDP ; Json::Value::getComment
_TEXT	ENDS
PUBLIC	??0PathArgument@Json@@QAE@PBD@Z			; Json::PathArgument::PathArgument
; Function compile flags: /Ogsp
;	COMDAT ??0PathArgument@Json@@QAE@PBD@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
??0PathArgument@Json@@QAE@PBD@Z PROC			; Json::PathArgument::PathArgument, COMDAT
; _this$ = ecx

; 1529 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR _key$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0000e	c7 46 20 02 00
	00 00		 mov	 DWORD PTR [esi+32], 2

; 1530 : }

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0PathArgument@Json@@QAE@PBD@Z ENDP			; Json::PathArgument::PathArgument
_TEXT	ENDS
PUBLIC	??0PathArgument@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::PathArgument::PathArgument
; Function compile flags: /Ogsp
;	COMDAT ??0PathArgument@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
??0PathArgument@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::PathArgument::PathArgument, COMDAT
; _this$ = ecx

; 1536 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00006	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	72 02		 jb	 SHORT $LN8@PathArgume
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN8@PathArgume:
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00017	c7 46 20 02 00
	00 00		 mov	 DWORD PTR [esi+32], 2

; 1537 : }

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0PathArgument@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::PathArgument::PathArgument
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 702  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 703  : 		_Tidy();
; 704  : 		assign(_STD forward<_Myt>(_Right));

  00004	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 705  : 		}

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@V34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@$$QAV23@@Z ; std::_Cons_val<std::allocator<Json::PathArgument>,Json::PathArgument,Json::PathArgument>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@V34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@$$QAV23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@V34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@$$QAV23@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@V34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@$$QAV23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@V34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@$$QAV23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@V34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@$$QAV23@@Z
_TEXT	SEGMENT
$T49429 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@V34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@$$QAV23@@Z PROC ; std::_Cons_val<std::allocator<Json::PathArgument>,Json::PathArgument,Json::PathArgument>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@V34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@$$QAV23@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T49429[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@3
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0PathArgument@Json@@QAE@ABV01@@Z
$LN7@Cons_val@3:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@V34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@$$QAV23@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T49429[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@V34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@$$QAV23@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@V34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@$$QAV23@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@V34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@$$QAV23@@Z ENDP ; std::_Cons_val<std::allocator<Json::PathArgument>,Json::PathArgument,Json::PathArgument>
PUBLIC	??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@ABV34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@ABV23@@Z ; std::_Cons_val<std::allocator<Json::PathArgument>,Json::PathArgument,Json::PathArgument const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@ABV34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@ABV23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@ABV34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@ABV23@@Z PROC ; std::_Cons_val<std::allocator<Json::PathArgument>,Json::PathArgument,Json::PathArgument const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@VPathArgument@Json@@ABV12@@std@@YAXPAVPathArgument@Json@@ABV12@@Z ; std::_Construct<Json::PathArgument,Json::PathArgument const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@ABV34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@ABV23@@Z ENDP ; std::_Cons_val<std::allocator<Json::PathArgument>,Json::PathArgument,Json::PathArgument const &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z$0
__ehfuncinfo$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z
_TEXT	SEGMENT
$T49454 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T49454[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@4
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN3@construct@4:

; 203  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T49454[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@$$QAV32@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0e		 jmp	 SHORT $LN21@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	6a 00		 push	 0
  0000b	6a 01		 push	 1
  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00014	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN21@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00017	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001a	75 ed		 jne	 SHORT $LL3@Destroy_ra
  0001c	5e		 pop	 esi

; 98   : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 10		 jmp	 SHORT $LN15@Move
$LL3@Move:

; 2514 : 		*_Dest = _STD move(*_First);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00012	83 45 10 1c	 add	 DWORD PTR __Dest$[ebp], 28 ; 0000001cH
  00016	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN15@Move:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	75 eb		 jne	 SHORT $LL3@Move

; 2515 : 	return (_Dest);

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	5e		 pop	 esi

; 2516 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@@Z ; std::_Dest_val<std::allocator<Json::PathArgument>,Json::PathArgument>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@@Z PROC ; std::_Dest_val<std::allocator<Json::PathArgument>,Json::PathArgument>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	6a 00		 push	 0
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 288  : 	}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??$_Dest_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@@Z ENDP ; std::_Dest_val<std::allocator<Json::PathArgument>,Json::PathArgument>
_TEXT	ENDS
PUBLIC	??0Value@Json@@QAE@ABV01@@Z			; Json::Value::Value
PUBLIC	??$?0$$CBVCZString@Value@Json@@V12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAU01@@Z ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString const ,Json::Value>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$?0$$CBVCZString@Value@Json@@V12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0$$CBVCZString@Value@Json@@V12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAU01@@Z$1
__ehfuncinfo$??$?0$$CBVCZString@Value@Json@@V12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0$$CBVCZString@Value@Json@@V12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??$?0$$CBVCZString@Value@Json@@V12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??$?0$$CBVCZString@Value@Json@@V12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAU01@@Z PROC ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString const ,Json::Value>, COMDAT
; _this$ = ecx

; 195  : 		{	// construct from compatible pair

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$?0$$CBVCZString@Value@Json@@V12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAU01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0CZString@Value@Json@@QAE@ABV012@@Z ; Json::Value::CZString::CZString
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	83 c7 08	 add	 edi, 8
  00021	57		 push	 edi
  00022	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00025	e8 00 00 00 00	 call	 ??0Value@Json@@QAE@ABV01@@Z ; Json::Value::Value

; 196  : 		}

  0002a	8b c6		 mov	 eax, esi
  0002c	e8 00 00 00 00	 call	 __EH_epilog3
  00031	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0$$CBVCZString@Value@Json@@V12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAU01@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__ehhandler$??$?0$$CBVCZString@Value@Json@@V12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAU01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0$$CBVCZString@Value@Json@@V12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAU01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0$$CBVCZString@Value@Json@@V12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAU01@@Z ENDP ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString const ,Json::Value>
PUBLIC	?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ	; Json::ValueIteratorBase::key
;	COMDAT xdata$x
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	SEGMENT
__unwindtable$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ$0
__ehfuncinfo$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_valueiterator.inl
xdata$x	ENDS
;	COMDAT ?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ
_TEXT	SEGMENT
_czstring$ = -24					; size = 8
$T49626 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ PROC	; Json::ValueIteratorBase::key, COMDAT
; _this$ = ecx

; 157  : {

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	83 65 f0 00	 and	 DWORD PTR $T49626[ebp], 0

; 158  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 159  :    const Value::CZString czstring = (*current_).first;

  00010	8b 01		 mov	 eax, DWORD PTR [ecx]
  00012	83 c0 0c	 add	 eax, 12			; 0000000cH
  00015	50		 push	 eax
  00016	8d 4d e8	 lea	 ecx, DWORD PTR _czstring$[ebp]
  00019	e8 00 00 00 00	 call	 ??0CZString@Value@Json@@QAE@ABV012@@Z ; Json::Value::CZString::CZString

; 160  :    if ( czstring.c_str() )

  0001e	8b 45 e8	 mov	 eax, DWORD PTR _czstring$[ebp]
  00021	33 db		 xor	 ebx, ebx
  00023	43		 inc	 ebx
  00024	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00027	85 c0		 test	 eax, eax
  00029	74 39		 je	 SHORT $LN2@key

; 161  :    {
; 162  :       if ( czstring.isStaticString() )

  0002b	83 7d ec 00	 cmp	 DWORD PTR _czstring$[ebp+4], 0
  0002f	75 16		 jne	 SHORT $LN1@key

; 163  :          return Value( StaticString( czstring.c_str() ) );

  00031	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00034	c6 46 08 04	 mov	 BYTE PTR [esi+8], 4
  00038	81 66 08 ff fe
	ff ff		 and	 DWORD PTR [esi+8], -257	; fffffeffH
  0003f	83 66 0c 00	 and	 DWORD PTR [esi+12], 0
  00043	89 06		 mov	 DWORD PTR [esi], eax
  00045	eb 2c		 jmp	 SHORT $LN33@key
$LN1@key:

; 164  :       return Value( czstring.c_str() );

  00047	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??0Value@Json@@QAE@PBD@Z ; Json::Value::Value
  00050	8d 4d e8	 lea	 ecx, DWORD PTR _czstring$[ebp]
  00053	89 5d f0	 mov	 DWORD PTR $T49626[ebp], ebx
  00056	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0005a	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  0005f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00062	eb 20		 jmp	 SHORT $LN3@key
$LN2@key:

; 165  :    }
; 166  :    return Value( czstring.index() );

  00064	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00067	8b 45 ec	 mov	 eax, DWORD PTR _czstring$[ebp+4]
  0006a	83 66 0c 00	 and	 DWORD PTR [esi+12], 0
  0006e	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  00071	89 06		 mov	 DWORD PTR [esi], eax
$LN33@key:
  00073	8d 4d e8	 lea	 ecx, DWORD PTR _czstring$[ebp]
  00076	89 5d f0	 mov	 DWORD PTR $T49626[ebp], ebx
  00079	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0007d	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  00082	8b c6		 mov	 eax, esi
$LN3@key:

; 167  : #else
; 168  :    if ( isArray_ )
; 169  :       return Value( ValueInternalArray::indexOf( iterator_.array_ ) );
; 170  :    bool isStatic;
; 171  :    const char *memberName = ValueInternalMap::key( iterator_.map_, isStatic );
; 172  :    if ( isStatic )
; 173  :       return Value( StaticString( memberName ) );
; 174  :    return Value( memberName );
; 175  : #endif
; 176  : }

  00084	e8 00 00 00 00	 call	 __EH_epilog3
  00089	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _czstring$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__unwindfunclet$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ$1:
  00008	8b 45 f0	 mov	 eax, DWORD PTR $T49626[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN7@key
  00014	83 65 f0 fe	 and	 DWORD PTR $T49626[ebp], -2 ; fffffffeH
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1Value@Json@@QAE@XZ	; Json::Value::~Value
$LN7@key:
  00020	c3		 ret	 0
__ehhandler$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ ENDP	; Json::ValueIteratorBase::key
PUBLIC	??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ ; std::pair<Json::Value::CZString const ,Json::Value>::~pair<Json::Value::CZString const ,Json::Value>
; Function compile flags: /Ogsp
;	COMDAT ??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ PROC ; std::pair<Json::Value::CZString const ,Json::Value>::~pair<Json::Value::CZString const ,Json::Value>, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ ENDP ; std::pair<Json::Value::CZString const ,Json::Value>::~pair<Json::Value::CZString const ,Json::Value>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z
_TEXT	SEGMENT
$T49707 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z PROC ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T49707[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@4
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN7@Cons_val@4:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T49707[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z ENDP ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$49726 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$49726[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z
_TEXT	SEGMENT
__Cat$49733 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z PROC ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$49733[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z ENDP ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VPathArgument@Json@@@std@@@std@@YAXPAVPathArgument@Json@@0AAV?$allocator@VPathArgument@Json@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Json::PathArgument> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VPathArgument@Json@@@std@@@std@@YAXPAVPathArgument@Json@@0AAV?$allocator@VPathArgument@Json@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@VPathArgument@Json@@@std@@@std@@YAXPAVPathArgument@Json@@0AAV?$allocator@VPathArgument@Json@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Json::PathArgument> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0e		 jmp	 SHORT $LN23@Destroy_ra@2
$LL3@Destroy_ra@2:

; 97   : 		_Dest_val(_Al, _First);

  00009	6a 00		 push	 0
  0000b	6a 01		 push	 1
  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00014	83 c6 24	 add	 esi, 36			; 00000024H
$LN23@Destroy_ra@2:

; 96   : 	for (; _First != _Last; ++_First)

  00017	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001a	75 ed		 jne	 SHORT $LL3@Destroy_ra@2
  0001c	5e		 pop	 esi

; 98   : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Destroy_range@V?$allocator@VPathArgument@Json@@@std@@@std@@YAXPAVPathArgument@Json@@0AAV?$allocator@VPathArgument@Json@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Json::PathArgument> >
_TEXT	ENDS
PUBLIC	??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAEPAXI@Z ; std::pair<Json::Value::CZString const ,Json::Value>::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAEPAXI@Z PROC ; std::pair<Json::Value::CZString const ,Json::Value>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@7
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@7:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAEPAXI@Z ENDP ; std::pair<Json::Value::CZString const ,Json::Value>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 37		 je	 SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	56		 push	 esi
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00025	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0002a	83 45 10 1c	 add	 DWORD PTR __Dest$[ebp], 28 ; 0000001cH
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	83 c6 1c	 add	 esi, 28			; 0000001cH
  00034	eb e3		 jmp	 SHORT $LL6@Uninit_mov
__catch$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00036	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00039	eb 0c		 jmp	 SHORT $LN34@Uninit_mov
$LL3@Uninit_mov:

; 434  : 		_Dest_val(_Al, _Next);

  0003b	6a 01		 push	 1
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00044	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN34@Uninit_mov:

; 435  : 	_RERAISE;

  00047	6a 00		 push	 0
  00049	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  0004c	75 ed		 jne	 SHORT $LL3@Uninit_mov
  0004e	6a 00		 push	 0
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN35@Uninit_mov:
$LN4@Uninit_mov:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00055	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00058	e8 00 00 00 00	 call	 __EH_epilog3
  0005d	c3		 ret	 0
$LN33@Uninit_mov:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@V12@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument>,Json::PathArgument>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@V12@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@V12@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@V12@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@V12@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@V12@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@V12@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@V12@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@V12@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@V12@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@V12@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument>,Json::PathArgument>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@V12@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov@2:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 37		 je	 SHORT $LN4@Uninit_mov@2

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	56		 push	 esi
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00025	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@V34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@$$QAV23@@Z ; std::_Cons_val<std::allocator<Json::PathArgument>,Json::PathArgument,Json::PathArgument>
  0002a	83 45 10 24	 add	 DWORD PTR __Dest$[ebp], 36 ; 00000024H
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	83 c6 24	 add	 esi, 36			; 00000024H
  00034	eb e3		 jmp	 SHORT $LL6@Uninit_mov@2
__catch$??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@V12@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00036	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00039	eb 0c		 jmp	 SHORT $LN36@Uninit_mov@2
$LL3@Uninit_mov@2:

; 434  : 		_Dest_val(_Al, _Next);

  0003b	6a 01		 push	 1
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00044	83 c6 24	 add	 esi, 36			; 00000024H
$LN36@Uninit_mov@2:

; 435  : 	_RERAISE;

  00047	6a 00		 push	 0
  00049	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  0004c	75 ed		 jne	 SHORT $LL3@Uninit_mov@2
  0004e	6a 00		 push	 0
  00050	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN37@Uninit_mov@2:
$LN4@Uninit_mov@2:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00055	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00058	e8 00 00 00 00	 call	 __EH_epilog3
  0005d	c3		 ret	 0
$LN35@Uninit_mov@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@V12@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@V12@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@V12@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument>,Json::PathArgument>
PUBLIC	??$construct@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::construct<std::pair<Json::Value::CZString const ,Json::Value> &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z$0
__ehfuncinfo$??$construct@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z
_TEXT	SEGMENT
$T49979 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z PROC ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::construct<std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T49979[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN3@construct@5
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$?0$$CBVCZString@Value@Json@@V12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAU01@@Z ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString const ,Json::Value>
$LN3@construct@5:

; 209  : 		}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T49979[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z ENDP ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::construct<std::pair<Json::Value::CZString const ,Json::Value> &>
PUBLIC	?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Cat$50006 = 12					; size = 1
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00003	ff 75 0c	 push	 DWORD PTR __Cat$50006[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1271 : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ
_TEXT	SEGMENT
__Cat$50031 = -4					; size = 1
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	85 c0		 test	 eax, eax
  0000b	74 1a		 je	 SHORT $LN12@Tidy@3

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0000d	ff 75 fc	 push	 DWORD PTR __Cat$50031[ebp]
  00010	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00013	51		 push	 ecx
  00014	ff 76 04	 push	 DWORD PTR [esi+4]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0001d	ff 36		 push	 DWORD PTR [esi]
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00024	83 c4 14	 add	 esp, 20			; 00000014H
$LN12@Tidy@3:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00027	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  0002a	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0002e	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00032	5e		 pop	 esi

; 1312 : 		}

  00033	c9		 leave
  00034	c3		 ret	 0
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$50142 = 16					; size = 1
__Cat$50118 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __First_arg$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000a	3b 5d 10	 cmp	 ebx, DWORD PTR __Last_arg$[ebp]
  0000d	74 2a		 je	 SHORT $LN1@erase@4

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	57		 push	 edi
  00013	ff 75 10	 push	 DWORD PTR __Cat$50118[ebp]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001b	e8 00 00 00 00	 call	 ??$_Move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00020	ff 75 10	 push	 DWORD PTR __Cat$50142[ebp]
  00023	8b f8		 mov	 edi, eax
  00025	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00028	50		 push	 eax
  00029	ff 76 04	 push	 DWORD PTR [esi+4]
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00032	83 c4 20	 add	 esp, 32			; 00000020H

; 1211 : 			this->_Mylast = _Ptr;

  00035	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00038	5f		 pop	 edi
$LN1@erase@4:

; 1212 : 			}
; 1213 : 		return (_Make_iter(_First));

  00039	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	5e		 pop	 esi
  0003d	89 18		 mov	 DWORD PTR [eax], ebx
  0003f	5b		 pop	 ebx

; 1214 : 		}

  00040	5d		 pop	 ebp
  00041	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VPathArgument@Json@@@std@@@std@@YAXPAVPathArgument@Json@@0AAV?$allocator@VPathArgument@Json@@@0@@Z ; std::_Destroy_range<std::allocator<Json::PathArgument> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VPathArgument@Json@@@std@@@std@@YAXPAVPathArgument@Json@@0AAV?$allocator@VPathArgument@Json@@@0@@Z
_TEXT	SEGMENT
__Cat$50174 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@VPathArgument@Json@@@std@@@std@@YAXPAVPathArgument@Json@@0AAV?$allocator@VPathArgument@Json@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Json::PathArgument> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$50174[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@VPathArgument@Json@@@std@@@std@@YAXPAVPathArgument@Json@@0AAV?$allocator@VPathArgument@Json@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Json::PathArgument> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Destroy_range@V?$allocator@VPathArgument@Json@@@std@@@std@@YAXPAVPathArgument@Json@@0AAV?$allocator@VPathArgument@Json@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Json::PathArgument> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$50182 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$50182[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@@Z ; std::_Uninitialized_move<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@@Z
_TEXT	SEGMENT
__Cat$50192 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@@Z PROC ; std::_Uninitialized_move<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$50192[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@V12@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument>,Json::PathArgument>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@@Z ENDP ; std::_Uninitialized_move<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@U?$pair@$$CBVCZString@Value@Json@@V23@@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@0@PAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU20@@Z ; std::_Cons_val<std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@U?$pair@$$CBVCZString@Value@Json@@V23@@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@0@PAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU20@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@U?$pair@$$CBVCZString@Value@Json@@V23@@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@0@PAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU20@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@U?$pair@$$CBVCZString@Value@Json@@V23@@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@0@PAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU20@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@U?$pair@$$CBVCZString@Value@Json@@V23@@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@0@PAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU20@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@U?$pair@$$CBVCZString@Value@Json@@V23@@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@0@PAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU20@@Z
_TEXT	SEGMENT
$T50215 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@U?$pair@$$CBVCZString@Value@Json@@V23@@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@0@PAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU20@@Z PROC ; std::_Cons_val<std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Cons_val@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@U?$pair@$$CBVCZString@Value@Json@@V23@@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@0@PAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU20@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T50215[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 08		 je	 SHORT $LN7@Cons_val@5
  0001a	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$?0$$CBVCZString@Value@Json@@V12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAU01@@Z ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString const ,Json::Value>
$LN7@Cons_val@5:

; 281  : 	}

  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@U?$pair@$$CBVCZString@Value@Json@@V23@@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@0@PAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU20@@Z$0:
  00000	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T50215[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Cons_val@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@U?$pair@$$CBVCZString@Value@Json@@V23@@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@0@PAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU20@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@U?$pair@$$CBVCZString@Value@Json@@V23@@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@0@PAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU20@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@U?$pair@$$CBVCZString@Value@Json@@V23@@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@0@PAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU20@@Z ENDP ; std::_Cons_val<std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAXPAU?$pair@$$CBVCZString@Value@Json@@V23@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAXPAU?$pair@$$CBVCZString@Value@Json@@V23@@0@@Z PROC ; std::_Destroy<std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 64   : 	}

  00006	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  00007	e9 00 00 00 00	 jmp	 ??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
??$_Destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAXPAU?$pair@$$CBVCZString@Value@Json@@V23@@0@@Z ENDP ; std::_Destroy<std::pair<Json::Value::CZString const ,Json::Value> >
_TEXT	ENDS
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXPAVPathArgument@Json@@0@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXPAVPathArgument@Json@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Cat$50262 = 12					; size = 1
__Last$ = 12						; size = 4
?_Destroy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXPAVPathArgument@Json@@0@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00003	ff 75 0c	 push	 DWORD PTR __Cat$50262[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@VPathArgument@Json@@@std@@@std@@YAXPAVPathArgument@Json@@0AAV?$allocator@VPathArgument@Json@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Json::PathArgument> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1271 : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?_Destroy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXPAVPathArgument@Json@@0@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Destroy
_TEXT	ENDS
PUBLIC	?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
$T50270 = -4						; size = 4
?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T50270[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
_TEXT	ENDS
PUBLIC	??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
PUBLIC	??$_Umove@PAVPathArgument@Json@@@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEPAVPathArgument@Json@@PAV23@00@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Umove<Json::PathArgument *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAVPathArgument@Json@@@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEPAVPathArgument@Json@@PAV23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAVPathArgument@Json@@@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEPAVPathArgument@Json@@PAV23@00@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Umove<Json::PathArgument *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@@Z ; std::_Uninitialized_move<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAVPathArgument@Json@@@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEPAVPathArgument@Json@@PAV23@00@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Umove<Json::PathArgument *>
_TEXT	ENDS
PUBLIC	??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$0
__unwindtable$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$2
__ehfuncinfo$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
__Wherenode$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT
; _this$ = ecx

; 586  : 		_Nodeptr _Buynode(_Valty&& _Val)

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

  0000e	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode

; 589  : 
; 590  : 		_TRY_BEGIN
; 591  : 		_Cons_val(this->_Alval, _STD addressof(this->_Myval(_Wherenode)),
; 592  : 			_STD forward<_Valty>(_Val));

  00013	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  00016	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  0001a	8b f8		 mov	 edi, eax
  0001c	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  0001f	50		 push	 eax
  00020	83 c6 0d	 add	 esi, 13			; 0000000dH
  00023	56		 push	 esi
  00024	89 7d ec	 mov	 DWORD PTR __Wherenode$[ebp], edi
  00027	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@U?$pair@$$CBVCZString@Value@Json@@V23@@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@0@PAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU20@@Z ; std::_Cons_val<std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 596  : 		_CATCH_END
; 597  : 
; 598  : 		return (_Wherenode);

  0002f	8b c7		 mov	 eax, edi

; 599  : 		}

  00031	e8 00 00 00 00	 call	 __EH_epilog3
  00036	c2 04 00	 ret	 4
__catch$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$0:

; 593  : 		_CATCH_ALL
; 594  : 		this->_Alnod.deallocate(_Wherenode, 1);

  00039	ff 75 ec	 push	 DWORD PTR __Wherenode$[ebp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00041	59		 pop	 ecx

; 595  : 		_RERAISE;

  00042	6a 00		 push	 0
  00044	6a 00		 push	 0
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN19@Buynode@2:
$LN18@Buynode@2:
  0004b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>
PUBLIC	?destroy@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z PROC ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ

; 214  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?destroy@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z ENDP ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::destroy
_TEXT	ENDS
PUBLIC	??_7StyledWriter@Json@@6B@			; Json::StyledWriter::`vftable'
PUBLIC	??1StyledWriter@Json@@UAE@XZ			; Json::StyledWriter::~StyledWriter
PUBLIC	??_R4StyledWriter@Json@@6B@			; Json::StyledWriter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStyledWriter@Json@@@8			; Json::StyledWriter `RTTI Type Descriptor'
PUBLIC	??_R3StyledWriter@Json@@8			; Json::StyledWriter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StyledWriter@Json@@8			; Json::StyledWriter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StyledWriter@Json@@8		; Json::StyledWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Writer@Json@@8			; Json::Writer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVWriter@Json@@@8				; Json::Writer `RTTI Type Descriptor'
PUBLIC	??_R3Writer@Json@@8				; Json::Writer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Writer@Json@@8				; Json::Writer::`RTTI Base Class Array'
EXTRN	??1Writer@Json@@UAE@XZ:PROC			; Json::Writer::~Writer
EXTRN	??_EStyledWriter@Json@@UAEPAXI@Z:PROC		; Json::StyledWriter::`vector deleting destructor'
EXTRN	?write@StyledWriter@Json@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@@Z:PROC ; Json::StyledWriter::write
;	COMDAT ??_R2Writer@Json@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
rdata$r	SEGMENT
??_R2Writer@Json@@8 DD FLAT:??_R1A@?0A@EA@Writer@Json@@8 ; Json::Writer::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Writer@Json@@8
rdata$r	SEGMENT
??_R3Writer@Json@@8 DD 00H				; Json::Writer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Writer@Json@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVWriter@Json@@@8
_DATA	SEGMENT
??_R0?AVWriter@Json@@@8 DD FLAT:??_7type_info@@6B@	; Json::Writer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVWriter@Json@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Writer@Json@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Writer@Json@@8 DD FLAT:??_R0?AVWriter@Json@@@8 ; Json::Writer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Writer@Json@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StyledWriter@Json@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StyledWriter@Json@@8 DD FLAT:??_R0?AVStyledWriter@Json@@@8 ; Json::StyledWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StyledWriter@Json@@8
rdata$r	ENDS
;	COMDAT ??_R2StyledWriter@Json@@8
rdata$r	SEGMENT
??_R2StyledWriter@Json@@8 DD FLAT:??_R1A@?0A@EA@StyledWriter@Json@@8 ; Json::StyledWriter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Writer@Json@@8
rdata$r	ENDS
;	COMDAT ??_R3StyledWriter@Json@@8
rdata$r	SEGMENT
??_R3StyledWriter@Json@@8 DD 00H			; Json::StyledWriter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2StyledWriter@Json@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStyledWriter@Json@@@8
_DATA	SEGMENT
??_R0?AVStyledWriter@Json@@@8 DD FLAT:??_7type_info@@6B@ ; Json::StyledWriter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStyledWriter@Json@@', 00H
_DATA	ENDS
;	COMDAT ??_R4StyledWriter@Json@@6B@
rdata$r	SEGMENT
??_R4StyledWriter@Json@@6B@ DD 00H			; Json::StyledWriter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStyledWriter@Json@@@8
	DD	FLAT:??_R3StyledWriter@Json@@8
rdata$r	ENDS
;	COMDAT ??_7StyledWriter@Json@@6B@
CONST	SEGMENT
??_7StyledWriter@Json@@6B@ DD FLAT:??_R4StyledWriter@Json@@6B@ ; Json::StyledWriter::`vftable'
	DD	FLAT:??_EStyledWriter@Json@@UAEPAXI@Z
	DD	FLAT:?write@StyledWriter@Json@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@@Z
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\writer.h
CONST	ENDS
;	COMDAT ??1StyledWriter@Json@@UAE@XZ
_TEXT	SEGMENT
??1StyledWriter@Json@@UAE@XZ PROC			; Json::StyledWriter::~StyledWriter, COMDAT
; _this$ = ecx

; 69   :       virtual ~StyledWriter(){}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	6a 00		 push	 0
  00005	6a 01		 push	 1
  00007	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7StyledWriter@Json@@6B@
  00010	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00015	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00018	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
  0001d	8b ce		 mov	 ecx, esi
  0001f	5e		 pop	 esi
  00020	e9 00 00 00 00	 jmp	 ??1Writer@Json@@UAE@XZ	; Json::Writer::~Writer
??1StyledWriter@Json@@UAE@XZ ENDP			; Json::StyledWriter::~StyledWriter
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GStyledWriter@Json@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GStyledWriter@Json@@UAEPAXI@Z PROC			; Json::StyledWriter::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1StyledWriter@Json@@UAE@XZ ; Json::StyledWriter::~StyledWriter
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@8
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@8:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GStyledWriter@Json@@UAEPAXI@Z ENDP			; Json::StyledWriter::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Json::Value::toStyledString
EXTRN	??0StyledWriter@Json@@QAE@XZ:PROC		; Json::StyledWriter::StyledWriter
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	SEGMENT
__unwindtable$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
__ehfuncinfo$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -84				; size = 4
$T50405 = -80						; size = 4
_writer$ = -76						; size = 57
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Json::Value::toStyledString, COMDAT
; _this$ = ecx

; 1362 : {

  00000	6a 48		 push	 72			; 00000048H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	83 65 b0 00	 and	 DWORD PTR $T50405[ebp], 0
  00013	8b d9		 mov	 ebx, ecx

; 1363 :    StyledWriter writer;

  00015	8d 4d b4	 lea	 ecx, DWORD PTR _writer$[ebp]
  00018	89 7d ac	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], edi
  0001b	e8 00 00 00 00	 call	 ??0StyledWriter@Json@@QAE@XZ ; Json::StyledWriter::StyledWriter
  00020	33 f6		 xor	 esi, esi

; 1364 :    return writer.write( *this );

  00022	53		 push	 ebx
  00023	46		 inc	 esi
  00024	57		 push	 edi
  00025	8d 4d b4	 lea	 ecx, DWORD PTR _writer$[ebp]
  00028	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  0002b	e8 00 00 00 00	 call	 ?write@StyledWriter@Json@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@@Z ; Json::StyledWriter::write
  00030	8d 4d b4	 lea	 ecx, DWORD PTR _writer$[ebp]
  00033	89 75 b0	 mov	 DWORD PTR $T50405[ebp], esi
  00036	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0003a	e8 00 00 00 00	 call	 ??1StyledWriter@Json@@UAE@XZ ; Json::StyledWriter::~StyledWriter
  0003f	8b c7		 mov	 eax, edi

; 1365 : }

  00041	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00046	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR _writer$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1StyledWriter@Json@@UAE@XZ ; Json::StyledWriter::~StyledWriter
__unwindfunclet$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
  00008	8b 45 b0	 mov	 eax, DWORD PTR $T50405[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN5@toStyledSt
  00014	83 65 b0 fe	 and	 DWORD PTR $T50405[ebp], -2 ; fffffffeH
  00018	8b 4d ac	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@toStyledSt:
  00020	c3		 ret	 0
__ehhandler$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Json::Value::toStyledString
PUBLIC	?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Cat$50477 = 8						; size = 1
__Ptr$35897 = 8						; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb 49 92 24
	09		 cmp	 ebx, 153391689		; 09249249H
  00017	76 0a		 jbe	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN44@reserve@2:
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  00023	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00026	2b 06		 sub	 eax, DWORD PTR [esi]
  00028	6a 1c		 push	 28			; 0000001cH
  0002a	99		 cdq
  0002b	59		 pop	 ecx
  0002c	f7 f9		 idiv	 ecx
  0002e	3b c3		 cmp	 eax, ebx
  00030	73 67		 jae	 SHORT $LN3@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00032	6a 00		 push	 0
  00034	53		 push	 ebx
  00035	e8 00 00 00 00	 call	 ??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00040	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00043	52		 push	 edx
  00044	89 45 08	 mov	 DWORD PTR __Ptr$35897[ebp], eax
  00047	ff 75 08	 push	 DWORD PTR __Ptr$35897[ebp]
  0004a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004d	50		 push	 eax
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00054	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00056	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00059	83 c4 18	 add	 esp, 24			; 00000018H
  0005c	2b c1		 sub	 eax, ecx
  0005e	6a 1c		 push	 28			; 0000001cH
  00060	99		 cdq
  00061	5f		 pop	 edi
  00062	f7 ff		 idiv	 edi
  00064	8b f8		 mov	 edi, eax

; 761  : 			if (this->_Myfirst != 0)

  00066	85 c9		 test	 ecx, ecx
  00068	74 1a		 je	 SHORT $LN37@reserve@2

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  0006a	ff 75 08	 push	 DWORD PTR __Cat$50477[ebp]
  0006d	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00070	50		 push	 eax
  00071	ff 76 04	 push	 DWORD PTR [esi+4]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  0007a	ff 36		 push	 DWORD PTR [esi]
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00081	83 c4 14	 add	 esp, 20			; 00000014H
$LN37@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  00084	8b 45 08	 mov	 eax, DWORD PTR __Ptr$35897[ebp]
  00087	6b db 1c	 imul	 ebx, 28			; 0000001cH

; 770  : 			this->_Mylast = _Ptr + _Size;

  0008a	6b ff 1c	 imul	 edi, 28			; 0000001cH
  0008d	03 d8		 add	 ebx, eax
  0008f	03 f8		 add	 edi, eax
  00091	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00094	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  00097	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve@2:

; 772  : 			}
; 773  : 		}

  00099	e8 00 00 00 00	 call	 __EH_epilog3
  0009e	c2 04 00	 ret	 4
__catch$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000a1	ff 75 08	 push	 DWORD PTR __Ptr$35897[ebp]
  000a4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a9	59		 pop	 ecx

; 757  : 			_RERAISE;

  000aa	6a 00		 push	 0
  000ac	6a 00		 push	 0
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN45@reserve@2:
$LN43@reserve@2:
  000b3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve
PUBLIC	?_Tidy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXXZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
__Cat$50527 = -4					; size = 1
?_Tidy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXXZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	85 c0		 test	 eax, eax
  0000b	74 1a		 je	 SHORT $LN12@Tidy@4

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0000d	ff 75 fc	 push	 DWORD PTR __Cat$50527[ebp]
  00010	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00013	51		 push	 ecx
  00014	ff 76 04	 push	 DWORD PTR [esi+4]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@VPathArgument@Json@@@std@@@std@@YAXPAVPathArgument@Json@@0AAV?$allocator@VPathArgument@Json@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Json::PathArgument> >

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0001d	ff 36		 push	 DWORD PTR [esi]
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00024	83 c4 14	 add	 esp, 20			; 00000014H
$LN12@Tidy@4:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00027	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  0002a	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0002e	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00032	5e		 pop	 esi

; 1312 : 		}

  00033	c9		 leave
  00034	c3		 ret	 0
?_Tidy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXXZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 1c		 push	 28			; 0000001cH
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0a		 jae	 SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN21@Reserve@2:
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002f	2b c1		 sub	 eax, ecx
  00031	6a 1c		 push	 28			; 0000001cH
  00033	99		 cdq
  00034	59		 pop	 ecx
  00035	f7 f9		 idiv	 ecx
  00037	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003a	3b f8		 cmp	 edi, eax
  0003c	76 10		 jbe	 SHORT $LN1@Reserve@2

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003e	57		 push	 edi
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Grow_to
  00046	50		 push	 eax
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve
$LN1@Reserve@2:
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi

; 1298 : 		}

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
$LN20@Reserve@2:
?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
_TEXT	ENDS
PUBLIC	?reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXI@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Cat$50628 = 8						; size = 1
__Ptr$36930 = 8						; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXI@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb c7 71 1c
	07		 cmp	 ebx, 119304647		; 071c71c7H
  00017	76 0a		 jbe	 SHORT $LN5@reserve@3

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN44@reserve@3:
$LN5@reserve@3:

; 749  : 		else if (capacity() < _Count)

  00023	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00026	2b 06		 sub	 eax, DWORD PTR [esi]
  00028	6a 24		 push	 36			; 00000024H
  0002a	99		 cdq
  0002b	59		 pop	 ecx
  0002c	f7 f9		 idiv	 ecx
  0002e	3b c3		 cmp	 eax, ebx
  00030	73 67		 jae	 SHORT $LN3@reserve@3

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00032	6a 00		 push	 0
  00034	53		 push	 ebx
  00035	e8 00 00 00 00	 call	 ??$_Allocate@VPathArgument@Json@@@std@@YAPAVPathArgument@Json@@IPAV12@@Z ; std::_Allocate<Json::PathArgument>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00040	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00043	52		 push	 edx
  00044	89 45 08	 mov	 DWORD PTR __Ptr$36930[ebp], eax
  00047	ff 75 08	 push	 DWORD PTR __Ptr$36930[ebp]
  0004a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004d	50		 push	 eax
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@@Z ; std::_Uninitialized_move<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00054	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00056	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00059	83 c4 18	 add	 esp, 24			; 00000018H
  0005c	2b c1		 sub	 eax, ecx
  0005e	6a 24		 push	 36			; 00000024H
  00060	99		 cdq
  00061	5f		 pop	 edi
  00062	f7 ff		 idiv	 edi
  00064	8b f8		 mov	 edi, eax

; 761  : 			if (this->_Myfirst != 0)

  00066	85 c9		 test	 ecx, ecx
  00068	74 1a		 je	 SHORT $LN37@reserve@3

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  0006a	ff 75 08	 push	 DWORD PTR __Cat$50628[ebp]
  0006d	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00070	50		 push	 eax
  00071	ff 76 04	 push	 DWORD PTR [esi+4]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@VPathArgument@Json@@@std@@@std@@YAXPAVPathArgument@Json@@0AAV?$allocator@VPathArgument@Json@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Json::PathArgument> >

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  0007a	ff 36		 push	 DWORD PTR [esi]
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00081	83 c4 14	 add	 esp, 20			; 00000014H
$LN37@reserve@3:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();
; 769  : 			this->_Myend = _Ptr + _Count;

  00084	8b 45 08	 mov	 eax, DWORD PTR __Ptr$36930[ebp]
  00087	6b db 24	 imul	 ebx, 36			; 00000024H

; 770  : 			this->_Mylast = _Ptr + _Size;

  0008a	6b ff 24	 imul	 edi, 36			; 00000024H
  0008d	03 d8		 add	 ebx, eax
  0008f	03 f8		 add	 edi, eax
  00091	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00094	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  00097	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve@3:

; 772  : 			}
; 773  : 		}

  00099	e8 00 00 00 00	 call	 __EH_epilog3
  0009e	c2 04 00	 ret	 4
__catch$?reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000a1	ff 75 08	 push	 DWORD PTR __Ptr$36930[ebp]
  000a4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a9	59		 pop	 ecx

; 757  : 			_RERAISE;

  000aa	6a 00		 push	 0
  000ac	6a 00		 push	 0
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN45@reserve@3:
$LN43@reserve@3:
  000b3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::reserve
PUBLIC	??$_Dest_val@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@U?$pair@$$CBVCZString@Value@Json@@V23@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@0@PAU?$pair@$$CBVCZString@Value@Json@@V23@@0@@Z ; std::_Dest_val<std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,std::pair<Json::Value::CZString const ,Json::Value> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@U?$pair@$$CBVCZString@Value@Json@@V23@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@0@PAU?$pair@$$CBVCZString@Value@Json@@V23@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@U?$pair@$$CBVCZString@Value@Json@@V23@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@0@PAU?$pair@$$CBVCZString@Value@Json@@V23@@0@@Z PROC ; std::_Dest_val<std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]

; 288  : 	}

  00006	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  00007	e9 00 00 00 00	 jmp	 ??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
??$_Dest_val@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@U?$pair@$$CBVCZString@Value@Json@@V23@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@0@PAU?$pair@$$CBVCZString@Value@Json@@V23@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,std::pair<Json::Value::CZString const ,Json::Value> >
_TEXT	ENDS
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
CONST	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Newnode$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@1@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert, COMDAT
; _this$ = ecx

; 1631 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 1632 : 		if (max_size() - 1 <= this->_Mysize)

  00008	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0000b	3d a9 aa aa 0a	 cmp	 eax, 178956969		; 0aaaaaa9H
  00010	72 1d		 jb	 SHORT $LN17@Insert

; 1633 : 			{	// tree would get too big, fail
; 1634 : 			_Dest_val(this->_Alval,
; 1635 : 				_STD addressof(this->_Myval(_Newnode)));

  00012	8b 75 14	 mov	 esi, DWORD PTR __Newnode$[ebp]
  00015	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00018	e8 00 00 00 00	 call	 ??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ

; 1636 : 
; 1637 : 			this->_Alnod.deallocate(_Newnode, 1);

  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 1638 : 
; 1639 : 			_Xlength_error("map/set<T> too long");

  00023	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0002a	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN194@Insert:
$LN17@Insert:

; 1640 : 			}
; 1641 : 		++this->_Mysize;
; 1642 : 		_Newnode->_Parent = _Wherenode;

  0002f	8b 5d 14	 mov	 ebx, DWORD PTR __Newnode$[ebp]
  00032	40		 inc	 eax
  00033	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00036	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00039	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1643 : 
; 1644 : 		if (_Wherenode == this->_Myhead)

  0003c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003f	3b c1		 cmp	 eax, ecx
  00041	75 10		 jne	 SHORT $LN16@Insert

; 1645 : 			{	// first node in tree, just set head values
; 1646 : 			_Root() = _Newnode;

  00043	89 59 04	 mov	 DWORD PTR [ecx+4], ebx

; 1647 : 			_Lmost() = _Newnode;

  00046	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00049	89 18		 mov	 DWORD PTR [eax], ebx

; 1648 : 			_Rmost() = _Newnode;

  0004b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004e	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  00051	eb 21		 jmp	 SHORT $LN11@Insert
$LN16@Insert:

; 1649 : 			}
; 1650 : 		else if (_Addleft)

  00053	80 7d 0c 00	 cmp	 BYTE PTR __Addleft$[ebp], 0
  00057	74 0d		 je	 SHORT $LN14@Insert

; 1651 : 			{	// add to left of _Wherenode
; 1652 : 			this->_Left(_Wherenode) = _Newnode;

  00059	89 18		 mov	 DWORD PTR [eax], ebx

; 1653 : 			if (_Wherenode == _Lmost())

  0005b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0005e	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00060	75 12		 jne	 SHORT $LN11@Insert

; 1654 : 				_Lmost() = _Newnode;

  00062	89 19		 mov	 DWORD PTR [ecx], ebx

; 1655 : 			}
; 1656 : 		else

  00064	eb 0e		 jmp	 SHORT $LN11@Insert
$LN14@Insert:

; 1657 : 			{	// add to right of _Wherenode
; 1658 : 			this->_Right(_Wherenode) = _Newnode;

  00066	89 58 08	 mov	 DWORD PTR [eax+8], ebx

; 1659 : 			if (_Wherenode == _Rmost())

  00069	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0006c	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0006f	75 03		 jne	 SHORT $LN11@Insert

; 1660 : 				_Rmost() = _Newnode;

  00071	89 59 08	 mov	 DWORD PTR [ecx+8], ebx
$LN11@Insert:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00074	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00077	8b f3		 mov	 esi, ebx
  00079	e9 93 00 00 00	 jmp	 $LN192@Insert
$LL10@Insert:

; 1665 : 			if (this->_Parent(_Pnode)
; 1666 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  0007e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00081	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00084	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00086	75 38		 jne	 SHORT $LN8@Insert

; 1667 : 				{	// fixup red-red in left subtree
; 1668 : 				_Wherenode =
; 1669 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));

  00088	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1670 : 				if (this->_Color(_Wherenode) == this->_Red)

  0008b	80 79 24 00	 cmp	 BYTE PTR [ecx+36], 0

; 1671 : 					{	// parent has two red children, blacken both
; 1672 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1673 : 					this->_Color(_Wherenode) = this->_Black;
; 1674 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1675 : 						= this->_Red;
; 1676 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1677 : 					}
; 1678 : 				else

  0008f	74 37		 je	 SHORT $LN193@Insert

; 1679 : 					{	// parent has red and black children
; 1680 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  00091	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00094	75 0a		 jne	 SHORT $LN5@Insert

; 1681 : 						{	// rotate right child to left
; 1682 : 						_Pnode = this->_Parent(_Pnode);

  00096	8b f0		 mov	 esi, eax

; 1683 : 						_Lrotate(_Pnode);

  00098	56		 push	 esi
  00099	8b cf		 mov	 ecx, edi
  0009b	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate
$LN5@Insert:

; 1684 : 						}
; 1685 : 					this->_Color(this->_Parent(_Pnode)) =
; 1686 : 						this->_Black;	// propagate red up

  000a0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a3	c6 40 24 01	 mov	 BYTE PTR [eax+36], 1

; 1687 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1688 : 						this->_Red;

  000a7	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000aa	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ad	c6 40 24 00	 mov	 BYTE PTR [eax+36], 0

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	ff 70 04	 push	 DWORD PTR [eax+4]
  000b7	8b cf		 mov	 ecx, edi
  000b9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  000be	eb 4e		 jmp	 SHORT $LN2@Insert
$LN8@Insert:

; 1693 : 				{	// fixup red-red in right subtree
; 1694 : 				_Wherenode =
; 1695 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));

  000c0	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 1696 : 				if (this->_Color(_Wherenode) == this->_Red)

  000c2	80 79 24 00	 cmp	 BYTE PTR [ecx+36], 0
  000c6	75 1a		 jne	 SHORT $LN3@Insert
$LN193@Insert:

; 1697 : 					{	// parent has two red children, blacken both
; 1698 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  000c8	c6 40 24 01	 mov	 BYTE PTR [eax+36], 1

; 1699 : 					this->_Color(_Wherenode) = this->_Black;

  000cc	c6 41 24 01	 mov	 BYTE PTR [ecx+36], 1

; 1700 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1701 : 						this->_Red;

  000d0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000d3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000d6	c6 40 24 00	 mov	 BYTE PTR [eax+36], 0

; 1702 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  000da	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000dd	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 1703 : 					}
; 1704 : 				else

  000e0	eb 2c		 jmp	 SHORT $LN2@Insert
$LN3@Insert:

; 1705 : 					{	// parent has red and black children
; 1706 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  000e2	3b 30		 cmp	 esi, DWORD PTR [eax]
  000e4	75 0a		 jne	 SHORT $LN1@Insert

; 1707 : 						{	// rotate left child to right
; 1708 : 						_Pnode = this->_Parent(_Pnode);

  000e6	8b f0		 mov	 esi, eax

; 1709 : 						_Rrotate(_Pnode);

  000e8	56		 push	 esi
  000e9	8b cf		 mov	 ecx, edi
  000eb	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate
$LN1@Insert:

; 1710 : 						}
; 1711 : 					this->_Color(this->_Parent(_Pnode)) =
; 1712 : 						this->_Black;	// propagate red up

  000f0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000f3	c6 40 24 01	 mov	 BYTE PTR [eax+36], 1

; 1713 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1714 : 						this->_Red;

  000f7	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000fa	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000fd	c6 40 24 00	 mov	 BYTE PTR [eax+36], 0

; 1715 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  00101	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00104	ff 70 04	 push	 DWORD PTR [eax+4]
  00107	8b cf		 mov	 ecx, edi
  00109	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate
$LN2@Insert:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  0010e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
$LN192@Insert:
  00111	80 78 24 00	 cmp	 BYTE PTR [eax+36], 0
  00115	0f 84 63 ff ff
	ff		 je	 $LL10@Insert

; 1716 : 					}
; 1717 : 				}
; 1718 : 
; 1719 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  0011b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0011e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00121	5f		 pop	 edi
  00122	c6 40 24 01	 mov	 BYTE PTR [eax+36], 1

; 1720 : 		return (iterator(_Newnode, this));

  00126	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00129	5e		 pop	 esi
  0012a	89 18		 mov	 DWORD PTR [eax], ebx
  0012c	5b		 pop	 ebx

; 1721 : 		}

  0012d	5d		 pop	 ebp
  0012e	c2 10 00	 ret	 16			; 00000010H
$LN191@Insert:
?_Insert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@1@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert
_TEXT	ENDS
PUBLIC	??1?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::~vector<Json::PathArgument,std::allocator<Json::PathArgument> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::~vector<Json::PathArgument,std::allocator<Json::PathArgument> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXXZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Tidy
??1?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::~vector<Json::PathArgument,std::allocator<Json::PathArgument> >
_TEXT	ENDS
PUBLIC	?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
; Function compile flags: /Ogsp
;	COMDAT ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back, COMDAT
; _this$ = ecx

; 631  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 632  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 27		 jae	 SHORT $LN4@push_back@2
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 21		 ja	 SHORT $LN4@push_back@2

; 633  : 			{	// push back an element
; 634  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 1c		 push	 28			; 0000001cH
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 635  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back@2

; 636  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
$LN3@push_back@2:

; 637  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 638  : 			_Cons_val(this->_Alval,
; 639  : 				this->_Mylast,
; 640  : 				_STD forward<_Ty>(this->_Myfirst[_Idx]));

  00031	6b ff 1c	 imul	 edi, 28			; 0000001cH
  00034	03 3e		 add	 edi, DWORD PTR [esi]

; 641  : 			++this->_Mylast;
; 642  : 			}
; 643  : 		else

  00036	eb 0e		 jmp	 SHORT $LN1@push_back@2
$LN4@push_back@2:

; 644  : 			{	// push back a non-element
; 645  : 			if (this->_Mylast == this->_Myend)

  00038	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0003b	75 09		 jne	 SHORT $LN1@push_back@2

; 646  : 				_Reserve(1);

  0003d	6a 01		 push	 1
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
$LN1@push_back@2:

; 647  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 648  : 			_Cons_val(this->_Alval,
; 649  : 				this->_Mylast,
; 650  : 				_STD forward<_Ty>(_Val));

  00046	57		 push	 edi
  00047	ff 76 04	 push	 DWORD PTR [esi+4]
  0004a	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V32@@std@@YAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV20@@Z ; std::_Cons_val<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 651  : 			++this->_Mylast;

  00056	83 46 04 1c	 add	 DWORD PTR [esi+4], 28	; 0000001cH
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi

; 652  : 			}
; 653  : 		}

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 24		 push	 36			; 00000024H
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 c7 71 1c 07	 mov	 eax, 119304647		; 071c71c7H
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0a		 jae	 SHORT $LN4@Reserve@3

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN21@Reserve@3:
$LN4@Reserve@3:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002f	2b c1		 sub	 eax, ecx
  00031	6a 24		 push	 36			; 00000024H
  00033	99		 cdq
  00034	59		 pop	 ecx
  00035	f7 f9		 idiv	 ecx
  00037	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003a	3b f8		 cmp	 edi, eax
  0003c	76 10		 jbe	 SHORT $LN1@Reserve@3

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003e	57		 push	 edi
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEII@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Grow_to
  00046	50		 push	 eax
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXI@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::reserve
$LN1@Reserve@3:
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi

; 1298 : 		}

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
$LN20@Reserve@3:
?_Reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reserve
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
_TEXT	ENDS
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 1610 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1611 : 		for (_Nodeptr _Pnode = _Rootnode;

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]

; 1612 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00009	80 7f 25 00	 cmp	 BYTE PTR [edi+37], 0
  0000d	8b d9		 mov	 ebx, ecx
  0000f	8b f7		 mov	 esi, edi
  00011	75 23		 jne	 SHORT $LN1@Erase
$LL3@Erase:

; 1613 : 			{	// free subtrees, then node
; 1614 : 			_Erase(this->_Right(_Pnode));

  00013	ff 76 08	 push	 DWORD PTR [esi+8]
  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase

; 1615 : 			_Pnode = this->_Left(_Pnode);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]

; 1616 : 			_Dest_val(this->_Alval,
; 1617 : 				_STD addressof(this->_Myval(_Rootnode)));

  0001f	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00022	e8 00 00 00 00	 call	 ??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ

; 1618 : 
; 1619 : 			this->_Alnod.deallocate(_Rootnode, 1);

  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	80 7e 25 00	 cmp	 BYTE PTR [esi+37], 0
  00031	59		 pop	 ecx
  00032	8b fe		 mov	 edi, esi
  00034	74 dd		 je	 SHORT $LL3@Erase
$LN1@Erase:
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx

; 1620 : 			}
; 1621 : 		}

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase
_TEXT	ENDS
PUBLIC	?_Assign_rv@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV12@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Assign_rv
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Assign_rv@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Assign_rv@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV12@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Assign_rv, COMDAT
; _this$ = ecx

; 606  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 607  : 		if (this == &_Right)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	3b fe		 cmp	 edi, esi
  0000c	74 1f		 je	 SHORT $LN1@Assign_rv

; 608  : 			;
; 609  : 		else if (get_allocator() != _Right.get_allocator())
; 610  : 			{	// move construct a copy
; 611  : 			clear();
; 612  : 			for (iterator _Next = _Right.begin(); _Next != _Right.end();
; 613  : 				++_Next)
; 614  : 				push_back(_STD forward<_Ty>(*_Next));
; 615  : 			}
; 616  : 		else
; 617  : 			{	// clear this and steal from _Right
; 618  : 			_Tidy();

  0000e	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy

; 619  : 			this->_Swap_all((_Myt&)_Right);
; 620  : 			this->_Myfirst = _Right._Myfirst;

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	89 07		 mov	 DWORD PTR [edi], eax

; 621  : 			this->_Mylast = _Right._Mylast;

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 622  : 			this->_Myend = _Right._Myend;

  0001d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00020	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 623  : 
; 624  : 			_Right._Myfirst = 0;

  00023	33 c0		 xor	 eax, eax
  00025	89 06		 mov	 DWORD PTR [esi], eax

; 625  : 			_Right._Mylast = 0;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 626  : 			_Right._Myend = 0;

  0002a	89 46 08	 mov	 DWORD PTR [esi+8], eax
$LN1@Assign_rv:
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi

; 627  : 			}
; 628  : 		}

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?_Assign_rv@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV12@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Assign_rv
_TEXT	ENDS
PUBLIC	?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	SEGMENT
__catchsym$?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z$0
__unwindtable$?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z$2
__ehfuncinfo$?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Newroot$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Rootnode$ = 8						; size = 4
__Wherenode$ = 12					; size = 4
?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy, COMDAT
; _this$ = ecx

; 1516 : 		{	// copy entire subtree, recursively

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b d9		 mov	 ebx, ecx
  0000e	89 5d e8	 mov	 DWORD PTR _this$[ebp], ebx

; 1517 : 		_Nodeptr _Newroot = this->_Myhead;	// point at nil node
; 1518 : 
; 1519 : 		if (!this->_Isnil(_Rootnode))

  00011	8b 75 08	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00014	80 7e 25 00	 cmp	 BYTE PTR [esi+37], 0
  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	89 45 ec	 mov	 DWORD PTR __Newroot$[ebp], eax
  0001e	75 41		 jne	 SHORT $LN8@Copy@2

; 1520 : 			{	// copy a node, then any subtrees
; 1521 : 			_Nodeptr _Pnode = this->_Buynode(this->_Myval(_Rootnode));

  00020	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>
  00029	8b f8		 mov	 edi, eax

; 1522 : 			_Pnode->_Parent = _Wherenode;

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0002e	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1523 : 			_Pnode->_Color = this->_Color(_Rootnode);

  00031	8a 46 24	 mov	 al, BYTE PTR [esi+36]
  00034	88 47 24	 mov	 BYTE PTR [edi+36], al

; 1524 : 			if (this->_Isnil(_Newroot))

  00037	8b 45 ec	 mov	 eax, DWORD PTR __Newroot$[ebp]
  0003a	80 78 25 00	 cmp	 BYTE PTR [eax+37], 0
  0003e	74 03		 je	 SHORT $LN2@Copy@2

; 1525 : 				_Newroot = _Pnode;	// memorize new root

  00040	89 7d ec	 mov	 DWORD PTR __Newroot$[ebp], edi
$LN2@Copy@2:

; 1526 : 
; 1527 : 			_TRY_BEGIN

  00043	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1528 : 			this->_Left(_Pnode) = _Copy(this->_Left(_Rootnode), _Pnode);

  00047	57		 push	 edi
  00048	ff 36		 push	 DWORD PTR [esi]
  0004a	8b cb		 mov	 ecx, ebx
  0004c	e8 00 00 00 00	 call	 ?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy

; 1529 : 			this->_Right(_Pnode) = _Copy(this->_Right(_Rootnode), _Pnode);

  00051	57		 push	 edi
  00052	89 07		 mov	 DWORD PTR [edi], eax
  00054	ff 76 08	 push	 DWORD PTR [esi+8]
  00057	8b cb		 mov	 ecx, ebx
  00059	e8 00 00 00 00	 call	 ?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy
  0005e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN8@Copy@2:

; 1533 : 			_CATCH_END
; 1534 : 			}
; 1535 : 
; 1536 : 		return (_Newroot);	// return newly constructed tree

  00061	8b 45 ec	 mov	 eax, DWORD PTR __Newroot$[ebp]

; 1537 : 		}

  00064	e8 00 00 00 00	 call	 __EH_epilog3
  00069	c2 08 00	 ret	 8
__catch$?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z$0:

; 1530 : 			_CATCH_ALL
; 1531 : 			_Erase(_Newroot);	// subtree copy failed, bail out

  0006c	ff 75 ec	 push	 DWORD PTR __Newroot$[ebp]
  0006f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase

; 1532 : 			_RERAISE;

  00077	6a 00		 push	 0
  00079	6a 00		 push	 0
  0007b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN29@Copy@2:
$LN28@Copy@2:
  00080	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy
PUBLIC	?_Linsert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Linsert
; Function compile flags: /Ogsp
;	COMDAT ?_Linsert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@_N@Z
_TEXT	SEGMENT
__Addleft$ = -8						; size = 1
__Wherenode$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Node$ = 12						; size = 4
$T51384 = 16						; size = 4
__Where$38907 = 16					; size = 4
__Leftish$ = 16						; size = 1
?_Linsert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@_N@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Linsert, COMDAT
; _this$ = ecx

; 944  : 		{	// try to insert node at _Node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx

; 945  : 		const value_type& _Val = this->_Myval(_Node);

  00006	8b 5d 0c	 mov	 ebx, DWORD PTR __Node$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 946  : 
; 947  : 		_Nodeptr _Trynode = _Root();

  0000d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00010	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 948  : 		_Nodeptr _Wherenode = this->_Myhead;

  00013	89 45 fc	 mov	 DWORD PTR __Wherenode$[ebp], eax

; 949  : 		bool _Addleft = true;	// add to left of head if tree empty

  00016	b0 01		 mov	 al, 1
  00018	83 c3 0c	 add	 ebx, 12			; 0000000cH
  0001b	88 45 f8	 mov	 BYTE PTR __Addleft$[ebp], al
  0001e	eb 33		 jmp	 SHORT $LN157@Linsert
$LL12@Linsert:

; 951  : 			{	// look for leaf to insert before (_Addleft) or after
; 952  : 			_Wherenode = _Trynode;
; 953  : 			if (_Leftish)

  00020	80 7d 10 00	 cmp	 BYTE PTR __Leftish$[ebp], 0
  00024	89 75 fc	 mov	 DWORD PTR __Wherenode$[ebp], esi
  00027	74 11		 je	 SHORT $LN10@Linsert

; 954  : 				_Addleft = !_DEBUG_LT_PRED(this->comp,

  00029	53		 push	 ebx
  0002a	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002d	e8 00 00 00 00	 call	 ??MCZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator<
  00032	f6 d8		 neg	 al
  00034	1a c0		 sbb	 al, al
  00036	fe c0		 inc	 al

; 955  : 					this->_Key(_Trynode),
; 956  : 					this->_Kfn(_Val));	// favor left end
; 957  : 			else

  00038	eb 0b		 jmp	 SHORT $LN158@Linsert
$LN10@Linsert:

; 958  : 				_Addleft = _DEBUG_LT_PRED(this->comp,

  0003a	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0003d	50		 push	 eax
  0003e	8b cb		 mov	 ecx, ebx
  00040	e8 00 00 00 00	 call	 ??MCZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator<
$LN158@Linsert:
  00045	88 45 f8	 mov	 BYTE PTR __Addleft$[ebp], al

; 959  : 					this->_Kfn(_Val),
; 960  : 					this->_Key(_Trynode));	// favor right end
; 961  : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 962  : 				: this->_Right(_Trynode);

  00048	84 c0		 test	 al, al
  0004a	74 04		 je	 SHORT $LN15@Linsert
  0004c	8b 36		 mov	 esi, DWORD PTR [esi]
  0004e	eb 03		 jmp	 SHORT $LN157@Linsert
$LN15@Linsert:
  00050	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
$LN157@Linsert:

; 950  : 		while (!this->_Isnil(_Trynode))

  00053	80 7e 25 00	 cmp	 BYTE PTR [esi+37], 0
  00057	74 c7		 je	 SHORT $LL12@Linsert

; 963  : 			}
; 964  : 
; 965  : 		if (this->_Multi)
; 966  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));
; 967  : 		else
; 968  : 			{	// insert only if unique
; 969  : 			iterator _Where = iterator(_Wherenode, this);

  00059	8b 75 fc	 mov	 esi, DWORD PTR __Wherenode$[ebp]
  0005c	89 75 10	 mov	 DWORD PTR __Where$38907[ebp], esi

; 970  : 			if (!_Addleft)

  0005f	84 c0		 test	 al, al
  00061	74 30		 je	 SHORT $LN99@Linsert

; 971  : 				;	// need to test if insert after is okay
; 972  : 			else if (_Where == begin())

  00063	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00066	3b 30		 cmp	 esi, DWORD PTR [eax]
  00068	75 1e		 jne	 SHORT $LN4@Linsert

; 973  : 				return (_Pairib(_Insert(true, _Wherenode, _Node), true));

  0006a	ff 75 0c	 push	 DWORD PTR __Node$[ebp]
  0006d	56		 push	 esi
  0006e	6a 01		 push	 1
$LN159@Linsert:
  00070	8d 45 10	 lea	 eax, DWORD PTR $T51384[ebp]
  00073	50		 push	 eax
  00074	8b cf		 mov	 ecx, edi
  00076	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00080	89 08		 mov	 DWORD PTR [eax], ecx
  00082	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  00086	eb 3c		 jmp	 SHORT $LN1@Linsert
$LN4@Linsert:

; 974  : 			else
; 975  : 				--_Where;	// need to test if insert before is okay

  00088	8d 4d 10	 lea	 ecx, DWORD PTR __Where$38907[ebp]
  0008b	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator--
  00090	8b 75 10	 mov	 esi, DWORD PTR __Where$38907[ebp]
$LN99@Linsert:

; 976  : 
; 977  : 			if (_DEBUG_LT_PRED(this->comp,

  00093	53		 push	 ebx
  00094	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00097	e8 00 00 00 00	 call	 ??MCZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator<
  0009c	84 c0		 test	 al, al
  0009e	74 0b		 je	 SHORT $LN2@Linsert

; 978  : 				this->_Key(_Where._Mynode()),
; 979  : 				this->_Kfn(_Val)))
; 980  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));

  000a0	ff 75 0c	 push	 DWORD PTR __Node$[ebp]
  000a3	ff 75 fc	 push	 DWORD PTR __Wherenode$[ebp]
  000a6	ff 75 f8	 push	 DWORD PTR __Addleft$[ebp]
  000a9	eb c5		 jmp	 SHORT $LN159@Linsert
$LN2@Linsert:

; 981  : 			else
; 982  : 				{	// duplicate, don't insert
; 983  : 				_Dest_val(this->_Alval,
; 984  : 					_STD addressof(this->_Myval(_Node)));

  000ab	8b cb		 mov	 ecx, ebx
  000ad	e8 00 00 00 00	 call	 ??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ

; 985  : 
; 986  : 				this->_Alnod.deallocate(_Node, 1);

  000b2	ff 75 0c	 push	 DWORD PTR __Node$[ebp]
  000b5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 987  : 
; 988  : 				return (_Pairib(_Where, false));

  000ba	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000bd	59		 pop	 ecx
  000be	89 30		 mov	 DWORD PTR [eax], esi
  000c0	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
$LN1@Linsert:
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  000c7	c9		 leave
  000c8	c2 0c 00	 ret	 12			; 0000000cH
?_Linsert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@_N@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Linsert
_TEXT	ENDS
PUBLIC	?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEX$$QAVPathArgument@Json@@@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEX$$QAVPathArgument@Json@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEX$$QAVPathArgument@Json@@@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back, COMDAT
; _this$ = ecx

; 631  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 632  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 27		 jae	 SHORT $LN4@push_back@3
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 21		 ja	 SHORT $LN4@push_back@3

; 633  : 			{	// push back an element
; 634  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 24		 push	 36			; 00000024H
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 635  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back@3

; 636  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reserve
$LN3@push_back@3:

; 637  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 638  : 			_Cons_val(this->_Alval,
; 639  : 				this->_Mylast,
; 640  : 				_STD forward<_Ty>(this->_Myfirst[_Idx]));

  00031	6b ff 24	 imul	 edi, 36			; 00000024H
  00034	03 3e		 add	 edi, DWORD PTR [esi]

; 641  : 			++this->_Mylast;
; 642  : 			}
; 643  : 		else

  00036	eb 0e		 jmp	 SHORT $LN1@push_back@3
$LN4@push_back@3:

; 644  : 			{	// push back a non-element
; 645  : 			if (this->_Mylast == this->_Myend)

  00038	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0003b	75 09		 jne	 SHORT $LN1@push_back@3

; 646  : 				_Reserve(1);

  0003d	6a 01		 push	 1
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reserve
$LN1@push_back@3:

; 647  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 648  : 			_Cons_val(this->_Alval,
; 649  : 				this->_Mylast,
; 650  : 				_STD forward<_Ty>(_Val));

  00046	57		 push	 edi
  00047	ff 76 04	 push	 DWORD PTR [esi+4]
  0004a	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@V34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@$$QAV23@@Z ; std::_Cons_val<std::allocator<Json::PathArgument>,Json::PathArgument,Json::PathArgument>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 651  : 			++this->_Mylast;

  00056	83 46 04 24	 add	 DWORD PTR [esi+4], 36	; 00000024H
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi

; 652  : 			}
; 653  : 		}

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEX$$QAVPathArgument@Json@@@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back
; Function compile flags: /Ogsp
;	COMDAT ?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 37		 jae	 SHORT $LN4@push_back@4
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	3b d7		 cmp	 edx, edi
  00015	77 31		 ja	 SHORT $LN4@push_back@4

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	8b c7		 mov	 eax, edi
  00019	2b c2		 sub	 eax, edx
  0001b	6a 24		 push	 36			; 00000024H
  0001d	99		 cdq
  0001e	5f		 pop	 edi
  0001f	f7 ff		 idiv	 edi
  00021	8b f8		 mov	 edi, eax

; 980  : 			if (this->_Mylast == this->_Myend)

  00023	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00026	75 09		 jne	 SHORT $LN3@push_back@4

; 981  : 				_Reserve(1);

  00028	6a 01		 push	 1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reserve
$LN3@push_back@4:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00031	6b ff 24	 imul	 edi, 36			; 00000024H
  00034	03 3e		 add	 edi, DWORD PTR [esi]
  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	57		 push	 edi
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@VPathArgument@Json@@@std@@VPathArgument@Json@@AAV34@@std@@YAXAAV?$allocator@VPathArgument@Json@@@0@PAVPathArgument@Json@@AAV23@@Z ; std::_Cons_val<std::allocator<Json::PathArgument>,Json::PathArgument,Json::PathArgument &>
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00046	eb 19		 jmp	 SHORT $LN26@push_back@4
$LN4@push_back@4:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00048	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0004b	75 09		 jne	 SHORT $LN1@push_back@4

; 991  : 				_Reserve(1);

  0004d	6a 01		 push	 1
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reserve
$LN1@push_back@4:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00056	57		 push	 edi
  00057	ff 76 04	 push	 DWORD PTR [esi+4]
  0005a	e8 00 00 00 00	 call	 ??$_Construct@VPathArgument@Json@@ABV12@@std@@YAXPAVPathArgument@Json@@ABV12@@Z ; std::_Construct<Json::PathArgument,Json::PathArgument const &>
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
$LN26@push_back@4:

; 996  : 			++this->_Mylast;

  00061	83 46 04 24	 add	 DWORD PTR [esi+4], 36	; 00000024H
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back
_TEXT	ENDS
PUBLIC	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 595  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 596  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  00004	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	33 c0		 xor	 eax, eax
  0000b	89 06		 mov	 DWORD PTR [esi], eax
  0000d	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00010	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00013	e8 00 00 00 00	 call	 ?_Assign_rv@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV12@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Assign_rv

; 597  : 		}

  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXABV12@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXABV12@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy, COMDAT
; _this$ = ecx

; 1500 : 		{	// copy entire tree from _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1501 : 		_Root() = _Copy(_Right._Root(), this->_Myhead);

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00011	57		 push	 edi
  00012	ff 70 04	 push	 DWORD PTR [eax+4]
  00015	e8 00 00 00 00	 call	 ?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy
  0001a	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1502 : 		this->_Mysize = _Right.size();

  0001d	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00020	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1503 : 		if (!this->_Isnil(_Root()))

  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	32 db		 xor	 bl, bl
  0002b	38 59 25	 cmp	 BYTE PTR [ecx+37], bl
  0002e	74 11		 je	 SHORT $LN70@Copy@3

; 1509 : 			{	// empty tree, just tidy head pointers
; 1510 : 			_Lmost() = this->_Myhead;

  00030	89 00		 mov	 DWORD PTR [eax], eax

; 1511 : 			_Rmost() = this->_Myhead;

  00032	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00035	89 76 08	 mov	 DWORD PTR [esi+8], esi
$LN1@Copy@3:
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx

; 1512 : 			}
; 1513 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4

; 1504 : 			{	// nonempty tree, look for new smallest and largest
; 1505 : 			_Lmost() = this->_Min(_Root());

$LL26@Copy@3:
  0003f	8b ca		 mov	 ecx, edx
$LN70@Copy@3:
  00041	8b 11		 mov	 edx, DWORD PTR [ecx]
  00043	38 5a 25	 cmp	 BYTE PTR [edx+37], bl
  00046	74 f7		 je	 SHORT $LL26@Copy@3
  00048	89 08		 mov	 DWORD PTR [eax], ecx

; 1506 : 			_Rmost() = this->_Max(_Root());

  0004a	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0004d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00050	eb 02		 jmp	 SHORT $LN72@Copy@3
$LL44@Copy@3:
  00052	8b c8		 mov	 ecx, eax
$LN72@Copy@3:
  00054	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00057	38 58 25	 cmp	 BYTE PTR [eax+37], bl
  0005a	74 f6		 je	 SHORT $LL44@Copy@3
  0005c	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 1507 : 			}
; 1508 : 		else

  0005f	eb d7		 jmp	 SHORT $LN1@Copy@3
?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXABV12@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy
_TEXT	ENDS
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert
; Function compile flags: /Ogsp
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
_TEXT	SEGMENT
$T51966 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Next$ = 16						; size = 4
__Node$ = 16						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert, COMDAT
; _this$ = ecx

; 1089 : 		{	// try to insert node at _Node using _Where as a hint

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx

; 1090 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1091 : 		if (_Where._Getcont() != this)
; 1092 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1093 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1094 : 
; 1095 : 		const value_type& _Val = this->_Myval(_Node);

  00006	8b 5d 10	 mov	 ebx, DWORD PTR __Node$[ebp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx

; 1096 : 
; 1097 : 		const_iterator _Next;
; 1098 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1099 : 
; 1100 : 		if (size() == 0)

  0000c	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00010	57		 push	 edi
  00011	8d 7b 0c	 lea	 edi, DWORD PTR [ebx+12]
  00014	75 16		 jne	 SHORT $LN33@Insert@2

; 1101 : 			return (_Insert(true, this->_Myhead, _Node));	// empty tree

  00016	53		 push	 ebx
  00017	ff 76 04	 push	 DWORD PTR [esi+4]
$LN336@Insert@2:
  0001a	6a 01		 push	 1
$LN335@Insert@2:
  0001c	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0001f	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert
  00024	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00027	e9 f9 00 00 00	 jmp	 $LN34@Insert@2
$LN33@Insert@2:

; 1102 : 		else if (this->_Multi)
; 1103 : 			{	// insert even if duplicate
; 1104 : 			if (_Where == begin())
; 1105 : 				{	// insert at beginning if before first element
; 1106 : 				if (!_DEBUG_LT_PRED(this->comp,
; 1107 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1108 : 					return (_Insert(true, _Where._Mynode(), _Node));
; 1109 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1110 : 				}
; 1111 : 			else if (_Where == end())
; 1112 : 				{	// insert at end if after last element
; 1113 : 				if (!_DEBUG_LT_PRED(this->comp,
; 1114 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1115 : 					return (_Insert(false, _Rmost(), _Node));
; 1116 : 				}
; 1117 : 			else if (!_DEBUG_LT_PRED(this->comp,
; 1118 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1119 : 				&& !_DEBUG_LT_PRED(this->comp,
; 1120 : 					this->_Kfn(_Val),
; 1121 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1122 : 				{	// insert before _Where
; 1123 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1124 : 					return (_Insert(false, _Next._Mynode(), _Node));
; 1125 : 				else
; 1126 : 					return (_Insert(true, _Where._Mynode(), _Node));
; 1127 : 				}
; 1128 : 			else if (!_DEBUG_LT_PRED(this->comp,
; 1129 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1130 : 				&& (++(_Next = _Where) == end()
; 1131 : 					|| !_DEBUG_LT_PRED(this->comp,
; 1132 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1133 : 				{	// insert after _Where
; 1134 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1135 : 					return (_Insert(false, _Where._Mynode(), _Node));
; 1136 : 				else
; 1137 : 					return (_Insert(true, _Next._Mynode(), _Node));
; 1138 : 				}
; 1139 : 			else
; 1140 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1141 : 			}
; 1142 : 		else
; 1143 : 			{	// insert only if unique
; 1144 : 			if (_Where == begin())

  0002c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00032	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00034	75 1d		 jne	 SHORT $LN14@Insert@2

; 1145 : 				{	// insert at beginning if before first element
; 1146 : 				if (_DEBUG_LT_PRED(this->comp,

  00036	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00039	51		 push	 ecx
  0003a	8b cf		 mov	 ecx, edi
  0003c	e8 00 00 00 00	 call	 ??MCZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator<
  00041	84 c0		 test	 al, al
  00043	0f 84 c7 00 00
	00		 je	 $LN332@Insert@2

; 1147 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1148 : 					return (_Insert(true, _Where._Mynode(), _Node));

  00049	53		 push	 ebx
  0004a	ff 75 0c	 push	 DWORD PTR __Where$[ebp]
  0004d	6a 01		 push	 1
$LN338@Insert@2:
  0004f	8b ce		 mov	 ecx, esi
  00051	eb c9		 jmp	 SHORT $LN335@Insert@2
$LN14@Insert@2:

; 1149 : 				}
; 1150 : 			else if (_Where == end())

  00053	3b c8		 cmp	 ecx, eax
  00055	75 1f		 jne	 SHORT $LN11@Insert@2

; 1151 : 				{	// insert at end if after last element
; 1152 : 				if (_DEBUG_LT_PRED(this->comp,

  00057	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0005d	57		 push	 edi
  0005e	e8 00 00 00 00	 call	 ??MCZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator<
  00063	84 c0		 test	 al, al
  00065	0f 84 a5 00 00
	00		 je	 $LN332@Insert@2

; 1153 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1154 : 					return (_Insert(false, _Rmost(), _Node));

  0006b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0006e	53		 push	 ebx
  0006f	ff 70 08	 push	 DWORD PTR [eax+8]
  00072	6a 00		 push	 0
  00074	eb d9		 jmp	 SHORT $LN338@Insert@2
$LN11@Insert@2:

; 1155 : 				}
; 1156 : 			else if (_DEBUG_LT_PRED(this->comp,
; 1157 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1158 : 				&& _DEBUG_LT_PRED(this->comp,

  00076	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00079	51		 push	 ecx
  0007a	8b cf		 mov	 ecx, edi
  0007c	e8 00 00 00 00	 call	 ??MCZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator<
  00081	84 c0		 test	 al, al
  00083	74 3a		 je	 SHORT $LN333@Insert@2
  00085	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00088	8d 4d 10	 lea	 ecx, DWORD PTR __Next$[ebp]
  0008b	89 45 10	 mov	 DWORD PTR __Next$[ebp], eax
  0008e	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator--
  00093	57		 push	 edi
  00094	8b 7d 10	 mov	 edi, DWORD PTR __Next$[ebp]
  00097	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  0009a	e8 00 00 00 00	 call	 ??MCZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator<
  0009f	84 c0		 test	 al, al
  000a1	74 1c		 je	 SHORT $LN333@Insert@2

; 1159 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1160 : 					this->_Kfn(_Val)))
; 1161 : 				{	// insert before _Where
; 1162 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))

  000a3	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000a6	80 78 25 00	 cmp	 BYTE PTR [eax+37], 0

; 1163 : 					return (_Insert(false, _Next._Mynode(), _Node));

  000aa	53		 push	 ebx
  000ab	8b ce		 mov	 ecx, esi
  000ad	74 08		 je	 SHORT $LN7@Insert@2
$LN337@Insert@2:
  000af	57		 push	 edi
  000b0	6a 00		 push	 0
  000b2	e9 65 ff ff ff	 jmp	 $LN335@Insert@2
$LN7@Insert@2:

; 1164 : 				else
; 1165 : 					return (_Insert(true, _Where._Mynode(), _Node));

  000b7	ff 75 0c	 push	 DWORD PTR __Where$[ebp]
  000ba	e9 5b ff ff ff	 jmp	 $LN336@Insert@2
$LN333@Insert@2:

; 1166 : 				}
; 1167 : 			else if (_DEBUG_LT_PRED(this->comp,
; 1168 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1169 : 				&& (++(_Next = _Where) == end()
; 1170 : 					|| _DEBUG_LT_PRED(this->comp,

  000bf	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  000c2	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  000c5	50		 push	 eax
  000c6	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000c9	e8 00 00 00 00	 call	 ??MCZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator<
  000ce	84 c0		 test	 al, al
  000d0	74 3e		 je	 SHORT $LN332@Insert@2
  000d2	8b 7d 0c	 mov	 edi, DWORD PTR __Where$[ebp]
  000d5	8d 4d 10	 lea	 ecx, DWORD PTR __Next$[ebp]
  000d8	89 7d 10	 mov	 DWORD PTR __Next$[ebp], edi
  000db	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator++
  000e0	8b 45 10	 mov	 eax, DWORD PTR __Next$[ebp]
  000e3	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  000e6	74 16		 je	 SHORT $LN3@Insert@2
  000e8	83 c0 0c	 add	 eax, 12			; 0000000cH
  000eb	50		 push	 eax
  000ec	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
  000ef	e8 00 00 00 00	 call	 ??MCZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator<
  000f4	84 c0		 test	 al, al
  000f6	74 18		 je	 SHORT $LN332@Insert@2
  000f8	8b 7d 0c	 mov	 edi, DWORD PTR __Where$[ebp]
  000fb	8b 45 10	 mov	 eax, DWORD PTR __Next$[ebp]
$LN3@Insert@2:

; 1171 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1172 : 				{	// insert after _Where
; 1173 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))

  000fe	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00101	80 79 25 00	 cmp	 BYTE PTR [ecx+37], 0

; 1174 : 					return (_Insert(false, _Where._Mynode(), _Node));

  00105	53		 push	 ebx
  00106	8b ce		 mov	 ecx, esi
  00108	75 a5		 jne	 SHORT $LN337@Insert@2

; 1175 : 				else
; 1176 : 					return (_Insert(true, _Next._Mynode(), _Node));

  0010a	50		 push	 eax
  0010b	e9 0a ff ff ff	 jmp	 $LN336@Insert@2
$LN332@Insert@2:

; 1177 : 				}
; 1178 : 			}
; 1179 : 
; 1180 : 		return (_Linsert(_Node, _Leftish).first);	// try usual insert

  00110	6a 00		 push	 0
  00112	53		 push	 ebx
  00113	8d 45 f8	 lea	 eax, DWORD PTR $T51966[ebp]
  00116	50		 push	 eax
  00117	8b ce		 mov	 ecx, esi
  00119	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Linsert
  0011e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00120	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00123	89 08		 mov	 DWORD PTR [eax], ecx
$LN34@Insert@2:
  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	5b		 pop	 ebx

; 1181 : 		}

  00128	c9		 leave
  00129	c2 0c 00	 ret	 12			; 0000000cH
?_Insert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert
_TEXT	ENDS
PUBLIC	?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ ; Json::Value::getMemberNames
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ$2
__ehfuncinfo$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	ENDS
;	COMDAT ?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
_TEXT	SEGMENT
_members$ = -64						; size = 16
$T52637 = -48						; size = 4
_it$ = -48						; size = 4
$T34231 = -44						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ PROC ; Json::Value::getMemberNames, COMDAT
; _this$ = ecx

; 1207 : {

  00000	6a 34		 push	 52			; 00000034H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	33 db		 xor	 ebx, ebx
  00011	8b f1		 mov	 esi, ecx
  00013	89 5d d0	 mov	 DWORD PTR $T52637[ebp], ebx

; 1208 :    JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );
; 1209 :    if ( type_ == nullValue )

  00016	38 5e 08	 cmp	 BYTE PTR [esi+8], bl
  00019	75 0a		 jne	 SHORT $LN4@getMemberN

; 1210 :        return Value::Members();

  0001b	89 1f		 mov	 DWORD PTR [edi], ebx
  0001d	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00020	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  00023	eb 7b		 jmp	 SHORT $LN86@getMemberN
$LN4@getMemberN:

; 1211 :    Members members;

  00025	89 5d c0	 mov	 DWORD PTR _members$[ebp], ebx
  00028	89 5d c4	 mov	 DWORD PTR _members$[ebp+4], ebx
  0002b	89 5d c8	 mov	 DWORD PTR _members$[ebp+8], ebx

; 1212 :    members.reserve( value_.map_->size() );

  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	ff 70 08	 push	 DWORD PTR [eax+8]
  00033	8d 4d c0	 lea	 ecx, DWORD PTR _members$[ebp]
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00039	e8 00 00 00 00	 call	 ?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve

; 1213 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1214 :    ObjectValues::const_iterator it = value_.map_->begin();

  0003e	8b 06		 mov	 eax, DWORD PTR [esi]
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 1215 :    ObjectValues::const_iterator itEnd = value_.map_->end();

  00045	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00048	89 4d d0	 mov	 DWORD PTR _it$[ebp], ecx

; 1216 :    for ( ; it != itEnd; ++it )

  0004b	3b ce		 cmp	 ecx, esi
  0004d	74 36		 je	 SHORT $LN1@getMemberN
$LL53@getMemberN:

; 1217 :       members.push_back( std::string( (*it).first.c_str() ) );

  0004f	8b 45 d0	 mov	 eax, DWORD PTR _it$[ebp]
  00052	ff 70 0c	 push	 DWORD PTR [eax+12]
  00055	8d 4d d4	 lea	 ecx, DWORD PTR $T34231[ebp]
  00058	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0005d	50		 push	 eax
  0005e	8d 4d c0	 lea	 ecx, DWORD PTR _members$[ebp]
  00061	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00065	e8 00 00 00 00	 call	 ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
  0006a	53		 push	 ebx
  0006b	6a 01		 push	 1
  0006d	8d 4d d4	 lea	 ecx, DWORD PTR $T34231[ebp]
  00070	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00073	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00078	8d 4d d0	 lea	 ecx, DWORD PTR _it$[ebp]
  0007b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >,std::_Iterator_base0>::operator++
  00080	39 75 d0	 cmp	 DWORD PTR _it$[ebp], esi
  00083	75 ca		 jne	 SHORT $LL53@getMemberN
$LN1@getMemberN:

; 1218 : #else
; 1219 :    ValueInternalMap::IteratorState it;
; 1220 :    ValueInternalMap::IteratorState itEnd;
; 1221 :    value_.map_->makeBeginIterator( it );
; 1222 :    value_.map_->makeEndIterator( itEnd );
; 1223 :    for ( ; !ValueInternalMap::equals( it, itEnd ); ValueInternalMap::increment(it) )
; 1224 :       members.push_back( std::string( ValueInternalMap::key( it ) ) );
; 1225 : #endif
; 1226 :    return members;

  00085	8d 45 c0	 lea	 eax, DWORD PTR _members$[ebp]
  00088	50		 push	 eax
  00089	8b cf		 mov	 ecx, edi
  0008b	89 1f		 mov	 DWORD PTR [edi], ebx
  0008d	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00090	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  00093	e8 00 00 00 00	 call	 ?_Assign_rv@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV12@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Assign_rv
  00098	8d 4d c0	 lea	 ecx, DWORD PTR _members$[ebp]
  0009b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
$LN86@getMemberN:
  000a0	8b c7		 mov	 eax, edi

; 1227 : }

  000a2	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000a7	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ$1:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR _members$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ$2:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR $T34231[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ ENDP ; Json::Value::getMemberNames
PUBLIC	?addPathInArg@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@AAV?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@4@W4Kind@PathArgument@2@@Z ; Json::Path::addPathInArg
; Function compile flags: /Ogsp
;	COMDAT ?addPathInArg@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@AAV?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@4@W4Kind@PathArgument@2@@Z
_TEXT	SEGMENT
_path$ = 8						; size = 4
_in$ = 12						; size = 4
_itInArg$ = 16						; size = 4
_kind$ = 20						; size = 4
?addPathInArg@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@AAV?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@4@W4Kind@PathArgument@2@@Z PROC ; Json::Path::addPathInArg, COMDAT
; _this$ = ecx

; 1608 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1609 :    if ( itInArg == in.end() )

  00003	8b 45 10	 mov	 eax, DWORD PTR _itInArg$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	8b 55 0c	 mov	 edx, DWORD PTR _in$[ebp]
  0000b	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  0000e	74 10		 je	 SHORT $LN1@addPathInA

; 1610 :    {
; 1611 :       // Error: missing argument %d
; 1612 :    }
; 1613 :    else if ( (*itInArg)->kind_ != kind )

  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  00015	3b 55 14	 cmp	 edx, DWORD PTR _kind$[ebp]
  00018	75 06		 jne	 SHORT $LN1@addPathInA

; 1614 :    {
; 1615 :       // Error: bad argument type
; 1616 :    }
; 1617 :    else
; 1618 :    {
; 1619 :       args_.push_back( **itInArg );

  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back
$LN1@addPathInA:

; 1620 :    }
; 1621 : }

  00020	5d		 pop	 ebp
  00021	c2 10 00	 ret	 16			; 00000010H
?addPathInArg@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@AAV?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@4@W4Kind@PathArgument@2@@Z ENDP ; Json::Path::addPathInArg
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T52907 = -24						; size = 4
$T52897 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T53008 = 8						; size = 4
__Right$ = 8						; size = 4
$T52898 = 11						; size = 1
??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT
; _this$ = ecx

; 715  : 		{	// construct tree by copying _Right

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00011	51		 push	 ecx
  00012	89 65 e8	 mov	 DWORD PTR $T52897[ebp], esp
  00015	8d 45 0b	 lea	 eax, DWORD PTR $T52898[ebp]
  00018	89 65 e8	 mov	 DWORD PTR $T52907[ebp], esp
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??0?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
  00021	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 716  : 		_TRY_BEGIN
; 717  : 		_Copy(_Right);

  00025	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00028	8b ce		 mov	 ecx, esi
  0002a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0002e	e8 00 00 00 00	 call	 ?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXABV12@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy

; 721  : 		_CATCH_END
; 722  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	e8 00 00 00 00	 call	 __EH_epilog3
  0003a	c2 04 00	 ret	 4
__catch$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z$0:

; 718  : 		_CATCH_ALL
; 719  : 		_Tidy();

  0003d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	50		 push	 eax
  00046	52		 push	 edx
  00047	8d 45 08	 lea	 eax, DWORD PTR $T53008[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase

; 720  : 		_RERAISE;

  00050	6a 00		 push	 0
  00052	6a 00		 push	 0
  00054	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN42@Tree:
$LN41@Tree:
  00059	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
__ehhandler$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	??$insert@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::insert<std::pair<Json::Value::CZString const ,Json::Value> &>
; Function compile flags: /Ogsp
;	COMDAT ??$insert@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
??$insert@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::insert<std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT
; _this$ = ecx

; 760  : 		typename _STD tr1::enable_if<!_STD tr1::is_same<const_iterator,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 761  : 			typename _STD tr1::remove_reference<_Valty>::type>::value,
; 762  : 				iterator>::type
; 763  : 		insert(const_iterator _Where,
; 764  : 			_Valty&& _Val)
; 765  : 		{	// try to insert node with value _Val using _Where as a hint
; 766  : 		return (_Insert(_Where,
; 767  : 			this->_Buynode(_STD forward<_Valty>(_Val))));

  00004	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>
  0000e	50		 push	 eax
  0000f	ff 75 0c	 push	 DWORD PTR __Where$[ebp]
  00012	8b ce		 mov	 ecx, esi
  00014	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	5e		 pop	 esi

; 768  : 		}

  00020	5d		 pop	 ebp
  00021	c2 0c 00	 ret	 12			; 0000000cH
??$insert@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::insert<std::pair<Json::Value::CZString const ,Json::Value> &>
_TEXT	ENDS
PUBLIC	??_C@_02GLFAOOJA@?$FL?4?$AA@			; `string'
PUBLIC	_in$GSCopy$
PUBLIC	_path$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z ; Json::Path::makePath
EXTRN	_strchr:PROC
;	COMDAT ??_C@_02GLFAOOJA@?$FL?4?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_02GLFAOOJA@?$FL?4?$AA@ DB '[.', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z$2
__ehfuncinfo$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	ENDS
;	COMDAT ?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z
_TEXT	SEGMENT
_path$GSCopy$ = -136					; size = 4
_in$GSCopy$ = -132					; size = 4
_itInArg$ = -128					; size = 4
_end$ = -124						; size = 4
_this$GSCopy$ = -120					; size = 4
$T34583 = -116						; size = 28
$T34477 = -88						; size = 36
$T34584 = -52						; size = 36
__$EHRec$ = -12						; size = 12
_path$ = 8						; size = 4
_in$ = 12						; size = 4
?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z PROC ; Json::Path::makePath, COMDAT
; _this$ = ecx

; 1562 : {

  00000	6a 7c		 push	 124			; 0000007cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 5d 08	 mov	 ebx, DWORD PTR _path$[ebp]

; 1563 :    const char *current = path.c_str();

  0000f	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  00013	89 4d 88	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR _in$[ebp]

; 1578 :             args_.push_back( index );

  00019	89 9d 78 ff ff
	ff		 mov	 DWORD PTR _path$GSCopy$[ebp], ebx
  0001f	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _in$GSCopy$[ebp], ecx
  00025	72 04		 jb	 SHORT $LN27@makePath

; 1563 :    const char *current = path.c_str();

  00027	8b 33		 mov	 esi, DWORD PTR [ebx]
  00029	eb 02		 jmp	 SHORT $LN28@makePath
$LN27@makePath:
  0002b	8b f3		 mov	 esi, ebx
$LN28@makePath:

; 1564 :    const char *end = current + path.length();

  0002d	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]

; 1565 :    InArgs::const_iterator itInArg = in.begin();

  00030	8b 01		 mov	 eax, DWORD PTR [ecx]
  00032	03 d6		 add	 edx, esi
  00034	89 55 84	 mov	 DWORD PTR _end$[ebp], edx
  00037	89 45 80	 mov	 DWORD PTR _itInArg$[ebp], eax

; 1566 :    while ( current != end )

  0003a	3b f2		 cmp	 esi, edx
  0003c	0f 84 06 01 00
	00		 je	 $LN66@makePath
  00042	33 ff		 xor	 edi, edi
  00044	47		 inc	 edi
  00045	eb 06		 jmp	 SHORT $LN17@makePath
$LL67@makePath:
  00047	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _in$GSCopy$[ebp]
$LN17@makePath:

; 1567 :    {
; 1568 :       if ( *current == '[' )

  0004d	8a 06		 mov	 al, BYTE PTR [esi]
  0004f	3c 5b		 cmp	 al, 91			; 0000005bH
  00051	75 69		 jne	 SHORT $LN15@makePath

; 1569 :       {
; 1570 :          ++current;

  00053	46		 inc	 esi

; 1571 :          if ( *current == '%' )

  00054	80 3e 25	 cmp	 BYTE PTR [esi], 37	; 00000025H
  00057	75 11		 jne	 SHORT $LN14@makePath

; 1572 :             addPathInArg( path, in, itInArg, PathArgument::kindIndex );

  00059	57		 push	 edi
  0005a	8d 45 80	 lea	 eax, DWORD PTR _itInArg$[ebp]
  0005d	50		 push	 eax
  0005e	51		 push	 ecx
  0005f	8b 4d 88	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00062	53		 push	 ebx
  00063	e8 00 00 00 00	 call	 ?addPathInArg@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@AAV?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@4@W4Kind@PathArgument@2@@Z ; Json::Path::addPathInArg

; 1573 :          else

  00068	eb 47		 jmp	 SHORT $LN39@makePath
$LN14@makePath:

; 1574 :          {
; 1575 :             Value::UInt index = 0;

  0006a	33 c0		 xor	 eax, eax
  0006c	eb 17		 jmp	 SHORT $LN69@makePath
$LL12@makePath:

; 1576 :             for ( ; current != end && *current >= '0'  &&  *current <= '9'; ++current )

  0006e	8a 0e		 mov	 cl, BYTE PTR [esi]
  00070	80 f9 30	 cmp	 cl, 48			; 00000030H
  00073	7c 14		 jl	 SHORT $LN10@makePath
  00075	80 f9 39	 cmp	 cl, 57			; 00000039H
  00078	7f 0f		 jg	 SHORT $LN10@makePath

; 1577 :                index = index * 10 + Value::UInt(*current - '0');

  0007a	6b c0 0a	 imul	 eax, 10			; 0000000aH
  0007d	0f be c9	 movsx	 ecx, cl
  00080	8d 44 08 d0	 lea	 eax, DWORD PTR [eax+ecx-48]
  00084	46		 inc	 esi
$LN69@makePath:

; 1576 :             for ( ; current != end && *current >= '0'  &&  *current <= '9'; ++current )

  00085	3b f2		 cmp	 esi, edx
  00087	75 e5		 jne	 SHORT $LL12@makePath
$LN10@makePath:

; 1578 :             args_.push_back( index );

  00089	50		 push	 eax
  0008a	8d 4d a8	 lea	 ecx, DWORD PTR $T34477[ebp]
  0008d	e8 00 00 00 00	 call	 ??0PathArgument@Json@@QAE@I@Z ; Json::PathArgument::PathArgument
  00092	8b 4d 88	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00095	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00099	8d 45 a8	 lea	 eax, DWORD PTR $T34477[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back
  000a2	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000a6	6a 00		 push	 0
  000a8	57		 push	 edi
  000a9	8d 4d a8	 lea	 ecx, DWORD PTR $T34477[ebp]
  000ac	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
$LN39@makePath:

; 1579 :          }
; 1580 :          if ( current == end  ||  *current++ != ']' )

  000b1	3b 75 84	 cmp	 esi, DWORD PTR _end$[ebp]
  000b4	0f 84 8e 00 00
	00		 je	 $LN66@makePath

; 1581 :             invalidPath( path, int(current - path.c_str()) );
; 1582 :       }

  000ba	eb 1a		 jmp	 SHORT $LN71@makePath
$LN15@makePath:

; 1583 :       else if ( *current == '%' )

  000bc	3c 25		 cmp	 al, 37			; 00000025H
  000be	75 12		 jne	 SHORT $LN6@makePath

; 1584 :       {
; 1585 :          addPathInArg( path, in, itInArg, PathArgument::kindKey );

  000c0	6a 02		 push	 2
  000c2	8d 45 80	 lea	 eax, DWORD PTR _itInArg$[ebp]
  000c5	50		 push	 eax
  000c6	51		 push	 ecx
  000c7	8b 4d 88	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  000ca	53		 push	 ebx
  000cb	e8 00 00 00 00	 call	 ?addPathInArg@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@AAV?$_Vector_const_iterator@V?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@4@W4Kind@PathArgument@2@@Z ; Json::Path::addPathInArg

; 1586 :          ++current;

  000d0	eb 04		 jmp	 SHORT $LN71@makePath
$LN6@makePath:

; 1587 :       }
; 1588 :       else if ( *current == '.' )

  000d2	3c 2e		 cmp	 al, 46			; 0000002eH
  000d4	75 03		 jne	 SHORT $LN4@makePath
$LN71@makePath:

; 1589 :       {
; 1590 :          ++current;

  000d6	46		 inc	 esi

; 1591 :       }
; 1592 :       else

  000d7	eb 64		 jmp	 SHORT $LN57@makePath
$LN4@makePath:

; 1593 :       {
; 1594 :          const char *beginName = current;

  000d9	8b de		 mov	 ebx, esi
  000db	eb 15		 jmp	 SHORT $LN70@makePath
$LL2@makePath:

; 1595 :          while ( current != end  &&  !strchr( "[.", *current ) )

  000dd	0f be 06	 movsx	 eax, BYTE PTR [esi]
  000e0	50		 push	 eax
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_02GLFAOOJA@?$FL?4?$AA@
  000e6	e8 00 00 00 00	 call	 _strchr
  000eb	59		 pop	 ecx
  000ec	59		 pop	 ecx
  000ed	85 c0		 test	 eax, eax
  000ef	75 06		 jne	 SHORT $LN1@makePath

; 1596 :             ++current;

  000f1	46		 inc	 esi
$LN70@makePath:

; 1595 :          while ( current != end  &&  !strchr( "[.", *current ) )

  000f2	3b 75 84	 cmp	 esi, DWORD PTR _end$[ebp]
  000f5	75 e6		 jne	 SHORT $LL2@makePath
$LN1@makePath:

; 1597 :          args_.push_back( std::string( beginName, current ) );

  000f7	56		 push	 esi
  000f8	53		 push	 ebx
  000f9	8d 4d 8c	 lea	 ecx, DWORD PTR $T34583[ebp]
  000fc	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00101	50		 push	 eax
  00102	8d 4d cc	 lea	 ecx, DWORD PTR $T34584[ebp]
  00105	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00108	e8 00 00 00 00	 call	 ??0PathArgument@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::PathArgument::PathArgument
  0010d	8b 4d 88	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00110	8d 45 cc	 lea	 eax, DWORD PTR $T34584[ebp]
  00113	50		 push	 eax
  00114	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00118	e8 00 00 00 00	 call	 ?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEX$$QAVPathArgument@Json@@@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back
  0011d	6a 00		 push	 0
  0011f	57		 push	 edi
  00120	8d 4d cc	 lea	 ecx, DWORD PTR $T34584[ebp]
  00123	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00128	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0012c	6a 00		 push	 0
  0012e	57		 push	 edi
  0012f	8d 4d 8c	 lea	 ecx, DWORD PTR $T34583[ebp]
  00132	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00137	8b 9d 78 ff ff
	ff		 mov	 ebx, DWORD PTR _path$GSCopy$[ebp]
$LN57@makePath:

; 1566 :    while ( current != end )

  0013d	8b 55 84	 mov	 edx, DWORD PTR _end$[ebp]
  00140	3b f2		 cmp	 esi, edx
  00142	0f 85 ff fe ff
	ff		 jne	 $LL67@makePath
$LN66@makePath:

; 1598 :       }
; 1599 :    }
; 1600 : }

  00148	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0014d	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR $T34477[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1PathArgument@Json@@QAE@XZ
__unwindfunclet$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z$1:
  00008	8d 4d 8c	 lea	 ecx, DWORD PTR $T34583[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z$2:
  00010	8d 4d cc	 lea	 ecx, DWORD PTR $T34584[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1PathArgument@Json@@QAE@XZ
__ehhandler$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z ENDP ; Json::Path::makePath
PUBLIC	??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@ABV01@@Z ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@ABV01@@Z PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >, COMDAT
; _this$ = ecx

; 111  : 		{	// construct map by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >

; 112  : 		}

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@ABV01@@Z ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Value@Json@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Value@Json@@QAE@ABV01@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0Value@Json@@QAE@ABV01@@Z$1
__ehfuncinfo$??0Value@Json@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Value@Json@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	ENDS
;	COMDAT ??0Value@Json@@QAE@ABV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T53173 = 8						; size = 4
$T53169 = 8						; size = 4
_other$ = 8						; size = 4
??0Value@Json@@QAE@ABV01@@Z PROC			; Json::Value::Value, COMDAT
; _this$ = ecx

; 425  : {

  00000	6a 00		 push	 0
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0Value@Json@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	8b 7d 08	 mov	 edi, DWORD PTR _other$[ebp]
  00011	8a 47 08	 mov	 al, BYTE PTR [edi+8]
  00014	88 46 08	 mov	 BYTE PTR [esi+8], al

; 426  :    switch ( type_ )

  00017	0f be c0	 movsx	 eax, al
  0001a	33 c9		 xor	 ecx, ecx
  0001c	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0001f	3b c1		 cmp	 eax, ecx
  00021	7c 6d		 jl	 SHORT $LN6@Value@4
  00023	83 f8 03	 cmp	 eax, 3
  00026	7e 5e		 jle	 SHORT $LN11@Value@4
  00028	83 f8 04	 cmp	 eax, 4
  0002b	74 36		 je	 SHORT $LN10@Value@4
  0002d	83 f8 05	 cmp	 eax, 5
  00030	74 54		 je	 SHORT $LN11@Value@4
  00032	83 c0 fa	 add	 eax, -6			; fffffffaH
  00035	83 f8 01	 cmp	 eax, 1
  00038	77 56		 ja	 SHORT $LN6@Value@4

; 444  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 445  :    case arrayValue:
; 446  :    case objectValue:
; 447  :       value_.map_ = new ObjectValues( *other.value_.map_ );

  0003a	6a 10		 push	 16			; 00000010H
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b d8		 mov	 ebx, eax
  00043	59		 pop	 ecx
  00044	89 5d 08	 mov	 DWORD PTR $T53169[ebp], ebx
  00047	33 c0		 xor	 eax, eax
  00049	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  0004c	3b d8		 cmp	 ebx, eax
  0004e	74 0b		 je	 SHORT $LN16@Value@4
  00050	ff 37		 push	 DWORD PTR [edi]
  00052	8b cb		 mov	 ecx, ebx
  00054	e8 00 00 00 00	 call	 ??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
  00059	8b c3		 mov	 eax, ebx
$LN16@Value@4:
  0005b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0005f	89 06		 mov	 DWORD PTR [esi], eax

; 448  :       break;

  00061	eb 2d		 jmp	 SHORT $LN6@Value@4
$LN10@Value@4:

; 434  :       break;
; 435  :    case stringValue:
; 436  :       if ( other.value_.string_ )

  00063	39 0f		 cmp	 DWORD PTR [edi], ecx
  00065	74 1b		 je	 SHORT $LN9@Value@4

; 437  :       {
; 438  :          value_.string_ = valueAllocator()->duplicateStringValue( other.value_.string_ );

  00067	e8 00 00 00 00	 call	 ?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00070	6a ff		 push	 -1
  00072	ff 37		 push	 DWORD PTR [edi]
  00074	ff 50 0c	 call	 DWORD PTR [eax+12]

; 439  :          allocated_ = true;

  00077	81 4e 08 00 01
	00 00		 or	 DWORD PTR [esi+8], 256	; 00000100H
  0007e	89 06		 mov	 DWORD PTR [esi], eax

; 440  :       }
; 441  :       else

  00080	eb 0e		 jmp	 SHORT $LN6@Value@4
$LN9@Value@4:

; 442  :          value_.string_ = 0;

  00082	89 0e		 mov	 DWORD PTR [esi], ecx

; 443  :       break;

  00084	eb 0a		 jmp	 SHORT $LN6@Value@4
$LN11@Value@4:

; 427  :    {
; 428  :    case nullValue:
; 429  :    case intValue:
; 430  :    case uintValue:
; 431  :    case realValue:
; 432  :    case booleanValue:
; 433  :       value_ = other.value_;

  00086	8b 07		 mov	 eax, DWORD PTR [edi]
  00088	89 06		 mov	 DWORD PTR [esi], eax
  0008a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0008d	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN6@Value@4:

; 449  : #else
; 450  :    case arrayValue:
; 451  :       value_.array_ = arrayAllocator()->newArrayCopy( *other.value_.array_ );
; 452  :       break;
; 453  :    case objectValue:
; 454  :       value_.map_ = mapAllocator()->newMapCopy( *other.value_.map_ );
; 455  :       break;
; 456  : #endif
; 457  :    default:
; 458  :       JSON_ASSERT_UNREACHABLE;
; 459  :    }
; 460  :    if ( other.comments_ )

  00090	83 7f 0c 00	 cmp	 DWORD PTR [edi+12], 0
  00094	74 5f		 je	 SHORT $LN2@Value@4

; 461  :    {
; 462  :       comments_ = new CommentInfo[numberOfCommentPlacement];

  00096	6a 10		 push	 16			; 00000010H
  00098	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0009d	59		 pop	 ecx
  0009e	89 45 08	 mov	 DWORD PTR $T53173[ebp], eax
  000a1	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000a8	85 c0		 test	 eax, eax
  000aa	74 21		 je	 SHORT $LN18@Value@4
  000ac	68 00 00 00 00	 push	 OFFSET ??1CommentInfo@Value@Json@@QAE@XZ ; Json::Value::CommentInfo::~CommentInfo
  000b1	68 00 00 00 00	 push	 OFFSET ??0CommentInfo@Value@Json@@QAE@XZ ; Json::Value::CommentInfo::CommentInfo
  000b6	6a 03		 push	 3
  000b8	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  000bb	6a 04		 push	 4
  000bd	53		 push	 ebx
  000be	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3
  000c4	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  000c9	8b c3		 mov	 eax, ebx
  000cb	eb 02		 jmp	 SHORT $LN19@Value@4
$LN18@Value@4:
  000cd	33 c0		 xor	 eax, eax
$LN19@Value@4:
  000cf	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000d3	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  000d6	33 db		 xor	 ebx, ebx
$LL4@Value@4:

; 464  :       {
; 465  :          const CommentInfo &otherComment = other.comments_[comment];

  000d8	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 466  :          if ( otherComment.comment_ )

  000db	8b 04 18	 mov	 eax, DWORD PTR [eax+ebx]
  000de	85 c0		 test	 eax, eax
  000e0	74 0b		 je	 SHORT $LN3@Value@4

; 467  :             comments_[comment].setComment( otherComment.comment_ );

  000e2	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000e5	50		 push	 eax
  000e6	03 cb		 add	 ecx, ebx
  000e8	e8 00 00 00 00	 call	 ?setComment@CommentInfo@Value@Json@@QAEXPBD@Z ; Json::Value::CommentInfo::setComment
$LN3@Value@4:

; 463  :       for ( int comment =0; comment < numberOfCommentPlacement; ++comment )

  000ed	83 c3 04	 add	 ebx, 4
  000f0	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  000f3	7c e3		 jl	 SHORT $LL4@Value@4
$LN2@Value@4:

; 468  :       }
; 469  :    }
; 470  : }

  000f5	8b c6		 mov	 eax, esi
  000f7	e8 00 00 00 00	 call	 __EH_epilog3
  000fc	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Value@Json@@QAE@ABV01@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR $T53169[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__unwindfunclet$??0Value@Json@@QAE@ABV01@@Z$1:
  0000a	ff 75 08	 push	 DWORD PTR $T53173[ebp]
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	59		 pop	 ecx
  00013	c3		 ret	 0
__ehhandler$??0Value@Json@@QAE@ABV01@@Z:
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0001e	33 c8		 xor	 ecx, eax
  00020	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00025	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Value@Json@@QAE@ABV01@@Z
  0002a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Value@Json@@QAE@ABV01@@Z ENDP			; Json::Value::Value
PUBLIC	??4Value@Json@@QAEAAV01@ABV01@@Z		; Json::Value::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4Value@Json@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_temp$ = -16						; size = 16
_other$ = 8						; size = 4
??4Value@Json@@QAEAAV01@ABV01@@Z PROC			; Json::Value::operator=, COMDAT
; _this$ = ecx

; 510  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 511  :    Value temp( other );

  00007	ff 75 08	 push	 DWORD PTR _other$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	8d 4d f0	 lea	 ecx, DWORD PTR _temp$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0Value@Json@@QAE@ABV01@@Z ; Json::Value::Value

; 512  :    swap( temp );

  00014	8d 45 f0	 lea	 eax, DWORD PTR _temp$[ebp]
  00017	50		 push	 eax
  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?swap@Value@Json@@QAEXAAV12@@Z ; Json::Value::swap

; 513  :    return *this;

  0001f	8d 4d f0	 lea	 ecx, DWORD PTR _temp$[ebp]
  00022	e8 00 00 00 00	 call	 ??1Value@Json@@QAE@XZ	; Json::Value::~Value
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi

; 514  : }

  0002a	c9		 leave
  0002b	c2 04 00	 ret	 4
??4Value@Json@@QAEAAV01@ABV01@@Z ENDP			; Json::Value::operator=
_TEXT	ENDS
PUBLIC	?get@Value@Json@@QBE?AV12@IABV12@@Z		; Json::Value::get
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$?get@Value@Json@@QBE?AV12@IABV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get@Value@Json@@QBE?AV12@IABV12@@Z$1
__ehfuncinfo$?get@Value@Json@@QBE?AV12@IABV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get@Value@Json@@QBE?AV12@IABV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	ENDS
;	COMDAT ?get@Value@Json@@QBE?AV12@IABV12@@Z
_TEXT	SEGMENT
_key$53274 = -20					; size = 8
$T53204 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
$T53278 = 12						; size = 4
_index$ = 12						; size = 4
_defaultValue$ = 16					; size = 4
?get@Value@Json@@QBE?AV12@IABV12@@Z PROC		; Json::Value::get, COMDAT
; _this$ = ecx

; 1049 : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?get@Value@Json@@QBE?AV12@IABV12@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	33 c0		 xor	 eax, eax
  00010	89 45 f0	 mov	 DWORD PTR $T53204[ebp], eax

; 1050 :    const Value *value = &((*this)[index]);

  00013	38 46 08	 cmp	 BYTE PTR [esi+8], al
  00016	74 3f		 je	 SHORT $LN30@get
  00018	89 45 ec	 mov	 DWORD PTR _key$53274[ebp], eax
  0001b	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  0001e	89 45 f0	 mov	 DWORD PTR _key$53274[ebp+4], eax
  00021	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00023	8d 45 ec	 lea	 eax, DWORD PTR _key$53274[ebp]
  00026	50		 push	 eax
  00027	8d 45 0c	 lea	 eax, DWORD PTR $T53278[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
  00030	8b 00		 mov	 eax, DWORD PTR [eax]
  00032	8b 36		 mov	 esi, DWORD PTR [esi]
  00034	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00038	8d 4d ec	 lea	 ecx, DWORD PTR _key$53274[ebp]
  0003b	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0003e	75 07		 jne	 SHORT $LN7@get
  00040	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  00045	eb 10		 jmp	 SHORT $LN30@get
$LN7@get:
  00047	8d 70 14	 lea	 esi, DWORD PTR [eax+20]
  0004a	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString

; 1051 :    return value == &null ? defaultValue : *value;

  0004f	81 fe 00 00 00
	00		 cmp	 esi, OFFSET ?null@Value@Json@@2V12@B ; Json::Value::null
  00055	75 03		 jne	 SHORT $LN3@get
$LN30@get:
  00057	8b 75 10	 mov	 esi, DWORD PTR _defaultValue$[ebp]
$LN3@get:
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??0Value@Json@@QAE@ABV01@@Z ; Json::Value::Value
  00063	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1052 : }

  00066	e8 00 00 00 00	 call	 __EH_epilog3
  0006b	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?get@Value@Json@@QBE?AV12@IABV12@@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _key$53274[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__ehhandler$?get@Value@Json@@QBE?AV12@IABV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?get@Value@Json@@QBE?AV12@IABV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?get@Value@Json@@QBE?AV12@IABV12@@Z ENDP		; Json::Value::get
PUBLIC	?get@Value@Json@@QBE?AV12@PBDABV12@@Z		; Json::Value::get
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$?get@Value@Json@@QBE?AV12@PBDABV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get@Value@Json@@QBE?AV12@PBDABV12@@Z$1
__ehfuncinfo$?get@Value@Json@@QBE?AV12@PBDABV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get@Value@Json@@QBE?AV12@PBDABV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	ENDS
;	COMDAT ?get@Value@Json@@QBE?AV12@PBDABV12@@Z
_TEXT	SEGMENT
_actualKey$53394 = -20					; size = 8
$T53304 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
$T53368 = 12						; size = 4
_key$ = 12						; size = 4
_defaultValue$ = 16					; size = 4
?get@Value@Json@@QBE?AV12@PBDABV12@@Z PROC		; Json::Value::get, COMDAT
; _this$ = ecx

; 1128 : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?get@Value@Json@@QBE?AV12@PBDABV12@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	33 c0		 xor	 eax, eax
  00010	89 45 f0	 mov	 DWORD PTR $T53304[ebp], eax

; 1129 :    const Value *value = &((*this)[key]);

  00013	38 46 08	 cmp	 BYTE PTR [esi+8], al
  00016	74 3f		 je	 SHORT $LN32@get@2
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  0001b	89 4d ec	 mov	 DWORD PTR _actualKey$53394[ebp], ecx
  0001e	89 45 f0	 mov	 DWORD PTR _actualKey$53394[ebp+4], eax
  00021	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00023	8d 45 ec	 lea	 eax, DWORD PTR _actualKey$53394[ebp]
  00026	50		 push	 eax
  00027	8d 45 0c	 lea	 eax, DWORD PTR $T53368[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
  00030	8b 00		 mov	 eax, DWORD PTR [eax]
  00032	8b 36		 mov	 esi, DWORD PTR [esi]
  00034	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00038	8d 4d ec	 lea	 ecx, DWORD PTR _actualKey$53394[ebp]
  0003b	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0003e	75 07		 jne	 SHORT $LN7@get@2
  00040	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  00045	eb 10		 jmp	 SHORT $LN32@get@2
$LN7@get@2:
  00047	8d 70 14	 lea	 esi, DWORD PTR [eax+20]
  0004a	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString

; 1130 :    return value == &null ? defaultValue : *value;

  0004f	81 fe 00 00 00
	00		 cmp	 esi, OFFSET ?null@Value@Json@@2V12@B ; Json::Value::null
  00055	75 03		 jne	 SHORT $LN3@get@2
$LN32@get@2:
  00057	8b 75 10	 mov	 esi, DWORD PTR _defaultValue$[ebp]
$LN3@get@2:
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??0Value@Json@@QAE@ABV01@@Z ; Json::Value::Value
  00063	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1131 : }

  00066	e8 00 00 00 00	 call	 __EH_epilog3
  0006b	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?get@Value@Json@@QBE?AV12@PBDABV12@@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _actualKey$53394[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__ehhandler$?get@Value@Json@@QBE?AV12@PBDABV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?get@Value@Json@@QBE?AV12@PBDABV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?get@Value@Json@@QBE?AV12@PBDABV12@@Z ENDP		; Json::Value::get
PUBLIC	?get@Value@Json@@QBE?AV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; Json::Value::get
; Function compile flags: /Ogsp
;	COMDAT ?get@Value@Json@@QBE?AV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
_TEXT	SEGMENT
$T53407 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_key$ = 12						; size = 4
_defaultValue$ = 16					; size = 4
?get@Value@Json@@QBE?AV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z PROC ; Json::Value::get, COMDAT
; _this$ = ecx

; 1137 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1138 :    return get( key.c_str(), defaultValue );

  00004	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00007	83 65 fc 00	 and	 DWORD PTR $T53407[ebp], 0
  0000b	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0000f	72 02		 jb	 SHORT $LN9@get@3
  00011	8b 00		 mov	 eax, DWORD PTR [eax]
$LN9@get@3:
  00013	ff 75 10	 push	 DWORD PTR _defaultValue$[ebp]
  00016	50		 push	 eax
  00017	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ?get@Value@Json@@QBE?AV12@PBDABV12@@Z ; Json::Value::get
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1139 : }

  00022	c9		 leave
  00023	c2 0c 00	 ret	 12			; 0000000cH
?get@Value@Json@@QBE?AV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ENDP ; Json::Value::get
_TEXT	ENDS
PUBLIC	?removeMember@Value@Json@@QAE?AV12@PBD@Z	; Json::Value::removeMember
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$?removeMember@Value@Json@@QAE?AV12@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?removeMember@Value@Json@@QAE?AV12@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?removeMember@Value@Json@@QAE?AV12@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?removeMember@Value@Json@@QAE?AV12@PBD@Z$2
__ehfuncinfo$?removeMember@Value@Json@@QAE?AV12@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?removeMember@Value@Json@@QAE?AV12@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	ENDS
;	COMDAT ?removeMember@Value@Json@@QAE?AV12@PBD@Z
_TEXT	SEGMENT
_old$ = -40						; size = 16
_actualKey$ = -24					; size = 8
$T53429 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
$T53427 = 12						; size = 4
_it$ = 12						; size = 4
_key$ = 12						; size = 4
?removeMember@Value@Json@@QAE?AV12@PBD@Z PROC		; Json::Value::removeMember, COMDAT
; _this$ = ecx

; 1143 : {

  00000	6a 1c		 push	 28			; 0000001cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?removeMember@Value@Json@@QAE?AV12@PBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	83 65 f0 00	 and	 DWORD PTR $T53429[ebp], 0

; 1144 :    JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );
; 1145 :    if ( type_ == nullValue )

  00012	80 7e 08 00	 cmp	 BYTE PTR [esi+8], 0
  00016	75 0f		 jne	 SHORT $LN2@removeMemb

; 1146 :       return null;

  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	68 00 00 00 00	 push	 OFFSET ?null@Value@Json@@2V12@B ; Json::Value::null
  00020	e8 00 00 00 00	 call	 ??0Value@Json@@QAE@ABV01@@Z ; Json::Value::Value
  00025	eb 7f		 jmp	 SHORT $LN34@removeMemb
$LN2@removeMemb:

; 1147 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1148 :    CZString actualKey( key, CZString::noDuplication );

  00027	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  0002a	83 65 ec 00	 and	 DWORD PTR _actualKey$[ebp+4], 0
  0002e	89 45 e8	 mov	 DWORD PTR _actualKey$[ebp], eax

; 1149 :    ObjectValues::iterator it = value_.map_->find( actualKey );

  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8d 45 e8	 lea	 eax, DWORD PTR _actualKey$[ebp]
  00036	50		 push	 eax
  00037	33 db		 xor	 ebx, ebx
  00039	8d 45 0c	 lea	 eax, DWORD PTR _it$[ebp]
  0003c	43		 inc	 ebx
  0003d	50		 push	 eax
  0003e	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00041	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find

; 1150 :    if ( it == value_.map_->end() )

  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004b	8b 7d 0c	 mov	 edi, DWORD PTR _it$[ebp]
  0004e	3b f8		 cmp	 edi, eax
  00050	75 12		 jne	 SHORT $LN1@removeMemb

; 1151 :       return null;

  00052	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00055	68 00 00 00 00	 push	 OFFSET ?null@Value@Json@@2V12@B ; Json::Value::null
  0005a	e8 00 00 00 00	 call	 ??0Value@Json@@QAE@ABV01@@Z ; Json::Value::Value
  0005f	89 5d f0	 mov	 DWORD PTR $T53429[ebp], ebx
  00062	eb 36		 jmp	 SHORT $LN35@removeMemb
$LN1@removeMemb:

; 1152 :    Value old(it->second);

  00064	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  00067	50		 push	 eax
  00068	8d 4d d8	 lea	 ecx, DWORD PTR _old$[ebp]
  0006b	e8 00 00 00 00	 call	 ??0Value@Json@@QAE@ABV01@@Z ; Json::Value::Value

; 1153 :    value_.map_->erase(it);

  00070	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00072	57		 push	 edi
  00073	8d 45 0c	 lea	 eax, DWORD PTR $T53427[ebp]
  00076	50		 push	 eax
  00077	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0007b	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase

; 1154 :    return old;

  00080	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00083	8d 45 d8	 lea	 eax, DWORD PTR _old$[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??0Value@Json@@QAE@ABV01@@Z ; Json::Value::Value
  0008c	8d 4d d8	 lea	 ecx, DWORD PTR _old$[ebp]
  0008f	89 5d f0	 mov	 DWORD PTR $T53429[ebp], ebx
  00092	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00095	e8 00 00 00 00	 call	 ??1Value@Json@@QAE@XZ	; Json::Value::~Value
$LN35@removeMemb:
  0009a	8d 4d e8	 lea	 ecx, DWORD PTR _actualKey$[ebp]
  0009d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a1	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
$LN34@removeMemb:
  000a6	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1155 : #else
; 1156 :    Value *value = value_.map_->find( key );
; 1157 :    if (value){
; 1158 :       Value old(*value);
; 1159 :       value_.map_.remove( key );
; 1160 :       return old;
; 1161 :    } else {
; 1162 :       return null;
; 1163 :    }
; 1164 : #endif
; 1165 : }

  000a9	e8 00 00 00 00	 call	 __EH_epilog3
  000ae	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?removeMember@Value@Json@@QAE?AV12@PBD@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T53429[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN6@removeMemb
  0000c	83 65 f0 fe	 and	 DWORD PTR $T53429[ebp], -2 ; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1Value@Json@@QAE@XZ	; Json::Value::~Value
$LN6@removeMemb:
  00018	c3		 ret	 0
__unwindfunclet$?removeMember@Value@Json@@QAE?AV12@PBD@Z$1:
  00019	8d 4d e8	 lea	 ecx, DWORD PTR _actualKey$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__unwindfunclet$?removeMember@Value@Json@@QAE?AV12@PBD@Z$2:
  00021	8d 4d d8	 lea	 ecx, DWORD PTR _old$[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1Value@Json@@QAE@XZ	; Json::Value::~Value
__ehhandler$?removeMember@Value@Json@@QAE?AV12@PBD@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?removeMember@Value@Json@@QAE?AV12@PBD@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?removeMember@Value@Json@@QAE?AV12@PBD@Z ENDP		; Json::Value::removeMember
PUBLIC	?removeMember@Value@Json@@QAE?AV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::removeMember
; Function compile flags: /Ogsp
;	COMDAT ?removeMember@Value@Json@@QAE?AV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T53516 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_key$ = 12						; size = 4
?removeMember@Value@Json@@QAE?AV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::removeMember, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1170 :    return removeMember( key.c_str() );

  00004	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00007	83 65 fc 00	 and	 DWORD PTR $T53516[ebp], 0
  0000b	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0000f	72 02		 jb	 SHORT $LN9@removeMemb@2
  00011	8b 00		 mov	 eax, DWORD PTR [eax]
$LN9@removeMemb@2:
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ?removeMember@Value@Json@@QAE?AV12@PBD@Z ; Json::Value::removeMember
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1171 : }

  0001f	c9		 leave
  00020	c2 08 00	 ret	 8
?removeMember@Value@Json@@QAE?AV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::removeMember
_TEXT	ENDS
PUBLIC	??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z ; Json::Path::Path
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z$1
__ehfuncinfo$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	ENDS
;	COMDAT ??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z
_TEXT	SEGMENT
_in$ = -32						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_path$ = 8						; size = 4
_a1$ = 12						; size = 4
_a2$ = 16						; size = 4
_a3$ = 20						; size = 4
_a4$ = 24						; size = 4
_a5$ = 28						; size = 4
??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z PROC ; Json::Path::Path, COMDAT
; _this$ = ecx

; 1548 : {

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	33 c0		 xor	 eax, eax
  00013	89 06		 mov	 DWORD PTR [esi], eax
  00015	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00018	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0001b	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax

; 1549 :    InArgs in;

  0001e	89 45 e0	 mov	 DWORD PTR _in$[ebp], eax
  00021	89 45 e4	 mov	 DWORD PTR _in$[ebp+4], eax
  00024	89 45 e8	 mov	 DWORD PTR _in$[ebp+8], eax

; 1550 :    in.push_back( &a1 );

  00027	8d 45 0c	 lea	 eax, DWORD PTR _a1$[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d e0	 lea	 ecx, DWORD PTR _in$[ebp]
  0002e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00032	e8 00 00 00 00	 call	 ?push_back@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEX$$QAPBVPathArgument@Json@@@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::push_back

; 1551 :    in.push_back( &a2 );

  00037	8d 45 10	 lea	 eax, DWORD PTR _a2$[ebp]
  0003a	50		 push	 eax
  0003b	8d 4d e0	 lea	 ecx, DWORD PTR _in$[ebp]
  0003e	e8 00 00 00 00	 call	 ?push_back@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEX$$QAPBVPathArgument@Json@@@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::push_back

; 1552 :    in.push_back( &a3 );

  00043	8d 45 14	 lea	 eax, DWORD PTR _a3$[ebp]
  00046	50		 push	 eax
  00047	8d 4d e0	 lea	 ecx, DWORD PTR _in$[ebp]
  0004a	e8 00 00 00 00	 call	 ?push_back@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEX$$QAPBVPathArgument@Json@@@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::push_back

; 1553 :    in.push_back( &a4 );

  0004f	8d 45 18	 lea	 eax, DWORD PTR _a4$[ebp]
  00052	50		 push	 eax
  00053	8d 4d e0	 lea	 ecx, DWORD PTR _in$[ebp]
  00056	e8 00 00 00 00	 call	 ?push_back@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEX$$QAPBVPathArgument@Json@@@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::push_back

; 1554 :    in.push_back( &a5 );

  0005b	8d 45 1c	 lea	 eax, DWORD PTR _a5$[ebp]
  0005e	50		 push	 eax
  0005f	8d 4d e0	 lea	 ecx, DWORD PTR _in$[ebp]
  00062	e8 00 00 00 00	 call	 ?push_back@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEX$$QAPBVPathArgument@Json@@@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::push_back

; 1555 :    makePath( path, in );

  00067	8d 45 e0	 lea	 eax, DWORD PTR _in$[ebp]
  0006a	50		 push	 eax
  0006b	ff 75 08	 push	 DWORD PTR _path$[ebp]
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z ; Json::Path::makePath

; 1556 : }

  00075	8d 4d e0	 lea	 ecx, DWORD PTR _in$[ebp]
  00078	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXXZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Tidy
  0007d	8b c6		 mov	 eax, esi
  0007f	e8 00 00 00 00	 call	 __EH_epilog3
  00084	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::~vector<Json::PathArgument,std::allocator<Json::PathArgument> >
__unwindfunclet$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z$1:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR _in$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::~vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
__ehhandler$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z ENDP ; Json::Path::Path
PUBLIC	?resolve@Path@Json@@QBE?AVValue@2@ABV32@0@Z	; Json::Path::resolve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$?resolve@Path@Json@@QBE?AVValue@2@ABV32@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resolve@Path@Json@@QBE?AVValue@2@ABV32@0@Z$1
__ehfuncinfo$?resolve@Path@Json@@QBE?AVValue@2@ABV32@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?resolve@Path@Json@@QBE?AVValue@2@ABV32@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	ENDS
;	COMDAT ?resolve@Path@Json@@QBE?AVValue@2@ABV32@0@Z
_TEXT	SEGMENT
_key$53720 = -24					; size = 8
$T53602 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
$T53724 = 12						; size = 4
_root$ = 12						; size = 4
_defaultValue$ = 16					; size = 4
?resolve@Path@Json@@QBE?AVValue@2@ABV32@0@Z PROC	; Json::Path::resolve, COMDAT
; _this$ = ecx

; 1667 : {

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?resolve@Path@Json@@QBE?AVValue@2@ABV32@0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	83 65 ec 00	 and	 DWORD PTR $T53602[ebp], 0

; 1668 :    const Value *node = &root;
; 1669 :    for ( Args::const_iterator it = args_.begin(); it != args_.end(); ++it )

  00013	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00015	8b 75 0c	 mov	 esi, DWORD PTR _root$[ebp]
  00018	3b 59 04	 cmp	 ebx, DWORD PTR [ecx+4]
  0001b	0f 84 9a 00 00
	00		 je	 $LN8@resolve@2
$LL21@resolve@2:

; 1670 :    {
; 1671 :       const PathArgument &arg = *it;
; 1672 :       if ( arg.kind_ == PathArgument::kindIndex )

  00021	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  00024	83 f8 01	 cmp	 eax, 1
  00027	75 63		 jne	 SHORT $LN7@resolve@2

; 1673 :       {
; 1674 :          if ( !node->isArray()  ||  node->isValidIndex( arg.index_ ) )

  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?isArray@Value@Json@@QBE_NXZ ; Json::Value::isArray
  00030	84 c0		 test	 al, al
  00032	0f 84 97 00 00
	00		 je	 $LN63@resolve@2
  00038	8b 7b 1c	 mov	 edi, DWORD PTR [ebx+28]
  0003b	e8 00 00 00 00	 call	 ?size@Value@Json@@QBEIXZ ; Json::Value::size
  00040	3b f8		 cmp	 edi, eax
  00042	0f 82 87 00 00
	00		 jb	 $LN63@resolve@2

; 1676 :          node = &((*node)[arg.index_]);

  00048	80 7e 08 00	 cmp	 BYTE PTR [esi+8], 0
  0004c	75 07		 jne	 SHORT $LN40@resolve@2
$LN68@resolve@2:
  0004e	be 00 00 00 00	 mov	 esi, OFFSET ?null@Value@Json@@2V12@B ; Json::Value::null
  00053	eb 57		 jmp	 SHORT $LN9@resolve@2
$LN40@resolve@2:
  00055	83 65 e8 00	 and	 DWORD PTR _key$53720[ebp], 0
  00059	89 7d ec	 mov	 DWORD PTR _key$53720[ebp+4], edi
  0005c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005e	8d 45 e8	 lea	 eax, DWORD PTR _key$53720[ebp]
  00061	50		 push	 eax
  00062	8d 45 0c	 lea	 eax, DWORD PTR $T53724[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
  0006b	8b 00		 mov	 eax, DWORD PTR [eax]
  0006d	8b 36		 mov	 esi, DWORD PTR [esi]
  0006f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00073	8d 4d e8	 lea	 ecx, DWORD PTR _key$53720[ebp]
  00076	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00079	75 07		 jne	 SHORT $LN39@resolve@2
  0007b	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  00080	eb cc		 jmp	 SHORT $LN68@resolve@2
$LN39@resolve@2:
  00082	8d 70 14	 lea	 esi, DWORD PTR [eax+20]
  00085	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  0008a	eb 20		 jmp	 SHORT $LN9@resolve@2
$LN7@resolve@2:

; 1677 :       }
; 1678 :       else if ( arg.kind_ == PathArgument::kindKey )

  0008c	83 f8 02	 cmp	 eax, 2
  0008f	75 1b		 jne	 SHORT $LN9@resolve@2

; 1679 :       {
; 1680 :          if ( !node->isObject() )

  00091	8b ce		 mov	 ecx, esi
  00093	e8 00 00 00 00	 call	 ?isObject@Value@Json@@QBE_NXZ ; Json::Value::isObject
  00098	84 c0		 test	 al, al
  0009a	74 33		 je	 SHORT $LN63@resolve@2

; 1681 :             return defaultValue;
; 1682 :          node = &((*node)[arg.key_]);

  0009c	53		 push	 ebx
  0009d	e8 00 00 00 00	 call	 ??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::operator[]
  000a2	8b f0		 mov	 esi, eax

; 1683 :          if ( node == &Value::null )

  000a4	81 fe 00 00 00
	00		 cmp	 esi, OFFSET ?null@Value@Json@@2V12@B ; Json::Value::null
  000aa	74 23		 je	 SHORT $LN63@resolve@2
$LN9@resolve@2:

; 1668 :    const Value *node = &root;
; 1669 :    for ( Args::const_iterator it = args_.begin(); it != args_.end(); ++it )

  000ac	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000af	83 c3 24	 add	 ebx, 36			; 00000024H
  000b2	3b 58 04	 cmp	 ebx, DWORD PTR [eax+4]
  000b5	0f 85 66 ff ff
	ff		 jne	 $LL21@resolve@2
$LN8@resolve@2:

; 1684 :             return defaultValue;
; 1685 :       }
; 1686 :    }
; 1687 :    return *node;

  000bb	56		 push	 esi
$LN69@resolve@2:
  000bc	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000bf	e8 00 00 00 00	 call	 ??0Value@Json@@QAE@ABV01@@Z ; Json::Value::Value
  000c4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1688 : }

  000c7	e8 00 00 00 00	 call	 __EH_epilog3
  000cc	c2 0c 00	 ret	 12			; 0000000cH
$LN63@resolve@2:

; 1675 :             return defaultValue;

  000cf	ff 75 10	 push	 DWORD PTR _defaultValue$[ebp]
  000d2	eb e8		 jmp	 SHORT $LN69@resolve@2
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?resolve@Path@Json@@QBE?AVValue@2@ABV32@0@Z$1:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _key$53720[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__ehhandler$?resolve@Path@Json@@QBE?AVValue@2@ABV32@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?resolve@Path@Json@@QBE?AVValue@2@ABV32@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?resolve@Path@Json@@QBE?AVValue@2@ABV32@0@Z ENDP	; Json::Path::resolve
PUBLIC	??$?0AAVCZString@Value@Json@@ABV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z ; std::_Pair_base<Json::Value::CZString const ,Json::Value>::_Pair_base<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$?0AAVCZString@Value@Json@@ABV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAVCZString@Value@Json@@ABV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z$0
__ehfuncinfo$??$?0AAVCZString@Value@Json@@ABV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0AAVCZString@Value@Json@@ABV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??$?0AAVCZString@Value@Json@@ABV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAVCZString@Value@Json@@ABV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z PROC ; std::_Pair_base<Json::Value::CZString const ,Json::Value>::_Pair_base<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$?0AAVCZString@Value@Json@@ABV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 75 08	 push	 DWORD PTR __Val1$[ebp]
  00014	e8 00 00 00 00	 call	 ??0CZString@Value@Json@@QAE@ABV012@@Z ; Json::Value::CZString::CZString
  00019	ff 75 0c	 push	 DWORD PTR __Val2$[ebp]
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00020	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00023	e8 00 00 00 00	 call	 ??0Value@Json@@QAE@ABV01@@Z ; Json::Value::Value

; 164  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	e8 00 00 00 00	 call	 __EH_epilog3
  0002f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0AAVCZString@Value@Json@@ABV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__ehhandler$??$?0AAVCZString@Value@Json@@ABV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0AAVCZString@Value@Json@@ABV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0AAVCZString@Value@Json@@ABV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z ENDP ; std::_Pair_base<Json::Value::CZString const ,Json::Value>::_Pair_base<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &>
PUBLIC	??$?0ABVCZString@Value@Json@@AAV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABVCZString@Value@Json@@AAV34@@Z ; std::_Pair_base<Json::Value::CZString const ,Json::Value>::_Pair_base<Json::Value::CZString const ,Json::Value><Json::Value::CZString const &,Json::Value &>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABVCZString@Value@Json@@AAV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABVCZString@Value@Json@@AAV34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABVCZString@Value@Json@@AAV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABVCZString@Value@Json@@AAV34@@Z$0
__ehfuncinfo$??$?0ABVCZString@Value@Json@@AAV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABVCZString@Value@Json@@AAV34@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABVCZString@Value@Json@@AAV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABVCZString@Value@Json@@AAV34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??$?0ABVCZString@Value@Json@@AAV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABVCZString@Value@Json@@AAV34@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0ABVCZString@Value@Json@@AAV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABVCZString@Value@Json@@AAV34@@Z PROC ; std::_Pair_base<Json::Value::CZString const ,Json::Value>::_Pair_base<Json::Value::CZString const ,Json::Value><Json::Value::CZString const &,Json::Value &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$?0ABVCZString@Value@Json@@AAV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABVCZString@Value@Json@@AAV34@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 75 08	 push	 DWORD PTR __Val1$[ebp]
  00014	e8 00 00 00 00	 call	 ??0CZString@Value@Json@@QAE@ABV012@@Z ; Json::Value::CZString::CZString
  00019	ff 75 0c	 push	 DWORD PTR __Val2$[ebp]
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00020	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00023	e8 00 00 00 00	 call	 ??0Value@Json@@QAE@ABV01@@Z ; Json::Value::Value

; 164  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	e8 00 00 00 00	 call	 __EH_epilog3
  0002f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0ABVCZString@Value@Json@@AAV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABVCZString@Value@Json@@AAV34@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__ehhandler$??$?0ABVCZString@Value@Json@@AAV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABVCZString@Value@Json@@AAV34@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0ABVCZString@Value@Json@@AAV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABVCZString@Value@Json@@AAV34@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0ABVCZString@Value@Json@@AAV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABVCZString@Value@Json@@AAV34@@Z ENDP ; std::_Pair_base<Json::Value::CZString const ,Json::Value>::_Pair_base<Json::Value::CZString const ,Json::Value><Json::Value::CZString const &,Json::Value &>
PUBLIC	??$?0AAVCZString@Value@Json@@ABV12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &>
; Function compile flags: /Ogsp
;	COMDAT ??$?0AAVCZString@Value@Json@@ABV12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAVCZString@Value@Json@@ABV12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z PROC ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 0c	 push	 DWORD PTR __Val2$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR __Val1$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$?0AAVCZString@Value@Json@@ABV12@@?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z ; std::_Pair_base<Json::Value::CZString const ,Json::Value>::_Pair_base<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &>

; 248  : 		}

  00011	8b c6		 mov	 eax, esi
  00013	5e		 pop	 esi
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAVCZString@Value@Json@@ABV12@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z ENDP ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &>
_TEXT	ENDS
PUBLIC	??AValue@Json@@QAEAAV01@I@Z			; Json::Value::operator[]
;	COMDAT xdata$x
; File f:\projects\git\yfnet\trunk\src\include\json\json_value.cpp
xdata$x	SEGMENT
__unwindtable$??AValue@Json@@QAEAAV01@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$2
__ehfuncinfo$??AValue@Json@@QAEAAV01@I@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??AValue@Json@@QAEAAV01@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??AValue@Json@@QAEAAV01@I@Z
_TEXT	SEGMENT
_defaultValue$ = -52					; size = 24
$T53803 = -28						; size = 16
_key$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
$T53807 = 8						; size = 4
_index$ = 8						; size = 4
??AValue@Json@@QAEAAV01@I@Z PROC			; Json::Value::operator[], COMDAT
; _this$ = ecx

; 977  : {

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??AValue@Json@@QAEAAV01@I@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 978  :    JSON_ASSERT( type_ == nullValue  ||  type_ == arrayValue );
; 979  :    if ( type_ == nullValue )

  0000e	80 7e 08 00	 cmp	 BYTE PTR [esi+8], 0
  00012	75 22		 jne	 SHORT $LN2@operator@13

; 980  :       *this = Value( arrayValue );

  00014	6a 06		 push	 6
  00016	8d 4d e4	 lea	 ecx, DWORD PTR $T53803[ebp]
  00019	e8 00 00 00 00	 call	 ??0Value@Json@@QAE@W4ValueType@1@@Z ; Json::Value::Value
  0001e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00022	50		 push	 eax
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ??4Value@Json@@QAEAAV01@ABV01@@Z ; Json::Value::operator=
  0002a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0002e	8d 4d e4	 lea	 ecx, DWORD PTR $T53803[ebp]
  00031	e8 00 00 00 00	 call	 ??1Value@Json@@QAE@XZ	; Json::Value::~Value
$LN2@operator@13:

; 981  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 982  :    CZString key( index );

  00036	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  00039	83 65 ec 00	 and	 DWORD PTR _key$[ebp], 0
  0003d	89 45 f0	 mov	 DWORD PTR _key$[ebp+4], eax

; 983  :    ObjectValues::iterator it = value_.map_->lower_bound( key );

  00040	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00042	8d 45 ec	 lea	 eax, DWORD PTR _key$[ebp]
  00045	50		 push	 eax
  00046	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0004d	e8 00 00 00 00	 call	 ?_Lbound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound
  00052	8b f8		 mov	 edi, eax

; 984  :    if ( it != value_.map_->end()  &&  (*it).first == key )

  00054	8b 06		 mov	 eax, DWORD PTR [esi]
  00056	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00059	74 29		 je	 SHORT $LN1@operator@13
  0005b	8d 45 ec	 lea	 eax, DWORD PTR _key$[ebp]
  0005e	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??8CZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator==
  00067	84 c0		 test	 al, al
  00069	74 19		 je	 SHORT $LN1@operator@13

; 985  :       return (*it).second;

  0006b	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
$LN74@operator@13:
  0006e	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00072	8d 4d ec	 lea	 ecx, DWORD PTR _key$[ebp]
  00075	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  0007a	8b c6		 mov	 eax, esi

; 990  : #else
; 991  :    return value_.array_->resolveReference( index );
; 992  : #endif
; 993  : }

  0007c	e8 00 00 00 00	 call	 __EH_epilog3
  00081	c2 04 00	 ret	 4
$LN1@operator@13:

; 986  : 
; 987  :    ObjectValues::value_type defaultValue( key, null );

  00084	8d 45 ec	 lea	 eax, DWORD PTR _key$[ebp]
  00087	50		 push	 eax
  00088	8d 4d cc	 lea	 ecx, DWORD PTR _defaultValue$[ebp]
  0008b	e8 00 00 00 00	 call	 ??0CZString@Value@Json@@QAE@ABV012@@Z ; Json::Value::CZString::CZString
  00090	68 00 00 00 00	 push	 OFFSET ?null@Value@Json@@2V12@B ; Json::Value::null
  00095	8d 4d d4	 lea	 ecx, DWORD PTR _defaultValue$[ebp+8]
  00098	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0009c	e8 00 00 00 00	 call	 ??0Value@Json@@QAE@ABV01@@Z ; Json::Value::Value

; 988  :    it = value_.map_->insert( it, defaultValue );

  000a1	8b 36		 mov	 esi, DWORD PTR [esi]
  000a3	8d 45 cc	 lea	 eax, DWORD PTR _defaultValue$[ebp]
  000a6	50		 push	 eax
  000a7	8b ce		 mov	 ecx, esi
  000a9	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000ad	e8 00 00 00 00	 call	 ??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>
  000b2	50		 push	 eax
  000b3	57		 push	 edi
  000b4	8d 45 08	 lea	 eax, DWORD PTR $T53807[ebp]
  000b7	50		 push	 eax
  000b8	8b ce		 mov	 ecx, esi
  000ba	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert

; 989  :    return (*it).second;

  000bf	8b 75 08	 mov	 esi, DWORD PTR $T53807[ebp]
  000c2	8d 4d cc	 lea	 ecx, DWORD PTR _defaultValue$[ebp]
  000c5	83 c6 14	 add	 esi, 20			; 00000014H
  000c8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000cc	e8 00 00 00 00	 call	 ??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
  000d1	eb 9b		 jmp	 SHORT $LN74@operator@13
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR $T53803[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Value@Json@@QAE@XZ	; Json::Value::~Value
__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$1:
  00008	8d 4d ec	 lea	 ecx, DWORD PTR _key$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$4:
  00010	8d 4d cc	 lea	 ecx, DWORD PTR _defaultValue$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$2:
  00018	8d 4d cc	 lea	 ecx, DWORD PTR _defaultValue$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
__ehhandler$??AValue@Json@@QAEAAV01@I@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??AValue@Json@@QAEAAV01@I@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??AValue@Json@@QAEAAV01@I@Z ENDP			; Json::Value::operator[]
PUBLIC	?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z	; Json::Value::resolveReference
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$2
__ehfuncinfo$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z
_TEXT	SEGMENT
_defaultValue$ = -52					; size = 24
$T54000 = -28						; size = 16
_actualKey$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
_key$ = 8						; size = 4
$T54004 = 12						; size = 4
_isStatic$ = 12						; size = 1
?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z PROC	; Json::Value::resolveReference, COMDAT
; _this$ = ecx

; 1025 : {

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 1026 :    JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );
; 1027 :    if ( type_ == nullValue )

  0000e	80 7e 08 00	 cmp	 BYTE PTR [esi+8], 0
  00012	75 22		 jne	 SHORT $LN2@resolveRef

; 1028 :       *this = Value( objectValue );

  00014	6a 07		 push	 7
  00016	8d 4d e4	 lea	 ecx, DWORD PTR $T54000[ebp]
  00019	e8 00 00 00 00	 call	 ??0Value@Json@@QAE@W4ValueType@1@@Z ; Json::Value::Value
  0001e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00022	50		 push	 eax
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ??4Value@Json@@QAEAAV01@ABV01@@Z ; Json::Value::operator=
  0002a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0002e	8d 4d e4	 lea	 ecx, DWORD PTR $T54000[ebp]
  00031	e8 00 00 00 00	 call	 ??1Value@Json@@QAE@XZ	; Json::Value::~Value
$LN2@resolveRef:

; 1029 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1030 :    CZString actualKey( key, isStatic ? CZString::noDuplication 
; 1031 :                                      : CZString::duplicateOnCopy );

  00036	33 c0		 xor	 eax, eax
  00038	38 45 0c	 cmp	 BYTE PTR _isStatic$[ebp], al
  0003b	8d 4d ec	 lea	 ecx, DWORD PTR _actualKey$[ebp]
  0003e	0f 95 c0	 setne	 al
  00041	48		 dec	 eax
  00042	83 e0 02	 and	 eax, 2
  00045	50		 push	 eax
  00046	ff 75 08	 push	 DWORD PTR _key$[ebp]
  00049	e8 00 00 00 00	 call	 ??0CZString@Value@Json@@QAE@PBDW4DuplicationPolicy@012@@Z ; Json::Value::CZString::CZString

; 1032 :    ObjectValues::iterator it = value_.map_->lower_bound( actualKey );

  0004e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00050	8d 45 ec	 lea	 eax, DWORD PTR _actualKey$[ebp]
  00053	50		 push	 eax
  00054	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0005b	e8 00 00 00 00	 call	 ?_Lbound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound
  00060	8b f8		 mov	 edi, eax

; 1033 :    if ( it != value_.map_->end()  &&  (*it).first == actualKey )

  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00067	74 29		 je	 SHORT $LN1@resolveRef
  00069	8d 45 ec	 lea	 eax, DWORD PTR _actualKey$[ebp]
  0006c	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??8CZString@Value@Json@@QBE_NABV012@@Z ; Json::Value::CZString::operator==
  00075	84 c0		 test	 al, al
  00077	74 19		 je	 SHORT $LN1@resolveRef

; 1034 :       return (*it).second;

  00079	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
$LN72@resolveRef:
  0007c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00080	8d 4d ec	 lea	 ecx, DWORD PTR _actualKey$[ebp]
  00083	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  00088	8b c6		 mov	 eax, esi

; 1040 : #else
; 1041 :    return value_.map_->resolveReference( key, isStatic );
; 1042 : #endif
; 1043 : }

  0008a	e8 00 00 00 00	 call	 __EH_epilog3
  0008f	c2 08 00	 ret	 8
$LN1@resolveRef:

; 1035 : 
; 1036 :    ObjectValues::value_type defaultValue( actualKey, null );

  00092	8d 45 ec	 lea	 eax, DWORD PTR _actualKey$[ebp]
  00095	50		 push	 eax
  00096	8d 4d cc	 lea	 ecx, DWORD PTR _defaultValue$[ebp]
  00099	e8 00 00 00 00	 call	 ??0CZString@Value@Json@@QAE@ABV012@@Z ; Json::Value::CZString::CZString
  0009e	68 00 00 00 00	 push	 OFFSET ?null@Value@Json@@2V12@B ; Json::Value::null
  000a3	8d 4d d4	 lea	 ecx, DWORD PTR _defaultValue$[ebp+8]
  000a6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000aa	e8 00 00 00 00	 call	 ??0Value@Json@@QAE@ABV01@@Z ; Json::Value::Value

; 1037 :    it = value_.map_->insert( it, defaultValue );

  000af	8b 36		 mov	 esi, DWORD PTR [esi]
  000b1	8d 45 cc	 lea	 eax, DWORD PTR _defaultValue$[ebp]
  000b4	50		 push	 eax
  000b5	8b ce		 mov	 ecx, esi
  000b7	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000bb	e8 00 00 00 00	 call	 ??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>
  000c0	50		 push	 eax
  000c1	57		 push	 edi
  000c2	8d 45 0c	 lea	 eax, DWORD PTR $T54004[ebp]
  000c5	50		 push	 eax
  000c6	8b ce		 mov	 ecx, esi
  000c8	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert

; 1038 :    Value &value = (*it).second;

  000cd	8b 75 0c	 mov	 esi, DWORD PTR $T54004[ebp]

; 1039 :    return value;

  000d0	8d 4d cc	 lea	 ecx, DWORD PTR _defaultValue$[ebp]
  000d3	83 c6 14	 add	 esi, 20			; 00000014H
  000d6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000da	e8 00 00 00 00	 call	 ??1?$_Pair_base@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
  000df	eb 9b		 jmp	 SHORT $LN72@resolveRef
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR $T54000[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Value@Json@@QAE@XZ	; Json::Value::~Value
__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$1:
  00008	8d 4d ec	 lea	 ecx, DWORD PTR _actualKey$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$4:
  00010	8d 4d cc	 lea	 ecx, DWORD PTR _defaultValue$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$2:
  00018	8d 4d cc	 lea	 ecx, DWORD PTR _defaultValue$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
__ehhandler$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z ENDP	; Json::Value::resolveReference
PUBLIC	??AValue@Json@@QAEAAV01@ABVStaticString@1@@Z	; Json::Value::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??AValue@Json@@QAEAAV01@ABVStaticString@1@@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
??AValue@Json@@QAEAAV01@ABVStaticString@1@@Z PROC	; Json::Value::operator[], COMDAT
; _this$ = ecx

; 1097 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1098 :    return resolveReference( key, true );

  00003	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	6a 01		 push	 1
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z ; Json::Value::resolveReference

; 1099 : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??AValue@Json@@QAEAAV01@ABVStaticString@1@@Z ENDP	; Json::Value::operator[]
_TEXT	ENDS
PUBLIC	?append@Value@Json@@QAEAAV12@ABV12@@Z		; Json::Value::append
; Function compile flags: /Ogsp
;	COMDAT ?append@Value@Json@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?append@Value@Json@@QAEAAV12@ABV12@@Z PROC		; Json::Value::append, COMDAT
; _this$ = ecx

; 1120 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1121 :    return (*this)[size()] = value;

  00004	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?size@Value@Json@@QBEIXZ ; Json::Value::size
  0000e	50		 push	 eax
  0000f	8b ce		 mov	 ecx, esi
  00011	e8 00 00 00 00	 call	 ??AValue@Json@@QAEAAV01@I@Z ; Json::Value::operator[]
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ??4Value@Json@@QAEAAV01@ABV01@@Z ; Json::Value::operator=
  0001d	5e		 pop	 esi

; 1122 : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?append@Value@Json@@QAEAAV12@ABV12@@Z ENDP		; Json::Value::append
_TEXT	ENDS
PUBLIC	?resize@Value@Json@@QAEXI@Z			; Json::Value::resize
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?resize@Value@Json@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resize@Value@Json@@QAEXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?resize@Value@Json@@QAEXI@Z$1
__ehfuncinfo$?resize@Value@Json@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?resize@Value@Json@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?resize@Value@Json@@QAEXI@Z
_TEXT	SEGMENT
$T54202 = -28						; size = 16
$T54203 = -20						; size = 8
__$EHRec$ = -12						; size = 12
_newSize$ = 8						; size = 4
?resize@Value@Json@@QAEXI@Z PROC			; Json::Value::resize, COMDAT
; _this$ = ecx

; 953  : {

  00000	6a 10		 push	 16			; 00000010H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?resize@Value@Json@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 954  :    JSON_ASSERT( type_ == nullValue  ||  type_ == arrayValue );
; 955  :    if ( type_ == nullValue )

  0000e	80 7e 08 00	 cmp	 BYTE PTR [esi+8], 0
  00012	75 22		 jne	 SHORT $LN8@resize

; 956  :       *this = Value( arrayValue );

  00014	6a 06		 push	 6
  00016	8d 4d e4	 lea	 ecx, DWORD PTR $T54202[ebp]
  00019	e8 00 00 00 00	 call	 ??0Value@Json@@QAE@W4ValueType@1@@Z ; Json::Value::Value
  0001e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00022	50		 push	 eax
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ??4Value@Json@@QAEAAV01@ABV01@@Z ; Json::Value::operator=
  0002a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0002e	8d 4d e4	 lea	 ecx, DWORD PTR $T54202[ebp]
  00031	e8 00 00 00 00	 call	 ??1Value@Json@@QAE@XZ	; Json::Value::~Value
$LN8@resize:

; 957  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 958  :    UInt oldSize = size();

  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?size@Value@Json@@QBEIXZ ; Json::Value::size

; 959  :    if ( newSize == 0 )

  0003d	8b 7d 08	 mov	 edi, DWORD PTR _newSize$[ebp]
  00040	8b d8		 mov	 ebx, eax
  00042	85 ff		 test	 edi, edi
  00044	75 09		 jne	 SHORT $LN7@resize

; 960  :       clear();

  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?clear@Value@Json@@QAEXXZ ; Json::Value::clear
  0004d	eb 3b		 jmp	 SHORT $LN1@resize
$LN7@resize:

; 961  :    else if ( newSize > oldSize )

  0004f	3b fb		 cmp	 edi, ebx
  00051	76 0b		 jbe	 SHORT $LN18@resize

; 962  :       (*this)[ newSize - 1 ];

  00053	4f		 dec	 edi
  00054	57		 push	 edi
  00055	8b ce		 mov	 ecx, esi
  00057	e8 00 00 00 00	 call	 ??AValue@Json@@QAEAAV01@I@Z ; Json::Value::operator[]

; 963  :    else

  0005c	eb 2c		 jmp	 SHORT $LN1@resize
$LN18@resize:

; 964  :    {
; 965  :       for ( UInt index = newSize; index < oldSize; ++index )

  0005e	73 2a		 jae	 SHORT $LN1@resize

; 966  :          value_.map_->erase( index );

  00060	83 65 ec 00	 and	 DWORD PTR $T54203[ebp], 0
$LL3@resize:
  00064	89 7d f0	 mov	 DWORD PTR $T54203[ebp+4], edi
  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	8d 45 ec	 lea	 eax, DWORD PTR $T54203[ebp]
  0006c	50		 push	 eax
  0006d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00074	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEIABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
  00079	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0007d	8d 4d ec	 lea	 ecx, DWORD PTR $T54203[ebp]
  00080	e8 00 00 00 00	 call	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
  00085	47		 inc	 edi
  00086	3b fb		 cmp	 edi, ebx
  00088	72 da		 jb	 SHORT $LL3@resize
$LN1@resize:

; 967  :       assert( size() == newSize );
; 968  :    }
; 969  : #else
; 970  :    value_.array_->resize( newSize );
; 971  : #endif
; 972  : }

  0008a	e8 00 00 00 00	 call	 __EH_epilog3
  0008f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?resize@Value@Json@@QAEXI@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR $T54202[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Value@Json@@QAE@XZ	; Json::Value::~Value
__unwindfunclet$?resize@Value@Json@@QAEXI@Z$1:
  00008	8d 4d ec	 lea	 ecx, DWORD PTR $T54203[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1CZString@Value@Json@@QAE@XZ ; Json::Value::CZString::~CZString
__ehhandler$?resize@Value@Json@@QAEXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?resize@Value@Json@@QAEXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?resize@Value@Json@@QAEXI@Z ENDP			; Json::Value::resize
PUBLIC	??AValue@Json@@QAEAAV01@PBD@Z			; Json::Value::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??AValue@Json@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
??AValue@Json@@QAEAAV01@PBD@Z PROC			; Json::Value::operator[], COMDAT
; _this$ = ecx

; 1017 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1018 :    return resolveReference( key, false );

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR _key$[ebp]
  00008	e8 00 00 00 00	 call	 ?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z ; Json::Value::resolveReference

; 1019 : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??AValue@Json@@QAEAAV01@PBD@Z ENDP			; Json::Value::operator[]
_TEXT	ENDS
PUBLIC	??AValue@Json@@QAEAAV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??AValue@Json@@QAEAAV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
??AValue@Json@@QAEAAV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::operator[], COMDAT
; _this$ = ecx

; 1084 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1085 :    return (*this)[ key.c_str() ];

  00003	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00006	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0000a	72 02		 jb	 SHORT $LN7@operator@14
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@operator@14:
  0000e	6a 00		 push	 0
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z ; Json::Value::resolveReference

; 1086 : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??AValue@Json@@QAEAAV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::operator[]
_TEXT	ENDS
PUBLIC	?make@Path@Json@@QBEAAVValue@2@AAV32@@Z		; Json::Path::make
; Function compile flags: /Ogsp
;	COMDAT ?make@Path@Json@@QBEAAVValue@2@AAV32@@Z
_TEXT	SEGMENT
_root$ = 8						; size = 4
?make@Path@Json@@QBEAAVValue@2@AAV32@@Z PROC		; Json::Path::make, COMDAT
; _this$ = ecx

; 1693 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1694 :    Value *node = &root;

  00003	8b 45 08	 mov	 eax, DWORD PTR _root$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 1695 :    for ( Args::const_iterator it = args_.begin(); it != args_.end(); ++it )

  0000a	8b 37		 mov	 esi, DWORD PTR [edi]
  0000c	eb 24		 jmp	 SHORT $LN35@make
$LL17@make:

; 1696 :    {
; 1697 :       const PathArgument &arg = *it;
; 1698 :       if ( arg.kind_ == PathArgument::kindIndex )

  0000e	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00011	83 f9 01	 cmp	 ecx, 1
  00014	75 0c		 jne	 SHORT $LN5@make

; 1699 :       {
; 1700 :          if ( !node->isArray() )
; 1701 :          {
; 1702 :             // Error: node is not an array at position ...
; 1703 :          }
; 1704 :          node = &((*node)[arg.index_]);

  00016	ff 76 1c	 push	 DWORD PTR [esi+28]
  00019	8b c8		 mov	 ecx, eax
  0001b	e8 00 00 00 00	 call	 ??AValue@Json@@QAEAAV01@I@Z ; Json::Value::operator[]
  00020	eb 0d		 jmp	 SHORT $LN7@make
$LN5@make:

; 1705 :       }
; 1706 :       else if ( arg.kind_ == PathArgument::kindKey )

  00022	83 f9 02	 cmp	 ecx, 2
  00025	75 08		 jne	 SHORT $LN7@make

; 1707 :       {
; 1708 :          if ( !node->isObject() )
; 1709 :          {
; 1710 :             // Error: node is not an object at position...
; 1711 :          }
; 1712 :          node = &((*node)[arg.key_]);

  00027	56		 push	 esi
  00028	8b c8		 mov	 ecx, eax
  0002a	e8 00 00 00 00	 call	 ??AValue@Json@@QAEAAV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::operator[]
$LN7@make:

; 1695 :    for ( Args::const_iterator it = args_.begin(); it != args_.end(); ++it )

  0002f	83 c6 24	 add	 esi, 36			; 00000024H
$LN35@make:
  00032	3b 77 04	 cmp	 esi, DWORD PTR [edi+4]
  00035	75 d7		 jne	 SHORT $LL17@make
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi

; 1713 :       }
; 1714 :    }
; 1715 :    return *node;
; 1716 : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?make@Path@Json@@QBEAAVValue@2@AAV32@@Z ENDP		; Json::Path::make
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??__E?null@Value@Json@@2V12@B@@YAXXZ
text$yc	SEGMENT
??__E?null@Value@Json@@2V12@B@@YAXXZ PROC		; `dynamic initializer for 'Json::Value::null'', COMDAT

; 22   : const Value Value::null;

  00000	81 25 08 00 00
	00 ff fe ff ff	 and	 DWORD PTR ?null@Value@Json@@2V12@B+8, -257 ; fffffeffH
  0000a	68 00 00 00 00	 push	 OFFSET ??__F?null@Value@Json@@2V12@B@@YAXXZ ; `dynamic atexit destructor for 'Json::Value::null''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__E?null@Value@Json@@2V12@B@@YAXXZ ENDP		; `dynamic initializer for 'Json::Value::null''
; Function compile flags: /Ogsp
text$yc	ENDS
;	COMDAT ??__EdummyValueAllocatorInitializer@Json@@YAXXZ
text$yc	SEGMENT
??__EdummyValueAllocatorInitializer@Json@@YAXXZ PROC	; Json::`dynamic initializer for 'dummyValueAllocatorInitializer'', COMDAT

; 110  : } dummyValueAllocatorInitializer;

  00000	e9 00 00 00 00	 jmp	 ?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
??__EdummyValueAllocatorInitializer@Json@@YAXXZ ENDP	; Json::`dynamic initializer for 'dummyValueAllocatorInitializer''
; Function compile flags: /Ogsp
text$yc	ENDS
;	COMDAT ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ
text$yd	SEGMENT
??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ PROC ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator'', COMDAT
  00000	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7ValueAllocator@Json@@6B@
  0000a	c3		 ret	 0
??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ENDP ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
; Function compile flags: /Ogsp
text$yd	ENDS
;	COMDAT ??__F?null@Value@Json@@2V12@B@@YAXXZ
text$yd	SEGMENT
??__F?null@Value@Json@@2V12@B@@YAXXZ PROC		; `dynamic atexit destructor for 'Json::Value::null'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?null@Value@Json@@2V12@B ; Json::Value::null
  00005	e9 00 00 00 00	 jmp	 ??1Value@Json@@QAE@XZ	; Json::Value::~Value
??__F?null@Value@Json@@2V12@B@@YAXXZ ENDP		; `dynamic atexit destructor for 'Json::Value::null''
text$yd	ENDS
PUBLIC	?null@Value@Json@@2V12@B			; Json::Value::null
_BSS	SEGMENT
?null@Value@Json@@2V12@B DB 010H DUP (?)		; Json::Value::null
_dummyValueAllocatorInitializer DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
?null$initializer$@Value@Json@@2P6AXXZA DD FLAT:??__E?null@Value@Json@@2V12@B@@YAXXZ ; Json::Value::null$initializer$
_dummyValueAllocatorInitializer$initializer$ DD FLAT:??__EdummyValueAllocatorInitializer@Json@@YAXXZ
CRT$XCU	ENDS
END
