; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	F:\Projects\Git\YFNet\trunk\Src\qvodbase\stun.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@D@std@@2HB	; std::numeric_limits<char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_W@std@@2HB	; std::numeric_limits<wchar_t>::max_digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_N@std@@2HB	; std::numeric_limits<bool>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@C@std@@2HB	; std::numeric_limits<signed char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@E@std@@2HB	; std::numeric_limits<unsigned char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?max_digits10@?$numeric_limits@F@std@@2HB	; std::numeric_limits<short>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?max_digits10@?$numeric_limits@G@std@@2HB	; std::numeric_limits<unsigned short>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?max_digits10@?$numeric_limits@H@std@@2HB	; std::numeric_limits<int>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?max_digits10@?$numeric_limits@I@std@@2HB	; std::numeric_limits<unsigned int>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?max_digits10@?$numeric_limits@J@std@@2HB	; std::numeric_limits<long>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?max_digits10@?$numeric_limits@K@std@@2HB	; std::numeric_limits<unsigned long>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_J@std@@2HB	; std::numeric_limits<__int64>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_K@std@@2HB	; std::numeric_limits<unsigned __int64>::max_digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 08H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_K@std@@2HB DD 015H	; std::numeric_limits<unsigned __int64>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_J@std@@2HB DD 014H	; std::numeric_limits<__int64>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@K@std@@2HB DD 0bH	; std::numeric_limits<unsigned long>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@J@std@@2HB DD 0bH	; std::numeric_limits<long>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@I@std@@2HB DD 0bH	; std::numeric_limits<unsigned int>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@H@std@@2HB DD 0bH	; std::numeric_limits<int>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@G@std@@2HB DD 06H	; std::numeric_limits<unsigned short>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@F@std@@2HB DD 06H	; std::numeric_limits<short>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@E@std@@2HB DD 04H	; std::numeric_limits<unsigned char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@C@std@@2HB DD 04H	; std::numeric_limits<signed char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_N@std@@2HB DD 00H	; std::numeric_limits<bool>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_W@std@@2HB DD 06H	; std::numeric_limits<wchar_t>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@D@std@@2HB DD 04H	; std::numeric_limits<char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 01H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
PUBLIC	?strchr@@YAPADPADH@Z				; strchr
EXTRN	_strchr:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string.h
;	COMDAT ?strchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strchr@@YAPADPADH@Z PROC				; strchr, COMDAT

; 215  : 	{ return (char*)strchr((const char*)_Str, _Ch); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	e9 00 00 00 00	 jmp	 _strchr
?strchr@@YAPADPADH@Z ENDP				; strchr
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
EXTRN	_strlen:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 492  : 		}

  00003	5d		 pop	 ebp

; 491  : 		return (_CSTD strlen(_First));

  00004	e9 00 00 00 00	 jmp	 _strlen
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
; Function compile flags: /Ogsp
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 546  : 		{	// convert character to metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 547  : 		return ((unsigned char)_Ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00006	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 548  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
; Function compile flags: /Ogsp
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 552  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 553  : 		return (_Left == _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000b	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000d	f7 d8		 neg	 eax
  0000f	1b c0		 sbb	 eax, eax
  00011	40		 inc	 eax

; 554  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
; Function compile flags: /Ogsp
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 563  : 		return (EOF);

  00000	83 c8 ff	 or	 eax, -1

; 564  : 		}

  00003	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??0runtime_error@std@@QAE@PBD@Z			; std::runtime_error::runtime_error
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0runtime_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@PBD@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 170  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 171  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@PBD@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogsp
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
PUBLIC	?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ	; std::_Locinfo::_Getcvt
EXTRN	__Getcvt:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
;	COMDAT ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ PROC		; std::_Locinfo::_Getcvt, COMDAT
; _this$ = ecx

; 122  : 		{	// return codecvt stuff

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 123  : 		return (::_Getcvt());

  00003	e8 00 00 00 00	 call	 __Getcvt
  00008	8b c8		 mov	 ecx, eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 124  : 		}

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ENDP		; std::_Locinfo::_Getcvt
_TEXT	ENDS
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 71   : 			{	// construct with specified stamp value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 72   : 			}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
PUBLIC	??Bid@locale@std@@QAEIXZ			; std::locale::id::operator unsigned int
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
; Function compile flags: /Ogsp
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$15081 = -4					; size = 4
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = ecx

; 75   : 			{	// get stamp, with lazy allocation

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 76   : 			if (_Id == 0)

  00007	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0000a	75 24		 jne	 SHORT $LN2@operator

; 77   : 				{	// still zero, allocate stamp
; 78   : 				_BEGIN_LOCK(_LOCK_LOCALE)

  0000c	6a 00		 push	 0
  0000e	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15081[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 79   : 					if (_Id == 0)

  00016	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00019	75 0d		 jne	 SHORT $LN1@operator

; 80   : 						_Id = ++_Id_cnt;

  0001b	ff 05 00 00 00
	00		 inc	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00026	89 06		 mov	 DWORD PTR [esi], eax
$LN1@operator:

; 81   : 				_END_LOCK()

  00028	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15081[ebp]
  0002b	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN2@operator:

; 82   : 				}
; 83   : 			return (_Id);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	5e		 pop	 esi

; 84   : 			}

  00033	c9		 leave
  00034	c3		 ret	 0
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
_TEXT	ENDS
PUBLIC	?_Incref@facet@locale@std@@QAEXXZ		; std::locale::facet::_Incref
; Function compile flags: /Ogsp
;	COMDAT ?_Incref@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
__Lock$15087 = -4					; size = 4
?_Incref@facet@locale@std@@QAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 111  : 			{	// safely increment the reference count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 112  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00007	6a 00		 push	 0
  00009	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15087[ebp]
  0000c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 113  : 				if (_Refs < (size_t)(-1))

  00011	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00014	83 f8 ff	 cmp	 eax, -1
  00017	73 04		 jae	 SHORT $LN1@Incref

; 114  : 					++_Refs;

  00019	40		 inc	 eax
  0001a	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@Incref:

; 115  : 			_END_LOCK()

  0001d	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15087[ebp]
  00020	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00025	5e		 pop	 esi

; 116  : 			}

  00026	c9		 leave
  00027	c3		 ret	 0
?_Incref@facet@locale@std@@QAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
PUBLIC	?_Decref@facet@locale@std@@QAEPAV123@XZ		; std::locale::facet::_Decref
; Function compile flags: /Ogsp
;	COMDAT ?_Decref@facet@locale@std@@QAEPAV123@XZ
_TEXT	SEGMENT
__Lock$15092 = -4					; size = 4
?_Decref@facet@locale@std@@QAEPAV123@XZ PROC		; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 119  : 			{	// safely decrement the reference count, return this when dead

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 120  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00008	6a 00		 push	 0
  0000a	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15092[ebp]
  0000d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 121  : 				if (0 < _Refs && _Refs < (size_t)(-1))

  00012	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00015	85 c0		 test	 eax, eax
  00017	74 09		 je	 SHORT $LN1@Decref
  00019	83 f8 ff	 cmp	 eax, -1
  0001c	73 04		 jae	 SHORT $LN1@Decref

; 122  : 					--_Refs;

  0001e	48		 dec	 eax
  0001f	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN1@Decref:

; 123  : 				return (_Refs == 0 ? this : 0);

  00022	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00025	f7 de		 neg	 esi
  00027	1b f6		 sbb	 esi, esi
  00029	f7 d6		 not	 esi
  0002b	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$15092[ebp]
  0002e	23 f7		 and	 esi, edi
  00030	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00035	5f		 pop	 edi
  00036	8b c6		 mov	 eax, esi
  00038	5e		 pop	 esi

; 124  : 			_END_LOCK()
; 125  : 			}

  00039	c9		 leave
  0003a	c3		 ret	 0
?_Decref@facet@locale@std@@QAEPAV123@XZ ENDP		; std::locale::facet::_Decref
_TEXT	ENDS
PUBLIC	?_Register@facet@locale@std@@QAEXXZ		; std::locale::facet::_Register
EXTRN	?_Facet_Register@facet@locale@std@@CAXPAV123@@Z:PROC ; std::locale::facet::_Facet_Register
; Function compile flags: /Ogsp
;	COMDAT ?_Register@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
?_Register@facet@locale@std@@QAEXXZ PROC		; std::locale::facet::_Register, COMDAT
; _this$ = ecx

; 129  :  #if defined(_M_CEE)
; 130  : 			_Facet_Register_m(this);
; 131  : 
; 132  :  #else /* defined(_M_CEE) */
; 133  : 			_Facet_Register(this);

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 ?_Facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::_Facet_Register
  00006	59		 pop	 ecx

; 134  :  #endif /* defined(_M_CEE) */
; 135  : 			}

  00007	c3		 ret	 0
?_Register@facet@locale@std@@QAEXXZ ENDP		; std::locale::facet::_Register
_TEXT	ENDS
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??1facet@locale@std@@UAE@XZ			; std::locale::facet::~facet
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efacet@locale@std@@UAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1facet@locale@std@@UAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@UAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 164  : 			{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@

; 165  : 			}

  00006	c3		 ret	 0
??1facet@locale@std@@UAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
PUBLIC	??0facet@locale@std@@IAE@I@Z			; std::locale::facet::facet
; Function compile flags: /Ogsp
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 170  : 			{	// construct with initial reference count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Initrefs$[ebp]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@
  0000e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 171  : 			}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
; Function compile flags: /Ogsp
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 309  : 		{	// construct by copying

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	89 0e		 mov	 DWORD PTR [esi], ecx

; 310  : 		_Ptr->_Incref();

  0000d	e8 00 00 00 00	 call	 ?_Incref@facet@locale@std@@QAEXXZ ; std::locale::facet::_Incref

; 311  : 		}

  00012	8b c6		 mov	 eax, esi
  00014	5e		 pop	 esi
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
_TEXT	ENDS
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
; Function compile flags: /Ogsp
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 410  : 		if (_Ptr != 0)

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 11		 je	 SHORT $LN4@locale

; 411  : 			_DELETE_CRT(_Ptr->_Decref());

  00006	e8 00 00 00 00	 call	 ?_Decref@facet@locale@std@@QAEPAV123@XZ ; std::locale::facet::_Decref
  0000b	85 c0		 test	 eax, eax
  0000d	74 08		 je	 SHORT $LN4@locale
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	6a 01		 push	 1
  00013	8b c8		 mov	 ecx, eax
  00015	ff 12		 call	 DWORD PTR [edx]
$LN4@locale:

; 412  : 		}

  00017	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
; Function compile flags: /Ogsp
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 436  : 		{	// look up a facet in locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 437  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 438  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR __Id$[ebp]
  00009	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  0000c	73 08		 jae	 SHORT $LN6@Getfacet
  0000e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00011	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00014	eb 02		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  00016	33 c0		 xor	 eax, eax
$LN7@Getfacet:

; 439  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00018	85 c0		 test	 eax, eax
  0001a	75 19		 jne	 SHORT $LN1@Getfacet
  0001c	38 41 14	 cmp	 BYTE PTR [ecx+20], al
  0001f	74 14		 je	 SHORT $LN1@Getfacet

; 440  : 			return (_Facptr);	// found facet or not transparent
; 441  : 		else
; 442  : 			{	// look in current locale
; 443  : 			locale::_Locimp *_Ptr = _Getgloballocale();

  00021	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 444  : 			return (_Id < _Ptr->_Facetcount
; 445  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 446  : 				: 0);	// no entry in current locale

  00026	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00029	73 08		 jae	 SHORT $LN8@Getfacet
  0002b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002e	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00031	eb 02		 jmp	 SHORT $LN1@Getfacet
$LN8@Getfacet:
  00033	33 c0		 xor	 eax, eax
$LN1@Getfacet:
  00035	5e		 pop	 esi

; 447  : 			}
; 448  : 		}

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gfacet@locale@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@UAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_Gfacet@locale@std@@UAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0error_code@std@@QAE@HABVerror_category@1@@Z	; std::error_code::error_code
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
;	COMDAT ??0error_code@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_code@std@@QAE@HABVerror_category@1@@Z PROC	; std::error_code::error_code, COMDAT
; _this$ = ecx

; 204  : 		{	// construct from error code and category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Cat$[ebp]
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 205  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0error_code@std@@QAE@HABVerror_category@1@@Z ENDP	; std::error_code::error_code
_TEXT	ENDS
PUBLIC	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z ; std::make_error_code
EXTRN	?iostream_category@std@@YAABVerror_category@1@XZ:PROC ; std::iostream_category
; Function compile flags: /Ogsp
;	COMDAT ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errno$ = 12						; size = 4
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z PROC ; std::make_error_code, COMDAT

; 446  : 	{	// make an error_code

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	return (error_code(_Errno, iostream_category()));

  00003	e8 00 00 00 00	 call	 ?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
  00008	8b 55 0c	 mov	 edx, DWORD PTR __Errno$[ebp]
  0000b	8b c8		 mov	 ecx, eax
  0000d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00010	89 10		 mov	 DWORD PTR [eax], edx
  00012	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 448  : 	}

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z ENDP ; std::make_error_code
_TEXT	ENDS
PUBLIC	?_Makestr@system_error@std@@AAEXXZ		; std::system_error::_Makestr
; Function compile flags: /Ogsp
;	COMDAT ?_Makestr@system_error@std@@AAEXXZ
_TEXT	SEGMENT
?_Makestr@system_error@std@@AAEXXZ PROC			; std::system_error::_Makestr, COMDAT
; _this$ = ecx

; 563  : //		_Mymes = this->runtime_error::what();
; 564  : //		if (!_Mymes.empty())
; 565  : //			_Mymes.append(": ");
; 566  : //		_Mymes.append(_Mycode.message());
; 567  : 		}

  00000	c3		 ret	 0
?_Makestr@system_error@std@@AAEXXZ ENDP			; std::system_error::_Makestr
_TEXT	ENDS
PUBLIC	??1system_error@std@@UAE@XZ			; std::system_error::~system_error
; Function compile flags: /Ogsp
;	COMDAT ??1system_error@std@@UAE@XZ
_TEXT	SEGMENT
??1system_error@std@@UAE@XZ PROC			; std::system_error::~system_error, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1system_error@std@@UAE@XZ ENDP			; std::system_error::~system_error
_TEXT	ENDS
PUBLIC	?rdstate@ios_base@std@@QBEHXZ			; std::ios_base::rdstate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = ecx

; 336  : 		return (_Mystate);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 337  : 		}

  00003	c3		 ret	 0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
PUBLIC	?good@ios_base@std@@QBE_NXZ			; std::ios_base::good
; Function compile flags: /Ogsp
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 358  : 		return (rdstate() == goodbit);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 0c	 cmp	 DWORD PTR [ecx+12], eax
  00005	0f 94 c0	 sete	 al

; 359  : 		}

  00008	c3		 ret	 0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
PUBLIC	?fail@ios_base@std@@QBE_NXZ			; std::ios_base::fail
; Function compile flags: /Ogsp
;	COMDAT ?fail@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?fail@ios_base@std@@QBE_NXZ PROC			; std::ios_base::fail, COMDAT
; _this$ = ecx

; 368  : 		return (((int)rdstate()
; 369  : 			& ((int)badbit | (int)failbit)) != 0);

  00000	f6 41 0c 06	 test	 BYTE PTR [ecx+12], 6
  00004	6a 00		 push	 0
  00006	58		 pop	 eax
  00007	0f 95 c0	 setne	 al

; 370  : 		}

  0000a	c3		 ret	 0
?fail@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::fail
_TEXT	ENDS
PUBLIC	?flags@ios_base@std@@QBEHXZ			; std::ios_base::flags
; Function compile flags: /Ogsp
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = ecx

; 395  : 		return (_Fmtfl);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 396  : 		}

  00003	c3		 ret	 0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QBE_JXZ			; std::ios_base::width
; Function compile flags: /Ogsp
;	COMDAT ?width@ios_base@std@@QBE_JXZ
_TEXT	SEGMENT
?width@ios_base@std@@QBE_JXZ PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 440  : 		return (_Wide);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]

; 441  : 		}

  00006	c3		 ret	 0
?width@ios_base@std@@QBE_JXZ ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QAE_J_J@Z			; std::ios_base::width
; Function compile flags: /Ogsp
;	COMDAT ?width@ios_base@std@@QAE_J_J@Z
_TEXT	SEGMENT
__Newwidth$ = 8						; size = 8
?width@ios_base@std@@QAE_J_J@Z PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 444  : 		{	// set width to argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 445  : 		streamsize _Oldwidth = _Wide;

  00003	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00006	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00009	56		 push	 esi

; 446  : 		_Wide = _Newwidth;

  0000a	8b 75 08	 mov	 esi, DWORD PTR __Newwidth$[ebp]
  0000d	89 71 20	 mov	 DWORD PTR [ecx+32], esi
  00010	8b 75 0c	 mov	 esi, DWORD PTR __Newwidth$[ebp+4]
  00013	89 71 24	 mov	 DWORD PTR [ecx+36], esi
  00016	5e		 pop	 esi

; 447  : 		return (_Oldwidth);
; 448  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?width@ios_base@std@@QAE_J_J@Z ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
; Function compile flags: /Ogsp
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
$T92884 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = ecx

; 451  : 		{	// get locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 452  : 		return (*_Ploc);

  00004	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	83 65 fc 00	 and	 DWORD PTR $T92884[ebp], 0
  0000d	56		 push	 esi
  0000e	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00011	89 0e		 mov	 DWORD PTR [esi], ecx
  00013	e8 00 00 00 00	 call	 ?_Incref@facet@locale@std@@QAEXXZ ; std::locale::facet::_Incref
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi

; 453  : 		}

  0001b	c9		 leave
  0001c	c2 04 00	 ret	 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 134  : }

  00003	5d		 pop	 ebp

; 133  :     return _time64(_Time);

  00004	e9 00 00 00 00	 jmp	 __time64
_time	ENDP
_TEXT	ENDS
PUBLIC	?getErrno@@YAHXZ				; getErrno
EXTRN	__imp__WSAGetLastError@0:PROC
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\udp.h
;	COMDAT ?getErrno@@YAHXZ
_TEXT	SEGMENT
?getErrno@@YAHXZ PROC					; getErrno, COMDAT

; 56   : inline int getErrno() { return WSAGetLastError(); }

  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__WSAGetLastError@0
?getErrno@@YAHXZ ENDP					; getErrno
_TEXT	ENDS
EXTRN	__imp__ntohs@4:PROC
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\stun.cpp
;	COMDAT ?stunParseAtrUnknown@@YA_NPADIAAUStunAtrUnknown@@@Z
_TEXT	SEGMENT
_body$ = 8						; size = 4
?stunParseAtrUnknown@@YA_NPADIAAUStunAtrUnknown@@@Z PROC ; stunParseAtrUnknown, COMDAT
; _hdrLen$ = eax
; _result$ = edi

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  :    if ( hdrLen >= sizeof(result) )

  00003	83 f8 12	 cmp	 eax, 18			; 00000012H
  00006	72 04		 jb	 SHORT $LN6@stunParseA
$LN11@stunParseA:

; 126  :    {
; 127  :       return false;

  00008	32 c0		 xor	 al, al

; 139  :    }
; 140  : }

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
$LN6@stunParseA:

; 128  :    }
; 129  :    else
; 130  :    {
; 131  :       if (hdrLen % 4 != 0) return false;

  0000c	a8 03		 test	 al, 3
  0000e	75 f8		 jne	 SHORT $LN11@stunParseA

; 132  :       result.numAttributes = hdrLen / 4;

  00010	c1 e8 02	 shr	 eax, 2
  00013	53		 push	 ebx

; 133  :       for (int i=0; i<result.numAttributes; i++)

  00014	33 c9		 xor	 ecx, ecx
  00016	33 db		 xor	 ebx, ebx
  00018	66 89 47 10	 mov	 WORD PTR [edi+16], ax
  0001c	66 3b c8	 cmp	 cx, ax
  0001f	73 2f		 jae	 SHORT $LN1@stunParseA

; 132  :       result.numAttributes = hdrLen / 4;

  00021	56		 push	 esi
  00022	8b f7		 mov	 esi, edi
$LL3@stunParseA:

; 134  :       {
; 135  :          memcpy(&result.attrType[i], body, 2); body+=2;

  00024	6a 02		 push	 2
  00026	ff 75 08	 push	 DWORD PTR _body$[ebp]
  00029	56		 push	 esi
  0002a	e8 00 00 00 00	 call	 _memcpy

; 136  :          result.attrType[i] = ntohs(result.attrType[i]);

  0002f	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00032	83 45 08 02	 add	 DWORD PTR _body$[ebp], 2
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
  00039	50		 push	 eax
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ntohs@4
  00040	66 89 06	 mov	 WORD PTR [esi], ax
  00043	0f b7 47 10	 movzx	 eax, WORD PTR [edi+16]
  00047	43		 inc	 ebx
  00048	83 c6 02	 add	 esi, 2
  0004b	3b d8		 cmp	 ebx, eax
  0004d	7c d5		 jl	 SHORT $LL3@stunParseA
  0004f	5e		 pop	 esi
$LN1@stunParseA:

; 137  :       }
; 138  :       return true;

  00050	b0 01		 mov	 al, 1
  00052	5b		 pop	 ebx

; 139  :    }
; 140  : }

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?stunParseAtrUnknown@@YA_NPADIAAUStunAtrUnknown@@@Z ENDP ; stunParseAtrUnknown
_TEXT	ENDS
EXTRN	__imp__htons@4:PROC
; Function compile flags: /Ogsp
;	COMDAT ?encode16@@YAPADPADG@Z
_TEXT	SEGMENT
_ndata$ = -4						; size = 2
_data$ = 8						; size = 2
?encode16@@YAPADPADG@Z PROC				; encode16, COMDAT
; _buf$ = esi

; 441  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 442  :    UInt16 ndata = htons(data);

  00004	ff 75 08	 push	 DWORD PTR _data$[ebp]
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4
  0000d	0f b7 c0	 movzx	 eax, ax
  00010	89 45 fc	 mov	 DWORD PTR _ndata$[ebp], eax

; 443  :    memcpy(buf, reinterpret_cast<void*>(&ndata), sizeof(UInt16));

  00013	6a 02		 push	 2
  00015	8d 45 fc	 lea	 eax, DWORD PTR _ndata$[ebp]
  00018	50		 push	 eax
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 _memcpy
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 444  :    return buf + sizeof(UInt16);

  00022	8d 46 02	 lea	 eax, DWORD PTR [esi+2]

; 445  : }

  00025	c9		 leave
  00026	c3		 ret	 0
?encode16@@YAPADPADG@Z ENDP				; encode16
_TEXT	ENDS
EXTRN	__imp__htonl@4:PROC
; Function compile flags: /Ogsp
;	COMDAT ?encode32@@YAPADPADI@Z
_TEXT	SEGMENT
_ndata$ = -4						; size = 4
_data$ = 8						; size = 4
?encode32@@YAPADPADI@Z PROC				; encode32, COMDAT
; _buf$ = esi

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 450  :    UInt32 ndata = htonl(data);

  00004	ff 75 08	 push	 DWORD PTR _data$[ebp]
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htonl@4
  0000d	89 45 fc	 mov	 DWORD PTR _ndata$[ebp], eax

; 451  :    memcpy(buf, reinterpret_cast<void*>(&ndata), sizeof(UInt32));

  00010	6a 04		 push	 4
  00012	8d 45 fc	 lea	 eax, DWORD PTR _ndata$[ebp]
  00015	50		 push	 eax
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 _memcpy
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 452  :    return buf + sizeof(UInt32);

  0001f	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 453  : }

  00022	c9		 leave
  00023	c3		 ret	 0
?encode32@@YAPADPADI@Z ENDP				; encode32
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?encode@@YAPADPADPBDI@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
?encode@@YAPADPADPBDI@Z PROC				; encode, COMDAT
; _buf$ = edi
; _length$ = esi

; 458  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 459  :    memcpy(buf, data, length);

  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR _data$[ebp]
  00007	57		 push	 edi
  00008	e8 00 00 00 00	 call	 _memcpy
  0000d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 460  :    return buf + length;

  00010	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]

; 461  : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?encode@@YAPADPADPBDI@Z ENDP				; encode
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?encodeAtrAddress4@@YAPADPADGABUStunAtrAddress4@@@Z
_TEXT	SEGMENT
_type$ = 8						; size = 2
?encodeAtrAddress4@@YAPADPADGABUStunAtrAddress4@@@Z PROC ; encodeAtrAddress4, COMDAT
; _ptr$ = eax
; _atr$ = edi

; 466  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 467  :    ptr = encode16(ptr, type);

  00004	ff 75 08	 push	 DWORD PTR _type$[ebp]
  00007	8b f0		 mov	 esi, eax
  00009	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16

; 468  :    ptr = encode16(ptr, 8);

  0000e	6a 08		 push	 8
  00010	8b f0		 mov	 esi, eax
  00012	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16

; 469  :    *ptr++ = atr.pad;

  00017	8a 0f		 mov	 cl, BYTE PTR [edi]
  00019	88 08		 mov	 BYTE PTR [eax], cl

; 470  :    *ptr++ = IPv4Family;

  0001b	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1

; 471  :    ptr = encode16(ptr, atr.ipv4.port);

  0001f	0f b7 4f 02	 movzx	 ecx, WORD PTR [edi+2]
  00023	51		 push	 ecx
  00024	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
  00027	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16

; 472  :    ptr = encode32(ptr, atr.ipv4.addr);

  0002c	ff 77 04	 push	 DWORD PTR [edi+4]
  0002f	8b f0		 mov	 esi, eax
  00031	e8 00 00 00 00	 call	 ?encode32@@YAPADPADI@Z	; encode32
  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	5e		 pop	 esi

; 473  : 	
; 474  :    return ptr;
; 475  : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?encodeAtrAddress4@@YAPADPADGABUStunAtrAddress4@@@Z ENDP ; encodeAtrAddress4
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?encodeAtrChangeRequest@@YAPADPADABUStunAtrChangeRequest@@@Z
_TEXT	SEGMENT
_atr$ = 8						; size = 4
?encodeAtrChangeRequest@@YAPADPADABUStunAtrChangeRequest@@@Z PROC ; encodeAtrChangeRequest, COMDAT
; _ptr$ = eax

; 479  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 480  :    ptr = encode16(ptr, ChangeRequest);

  00004	6a 03		 push	 3
  00006	8b f0		 mov	 esi, eax
  00008	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16

; 481  :    ptr = encode16(ptr, 4);

  0000d	6a 04		 push	 4
  0000f	8b f0		 mov	 esi, eax
  00011	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16

; 482  :    ptr = encode32(ptr, atr.value);

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _atr$[ebp]
  00019	ff 31		 push	 DWORD PTR [ecx]
  0001b	8b f0		 mov	 esi, eax
  0001d	e8 00 00 00 00	 call	 ?encode32@@YAPADPADI@Z	; encode32
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	5e		 pop	 esi

; 483  :    return ptr;
; 484  : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?encodeAtrChangeRequest@@YAPADPADABUStunAtrChangeRequest@@@Z ENDP ; encodeAtrChangeRequest
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?encodeAtrError@@YAPADPADABUStunAtrError@@@Z
_TEXT	SEGMENT
?encodeAtrError@@YAPADPADABUStunAtrError@@@Z PROC	; encodeAtrError, COMDAT
; _ptr$ = ecx
; _atr$ = eax

; 488  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 489  :    ptr = encode16(ptr, ErrorCode);

  00003	6a 09		 push	 9
  00005	8b f1		 mov	 esi, ecx
  00007	8b f8		 mov	 edi, eax
  00009	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16

; 490  :    ptr = encode16(ptr, 6 + atr.sizeReason);

  0000e	66 8b 8f 04 01
	00 00		 mov	 cx, WORD PTR [edi+260]
  00015	66 83 c1 06	 add	 cx, 6
  00019	0f b7 c9	 movzx	 ecx, cx
  0001c	51		 push	 ecx
  0001d	8b f0		 mov	 esi, eax
  0001f	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16

; 491  :    ptr = encode16(ptr, atr.pad);

  00024	0f b7 0f	 movzx	 ecx, WORD PTR [edi]
  00027	51		 push	 ecx
  00028	8b f0		 mov	 esi, eax
  0002a	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16
  0002f	8b f0		 mov	 esi, eax

; 492  :    *ptr++ = atr.errorClass;

  00031	8a 47 02	 mov	 al, BYTE PTR [edi+2]
  00034	88 06		 mov	 BYTE PTR [esi], al

; 493  :    *ptr++ = atr.number;

  00036	8a 47 03	 mov	 al, BYTE PTR [edi+3]
  00039	88 46 01	 mov	 BYTE PTR [esi+1], al

; 494  :    ptr = encode(ptr, atr.reason, atr.sizeReason);

  0003c	0f b7 9f 04 01
	00 00		 movzx	 ebx, WORD PTR [edi+260]
  00043	53		 push	 ebx
  00044	83 c7 04	 add	 edi, 4
  00047	83 c6 02	 add	 esi, 2
  0004a	57		 push	 edi
  0004b	56		 push	 esi
  0004c	e8 00 00 00 00	 call	 _memcpy
  00051	83 c4 18	 add	 esp, 24			; 00000018H
  00054	5f		 pop	 edi
  00055	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx

; 495  :    return ptr;
; 496  : }

  0005a	c3		 ret	 0
?encodeAtrError@@YAPADPADABUStunAtrError@@@Z ENDP	; encodeAtrError
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?encodeAtrUnknown@@YAPADPADABUStunAtrUnknown@@@Z
_TEXT	SEGMENT
?encodeAtrUnknown@@YAPADPADABUStunAtrUnknown@@@Z PROC	; encodeAtrUnknown, COMDAT
; _ptr$ = eax
; _atr$ = edi

; 501  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 502  :    ptr = encode16(ptr, UnknownAttribute);

  00002	6a 0a		 push	 10			; 0000000aH
  00004	8b f0		 mov	 esi, eax
  00006	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16

; 503  :    ptr = encode16(ptr, 2+2*atr.numAttributes);

  0000b	66 8b 4f 10	 mov	 cx, WORD PTR [edi+16]
  0000f	66 41		 inc	 cx
  00011	66 03 c9	 add	 cx, cx
  00014	0f b7 c9	 movzx	 ecx, cx
  00017	51		 push	 ecx
  00018	8b f0		 mov	 esi, eax
  0001a	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16
  0001f	59		 pop	 ecx
  00020	59		 pop	 ecx

; 504  :    for (int i=0; i<atr.numAttributes; i++)

  00021	33 c9		 xor	 ecx, ecx
  00023	33 db		 xor	 ebx, ebx
  00025	66 3b 4f 10	 cmp	 cx, WORD PTR [edi+16]
  00029	73 16		 jae	 SHORT $LN1@encodeAtrU
$LL3@encodeAtrU:

; 505  :    {
; 506  :       ptr = encode16(ptr, atr.attrType[i]);

  0002b	0f b7 0c 5f	 movzx	 ecx, WORD PTR [edi+ebx*2]
  0002f	51		 push	 ecx
  00030	8b f0		 mov	 esi, eax
  00032	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16
  00037	59		 pop	 ecx
  00038	0f b7 4f 10	 movzx	 ecx, WORD PTR [edi+16]
  0003c	43		 inc	 ebx
  0003d	3b d9		 cmp	 ebx, ecx
  0003f	7c ea		 jl	 SHORT $LL3@encodeAtrU
$LN1@encodeAtrU:
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx

; 507  :    }
; 508  :    return ptr;
; 509  : }

  00043	c3		 ret	 0
?encodeAtrUnknown@@YAPADPADABUStunAtrUnknown@@@Z ENDP	; encodeAtrUnknown
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?encodeXorOnly@@YAPADPAD@Z
_TEXT	SEGMENT
?encodeXorOnly@@YAPADPAD@Z PROC				; encodeXorOnly, COMDAT
; _ptr$ = esi

; 515  :    ptr = encode16(ptr, XorOnly );

  00000	6a 21		 push	 33			; 00000021H
  00002	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16
  00007	59		 pop	 ecx

; 516  :    return ptr;
; 517  : }

  00008	c3		 ret	 0
?encodeXorOnly@@YAPADPAD@Z ENDP				; encodeXorOnly
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?encodeAtrString@@YAPADPADGABUStunAtrString@@@Z
_TEXT	SEGMENT
_type$ = 8						; size = 2
_atr$ = 12						; size = 4
?encodeAtrString@@YAPADPADGABUStunAtrString@@@Z PROC	; encodeAtrString, COMDAT
; _ptr$ = eax

; 522  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 523  : 	
; 524  :    ptr = encode16(ptr, type);

  00006	ff 75 08	 push	 DWORD PTR _type$[ebp]
  00009	8b f0		 mov	 esi, eax
  0000b	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16

; 525  :    ptr = encode16(ptr, atr.sizeValue);

  00010	8b 7d 0c	 mov	 edi, DWORD PTR _atr$[ebp]
  00013	0f b7 8f 00 01
	00 00		 movzx	 ecx, WORD PTR [edi+256]
  0001a	51		 push	 ecx
  0001b	8b f0		 mov	 esi, eax
  0001d	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16

; 526  :    ptr = encode(ptr, atr.value, atr.sizeValue);

  00022	0f b7 b7 00 01
	00 00		 movzx	 esi, WORD PTR [edi+256]
  00029	56		 push	 esi
  0002a	8b d8		 mov	 ebx, eax
  0002c	57		 push	 edi
  0002d	53		 push	 ebx
  0002e	e8 00 00 00 00	 call	 _memcpy
  00033	83 c4 14	 add	 esp, 20			; 00000014H
  00036	5f		 pop	 edi
  00037	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx

; 527  :    return ptr;
; 528  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?encodeAtrString@@YAPADPADGABUStunAtrString@@@Z ENDP	; encodeAtrString
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?encodeAtrIntegrity@@YAPADPADABUStunAtrIntegrity@@@Z
_TEXT	SEGMENT
_atr$ = 8						; size = 4
?encodeAtrIntegrity@@YAPADPADABUStunAtrIntegrity@@@Z PROC ; encodeAtrIntegrity, COMDAT
; _ptr$ = eax

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 534  :    ptr = encode16(ptr, MessageIntegrity);

  00004	6a 08		 push	 8
  00006	8b f0		 mov	 esi, eax
  00008	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16

; 535  :    ptr = encode16(ptr, 20);

  0000d	6a 14		 push	 20			; 00000014H
  0000f	8b f0		 mov	 esi, eax
  00011	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16

; 536  :    ptr = encode(ptr, atr.hash, sizeof(atr.hash));

  00016	6a 14		 push	 20			; 00000014H
  00018	ff 75 08	 push	 DWORD PTR _atr$[ebp]
  0001b	8b f0		 mov	 esi, eax
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 _memcpy
  00023	83 c4 14	 add	 esp, 20			; 00000014H
  00026	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00029	5e		 pop	 esi

; 537  :    return ptr;
; 538  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?encodeAtrIntegrity@@YAPADPADABUStunAtrIntegrity@@@Z ENDP ; encodeAtrIntegrity
_TEXT	ENDS
PUBLIC	?stunRand@@YAHXZ				; stunRand
EXTRN	_rand:PROC
EXTRN	_srand:PROC
;	COMDAT ?init@?1??stunRand@@YAHXZ@4_NA
_BSS	SEGMENT
?init@?1??stunRand@@YAHXZ@4_NA DB 01H DUP (?)		; `stunRand'::`2'::init
; Function compile flags: /Ogsp
_BSS	ENDS
;	COMDAT ?stunRand@@YAHXZ
_TEXT	SEGMENT
_tick$87536 = -16					; size = 8
_lowtick$87537 = -8					; size = 4
_hightick$87538 = -4					; size = 4
?stunRand@@YAHXZ PROC					; stunRand, COMDAT

; 648  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 649  :    // return 32 bits of random stuff
; 650  :    static bool init=false;
; 651  :    if ( !init )

  00006	33 c9		 xor	 ecx, ecx
  00008	56		 push	 esi
  00009	38 0d 00 00 00
	00		 cmp	 BYTE PTR ?init@?1??stunRand@@YAHXZ@4_NA, cl
  0000f	75 2b		 jne	 SHORT $LN1@stunRand

; 652  :    { 
; 653  :       init = true;

  00011	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?init@?1??stunRand@@YAHXZ@4_NA, 1

; 654  : 		
; 655  :       UInt64 tick;
; 656  : 		
; 657  : #if defined(WIN32) 
; 658  :       volatile unsigned int lowtick=0,hightick=0;

  00018	89 4d f8	 mov	 DWORD PTR _lowtick$87537[ebp], ecx
  0001b	89 4d fc	 mov	 DWORD PTR _hightick$87538[ebp], ecx

; 659  :       __asm
; 660  :          {
; 661  :             rdtsc 

  0001e	0f 31		 rdtsc

; 662  :                mov lowtick, eax

  00020	89 45 f8	 mov	 DWORD PTR _lowtick$87537[ebp], eax

; 663  :                mov hightick, edx

  00023	89 55 fc	 mov	 DWORD PTR _hightick$87538[ebp], edx

; 664  :          }
; 665  :       tick = hightick;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _hightick$87538[ebp]

; 666  :       tick <<= 32;
; 667  :       tick |= lowtick;

  00029	8b 75 f8	 mov	 esi, DWORD PTR _lowtick$87537[ebp]
  0002c	33 d2		 xor	 edx, edx
  0002e	0b d6		 or	 edx, esi

; 668  : #elif defined(__GNUC__) && ( defined(__i686__) || defined(__i386__) )
; 669  :       asm("rdtsc" : "=A" (tick));
; 670  : #elif defined (__SUNPRO_CC) || defined( __sparc__ )	
; 671  :       tick = gethrtime();
; 672  : #elif defined(__MACH__) 
; 673  :       int fd=open("/dev/random",O_RDONLY);
; 674  :       read(fd,&tick,sizeof(tick));
; 675  :       closesocket(fd);
; 676  : #else
; 677  : //#     error Need some way to seed the random number generator /* silver delete, TODO */
; 678  : #endif
; 679  :       int seed = int(tick);
; 680  : #ifdef WIN32
; 681  :       srand(seed);

  00030	52		 push	 edx
  00031	89 4d f4	 mov	 DWORD PTR _tick$87536[ebp+4], ecx
  00034	0b c1		 or	 eax, ecx
  00036	e8 00 00 00 00	 call	 _srand
  0003b	59		 pop	 ecx
$LN1@stunRand:

; 682  : #else
; 683  :       srandom(seed);
; 684  : #endif
; 685  :    }
; 686  : 	
; 687  : #ifdef WIN32
; 688  :    int r1 = rand();

  0003c	e8 00 00 00 00	 call	 _rand
  00041	8b f0		 mov	 esi, eax

; 689  :    int r2 = rand();

  00043	e8 00 00 00 00	 call	 _rand

; 690  : 	
; 691  :    int ret = (r1<<16) + r2;

  00048	c1 e6 10	 shl	 esi, 16			; 00000010H
  0004b	03 c6		 add	 eax, esi
  0004d	5e		 pop	 esi

; 692  :    return ret;
; 693  : #else
; 694  :    return random(); 
; 695  : #endif
; 696  : }

  0004e	c9		 leave
  0004f	c3		 ret	 0
?stunRand@@YAHXZ ENDP					; stunRand
_TEXT	ENDS
PUBLIC	?randomPort@@YAHXZ				; randomPort
; Function compile flags: /Ogsp
;	COMDAT ?randomPort@@YAHXZ
_TEXT	SEGMENT
?randomPort@@YAHXZ PROC					; randomPort, COMDAT

; 701  :    int min=0x1000;
; 702  :    int max=0x1FFF;
; 703  : 	
; 704  :    int ret = stunRand();

  00000	e8 00 00 00 00	 call	 ?stunRand@@YAHXZ	; stunRand
  00005	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH

; 705  :    ret = ret|min;
; 706  :    ret = ret&max;

  0000a	0d 00 10 00 00	 or	 eax, 4096		; 00001000H

; 707  : 	
; 708  :    return ret;
; 709  : }

  0000f	c3		 ret	 0
?randomPort@@YAHXZ ENDP					; randomPort
_TEXT	ENDS
PUBLIC	??_C@_0BF@CBILOHLA@hmac?9not?9implemented?$AA@	; `string'
EXTRN	_strncpy:PROC
;	COMDAT ??_C@_0BF@CBILOHLA@hmac?9not?9implemented?$AA@
CONST	SEGMENT
??_C@_0BF@CBILOHLA@hmac?9not?9implemented?$AA@ DB 'hmac-not-implemented', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?computeHmac@@YAXPADPBDH1H@Z
_TEXT	SEGMENT
_hmac$ = 8						; size = 4
?computeHmac@@YAXPADPBDH1H@Z PROC			; computeHmac, COMDAT

; 714  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 715  :    strncpy(hmac,"hmac-not-implemented",20);

  00003	6a 14		 push	 20			; 00000014H
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@CBILOHLA@hmac?9not?9implemented?$AA@
  0000a	ff 75 08	 push	 DWORD PTR _hmac$[ebp]
  0000d	e8 00 00 00 00	 call	 _strncpy
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 716  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?computeHmac@@YAXPADPBDH1H@Z ENDP			; computeHmac
_TEXT	ENDS
;	COMDAT ?hexmap@?1??toHex@@YAXPBDHPAD@Z@4PADA
_DATA	SEGMENT
?hexmap@?1??toHex@@YAXPBDHPAD@Z@4PADA DB '0123456789abcdef', 00H ; `toHex'::`2'::hexmap
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?toHex@@YAXPBDHPAD@Z
_TEXT	SEGMENT
?toHex@@YAXPBDHPAD@Z PROC				; toHex, COMDAT
; _buffer$ = edx
; _bufferSize$ = eax
; _output$ = ecx

; 734  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f8		 mov	 edi, eax

; 735  :    static char hexmap[] = "0123456789abcdef";
; 736  : 	
; 737  :    const char* p = buffer;

  00004	8b f2		 mov	 esi, edx

; 738  :    char* r = output;
; 739  :    for (int i=0; i < bufferSize; i++)

  00006	85 ff		 test	 edi, edi
  00008	7e 25		 jle	 SHORT $LN1@toHex
$LL3@toHex:

; 740  :    {
; 741  :       unsigned char temp = *p++;

  0000a	8a 06		 mov	 al, BYTE PTR [esi]
  0000c	0f b6 c0	 movzx	 eax, al

; 742  : 		
; 743  :       int hi = (temp & 0xf0)>>4;

  0000f	8b d0		 mov	 edx, eax
  00011	c1 ea 04	 shr	 edx, 4

; 744  :       int low = (temp & 0xf);
; 745  : 		
; 746  :       *r++ = hexmap[hi];

  00014	8a 92 00 00 00
	00		 mov	 dl, BYTE PTR ?hexmap@?1??toHex@@YAXPBDHPAD@Z@4PADA[edx]
  0001a	83 e0 0f	 and	 eax, 15			; 0000000fH
  0001d	88 11		 mov	 BYTE PTR [ecx], dl

; 747  :       *r++ = hexmap[low];

  0001f	8a 80 00 00 00
	00		 mov	 al, BYTE PTR ?hexmap@?1??toHex@@YAXPBDHPAD@Z@4PADA[eax]
  00025	46		 inc	 esi
  00026	88 41 01	 mov	 BYTE PTR [ecx+1], al
  00029	83 c1 02	 add	 ecx, 2
  0002c	4f		 dec	 edi
  0002d	75 db		 jne	 SHORT $LL3@toHex
$LN1@toHex:
  0002f	5f		 pop	 edi

; 748  :    }
; 749  :    *r = 0;

  00030	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00033	5e		 pop	 esi

; 750  : }

  00034	c3		 ret	 0
?toHex@@YAXPBDHPAD@Z ENDP				; toHex
_TEXT	ENDS
PUBLIC	_username$GSCopy$
PUBLIC	??_C@_06KHKGBNKO@Fluffy?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?stunCreatePassword@@YAXABUStunAtrString@@PAU1@@Z ; stunCreatePassword
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_06KHKGBNKO@Fluffy?$AA@
CONST	SEGMENT
??_C@_06KHKGBNKO@Fluffy?$AA@ DB 'Fluffy', 00H		; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?stunCreatePassword@@YAXABUStunAtrString@@PAU1@@Z
_TEXT	SEGMENT
_username$GSCopy$ = -36					; size = 4
_hmac$ = -32						; size = 20
_key$ = -12						; size = 7
__$ArrayPad$ = -4					; size = 4
_username$ = 8						; size = 4
_password$ = 12						; size = 4
?stunCreatePassword@@YAXABUStunAtrString@@PAU1@@Z PROC	; stunCreatePassword, COMDAT

; 788  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _username$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 0c	 mov	 ebx, DWORD PTR _password$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi

; 789  :    char hmac[20];
; 790  :    char key[] = "Fluffy";

  00019	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_06KHKGBNKO@Fluffy?$AA@
  0001e	8d 7d f4	 lea	 edi, DWORD PTR _key$[ebp]
  00021	a5		 movsd
  00022	66 a5		 movsw
  00024	89 45 dc	 mov	 DWORD PTR _username$GSCopy$[ebp], eax

; 791  :    //char buffer[STUN_MAX_STRING];
; 792  :    computeHmac(hmac, username.value, strlen(username.value), key, strlen(key));

  00027	8d 45 f4	 lea	 eax, DWORD PTR _key$[ebp]
  0002a	50		 push	 eax
  0002b	a4		 movsb
  0002c	e8 00 00 00 00	 call	 _strlen
  00031	ff 75 dc	 push	 DWORD PTR _username$GSCopy$[ebp]
  00034	e8 00 00 00 00	 call	 _strlen
  00039	6a 14		 push	 20			; 00000014H
  0003b	8d 45 e0	 lea	 eax, DWORD PTR _hmac$[ebp]
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@CBILOHLA@hmac?9not?9implemented?$AA@
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _strncpy
  00049	83 c4 14	 add	 esp, 20			; 00000014H

; 793  :    toHex(hmac, 20, password->value);

  0004c	6a 14		 push	 20			; 00000014H
  0004e	8b cb		 mov	 ecx, ebx
  00050	58		 pop	 eax
  00051	8d 55 e0	 lea	 edx, DWORD PTR _hmac$[ebp]
  00054	e8 00 00 00 00	 call	 ?toHex@@YAXPBDHPAD@Z	; toHex

; 794  :    password->sizeValue = 40;
; 795  :    password->value[40]=0;
; 796  : 	
; 797  :    //clog << "password=" << password->value << endl;
; 798  : }

  00059	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005c	6a 28		 push	 40			; 00000028H
  0005e	58		 pop	 eax
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	66 89 83 00 01
	00 00		 mov	 WORD PTR [ebx+256], ax
  00068	c6 43 28 00	 mov	 BYTE PTR [ebx+40], 0
  0006c	33 cd		 xor	 ecx, ebp
  0006e	5b		 pop	 ebx
  0006f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00074	c9		 leave
  00075	c3		 ret	 0
?stunCreatePassword@@YAXABUStunAtrString@@PAU1@@Z ENDP	; stunCreatePassword
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?stunGetSystemTimeSecs@@YA_KXZ			; stunGetSystemTimeSecs
EXTRN	__imp__GetSystemTime@4:PROC
; Function compile flags: /Ogsp
;	COMDAT ?stunGetSystemTimeSecs@@YA_KXZ
_TEXT	SEGMENT
_t$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?stunGetSystemTimeSecs@@YA_KXZ PROC			; stunGetSystemTimeSecs, COMDAT

; 803  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 804  :    UInt64 time=0;
; 805  : #if defined(WIN32)  
; 806  :    SYSTEMTIME t;
; 807  :    // CJ TODO - this probably has bug on wrap around every 24 hours
; 808  :    GetSystemTime( &t );

  00010	8d 45 ec	 lea	 eax, DWORD PTR _t$[ebp]
  00013	50		 push	 eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemTime@4

; 809  :    time = (t.wHour*60+t.wMinute)*60+t.wSecond; 
; 810  : #else
; 811  :    struct timeval now;
; 812  :    gettimeofday( &now , NULL );
; 813  :    time = now.tv_sec;
; 814  : #endif
; 815  :    return time;

  0001a	0f b7 45 f4	 movzx	 eax, WORD PTR _t$[ebp+8]
  0001e	0f b7 4d f6	 movzx	 ecx, WORD PTR _t$[ebp+10]
  00022	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00025	03 c1		 add	 eax, ecx
  00027	0f b7 4d f8	 movzx	 ecx, WORD PTR _t$[ebp+12]
  0002b	6b c0 3c	 imul	 eax, 60			; 0000003cH
  0002e	03 c1		 add	 eax, ecx

; 816  : }

  00030	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00033	33 cd		 xor	 ecx, ebp
  00035	99		 cdq
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	c9		 leave
  0003c	c3		 ret	 0
?stunGetSystemTimeSecs@@YA_KXZ ENDP			; stunGetSystemTimeSecs
_TEXT	ENDS
PUBLIC	??_C@_0M@LMOHNOBH@175?46?40?4124?$AA@		; `string'
PUBLIC	_portVal$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?stunParseHostName@@YA_NPADAAIAAGG@Z		; stunParseHostName
EXTRN	__imp__ntohl@4:PROC
EXTRN	?GetHostByName@@YAIPBD@Z:PROC			; GetHostByName
EXTRN	__imp__inet_addr@4:PROC
EXTRN	_isdigit:PROC
EXTRN	_strtol:PROC
;	COMDAT ??_C@_0M@LMOHNOBH@175?46?40?4124?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string.h
CONST	SEGMENT
??_C@_0M@LMOHNOBH@175?46?40?4124?$AA@ DB '175.6.0.124', 00H ; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\stun.cpp
CONST	ENDS
;	COMDAT ?stunParseHostName@@YA_NPADAAIAAGG@Z
_TEXT	SEGMENT
_portVal$GSCopy$ = -524					; size = 4
_endPtr$87659 = -520					; size = 4
_host$ = -516						; size = 512
__$ArrayPad$ = -4					; size = 4
_peerName$ = 8						; size = 4
_ip$ = 12						; size = 4
_portVal$ = 16						; size = 4
_defaultPort$ = 20					; size = 2
?stunParseHostName@@YA_NPADAAIAAGG@Z PROC		; stunParseHostName, COMDAT

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _peerName$[ebp]
  00016	8b 4d 10	 mov	 ecx, DWORD PTR _portVal$[ebp]
  00019	56		 push	 esi
  0001a	8b 75 0c	 mov	 esi, DWORD PTR _ip$[ebp]
  0001d	57		 push	 edi

; 852  :    char host[512];
; 853  :    strncpy(host,peerName,512);

  0001e	68 00 02 00 00	 push	 512			; 00000200H
  00023	50		 push	 eax
  00024	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _host$[ebp]
  0002a	50		 push	 eax

; 913  : 	   }
; 914  :    }
; 915  : #else
; 916  :    struct hostent* h;
; 917  :    in_addr sin_addr;
; 918  :    h = gethostbyname( host );
; 919  :    if ( h == NULL )
; 920  :    {
; 921  :       int err = getErrno();
; 922  :       std::cerr << "error was " << err << std::endl;
; 923  :       ip = ntohl( 0x7F000001L );
; 924  :       return false;
; 925  :    }
; 926  :    else
; 927  :    {
; 928  :       sin_addr = *(struct in_addr*)h->h_addr;
; 929  :       ip = ntohl( sin_addr.s_addr );
; 930  :    }
; 931  : #endif
; 932  :    portVal = portNum;

  0002b	89 8d f4 fd ff
	ff		 mov	 DWORD PTR _portVal$GSCopy$[ebp], ecx
  00031	e8 00 00 00 00	 call	 _strncpy
  00036	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _host$[ebp]
  0003c	6a 3a		 push	 58			; 0000003aH
  0003e	50		 push	 eax
  0003f	c6 45 fb 00	 mov	 BYTE PTR _host$[ebp+511], 0
  00043	e8 00 00 00 00	 call	 _strchr
  00048	83 c4 14	 add	 esp, 20			; 00000014H
  0004b	85 c0		 test	 eax, eax
  0004d	74 2e		 je	 SHORT $LN15@stunParseH

; 854  :    host[512-1]='\0';
; 855  :    char* port = NULL;
; 856  : 	
; 857  :    int portNum = defaultPort;
; 858  : 	
; 859  :    // pull out the port part if present.
; 860  :    char* sep = strchr(host,':');
; 861  : 	
; 862  :    if ( sep == NULL )
; 863  :    {
; 864  :       portNum = defaultPort;
; 865  :    }
; 866  :    else
; 867  :    {
; 868  :       *sep = '\0';
; 869  :       port = sep + 1;
; 870  :       // set port part
; 871  : 		
; 872  :       char* endPtr=NULL;
; 873  : 		
; 874  :       portNum = strtol(port,&endPtr,10);

  0004f	83 a5 f8 fd ff
	ff 00		 and	 DWORD PTR _endPtr$87659[ebp], 0
  00056	6a 0a		 push	 10			; 0000000aH
  00058	8d 8d f8 fd ff
	ff		 lea	 ecx, DWORD PTR _endPtr$87659[ebp]
  0005e	c6 00 00	 mov	 BYTE PTR [eax], 0
  00061	51		 push	 ecx
  00062	40		 inc	 eax
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _strtol
  00069	8b f8		 mov	 edi, eax

; 875  : 		
; 876  :       if ( endPtr != NULL )

  0006b	8b 85 f8 fd ff
	ff		 mov	 eax, DWORD PTR _endPtr$87659[ebp]
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
  00074	85 c0		 test	 eax, eax
  00076	74 09		 je	 SHORT $LN7@stunParseH

; 877  :       {
; 878  :          if ( *endPtr != '\0' )

  00078	80 38 00	 cmp	 BYTE PTR [eax], 0
  0007b	74 04		 je	 SHORT $LN7@stunParseH
$LN15@stunParseH:

; 879  :          {
; 880  :             portNum = defaultPort;

  0007d	0f b7 7d 14	 movzx	 edi, WORD PTR _defaultPort$[ebp]
$LN7@stunParseH:

; 881  :          }
; 882  :       }
; 883  :    }
; 884  :     
; 885  :    if ( portNum < 1024 ) return false;

  00081	81 ff 00 04 00
	00		 cmp	 edi, 1024		; 00000400H
  00087	7d 04		 jge	 SHORT $LN6@stunParseH
$LN16@stunParseH:
  00089	32 c0		 xor	 al, al
  0008b	eb 54		 jmp	 SHORT $LN11@stunParseH
$LN6@stunParseH:

; 886  :    if ( portNum >= 0xFFFF ) return false;

  0008d	81 ff ff ff 00
	00		 cmp	 edi, 65535		; 0000ffffH
  00093	7d f4		 jge	 SHORT $LN16@stunParseH

; 887  : 	
; 888  :    // figure out the host part 
; 889  : 	
; 890  : #ifdef WIN32
; 891  :    if ( isdigit( host[0] ) )

  00095	0f be 85 fc fd
	ff ff		 movsx	 eax, BYTE PTR _host$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 _isdigit
  000a2	85 c0		 test	 eax, eax
  000a4	59		 pop	 ecx

; 892  :    {
; 893  :       // assume it is a ip address 
; 894  :       unsigned long a = inet_addr(host);

  000a5	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _host$[ebp]
  000ab	50		 push	 eax
  000ac	74 08		 je	 SHORT $LN4@stunParseH
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_addr@4

; 895  :       //cerr << "a=0x" << hex << a << dec << endl;
; 896  : 		
; 897  :       ip = ntohl( a );
; 898  :    }
; 899  :    else

  000b4	eb 17		 jmp	 SHORT $LN2@stunParseH
$LN4@stunParseH:

; 900  :    {
; 901  :       // assume it is a host name 
; 902  : 	   unsigned int iIP = GetHostByName(host);

  000b6	e8 00 00 00 00	 call	 ?GetHostByName@@YAIPBD@Z ; GetHostByName
  000bb	59		 pop	 ecx

; 903  : 	   if (0 == iIP)

  000bc	85 c0		 test	 eax, eax
  000be	75 0d		 jne	 SHORT $LN2@stunParseH

; 904  : 	   {
; 905  : // 		   ip = ntohl( 0x7F000001L );
; 906  : // 		   return false;
; 907  : 		   ip = inet_addr(STUNSERVERIP);

  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LMOHNOBH@175?46?40?4124?$AA@
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_addr@4
  000cb	89 06		 mov	 DWORD PTR [esi], eax
$LN2@stunParseH:

; 908  : 		   ip = ntohl(ip);
; 909  : 	   }
; 910  : 	   else
; 911  : 	   {
; 912  : 		   ip = ntohl(iIP);

  000cd	50		 push	 eax
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ntohl@4
  000d4	89 06		 mov	 DWORD PTR [esi], eax

; 913  : 	   }
; 914  :    }
; 915  : #else
; 916  :    struct hostent* h;
; 917  :    in_addr sin_addr;
; 918  :    h = gethostbyname( host );
; 919  :    if ( h == NULL )
; 920  :    {
; 921  :       int err = getErrno();
; 922  :       std::cerr << "error was " << err << std::endl;
; 923  :       ip = ntohl( 0x7F000001L );
; 924  :       return false;
; 925  :    }
; 926  :    else
; 927  :    {
; 928  :       sin_addr = *(struct in_addr*)h->h_addr;
; 929  :       ip = ntohl( sin_addr.s_addr );
; 930  :    }
; 931  : #endif
; 932  :    portVal = portNum;

  000d6	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _portVal$GSCopy$[ebp]
  000dc	66 89 38	 mov	 WORD PTR [eax], di

; 933  :    return true;

  000df	b0 01		 mov	 al, 1
$LN11@stunParseH:

; 934  : }

  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	5f		 pop	 edi
  000e5	33 cd		 xor	 ecx, ebp
  000e7	5e		 pop	 esi
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	c9		 leave
  000ee	c3		 ret	 0
?stunParseHostName@@YA_NPADAAIAAGG@Z ENDP		; stunParseHostName
_TEXT	ENDS
PUBLIC	?stunParseServerName@@YA_NPADAAUStunAddress4@@@Z ; stunParseServerName
; Function compile flags: /Ogsp
;	COMDAT ?stunParseServerName@@YA_NPADAAUStunAddress4@@@Z
_TEXT	SEGMENT
_name$ = 8						; size = 4
_addr$ = 12						; size = 4
?stunParseServerName@@YA_NPADAAUStunAddress4@@@Z PROC	; stunParseServerName, COMDAT

; 939  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 940  : 	
; 941  :    // TODO - put in DNS SRV stuff.
; 942  : 	
; 943  :    bool ret = stunParseHostName( name, addr.addr, addr.port, 3478); 

  00004	8b 75 0c	 mov	 esi, DWORD PTR _addr$[ebp]
  00007	68 96 0d 00 00	 push	 3478			; 00000d96H
  0000c	56		 push	 esi
  0000d	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  00010	50		 push	 eax
  00011	ff 75 08	 push	 DWORD PTR _name$[ebp]
  00014	e8 00 00 00 00	 call	 ?stunParseHostName@@YA_NPADAAIAAGG@Z ; stunParseHostName
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 944  :    if ( ret != true ) 

  0001c	3c 01		 cmp	 al, 1
  0001e	74 08		 je	 SHORT $LN1@stunParseS

; 945  :    {
; 946  :        addr.port=0xFFFF;

  00020	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00025	66 89 0e	 mov	 WORD PTR [esi], cx
$LN1@stunParseS:
  00028	5e		 pop	 esi

; 947  :    }	
; 948  :    return ret;
; 949  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?stunParseServerName@@YA_NPADAAUStunAddress4@@@Z ENDP	; stunParseServerName
_TEXT	ENDS
EXTRN	_strcpy:PROC
; Function compile flags: /Ogsp
;	COMDAT ?stunCreateErrorResponse@@YAXAAUStunMessage@@HHPBD@Z
_TEXT	SEGMENT
_cl$ = 8						; size = 4
_number$ = 12						; size = 4
_msg$ = 16						; size = 4
?stunCreateErrorResponse@@YAXAAUStunMessage@@HHPBD@Z PROC ; stunCreateErrorResponse, COMDAT
; _response$ = eax

; 954  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 955  :    response.msgHdr.msgType = BindErrorResponseMsg;
; 956  :    response.hasErrorCode = true;
; 957  :    response.errorCode.errorClass = cl;
; 958  :    response.errorCode.number = number;
; 959  :    strcpy(response.errorCode.reason, msg);

  00003	ff 75 10	 push	 DWORD PTR _msg$[ebp]
  00006	b9 11 01 00 00	 mov	 ecx, 273		; 00000111H
  0000b	66 89 08	 mov	 WORD PTR [eax], cx
  0000e	8a 4d 08	 mov	 cl, BYTE PTR _cl$[ebp]
  00011	88 88 5b 02 00
	00		 mov	 BYTE PTR [eax+603], cl
  00017	8a 4d 0c	 mov	 cl, BYTE PTR _number$[ebp]
  0001a	c6 80 58 02 00
	00 01		 mov	 BYTE PTR [eax+600], 1
  00021	88 88 5c 02 00
	00		 mov	 BYTE PTR [eax+604], cl
  00027	05 5d 02 00 00	 add	 eax, 605		; 0000025dH
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _strcpy
  00032	59		 pop	 ecx
  00033	59		 pop	 ecx

; 960  : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?stunCreateErrorResponse@@YAXAAUStunMessage@@HHPBD@Z ENDP ; stunCreateErrorResponse
_TEXT	ENDS
PUBLIC	?stunStopServer@@YAXAAUStunServerInfo@@@Z	; stunStopServer
EXTRN	__imp__closesocket@4:PROC
; Function compile flags: /Ogsp
;	COMDAT ?stunStopServer@@YAXAAUStunServerInfo@@@Z
_TEXT	SEGMENT
_info$ = 8						; size = 4
?stunStopServer@@YAXAAUStunServerInfo@@@Z PROC		; stunStopServer, COMDAT

; 1290 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1291 :    if (info.myFd > 0) closesocket(info.myFd);

  00004	8b 75 08	 mov	 esi, DWORD PTR _info$[ebp]
  00007	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000a	57		 push	 edi
  0000b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__closesocket@4
  00011	85 c0		 test	 eax, eax
  00013	74 03		 je	 SHORT $LN9@stunStopSe
  00015	50		 push	 eax
  00016	ff d7		 call	 edi
$LN9@stunStopSe:

; 1292 :    if (info.altPortFd > 0) closesocket(info.altPortFd);

  00018	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0001b	85 c0		 test	 eax, eax
  0001d	74 03		 je	 SHORT $LN8@stunStopSe
  0001f	50		 push	 eax
  00020	ff d7		 call	 edi
$LN8@stunStopSe:

; 1293 :    if (info.altIpFd > 0) closesocket(info.altIpFd);

  00022	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00025	85 c0		 test	 eax, eax
  00027	74 03		 je	 SHORT $LN7@stunStopSe
  00029	50		 push	 eax
  0002a	ff d7		 call	 edi
$LN7@stunStopSe:

; 1294 :    if (info.altIpPortFd > 0) closesocket(info.altIpPortFd);

  0002c	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0002f	85 c0		 test	 eax, eax
  00031	74 03		 je	 SHORT $LN6@stunStopSe
  00033	50		 push	 eax
  00034	ff d7		 call	 edi
$LN6@stunStopSe:

; 1295 :    
; 1296 :    if (info.relay)

  00036	80 7e 1c 00	 cmp	 BYTE PTR [esi+28], 0
  0003a	74 1c		 je	 SHORT $LN2@stunStopSe

; 1297 :    {
; 1298 :       for (int i=0; i<MAX_MEDIA_RELAYS; ++i)

  0003c	53		 push	 ebx
  0003d	83 c6 21	 add	 esi, 33			; 00000021H
  00040	bb f4 01 00 00	 mov	 ebx, 500		; 000001f4H
$LL4@stunStopSe:

; 1299 :       {
; 1300 :          StunMediaRelay* relay = &info.relays[i];
; 1301 :          if (relay->fd)

  00045	8b 06		 mov	 eax, DWORD PTR [esi]
  00047	85 c0		 test	 eax, eax
  00049	74 06		 je	 SHORT $LN3@stunStopSe

; 1302 :          {
; 1303 :             closesocket(relay->fd);

  0004b	50		 push	 eax
  0004c	ff d7		 call	 edi

; 1304 :             relay->fd = 0;

  0004e	83 26 00	 and	 DWORD PTR [esi], 0
$LN3@stunStopSe:

; 1297 :    {
; 1298 :       for (int i=0; i<MAX_MEDIA_RELAYS; ++i)

  00051	83 c6 16	 add	 esi, 22			; 00000016H
  00054	4b		 dec	 ebx
  00055	75 ee		 jne	 SHORT $LL4@stunStopSe
  00057	5b		 pop	 ebx
$LN2@stunStopSe:
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi

; 1305 :          }
; 1306 :       }
; 1307 :    }
; 1308 : }

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?stunStopServer@@YAXAAUStunServerInfo@@@Z ENDP		; stunStopServer
_TEXT	ENDS
PUBLIC	?stunFindLocalInterfaces@@YAHPAIH@Z		; stunFindLocalInterfaces
; Function compile flags: /Ogsp
;	COMDAT ?stunFindLocalInterfaces@@YAHPAIH@Z
_TEXT	SEGMENT
_addresses$ = 8						; size = 4
_maxRet$ = 12						; size = 4
?stunFindLocalInterfaces@@YAHPAIH@Z PROC		; stunFindLocalInterfaces, COMDAT

; 1591 : #if defined(WIN32) || defined(__sparc__)
; 1592 :    return 0;

  00000	33 c0		 xor	 eax, eax

; 1593 : #else
; 1594 :    struct ifconf ifc;
; 1595 : 	
; 1596 :    int s = socket( AF_INET, SOCK_DGRAM, 0 );
; 1597 :    int len = 100 * sizeof(struct ifreq);
; 1598 : 	
; 1599 :    char buf[ len ];
; 1600 : 	
; 1601 :    ifc.ifc_len = len;
; 1602 :    ifc.ifc_buf = buf;
; 1603 : 	
; 1604 :    int e = ioctl(s,SIOCGIFCONF,&ifc);
; 1605 :    char *ptr = buf;
; 1606 :    int tl = ifc.ifc_len;
; 1607 :    int count=0;
; 1608 : 	
; 1609 :    while ( (tl > 0) && ( count < maxRet) )
; 1610 :    {
; 1611 :       struct ifreq* ifr = (struct ifreq *)ptr;
; 1612 : 		
; 1613 :       int si = sizeof(ifr->ifr_name) + sizeof(struct sockaddr);
; 1614 :       tl -= si;
; 1615 :       ptr += si;
; 1616 :       //char* name = ifr->ifr_ifrn.ifrn_name;
; 1617 :       //cerr << "name = " << name << endl;
; 1618 : 		
; 1619 :       struct ifreq ifr2;
; 1620 :       ifr2 = *ifr;
; 1621 : 		
; 1622 :       e = ioctl(s,SIOCGIFADDR,&ifr2);
; 1623 :       if ( e == -1 )
; 1624 :       {
; 1625 :          break;
; 1626 :       }
; 1627 : 		
; 1628 :       //cerr << "ioctl addr e = " << e << endl;
; 1629 : 		
; 1630 :       struct sockaddr a = ifr2.ifr_addr;
; 1631 :       struct sockaddr_in* addr = (struct sockaddr_in*) &a;
; 1632 : 		
; 1633 :       UInt32 ai = ntohl( addr->sin_addr.s_addr );
; 1634 :       if (int((ai>>24)&0xFF) != 127)
; 1635 :       {
; 1636 :          addresses[count++] = ai;
; 1637 :       }
; 1638 : 		
; 1639 : #if 0
; 1640 :       cerr << "Detected interface "
; 1641 :            << int((ai>>24)&0xFF) << "." 
; 1642 :            << int((ai>>16)&0xFF) << "." 
; 1643 :            << int((ai>> 8)&0xFF) << "." 
; 1644 :            << int((ai    )&0xFF) << endl;
; 1645 : #endif
; 1646 :    }
; 1647 : 	
; 1648 :    closesocket(s);
; 1649 : 	
; 1650 :    return count;
; 1651 : #endif
; 1652 : }

  00002	c3		 ret	 0
?stunFindLocalInterfaces@@YAHPAIH@Z ENDP		; stunFindLocalInterfaces
_TEXT	ENDS
PUBLIC	?stunBuildReqSimple@@YAXPAUStunMessage@@ABUStunAtrString@@_N2I@Z ; stunBuildReqSimple
EXTRN	_memset:PROC
; Function compile flags: /Ogsp
;	COMDAT ?stunBuildReqSimple@@YAXPAUStunMessage@@ABUStunAtrString@@_N2I@Z
_TEXT	SEGMENT
_msg$ = 8						; size = 4
_username$ = 12						; size = 4
_changePort$ = 16					; size = 1
_changeIp$ = 20						; size = 1
_id$ = 24						; size = 4
?stunBuildReqSimple@@YAXPAUStunMessage@@ABUStunAtrString@@_N2I@Z PROC ; stunBuildReqSimple, COMDAT

; 1659 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1660 :    memset( msg , 0 , sizeof(*msg) );

  00006	8b 7d 08	 mov	 edi, DWORD PTR _msg$[ebp]
  00009	68 91 04 00 00	 push	 1169			; 00000491H
  0000e	6a 00		 push	 0
  00010	57		 push	 edi
  00011	e8 00 00 00 00	 call	 _memset
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1661 : 	
; 1662 :    msg->msgHdr.msgType = BindRequestMsg;

  00019	33 c0		 xor	 eax, eax
  0001b	40		 inc	 eax
  0001c	6a 04		 push	 4
  0001e	66 89 07	 mov	 WORD PTR [edi], ax
  00021	8d 77 05	 lea	 esi, DWORD PTR [edi+5]
  00024	5b		 pop	 ebx
$LL5@stunBuildR:

; 1663 : 	
; 1664 :    for ( int i=0; i<16; i=i+4 )
; 1665 :    {
; 1666 :       int r = stunRand();

  00025	e8 00 00 00 00	 call	 ?stunRand@@YAHXZ	; stunRand

; 1667 :       msg->msgHdr.id.octet[i+0]= r>>0;
; 1668 :       msg->msgHdr.id.octet[i+1]= r>>8;

  0002a	8b c8		 mov	 ecx, eax
  0002c	c1 f9 08	 sar	 ecx, 8
  0002f	88 0e		 mov	 BYTE PTR [esi], cl

; 1669 :       msg->msgHdr.id.octet[i+2]= r>>16;

  00031	8b c8		 mov	 ecx, eax
  00033	88 46 ff	 mov	 BYTE PTR [esi-1], al
  00036	c1 f9 10	 sar	 ecx, 16			; 00000010H

; 1670 :       msg->msgHdr.id.octet[i+3]= r>>24;

  00039	c1 f8 18	 sar	 eax, 24			; 00000018H
  0003c	88 4e 01	 mov	 BYTE PTR [esi+1], cl
  0003f	88 46 02	 mov	 BYTE PTR [esi+2], al
  00042	83 c6 04	 add	 esi, 4
  00045	4b		 dec	 ebx
  00046	75 dd		 jne	 SHORT $LL5@stunBuildR

; 1671 :    }
; 1672 : 	
; 1673 :    if ( id != 0 )

  00048	8b 45 18	 mov	 eax, DWORD PTR _id$[ebp]
  0004b	85 c0		 test	 eax, eax
  0004d	74 03		 je	 SHORT $LN2@stunBuildR

; 1674 :    {
; 1675 :       msg->msgHdr.id.octet[0] = id; 

  0004f	88 47 04	 mov	 BYTE PTR [edi+4], al
$LN2@stunBuildR:

; 1676 :    }
; 1677 : 	
; 1678 :    msg->hasChangeRequest = true;
; 1679 :    msg->changeRequest.value =(changeIp?ChangeIpFlag:0) | 
; 1680 :       (changePort?ChangePortFlag:0);

  00052	0f b6 45 10	 movzx	 eax, BYTE PTR _changePort$[ebp]
  00056	0f b6 4d 14	 movzx	 ecx, BYTE PTR _changeIp$[ebp]

; 1681 : 	
; 1682 :    if ( username.sizeValue > 0 )

  0005a	8b 75 0c	 mov	 esi, DWORD PTR _username$[ebp]
  0005d	f7 d8		 neg	 eax
  0005f	1b c0		 sbb	 eax, eax
  00061	83 e0 02	 and	 eax, 2
  00064	f7 d9		 neg	 ecx
  00066	1b c9		 sbb	 ecx, ecx
  00068	83 e1 04	 and	 ecx, 4
  0006b	0b c1		 or	 eax, ecx
  0006d	c6 47 26 01	 mov	 BYTE PTR [edi+38], 1
  00071	89 47 27	 mov	 DWORD PTR [edi+39], eax
  00074	66 83 be 00 01
	00 00 00	 cmp	 WORD PTR [esi+256], 0
  0007c	76 0e		 jbe	 SHORT $LN1@stunBuildR

; 1683 :    {
; 1684 :       msg->hasUsername = true;

  0007e	c6 47 3d 01	 mov	 BYTE PTR [edi+61], 1

; 1685 :       msg->username = username;

  00082	6a 40		 push	 64			; 00000040H
  00084	83 c7 3e	 add	 edi, 62			; 0000003eH
  00087	59		 pop	 ecx
  00088	f3 a5		 rep movsd
  0008a	66 a5		 movsw
$LN1@stunBuildR:
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx

; 1686 :    }
; 1687 : }

  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
?stunBuildReqSimple@@YAXPAUStunMessage@@ABUStunAtrString@@_N2I@Z ENDP ; stunBuildReqSimple
_TEXT	ENDS
PUBLIC	??0?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::_Yarn<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??0?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::_Yarn<char>, COMDAT
; _this$ = ecx

; 3315 : 		{	// default construct

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0
  00005	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 3316 : 		}

  00009	c3		 ret	 0
??0?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::_Yarn<char>
_TEXT	ENDS
PUBLIC	?c_str@?$_Yarn@D@std@@QBEPBDXZ			; std::_Yarn<char>::c_str
; Function compile flags: /Ogsp
;	COMDAT ?c_str@?$_Yarn@D@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$_Yarn@D@std@@QBEPBDXZ PROC			; std::_Yarn<char>::c_str, COMDAT
; _this$ = ecx

; 3376 : 		return (_Myptr != 0 ? _Myptr : &_Nul);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	75 03		 jne	 SHORT $LN4@c_str
  00006	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
$LN4@c_str:

; 3377 : 		}

  00009	c3		 ret	 0
?c_str@?$_Yarn@D@std@@QBEPBDXZ ENDP			; std::_Yarn<char>::c_str
_TEXT	ENDS
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
_TEXT	SEGMENT
__Pfn$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 187  : 		{	// call basic_ostream manipulator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 188  : 		_DEBUG_POINTER(_Pfn);
; 189  : 		return ((*_Pfn)(*this));

  00003	51		 push	 ecx
  00004	ff 55 08	 call	 DWORD PTR __Pfn$[ebp]
  00007	59		 pop	 ecx

; 190  : 		}

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
_TEXT	ENDS
PUBLIC	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT
; _this$ = ecx

; 86   : 		return (_Mystrbuf);

  00000	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]

; 87   : 		}

  00003	c3		 ret	 0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Yarn@D@std@@AAEXXZ			; std::_Yarn<char>::_Tidy
EXTRN	_free:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$_Yarn@D@std@@AAEXXZ PROC			; std::_Yarn<char>::_Tidy, COMDAT
; _this$ = ecx

; 3391 : 		{	// discard any string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3392 : 		if (_Myptr != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 07		 je	 SHORT $LN1@Tidy

; 3393 : 
; 3394 :  #ifdef _DEBUG
; 3395 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3396 : 
; 3397 :  #else /* _DEBUG */
; 3398 : 			_CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	59		 pop	 ecx
$LN1@Tidy:

; 3399 :  #endif /* _DEBUG */
; 3400 : 
; 3401 : 		_Myptr = 0;

  00010	83 26 00	 and	 DWORD PTR [esi], 0
  00013	5e		 pop	 esi

; 3402 : 		}

  00014	c3		 ret	 0
?_Tidy@?$_Yarn@D@std@@AAEXXZ ENDP			; std::_Yarn<char>::_Tidy
_TEXT	ENDS
PUBLIC	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
_TEXT	SEGMENT
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ PROC ; std::basic_ios<char,std::char_traits<char> >::fill, COMDAT
; _this$ = ecx

; 107  : 		return (_Fillch);

  00000	8a 41 40	 mov	 al, BYTE PTR [ecx+64]

; 108  : 		}

  00003	c3		 ret	 0
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::fill
_TEXT	ENDS
PUBLIC	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT
; _this$ = ecx

; 141  : 		return (sync());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 34	 jmp	 DWORD PTR [eax+52]
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
_TEXT	ENDS
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
; Function compile flags: /Ogsp
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT
; _this$ = ecx

; 310  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  00000	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00003	33 c0		 xor	 eax, eax
  00005	39 02		 cmp	 DWORD PTR [edx], eax
  00007	74 05		 je	 SHORT $LN3@Pnavail
  00009	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN3@Pnavail:
  0000e	99		 cdq

; 311  : 		}

  0000f	c3		 ret	 0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*, COMDAT
; _this$ = ecx

; 133  : 			return (_Ok ? _CONVERTIBLE_TO_TRUE : 0);

  00000	33 c0		 xor	 eax, eax
  00002	38 41 04	 cmp	 BYTE PTR [ecx+4], al
  00005	0f 95 c0	 setne	 al
  00008	48		 dec	 eax

; 134  : 			}

  00009	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
_TEXT	ENDS
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 1
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1092 : 		{	// put formatted bool to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1093 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00003	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0000b	ff 75 14	 push	 DWORD PTR __Iosbase$[ebp]
  0000e	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00011	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00014	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00017	ff 50 20	 call	 DWORD PTR [eax+32]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1094 : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
; Function compile flags: /Ogsp
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1098 : 		{	// put formatted long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1099 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00003	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0000b	ff 75 14	 push	 DWORD PTR __Iosbase$[ebp]
  0000e	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00011	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00014	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00017	ff 50 1c	 call	 DWORD PTR [eax+28]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1100 : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
; Function compile flags: /Ogsp
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1104 : 		{	// put formatted unsigned long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1105 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00003	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0000b	ff 75 14	 push	 DWORD PTR __Iosbase$[ebp]
  0000e	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00011	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00014	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00017	ff 50 18	 call	 DWORD PTR [eax+24]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1106 : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
PUBLIC	??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
__Sb$ = 8						; size = 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 613  : 		{	// construct from stream buffer _Sb

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Sb$[ebp]
  00008	c6 00 00	 mov	 BYTE PTR [eax], 0
  0000b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 614  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
; Function compile flags: /Ogsp
;	COMDAT ?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed, COMDAT
; _this$ = ecx

; 647  : 		return (_Failed);

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 648  : 		}

  00002	c3		 ret	 0
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
_TEXT	ENDS
PUBLIC	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT
; _this$ = ecx

; 74   : 		return (_Tiestr);

  00000	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]

; 75   : 		}

  00003	c3		 ret	 0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
_TEXT	ENDS
PUBLIC	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT
; _this$ = ecx

; 304  : 		--*_IPcount;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 305  : 		return ((*_IPnext)++);

  00005	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 306  : 		}

  0000f	c3		 ret	 0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 91   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 92   : 			if (_Myostr.rdbuf() != 0)

  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	8b 44 01 38	 mov	 eax, DWORD PTR [ecx+eax+56]
  00014	85 c0		 test	 eax, eax
  00016	74 07		 je	 SHORT $LN1@Sentry_bas

; 93   : 				_Myostr.rdbuf()->_Lock();

  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	8b c8		 mov	 ecx, eax
  0001c	ff 52 04	 call	 DWORD PTR [edx+4]
$LN1@Sentry_bas:

; 94   : 			}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogsp
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 98   : 			if (_Myostr.rdbuf() != 0)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00007	8b 44 01 38	 mov	 eax, DWORD PTR [ecx+eax+56]
  0000b	85 c0		 test	 eax, eax
  0000d	74 07		 je	 SHORT $LN1@Sentry_bas@2

; 99   : 				_Myostr.rdbuf()->_Unlock();

  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	8b c8		 mov	 ecx, eax
  00013	ff 62 08	 jmp	 DWORD PTR [edx+8]
$LN1@Sentry_bas@2:

; 100  : 			}

  00016	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputn, COMDAT
; _this$ = ecx

; 201  : 		{	// put _Count characters from array beginning at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		return (xsputn(_Ptr, _Count));

  00003	ff 75 10	 push	 DWORD PTR __Count$[ebp+4]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0000e	ff 50 24	 call	 DWORD PTR [eax+36]

; 203  : 		}

  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputn
_TEXT	ENDS
PUBLIC	?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init, COMDAT
; _this$ = ecx

; 1066 : 		{	// initialize from _Locinfo object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1067 : 		_Cvt = _Lobj._Getcvt();

  00003	e8 00 00 00 00	 call	 __Getcvt
  00008	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0000b	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0000e	5e		 pop	 esi

; 1068 : 		}

  0000f	c2 04 00	 ret	 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?c_str@locale@std@@QBEPBDXZ			; std::locale::c_str
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
;	COMDAT ?c_str@locale@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@locale@std@@QBEPBDXZ PROC			; std::locale::c_str, COMDAT
; _this$ = ecx

; 432  : 		return (_Ptr->_Name.c_str());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00005	85 c9		 test	 ecx, ecx
  00007	74 03		 je	 SHORT $LN5@c_str@2
  00009	8b c1		 mov	 eax, ecx

; 433  : 		}

  0000b	c3		 ret	 0

; 432  : 		return (_Ptr->_Name.c_str());

$LN5@c_str@2:
  0000c	83 c0 1c	 add	 eax, 28			; 0000001cH

; 433  : 		}

  0000f	c3		 ret	 0
?c_str@locale@std@@QBEPBDXZ ENDP			; std::locale::c_str
_TEXT	ENDS
PUBLIC	??_7system_error@std@@6B@			; std::system_error::`vftable'
PUBLIC	??0system_error@std@@QAE@Verror_code@1@PBD@Z	; std::system_error::system_error
PUBLIC	??_R4system_error@std@@6B@			; std::system_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVsystem_error@std@@@8			; std::system_error `RTTI Type Descriptor'
PUBLIC	??_R3system_error@std@@8			; std::system_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2system_error@std@@8			; std::system_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@system_error@std@@8		; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Esystem_error@std@@UAEPAXI@Z:PROC		; std::system_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@system_error@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
rdata$r	SEGMENT
??_R1A@?0A@EA@system_error@std@@8 DD FLAT:??_R0?AVsystem_error@std@@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2system_error@std@@8
rdata$r	SEGMENT
??_R2system_error@std@@8 DD FLAT:??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3system_error@std@@8
rdata$r	SEGMENT
??_R3system_error@std@@8 DD 00H				; std::system_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVsystem_error@std@@@8
_DATA	SEGMENT
??_R0?AVsystem_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::system_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVsystem_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4system_error@std@@6B@
rdata$r	SEGMENT
??_R4system_error@std@@6B@ DD 00H			; std::system_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7system_error@std@@6B@
CONST	SEGMENT
??_7system_error@std@@6B@ DD FLAT:??_R4system_error@std@@6B@ ; std::system_error::`vftable'
	DD	FLAT:??_Esystem_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0system_error@std@@QAE@Verror_code@1@PBD@Z
_TEXT	SEGMENT
__Errcode$ = 8						; size = 8
$T93097 = 16						; size = 4
__Message$ = 16						; size = 4
??0system_error@std@@QAE@Verror_code@1@PBD@Z PROC	; std::system_error::system_error, COMDAT
; _this$ = ecx

; 516  : 		{	// construct from error code and message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 10	 mov	 eax, DWORD PTR __Message$[ebp]
  00006	56		 push	 esi
  00007	89 45 10	 mov	 DWORD PTR $T93097[ebp], eax
  0000a	8d 45 10	 lea	 eax, DWORD PTR $T93097[ebp]
  0000d	50		 push	 eax
  0000e	8b f1		 mov	 esi, ecx
  00010	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00015	8b 45 08	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00018	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0001b	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp+4]
  0001e	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00021	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7system_error@std@@6B@

; 517  : 		_Makestr();
; 518  : 		}

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
??0system_error@std@@QAE@Verror_code@1@PBD@Z ENDP	; std::system_error::system_error
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gsystem_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gsystem_error@std@@UAEPAXI@Z PROC			; std::system_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_Gsystem_error@std@@UAEPAXI@Z ENDP			; std::system_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@system_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
__Errcode$ = 12						; size = 4
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z PROC	; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 237  : 			{	// construct with message

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00006	56		 push	 esi
  00007	ff 75 08	 push	 DWORD PTR __Message$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	ff 70 04	 push	 DWORD PTR [eax+4]
  0000f	ff 30		 push	 DWORD PTR [eax]
  00011	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  00016	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@

; 238  : 			}

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ENDP	; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
; Function compile flags: /Ogsp
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
_TEXT	ENDS
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ ; `string'
PUBLIC	__TI4?AVfailure@ios_base@std@@
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@	; `string'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	__CTA4?AVfailure@ios_base@std@@
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
PUBLIC	??0system_error@std@@QAE@ABV01@@Z		; std::system_error::system_error
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0system_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT __CTA4?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA4?AVfailure@ios_base@std@@ DD 04H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
	DD	FLAT:__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ DB 'ios_base::failbit se'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT __TI4?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI4?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ DB 'ios_base::badbit set', 00H ; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	ENDS
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T93134 = -20						; size = 20
__State$ = 8						; size = 4
$T93229 = 12						; size = 4
$T93193 = 12						; size = 4
$T93157 = 12						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 310  : 		{	// set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 311  : 		_Mystate = (iostate)(_State & _Statmask);

  00003	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00006	83 e0 17	 and	 eax, 23			; 00000017H
  00009	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 312  : 		if ((_Mystate & _Except) == 0)

  0000c	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0000f	83 ec 14	 sub	 esp, 20			; 00000014H
  00012	23 c8		 and	 ecx, eax
  00014	74 6c		 je	 SHORT $LN1@clear

; 313  : 			;
; 314  : 		else if (_Reraise)

  00016	33 c0		 xor	 eax, eax
  00018	38 45 0c	 cmp	 BYTE PTR __Reraise$[ebp], al
  0001b	74 07		 je	 SHORT $LN6@clear

; 315  : 			_RERAISE;

  0001d	50		 push	 eax
$LN57@clear:
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN59@clear:
$LN6@clear:

; 316  : 		else if (_Mystate & _Except & badbit)
; 317  : 			_THROW_NCEE(failure, "ios_base::badbit set");

  00024	33 f6		 xor	 esi, esi
  00026	46		 inc	 esi
  00027	f6 c1 04	 test	 cl, 4
  0002a	74 31		 je	 SHORT $LN4@clear
  0002c	e8 00 00 00 00	 call	 ?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
  00031	8b f8		 mov	 edi, eax
  00033	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR $T93157[ebp], OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
$LN58@clear:
  0003a	8d 45 0c	 lea	 eax, DWORD PTR $T93157[ebp]
  0003d	50		 push	 eax
  0003e	8d 4d ec	 lea	 ecx, DWORD PTR $T93134[ebp]
  00041	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00046	89 75 f8	 mov	 DWORD PTR $T93134[ebp+12], esi
  00049	89 7d fc	 mov	 DWORD PTR $T93134[ebp+16], edi
  0004c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T93134[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  00053	68 00 00 00 00	 push	 OFFSET __TI4?AVfailure@ios_base@std@@
  00058	8d 45 ec	 lea	 eax, DWORD PTR $T93134[ebp]
  0005b	eb c1		 jmp	 SHORT $LN57@clear
$LN4@clear:

; 318  : 		else if (_Mystate & _Except & failbit)

  0005d	f6 c1 02	 test	 cl, 2
  00060	74 10		 je	 SHORT $LN2@clear

; 319  : 			_THROW_NCEE(failure, "ios_base::failbit set");

  00062	e8 00 00 00 00	 call	 ?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
  00067	8b f8		 mov	 edi, eax
  00069	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR $T93193[ebp], OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  00070	eb c8		 jmp	 SHORT $LN58@clear
$LN2@clear:

; 320  : 		else
; 321  : 			_THROW_NCEE(failure, "ios_base::eofbit set");

  00072	e8 00 00 00 00	 call	 ?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
  00077	8b f8		 mov	 edi, eax
  00079	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR $T93229[ebp], OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  00080	eb b8		 jmp	 SHORT $LN58@clear
$LN1@clear:

; 322  : 		}

  00082	c9		 leave
  00083	c2 08 00	 ret	 8
$LN56@clear:
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??0system_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0system_error@std@@QAE@ABV01@@Z PROC			; std::system_error::system_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7system_error@std@@6B@
  00016	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00019	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0001c	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0001f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00022	5f		 pop	 edi
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??0system_error@std@@QAE@ABV01@@Z ENDP			; std::system_error::system_error
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@4
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@4:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@ABV01@@Z
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@
  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	??_C@_05IFNDOMON@Jason?$AA@			; `string'
PUBLIC	??_C@_0BA@PBAADAJM@?$CF08x?3?$CF08x?3?$CF08x?3?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?stunCreateUserName@@YAXABUStunAddress4@@PAUStunAtrString@@@Z ; stunCreateUserName
EXTRN	_strcat:PROC
EXTRN	_sprintf:PROC
EXTRN	__aullrem:PROC
;	COMDAT ??_C@_05IFNDOMON@Jason?$AA@
; File f:\projects\git\yfnet\trunk\src\qvodbase\stun.cpp
CONST	SEGMENT
??_C@_05IFNDOMON@Jason?$AA@ DB 'Jason', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PBAADAJM@?$CF08x?3?$CF08x?3?$CF08x?3?$AA@
CONST	SEGMENT
??_C@_0BA@PBAADAJM@?$CF08x?3?$CF08x?3?$CF08x?3?$AA@ DB '%08x:%08x:%08x:', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?stunCreateUserName@@YAXABUStunAddress4@@PAUStunAtrString@@@Z
_TEXT	SEGMENT
_buffer$ = -1100					; size = 1024
_hmacHex$ = -76						; size = 41
_hmac$ = -32						; size = 20
_key$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
_source$ = 8						; size = 4
_username$ = 12						; size = 4
?stunCreateUserName@@YAXABUStunAddress4@@PAUStunAtrString@@@Z PROC ; stunCreateUserName, COMDAT

; 754  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 04 00
	00		 sub	 esp, 1100		; 0000044cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 0c	 mov	 ebx, DWORD PTR _username$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 08	 mov	 edi, DWORD PTR _source$[ebp]

; 755  :    UInt64 time = stunGetSystemTimeSecs();

  0001c	e8 00 00 00 00	 call	 ?stunGetSystemTimeSecs@@YA_KXZ ; stunGetSystemTimeSecs

; 756  :    time -= (time % 20*60);

  00021	6a 00		 push	 0
  00023	6a 14		 push	 20			; 00000014H
  00025	8b f0		 mov	 esi, eax
  00027	52		 push	 edx
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 __aullrem
  0002e	6b c0 3c	 imul	 eax, 60			; 0000003cH
  00031	2b f0		 sub	 esi, eax

; 757  :    //UInt64 hitime = time >> 32;
; 758  :    UInt64 lotime = time & 0xFFFFFFFF;
; 759  : 	
; 760  :    char buffer[1024];
; 761  :    sprintf(buffer,
; 762  :            "%08x:%08x:%08x:", 
; 763  :            UInt32(source.addr),
; 764  :            UInt32(stunRand()),
; 765  :            UInt32(lotime));

  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?stunRand@@YAHXZ	; stunRand
  00039	50		 push	 eax
  0003a	ff 77 02	 push	 DWORD PTR [edi+2]
  0003d	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PBAADAJM@?$CF08x?3?$CF08x?3?$CF08x?3?$AA@
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _sprintf

; 766  : 	
; 767  : 	
; 768  :    char hmac[20];
; 769  :    char key[] = "Jason";

  0004e	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_05IFNDOMON@Jason?$AA@
  00053	8d 7d f4	 lea	 edi, DWORD PTR _key$[ebp]
  00056	a5		 movsd

; 770  :    computeHmac(hmac, buffer, strlen(buffer), key, strlen(key) );

  00057	8d 45 f4	 lea	 eax, DWORD PTR _key$[ebp]
  0005a	50		 push	 eax
  0005b	66 a5		 movsw
  0005d	e8 00 00 00 00	 call	 _strlen
  00062	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _strlen
  0006e	6a 14		 push	 20			; 00000014H
  00070	8d 45 e0	 lea	 eax, DWORD PTR _hmac$[ebp]
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@CBILOHLA@hmac?9not?9implemented?$AA@
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 _strncpy

; 771  :    char hmacHex[41];
; 772  :    toHex(hmac, 20, hmacHex );

  0007e	6a 14		 push	 20			; 00000014H
  00080	8d 4d b4	 lea	 ecx, DWORD PTR _hmacHex$[ebp]
  00083	58		 pop	 eax
  00084	8d 55 e0	 lea	 edx, DWORD PTR _hmac$[ebp]
  00087	e8 00 00 00 00	 call	 ?toHex@@YAXPBDHPAD@Z	; toHex

; 773  :    hmacHex[40] =0;
; 774  : 	
; 775  :    strcat(buffer,hmacHex);

  0008c	8d 45 b4	 lea	 eax, DWORD PTR _hmacHex$[ebp]
  0008f	50		 push	 eax
  00090	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00096	50		 push	 eax
  00097	c6 45 dc 00	 mov	 BYTE PTR _hmacHex$[ebp+40], 0
  0009b	e8 00 00 00 00	 call	 _strcat

; 776  : 	
; 777  :    int l = strlen(buffer);

  000a0	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 _strlen
  000ac	8b f0		 mov	 esi, eax

; 778  :    
; 779  :    username->sizeValue = l;
; 780  :    memcpy(username->value,buffer,l);

  000ae	56		 push	 esi
  000af	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000b5	50		 push	 eax
  000b6	53		 push	 ebx
  000b7	66 89 b3 00 01
	00 00		 mov	 WORD PTR [ebx+256], si
  000be	e8 00 00 00 00	 call	 _memcpy

; 781  :    username->value[l]=0;
; 782  : 	
; 783  :    //if (verbose) clog << "computed username=" << username.value << endl;
; 784  : }

  000c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c6	83 c4 40	 add	 esp, 64			; 00000040H
  000c9	5f		 pop	 edi
  000ca	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0
  000ce	5e		 pop	 esi
  000cf	33 cd		 xor	 ecx, ebp
  000d1	5b		 pop	 ebx
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	c9		 leave
  000d8	c3		 ret	 0
?stunCreateUserName@@YAXABUStunAddress4@@PAUStunAtrString@@@Z ENDP ; stunCreateUserName
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?stunCreateSharedSecretResponse@@YAXABUStunMessage@@ABUStunAddress4@@AAU1@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
?stunCreateSharedSecretResponse@@YAXABUStunMessage@@ABUStunAddress4@@AAU1@@Z PROC ; stunCreateSharedSecretResponse, COMDAT
; _request$ = ecx
; _response$ = eax

; 976  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b d8		 mov	 ebx, eax

; 977  :    response.msgHdr.msgType = SharedSecretResponseMsg;

  00008	b8 02 01 00 00	 mov	 eax, 258		; 00000102H
  0000d	66 89 03	 mov	 WORD PTR [ebx], ax

; 978  :    response.msgHdr.id = request.msgHdr.id;

  00010	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00013	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  00016	a5		 movsd
  00017	a5		 movsd
  00018	a5		 movsd
  00019	a5		 movsd

; 979  : 	
; 980  :    response.hasUsername = true;
; 981  :    stunCreateUserName( source, &response.username);

  0001a	8d 73 3e	 lea	 esi, DWORD PTR [ebx+62]
  0001d	56		 push	 esi
  0001e	ff 75 08	 push	 DWORD PTR _source$[ebp]
  00021	c6 43 3d 01	 mov	 BYTE PTR [ebx+61], 1
  00025	e8 00 00 00 00	 call	 ?stunCreateUserName@@YAXABUStunAddress4@@PAUStunAtrString@@@Z ; stunCreateUserName

; 982  : 	
; 983  :    response.hasPassword = true;

  0002a	c6 83 40 01 00
	00 01		 mov	 BYTE PTR [ebx+320], 1

; 984  :    stunCreatePassword( response.username, &response.password);

  00031	81 c3 41 01 00
	00		 add	 ebx, 321		; 00000141H
  00037	53		 push	 ebx
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ?stunCreatePassword@@YAXABUStunAtrString@@PAU1@@Z ; stunCreatePassword
  0003e	83 c4 10	 add	 esp, 16			; 00000010H
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx

; 985  : }

  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?stunCreateSharedSecretResponse@@YAXABUStunMessage@@ABUStunAddress4@@AAU1@@Z ENDP ; stunCreateSharedSecretResponse
_TEXT	ENDS
PUBLIC	?stunGetUserNameAndPassword@@YAXABUStunAddress4@@PAUStunAtrString@@1@Z ; stunGetUserNameAndPassword
; Function compile flags: /Ogsp
;	COMDAT ?stunGetUserNameAndPassword@@YAXABUStunAddress4@@PAUStunAtrString@@1@Z
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_username$ = 12						; size = 4
_password$ = 16						; size = 4
?stunGetUserNameAndPassword@@YAXABUStunAddress4@@PAUStunAtrString@@1@Z PROC ; stunGetUserNameAndPassword, COMDAT

; 1757 : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1758 :    // !cj! This is totally bogus - need to make TLS connection to dest and get a
; 1759 :    // username and password to use 
; 1760 :    stunCreateUserName(dest, username);

  00003	ff 75 0c	 push	 DWORD PTR _username$[ebp]
  00006	ff 75 08	 push	 DWORD PTR _dest$[ebp]
  00009	e8 00 00 00 00	 call	 ?stunCreateUserName@@YAXABUStunAddress4@@PAUStunAtrString@@@Z ; stunCreateUserName

; 1761 :    stunCreatePassword(*username, password);

  0000e	ff 75 10	 push	 DWORD PTR _password$[ebp]
  00011	ff 75 0c	 push	 DWORD PTR _username$[ebp]
  00014	e8 00 00 00 00	 call	 ?stunCreatePassword@@YAXABUStunAtrString@@PAU1@@Z ; stunCreatePassword
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 1762 : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?stunGetUserNameAndPassword@@YAXABUStunAddress4@@PAUStunAtrString@@1@Z ENDP ; stunGetUserNameAndPassword
_TEXT	ENDS
PUBLIC	??1?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::~_Yarn<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??1?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT
; _this$ = ecx

; 3365 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3366 : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 07		 je	 SHORT $LN3@Yarn
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	59		 pop	 ecx
$LN3@Yarn:
  00010	83 26 00	 and	 DWORD PTR [esi], 0
  00013	5e		 pop	 esi

; 3367 : 		}

  00014	c3		 ret	 0
??1?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
_TEXT	ENDS
PUBLIC	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT
; _this$ = ecx

; 42   : 		{	// set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		ios_base::clear((iostate)(_Mystrbuf == 0
; 44   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00003	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00007	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  0000a	75 03		 jne	 SHORT $LN4@clear@2
  0000c	83 c8 04	 or	 eax, 4
$LN4@clear@2:
  0000f	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 45   : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
_TEXT	ENDS
PUBLIC	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputc, COMDAT
; _this$ = ecx

; 193  : 		{	// put a character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 194  : 		return (0 < _Pnavail()
; 195  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 196  : 			: overflow(_Traits::to_int_type(_Ch)));

  00003	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00006	83 38 00	 cmp	 DWORD PTR [eax], 0
  00009	74 07		 je	 SHORT $LN7@sputc
  0000b	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	eb 02		 jmp	 SHORT $LN8@sputc
$LN7@sputc:
  00012	33 c0		 xor	 eax, eax
$LN8@sputc:
  00014	85 c0		 test	 eax, eax
  00016	7e 19		 jle	 SHORT $LN3@sputc
  00018	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0001b	ff 08		 dec	 DWORD PTR [eax]
  0001d	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00025	89 10		 mov	 DWORD PTR [eax], edx
  00027	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  0002a	88 01		 mov	 BYTE PTR [ecx], al
  0002c	0f b6 c0	 movzx	 eax, al
  0002f	eb 0a		 jmp	 SHORT $LN4@sputc
$LN3@sputc:
  00031	0f b6 55 08	 movzx	 edx, BYTE PTR __Ch$[ebp]
  00035	8b 01		 mov	 eax, DWORD PTR [ecx]
  00037	52		 push	 edx
  00038	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN4@sputc:

; 197  : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputc
_TEXT	ENDS
PUBLIC	??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
PUBLIC	??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
EXTRN	??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@'
	DB	'std@@@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD FLAT:??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
	DD	FLAT:??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1083 : 		{	// construct from specified locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 1084 : 		_Init(_Lobj);

  00012	e8 00 00 00 00	 call	 __Getcvt
  00017	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0001a	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 1085 : 		}

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar@5
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar@5:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	_memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  : 		}

  00003	5d		 pop	 ebp

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 521  : 		{	// assign _Count * _Ch to [_First, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 522  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  00003	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00007	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 _memset
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH

; 523  : 		}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000b	88 01		 mov	 BYTE PTR [ecx], al

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ	; std::_Locinfo::_Getlconv
EXTRN	_localeconv:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
;	COMDAT ?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ
_TEXT	SEGMENT
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ PROC		; std::_Locinfo::_Getlconv, COMDAT
; _this$ = ecx

; 128  : 		return (localeconv());

  00000	e9 00 00 00 00	 jmp	 _localeconv
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ ENDP		; std::_Locinfo::_Getlconv
_TEXT	ENDS
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	?_Getfalse@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Getfalse
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Getfalse@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Getfalse@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Getfalse, COMDAT
; _this$ = ecx

; 166  : 		return ("false");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05LAPONLG@false?$AA@

; 167  : 		}

  00005	c3		 ret	 0
?_Getfalse@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Getfalse
_TEXT	ENDS
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	?_Gettrue@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Gettrue
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Gettrue@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Gettrue@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Gettrue, COMDAT
; _this$ = ecx

; 171  : 		return ("true");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04LOAJBDKD@true?$AA@

; 172  : 		}

  00005	c3		 ret	 0
?_Gettrue@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Gettrue
_TEXT	ENDS
PUBLIC	?precision@ios_base@std@@QBE_JXZ		; std::ios_base::precision
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
;	COMDAT ?precision@ios_base@std@@QBE_JXZ
_TEXT	SEGMENT
?precision@ios_base@std@@QBE_JXZ PROC			; std::ios_base::precision, COMDAT
; _this$ = ecx

; 428  : 		return (_Prec);

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]

; 429  : 		}

  00006	c3		 ret	 0
?precision@ios_base@std@@QBE_JXZ ENDP			; std::ios_base::precision
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1511 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1512 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2009 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2010 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2011 : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 2009 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2010 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2011 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1063 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00006	c3		 ret	 0
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar@6
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@6:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 1905 : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1906 : 		return (this->_Alval);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1907 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2003 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2004 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr@2
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2005 : 		}

  00008	c3		 ret	 0
$LN3@Myptr@2:

; 2003 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2004 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2005 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2020 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN4@Xran:
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 1
__Flags$ = 20						; size = 4
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt, COMDAT

; 1308 : 		{	// generate sprintf format for floating-point

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1309 : 		char *_Ptr = _Fmt;
; 1310 : 		*_Ptr++ = '%';

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Fmt$[ebp]
  00006	53		 push	 ebx

; 1311 : 
; 1312 : 		if (_Flags & ios_base::showpos)

  00007	8b 5d 14	 mov	 ebx, DWORD PTR __Flags$[ebp]
  0000a	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000d	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00010	f6 c3 20	 test	 bl, 32			; 00000020H
  00013	74 04		 je	 SHORT $LN3@Ffmt

; 1313 : 			*_Ptr++ = '+';

  00015	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00018	41		 inc	 ecx
$LN3@Ffmt:

; 1314 : 		if (_Flags & ios_base::showpoint)

  00019	f6 c3 10	 test	 bl, 16			; 00000010H
  0001c	74 04		 je	 SHORT $LN2@Ffmt

; 1315 : 			*_Ptr++ = '#';

  0001e	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  00021	41		 inc	 ecx
$LN2@Ffmt:

; 1316 : 		*_Ptr++ = '.';
; 1317 : 		*_Ptr++ = '*';	// for precision argument
; 1318 : 		if (_Spec != '\0')

  00022	8a 55 10	 mov	 dl, BYTE PTR __Spec$[ebp]
  00025	66 c7 01 2e 2a	 mov	 WORD PTR [ecx], 10798	; 00002a2eH
  0002a	83 c1 02	 add	 ecx, 2
  0002d	84 d2		 test	 dl, dl
  0002f	74 03		 je	 SHORT $LN1@Ffmt

; 1319 : 			*_Ptr++ = _Spec;	// 'L' qualifier for long double only

  00031	88 11		 mov	 BYTE PTR [ecx], dl
  00033	41		 inc	 ecx
$LN1@Ffmt:

; 1320 : 
; 1321 : 		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

  00034	ba 00 30 00 00	 mov	 edx, 12288		; 00003000H
  00039	23 da		 and	 ebx, edx

; 1322 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1323 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1324 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0003b	81 fb 00 20 00
	00		 cmp	 ebx, 8192		; 00002000H
  00041	75 04		 jne	 SHORT $LN8@Ffmt
  00043	b2 66		 mov	 dl, 102			; 00000066H
  00045	eb 15		 jmp	 SHORT $LN7@Ffmt
$LN8@Ffmt:
  00047	3b da		 cmp	 ebx, edx
  00049	75 04		 jne	 SHORT $LN6@Ffmt
  0004b	b2 61		 mov	 dl, 97			; 00000061H
  0004d	eb 0d		 jmp	 SHORT $LN7@Ffmt
$LN6@Ffmt:
  0004f	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00055	0f 95 c2	 setne	 dl
  00058	8d 54 12 65	 lea	 edx, DWORD PTR [edx+edx+101]
$LN7@Ffmt:
  0005c	88 11		 mov	 BYTE PTR [ecx], dl

; 1325 : 		*_Ptr = '\0';

  0005e	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00062	5b		 pop	 ebx

; 1326 : 		return (_Fmt);
; 1327 : 		}

  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
_TEXT	ENDS
PUBLIC	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
; Function compile flags: /Ogsp
;	COMDAT ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 4
__Flags$ = 20						; size = 4
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt, COMDAT

; 1451 : 		{	// generate sprintf format for integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1452 : 		char *_Ptr = _Fmt;
; 1453 : 		*_Ptr++ = '%';

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Fmt$[ebp]

; 1454 : 
; 1455 : 		if (_Flags & ios_base::showpos)

  00006	8b 55 14	 mov	 edx, DWORD PTR __Flags$[ebp]
  00009	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000c	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000f	f6 c2 20	 test	 dl, 32			; 00000020H
  00012	74 04		 je	 SHORT $LN4@Ifmt

; 1456 : 			*_Ptr++ = '+';

  00014	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00017	41		 inc	 ecx
$LN4@Ifmt:

; 1457 : 		if (_Flags & ios_base::showbase)

  00018	f6 c2 08	 test	 dl, 8
  0001b	74 04		 je	 SHORT $LN3@Ifmt

; 1458 : 			*_Ptr++ = '#';

  0001d	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  00020	41		 inc	 ecx
$LN3@Ifmt:

; 1459 : 		if (_Spec[0] != 'L')

  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	8b 7d 10	 mov	 edi, DWORD PTR __Spec$[ebp]
  00027	8a 1f		 mov	 bl, BYTE PTR [edi]
  00029	80 fb 4c	 cmp	 bl, 76			; 0000004cH
  0002c	74 05		 je	 SHORT $LN2@Ifmt

; 1460 : 			*_Ptr++ = _Spec[0];	// qualifier

  0002e	88 19		 mov	 BYTE PTR [ecx], bl
  00030	41		 inc	 ecx

; 1461 : 		else

  00031	eb 0c		 jmp	 SHORT $LN1@Ifmt
$LN2@Ifmt:

; 1462 : 
; 1463 : 			{	/* change L to I64 */
; 1464 : 			*_Ptr++ = 'I';

  00033	66 c7 01 49 36	 mov	 WORD PTR [ecx], 13897	; 00003649H

; 1465 : 			*_Ptr++ = '6';
; 1466 : 			*_Ptr++ = '4';

  00038	c6 41 02 34	 mov	 BYTE PTR [ecx+2], 52	; 00000034H
  0003c	83 c1 03	 add	 ecx, 3
$LN1@Ifmt:

; 1467 : 			}
; 1468 : 
; 1469 : 		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  0003f	8b f2		 mov	 esi, edx
  00041	81 e6 00 0e 00
	00		 and	 esi, 3584		; 00000e00H

; 1470 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1471 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1472 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  00047	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  0004d	75 04		 jne	 SHORT $LN9@Ifmt
  0004f	b2 6f		 mov	 dl, 111			; 0000006fH
  00051	eb 18		 jmp	 SHORT $LN8@Ifmt
$LN9@Ifmt:
  00053	81 fe 00 08 00
	00		 cmp	 esi, 2048		; 00000800H
  00059	74 05		 je	 SHORT $LN7@Ifmt
  0005b	8a 57 01	 mov	 dl, BYTE PTR [edi+1]
  0005e	eb 0b		 jmp	 SHORT $LN8@Ifmt
$LN7@Ifmt:
  00060	c0 e2 03	 shl	 dl, 3
  00063	f6 d2		 not	 dl
  00065	80 e2 20	 and	 dl, 32			; 00000020H
  00068	80 ca 58	 or	 dl, 88			; 00000058H
$LN8@Ifmt:
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	88 11		 mov	 BYTE PTR [ecx], dl

; 1473 : 		*_Ptr = '\0';

  0006f	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00073	5b		 pop	 ebx

; 1474 : 		return (_Fmt);
; 1475 : 		}

  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
_TEXT	ENDS
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1435 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 1436 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1437 : 
; 1438 : 		if (this->_Mysize <= _Off)
; 1439 : 
; 1440 : 			_DEBUG_ERROR("string subscript out of range");
; 1441 : 
; 1442 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1443 : 		_SCL_SECURE_VALIDATE_RANGE(_Off < this->_Mysize);
; 1444 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1445 : 
; 1446 : 		return (_Myptr()[_Off]);

  00005	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00009	72 02		 jb	 SHORT $LN5@operator@2
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@operator@2:
  0000d	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]

; 1447 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
; Function compile flags: /Ogsp
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 1910 : 		{	// assign _Count copies of _Ch beginning at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1911 : 		if (_Count == 1)

  00003	83 7d 0c 01	 cmp	 DWORD PTR __Count$[ebp], 1
  00007	75 13		 jne	 SHORT $LN2@Chassign

; 1912 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

  00009	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  0000d	72 02		 jb	 SHORT $LN7@Chassign
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN7@Chassign:
  00011	8a 45 10	 mov	 al, BYTE PTR __Ch$[ebp]
  00014	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00017	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 1913 : 		else

  0001a	eb 1c		 jmp	 SHORT $LN15@Chassign
$LN2@Chassign:

; 1914 : 			_Traits::assign(_Myptr() + _Off, _Count, _Ch);

  0001c	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00020	72 02		 jb	 SHORT $LN13@Chassign
  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN13@Chassign:
  00024	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00028	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0002b	03 4d 08	 add	 ecx, DWORD PTR __Off$[ebp]
  0002e	50		 push	 eax
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _memset
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@Chassign:

; 1915 : 		}

  00038	5d		 pop	 ebp
  00039	c2 0c 00	 ret	 12			; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1972 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1973 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)

  00003	83 7d 08 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00007	74 2c		 je	 SHORT $LN2@Inside
  00009	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0000c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0000f	72 04		 jb	 SHORT $LN8@Inside
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00015	8b c1		 mov	 eax, ecx
$LN9@Inside:
  00017	39 45 08	 cmp	 DWORD PTR __Ptr$[ebp], eax
  0001a	72 19		 jb	 SHORT $LN2@Inside
  0001c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0001f	72 04		 jb	 SHORT $LN12@Inside
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	eb 02		 jmp	 SHORT $LN13@Inside
$LN12@Inside:
  00025	8b c1		 mov	 eax, ecx
$LN13@Inside:
  00027	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0002a	03 c8		 add	 ecx, eax
  0002c	3b 4d 08	 cmp	 ecx, DWORD PTR __Ptr$[ebp]
  0002f	76 04		 jbe	 SHORT $LN2@Inside

; 1975 : 		else
; 1976 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	eb 02		 jmp	 SHORT $LN1@Inside
$LN2@Inside:

; 1974 : 			return (false);	// don't ask

  00035	32 c0		 xor	 al, al
$LN1@Inside:

; 1977 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2015 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*, COMDAT
; _this$ = ecx

; 631  : 		{	// pretend to get designated element

  00000	8b c1		 mov	 eax, ecx

; 632  : 		return (*this);
; 633  : 		}

  00002	c3		 ret	 0
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
_TEXT	ENDS
PUBLIC	??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++, COMDAT
; _this$ = ecx

; 636  : 		{	// pretend to preincrement

  00000	8b c1		 mov	 eax, ecx

; 637  : 		return (*this);
; 638  : 		}

  00002	c3		 ret	 0
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
_TEXT	ENDS
PUBLIC	?decimal_point@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::decimal_point
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?decimal_point@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?decimal_point@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::decimal_point, COMDAT
; _this$ = ecx

; 69   : 		return (do_decimal_point());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 04	 jmp	 DWORD PTR [eax+4]
?decimal_point@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::decimal_point
_TEXT	ENDS
PUBLIC	?thousands_sep@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::thousands_sep
; Function compile flags: /Ogsp
;	COMDAT ?thousands_sep@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?thousands_sep@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::thousands_sep, COMDAT
; _this$ = ecx

; 74   : 		return (do_thousands_sep());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 08	 jmp	 DWORD PTR [eax+8]
?thousands_sep@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::thousands_sep
_TEXT	ENDS
PUBLIC	?_Tidy@?$numpunct@D@std@@AAEXXZ			; std::numpunct<char>::_Tidy
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$numpunct@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$numpunct@D@std@@AAEXXZ PROC			; std::numpunct<char>::_Tidy, COMDAT
; _this$ = ecx

; 189  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 190  : 		_DELETE_CRT_VEC((void *)_Grouping);

  00003	ff 76 08	 push	 DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 191  : 		_DELETE_CRT_VEC((void *)_Falsename);

  0000b	ff 76 10	 push	 DWORD PTR [esi+16]
  0000e	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 192  : 		_DELETE_CRT_VEC((void *)_Truename);

  00013	ff 76 14	 push	 DWORD PTR [esi+20]
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001e	5e		 pop	 esi

; 193  : 		}

  0001f	c3		 ret	 0
?_Tidy@?$numpunct@D@std@@AAEXXZ ENDP			; std::numpunct<char>::_Tidy
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 220  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z	; std::_Maklocchr<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z PROC		; std::_Maklocchr<char>, COMDAT

; 625  : 	{	// convert char to _Elem using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 626  : 	return ((_Elem)(unsigned char)_Byte);

  00003	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]

; 627  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z ENDP		; std::_Maklocchr<char>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T93534 = -12						; size = 12
$T93538 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;

  00003	33 c0		 xor	 eax, eax
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 32   : 
; 33   : 	if (_Count <= 0)

  00008	39 45 08	 cmp	 DWORD PTR __Count$[ebp], eax

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000b	76 38		 jbe	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000d	83 7d 08 ff	 cmp	 DWORD PTR __Count$[ebp], -1
  00011	77 0d		 ja	 SHORT $LN1@Allocate
  00013	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00016	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001b	59		 pop	 ecx
  0001c	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0001e	75 25		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00020	83 65 08 00	 and	 DWORD PTR $T93538[ebp], 0
  00024	8d 45 08	 lea	 eax, DWORD PTR $T93538[ebp]
  00027	50		 push	 eax
  00028	8d 4d f4	 lea	 ecx, DWORD PTR $T93534[ebp]
  0002b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00030	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00035	8d 45 f4	 lea	 eax, DWORD PTR $T93534[ebp]
  00038	50		 push	 eax
  00039	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T93534[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00040	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00045	c9		 leave
  00046	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator==<char,char>
; Function compile flags: /Ogsp
;	COMDAT ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator==<char,char>, COMDAT

; 263  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 264  : 	}

  00002	c3		 ret	 0
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator==<char,char>
_TEXT	ENDS
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 658  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 659  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00008	57		 push	 edi
  00009	e8 00 00 00 00	 call	 _strlen
  0000e	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 660  : 	_Elem *_Ptrdest = _NEW_CRT _Elem[_Count];

  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00017	59		 pop	 ecx
  00018	59		 pop	 ecx

; 661  : 
; 662  :  #pragma warning(push)
; 663  :  #pragma warning(disable: 6011)	/* quiet prefast noise */
; 664  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00019	85 f6		 test	 esi, esi
  0001b	74 0d		 je	 SHORT $LN1@Maklocstr
  0001d	8b c8		 mov	 ecx, eax
  0001f	2b cf		 sub	 ecx, edi
$LL3@Maklocstr:

; 665  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  00021	8a 17		 mov	 dl, BYTE PTR [edi]
  00023	88 14 39	 mov	 BYTE PTR [ecx+edi], dl
  00026	47		 inc	 edi
  00027	4e		 dec	 esi
  00028	75 f7		 jne	 SHORT $LL3@Maklocstr
$LN1@Maklocstr:
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi

; 666  :  #pragma warning(pop)
; 667  : 
; 668  : 	return (_Ptrdest);
; 669  : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1496 : 		return (_Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN5@c_str@3
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1497 : 		}

  00008	c3		 ret	 0

; 1496 : 		return (_Myptr());

$LN5@c_str@3:
  00009	8b c1		 mov	 eax, ecx

; 1497 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogsp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1952 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1953 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1954 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 1
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=, COMDAT
; _this$ = ecx

; 622  : 		{	// store element and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 623  : 		if (_Strbuf == 0
; 624  : 			|| traits_type::eq_int_type(_Traits::eof(),
; 625  : 				_Strbuf->sputc(_Right)))

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 0d		 je	 SHORT $LN1@operator@3
  0000d	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00010	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  00015	83 f8 ff	 cmp	 eax, -1
  00018	75 03		 jne	 SHORT $LN2@operator@3
$LN1@operator@3:

; 626  : 			_Failed = true;

  0001a	c6 06 01	 mov	 BYTE PTR [esi], 1
$LN2@operator@3:

; 627  : 		return (*this);

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 628  : 		}

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1108 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1109 : 		if (this->_Mysize < _Off)

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000d	3b c1		 cmp	 eax, ecx
  0000f	73 0a		 jae	 SHORT $LN3@erase

; 1110 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN28@erase:
$LN3@erase:

; 1111 : 		if (this->_Mysize - _Off < _Count)

  0001b	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0001e	2b c1		 sub	 eax, ecx
  00020	3b c3		 cmp	 eax, ebx
  00022	73 02		 jae	 SHORT $LN2@erase

; 1112 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00024	8b d8		 mov	 ebx, eax
$LN2@erase:

; 1113 : 		if (0 < _Count)

  00026	85 db		 test	 ebx, ebx
  00028	74 46		 je	 SHORT $LN25@erase

; 1114 : 			{	// move elements down
; 1115 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1116 : 				this->_Mysize - _Off - _Count);

  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	57		 push	 edi
  0002e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00031	72 04		 jb	 SHORT $LN11@erase
  00033	8b 3e		 mov	 edi, DWORD PTR [esi]
  00035	eb 02		 jmp	 SHORT $LN12@erase
$LN11@erase:
  00037	8b fe		 mov	 edi, esi
$LN12@erase:
  00039	83 fa 10	 cmp	 edx, 16			; 00000010H
  0003c	72 04		 jb	 SHORT $LN15@erase
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	eb 02		 jmp	 SHORT $LN16@erase
$LN15@erase:
  00042	8b d6		 mov	 edx, esi
$LN16@erase:
  00044	2b c3		 sub	 eax, ebx
  00046	03 f9		 add	 edi, ecx
  00048	50		 push	 eax
  00049	03 fb		 add	 edi, ebx
  0004b	03 d1		 add	 edx, ecx
  0004d	57		 push	 edi
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 _memmove

; 1117 : 			size_type _Newsize = this->_Mysize - _Count;

  00054	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	2b c3		 sub	 eax, ebx

; 1118 : 			_Eos(_Newsize);

  0005c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00060	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00063	5f		 pop	 edi
  00064	72 04		 jb	 SHORT $LN23@erase
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	eb 02		 jmp	 SHORT $LN24@erase
$LN23@erase:
  0006a	8b ce		 mov	 ecx, esi
$LN24@erase:
  0006c	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN25@erase:

; 1119 : 			}
; 1120 : 		return (*this);

  00070	8b c6		 mov	 eax, esi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx

; 1121 : 		}

  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1516 : 		size_type _Num = this->_Alval.max_size();
; 1517 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	6a fe		 push	 -2			; fffffffeH
  00002	58		 pop	 eax

; 1518 : 		}

  00003	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator!=<char,char>
; Function compile flags: /Ogsp
;	COMDAT ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT

; 271  : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 272  : 	}

  00002	c3		 ret	 0
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z	; std::numpunct<char>::_Init
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0
__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2
__ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
_TEXT	SEGMENT
$T93665 = -28						; size = 8
$T93664 = -28						; size = 8
$T93661 = -28						; size = 8
_this$ = -24						; size = 4
tv79 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Lobj$ = 8						; size = 4
__Isdef$ = 12						; size = 1
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z PROC	; std::numpunct<char>::_Init, COMDAT
; _this$ = ecx

; 133  : 		{	// initialize from _Lobj

  00000	6a 10		 push	 16			; 00000010H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 134  : 		const lconv *_Ptr = _Lobj._Getlconv();

  00011	e8 00 00 00 00	 call	 _localeconv

; 135  : 
; 136  : 		_Grouping = 0;

  00016	33 db		 xor	 ebx, ebx
  00018	8b f8		 mov	 edi, eax
  0001a	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 137  : 		_Falsename = 0;

  0001d	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 138  : 		_Truename = 0;

  00020	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 139  : 
; 140  : 		_TRY_BEGIN

  00023	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 141  : 		_Grouping = _MAKLOCSTR(char, _Isdef ? "" : _Ptr->grouping,

  00026	38 5d 0c	 cmp	 BYTE PTR __Isdef$[ebp], bl
  00029	74 09		 je	 SHORT $LN5@Init
  0002b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
  00032	eb 06		 jmp	 SHORT $LN6@Init
$LN5@Init:
  00034	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00037	89 45 ec	 mov	 DWORD PTR tv79[ebp], eax
$LN6@Init:
  0003a	e8 00 00 00 00	 call	 __Getcvt
  0003f	8d 45 e4	 lea	 eax, DWORD PTR $T93661[ebp]
  00042	50		 push	 eax
  00043	53		 push	 ebx
  00044	ff 75 ec	 push	 DWORD PTR tv79[ebp]
  00047	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 142  : 			_Lobj._Getcvt());
; 143  : 		_Falsename = _MAKLOCSTR(_Elem, _Lobj._Getfalse(), _Lobj._Getcvt());

  00052	e8 00 00 00 00	 call	 __Getcvt
  00057	8d 45 e4	 lea	 eax, DWORD PTR $T93664[ebp]
  0005a	50		 push	 eax
  0005b	53		 push	 ebx
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_05LAPONLG@false?$AA@
  00061	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 144  : 		_Truename = _MAKLOCSTR(_Elem, _Lobj._Gettrue(), _Lobj._Getcvt());

  0006c	e8 00 00 00 00	 call	 __Getcvt
  00071	8d 45 e4	 lea	 eax, DWORD PTR $T93665[ebp]
  00074	50		 push	 eax
  00075	53		 push	 ebx
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_04LOAJBDKD@true?$AA@
  0007b	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH
  00083	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 148  : 		_CATCH_END
; 149  : 
; 150  : 		_Dp = _MAKLOCCHR(_Elem, _Ptr->decimal_point[0], _Lobj._Getcvt());

  00086	e8 00 00 00 00	 call	 __Getcvt
  0008b	8b 07		 mov	 eax, DWORD PTR [edi]
  0008d	8a 00		 mov	 al, BYTE PTR [eax]
  0008f	88 46 0c	 mov	 BYTE PTR [esi+12], al

; 151  : 		_Kseparator =
; 152  : 			_MAKLOCCHR(_Elem, _Ptr->thousands_sep[0], _Lobj._Getcvt());

  00092	e8 00 00 00 00	 call	 __Getcvt
  00097	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0009a	8a 00		 mov	 al, BYTE PTR [eax]
  0009c	88 46 0d	 mov	 BYTE PTR [esi+13], al

; 153  : 
; 154  : 		if (_Isdef)

  0009f	38 5d 0c	 cmp	 BYTE PTR __Isdef$[ebp], bl
  000a2	74 12		 je	 SHORT $LN1@Init

; 155  : 			{	// apply defaults for required facets
; 156  : //			_Grouping = _MAKLOCSTR(char, "", _Lobj._Getcvt());
; 157  : 			_Dp = _MAKLOCCHR(_Elem, '.', _Lobj._Getcvt());

  000a4	e8 00 00 00 00	 call	 __Getcvt
  000a9	c6 46 0c 2e	 mov	 BYTE PTR [esi+12], 46	; 0000002eH

; 158  : 			_Kseparator = _MAKLOCCHR(_Elem, ',', _Lobj._Getcvt());

  000ad	e8 00 00 00 00	 call	 __Getcvt
  000b2	c6 46 0d 2c	 mov	 BYTE PTR [esi+13], 44	; 0000002cH
$LN1@Init:

; 159  : 			}
; 160  : 		}

  000b6	e8 00 00 00 00	 call	 __EH_epilog3
  000bb	c2 08 00	 ret	 8
__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0:

; 145  : 		_CATCH_ALL
; 146  : 		_Tidy();

  000be	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AAEXXZ ; std::numpunct<char>::_Tidy

; 147  : 		_RERAISE;

  000c6	33 db		 xor	 ebx, ebx
  000c8	53		 push	 ebx
  000c9	53		 push	 ebx
  000ca	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN42@Init:
$LN41@Init:
  000cf	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ENDP	; std::numpunct<char>::_Init
PUBLIC	__TI2?AVruntime_error@std@@
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@	; `string'
PUBLIC	??0_Locinfo@std@@QAE@PBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	__CTA2?AVruntime_error@std@@
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	__EH_prolog3:PROC
;	COMDAT __CTA2?AVruntime_error@std@@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\stdexcept
xdata$x	SEGMENT
__CTA2?AVruntime_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT
__TI2?AVruntime_error@std@@ DD 00H
	DD	FLAT:??1runtime_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??0_Locinfo@std@@QAE@PBD@Z
_TEXT	SEGMENT
$T93750 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T93776 = 8						; size = 4
__Pch$ = 8						; size = 4
??0_Locinfo@std@@QAE@PBD@Z PROC				; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 76   :         {	// construct from NTBS

  00000	6a 10		 push	 16			; 00000010H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	33 db		 xor	 ebx, ebx
  00013	53		 push	 ebx
  00014	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00019	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0001c	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001f	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  00022	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  00025	88 5e 10	 mov	 BYTE PTR [esi+16], bl
  00028	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0002b	88 5e 18	 mov	 BYTE PTR [esi+24], bl
  0002e	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
  00031	88 5e 20	 mov	 BYTE PTR [esi+32], bl
  00034	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 77   :         if (_Pch == 0)

  00038	39 5d 08	 cmp	 DWORD PTR __Pch$[ebp], ebx
  0003b	75 28		 jne	 SHORT $LN1@Locinfo

; 78   :             _THROW_NCEE(runtime_error, "bad locale name");

  0003d	8d 45 08	 lea	 eax, DWORD PTR $T93776[ebp]
  00040	50		 push	 eax
  00041	8d 4d e4	 lea	 ecx, DWORD PTR $T93750[ebp]
  00044	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T93776[ebp], OFFSET ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
  0004b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00050	68 00 00 00 00	 push	 OFFSET __TI2?AVruntime_error@std@@
  00055	8d 45 e4	 lea	 eax, DWORD PTR $T93750[ebp]
  00058	50		 push	 eax
  00059	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T93750[ebp], OFFSET ??_7runtime_error@std@@6B@
  00060	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN22@Locinfo:
$LN1@Locinfo:

; 79   :         _Locinfo_ctor(this, _Pch);

  00065	ff 75 08	 push	 DWORD PTR __Pch$[ebp]
  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor
  0006e	59		 pop	 ecx
  0006f	59		 pop	 ecx

; 80   :         }

  00070	8b c6		 mov	 eax, esi
  00072	e8 00 00 00 00	 call	 __EH_epilog3
  00077	c2 04 00	 ret	 4
$LN21@Locinfo:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__ehhandler$??0_Locinfo@std@@QAE@PBD@Z:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003b	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@PBD@Z ENDP				; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1_Locinfo@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1_Locinfo@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 93   :         {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1_Locinfo@std@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 94   :         _Locinfo_dtor(this);

  00011	56		 push	 esi
  00012	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00019	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 95   :         }

  0001e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00021	59		 pop	 ecx
  00022	85 c0		 test	 eax, eax
  00024	74 07		 je	 SHORT $LN10@Locinfo@2
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _free
  0002c	59		 pop	 ecx
$LN10@Locinfo@2:
  0002d	83 66 1c 00	 and	 DWORD PTR [esi+28], 0
  00031	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00034	85 c0		 test	 eax, eax
  00036	74 07		 je	 SHORT $LN15@Locinfo@2
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _free
  0003e	59		 pop	 ecx
$LN15@Locinfo@2:
  0003f	83 66 14 00	 and	 DWORD PTR [esi+20], 0
  00043	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00046	85 c0		 test	 eax, eax
  00048	74 07		 je	 SHORT $LN20@Locinfo@2
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _free
  00050	59		 pop	 ecx
$LN20@Locinfo@2:
  00051	83 66 0c 00	 and	 DWORD PTR [esi+12], 0
  00055	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00058	85 c0		 test	 eax, eax
  0005a	74 07		 je	 SHORT $LN25@Locinfo@2
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 _free
  00062	59		 pop	 ecx
$LN25@Locinfo@2:
  00063	83 66 04 00	 and	 DWORD PTR [esi+4], 0
  00067	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0006b	8b ce		 mov	 ecx, esi
  0006d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00072	e8 00 00 00 00	 call	 __EH_epilog3
  00077	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003b	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 54   : 		{	// merge _State into state, possible reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 		if (_State != goodbit)

  00003	83 7d 08 00	 cmp	 DWORD PTR __State$[ebp], 0
  00007	74 18		 je	 SHORT $LN6@setstate

; 56   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00009	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000c	0b 45 08	 or	 eax, DWORD PTR __State$[ebp]
  0000f	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00013	75 03		 jne	 SHORT $LN8@setstate
  00015	83 c8 04	 or	 eax, 4
$LN8@setstate:
  00018	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN6@setstate:

; 57   : 		}

  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1987 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1988 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 20		 je	 SHORT $LN9@Tidy@2

; 1989 : 			;
; 1990 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1a		 jb	 SHORT $LN9@Tidy@2

; 1991 : 			{	// copy any leftovers to small buffer and deallocate
; 1992 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1993 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy@2

; 1994 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy@2:

; 1995 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	59		 pop	 ecx
  0002f	5b		 pop	 ebx
$LN9@Tidy@2:

; 1996 : 			}
; 1997 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1998 : 		_Eos(_Newsize);

  00030	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00033	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 1999 : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put, COMDAT

; 1533 : 		{	// put [_Ptr, _Ptr + _Count) to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1534 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00003	83 7d 1c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00007	76 1b		 jbe	 SHORT $LN1@Put
  00009	56		 push	 esi
  0000a	8b 75 18	 mov	 esi, DWORD PTR __Ptr$[ebp]
$LL3@Put:

; 1535 : 			*_Dest = *_Ptr;

  0000d	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00010	50		 push	 eax
  00011	8d 4d 10	 lea	 ecx, DWORD PTR __Dest$[ebp]
  00014	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
  00019	ff 4d 1c	 dec	 DWORD PTR __Count$[ebp]
  0001c	46		 inc	 esi
  0001d	83 7d 1c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00021	77 ea		 ja	 SHORT $LL3@Put
  00023	5e		 pop	 esi
$LN1@Put:

; 1536 : 		return (_Dest);

  00024	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00027	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	89 08		 mov	 DWORD PTR [eax], ecx
  0002c	8b 4d 14	 mov	 ecx, DWORD PTR __Dest$[ebp+4]
  0002f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1537 : 		}

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
_TEXT	ENDS
PUBLIC	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
; Function compile flags: /Ogsp
;	COMDAT ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ch$ = 24						; size = 1
__Count$ = 28						; size = 4
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep, COMDAT

; 1568 : 		{	// put _Count * _Ch to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1569 : 		for (; 0 < _Count; --_Count, ++_Dest)

  00003	83 7d 1c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00007	76 10		 jbe	 SHORT $LN1@Rep
$LL6@Rep:

; 1570 : 			*_Dest = _Ch;

  00009	ff 75 18	 push	 DWORD PTR __Ch$[ebp]
  0000c	8d 4d 10	 lea	 ecx, DWORD PTR __Dest$[ebp]
  0000f	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
  00014	ff 4d 1c	 dec	 DWORD PTR __Count$[ebp]
  00017	75 f0		 jne	 SHORT $LL6@Rep
$LN1@Rep:

; 1571 : 		return (_Dest);

  00019	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0001c	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	89 08		 mov	 DWORD PTR [eax], ecx
  00021	8b 4d 14	 mov	 ecx, DWORD PTR __Dest$[ebp+4]
  00024	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1572 : 		}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
_TEXT	ENDS
PUBLIC	?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
; Function compile flags: /Ogsp
;	COMDAT ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc, COMDAT

; 1541 : 		{	// put char sequence [_Ptr, _Ptr + _Count) to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1542 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00003	83 7d 1c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00007	76 1b		 jbe	 SHORT $LN1@Putc
  00009	56		 push	 esi
  0000a	8b 75 18	 mov	 esi, DWORD PTR __Ptr$[ebp]
$LL3@Putc:

; 1543 : 			*_Dest = _MAKLOCCHR(_Elem, *_Ptr, _Cvt);

  0000d	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00010	50		 push	 eax
  00011	8d 4d 10	 lea	 ecx, DWORD PTR __Dest$[ebp]
  00014	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
  00019	ff 4d 1c	 dec	 DWORD PTR __Count$[ebp]
  0001c	46		 inc	 esi
  0001d	83 7d 1c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00021	77 ea		 ja	 SHORT $LL3@Putc
  00023	5e		 pop	 esi
$LN1@Putc:

; 1544 : 		return (_Dest);

  00024	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00027	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	89 08		 mov	 DWORD PTR [eax], ecx
  0002c	8b 4d 14	 mov	 ecx, DWORD PTR __Dest$[ebp+4]
  0002f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1545 : 		}

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
_TEXT	ENDS
PUBLIC	?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
EXTRN	_memchr:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z
_TEXT	SEGMENT
$T93925 = -16						; size = 8
$T93943 = -8						; size = 8
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
__Kseparator$ = 32					; size = 1
?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped, COMDAT

; 1549 : 		{	// put char sequence [_Ptr, _Ptr + _Count) to _Dest with commas

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b 5d 1c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 18	 mov	 edi, DWORD PTR __Ptr$[ebp]
$LL5@Putgrouped:

; 1551 : 			{	// put field with thousands separators for NULs
; 1552 : 			const char *_Pend =
; 1553 : 				(const char *)_CSTD memchr(_Ptr, '\0', _Count);

  0000f	53		 push	 ebx
  00010	6a 00		 push	 0
  00012	57		 push	 edi
  00013	e8 00 00 00 00	 call	 _memchr
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1554 : 			size_t _Groupsize = _Pend != 0 ? _Pend - _Ptr : _Count;

  0001b	85 c0		 test	 eax, eax
  0001d	74 06		 je	 SHORT $LN8@Putgrouped
  0001f	2b c7		 sub	 eax, edi
  00021	8b f0		 mov	 esi, eax
  00023	eb 02		 jmp	 SHORT $LN9@Putgrouped
$LN8@Putgrouped:
  00025	8b f3		 mov	 esi, ebx
$LN9@Putgrouped:

; 1555 : 
; 1556 : 			_Dest = _Putc(_Dest, _Ptr, _Groupsize);

  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  0002c	8d 45 f0	 lea	 eax, DWORD PTR $T93925[ebp]
  0002f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00032	50		 push	 eax
  00033	ff 75 08	 push	 DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 1557 : 			_Ptr += _Groupsize, _Count -= _Groupsize;

  00046	03 fe		 add	 edi, esi
  00048	2b de		 sub	 ebx, esi
  0004a	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx

; 1558 : 			if (_Count == 0)

  0004d	74 2c		 je	 SHORT $LN22@Putgrouped

; 1559 : 				break;
; 1560 : 			if (_Kseparator != (_Elem)0)

  0004f	80 7d 20 00	 cmp	 BYTE PTR __Kseparator$[ebp], 0
  00053	74 22		 je	 SHORT $LN4@Putgrouped

; 1561 : 				_Dest = _Rep(_Dest, _Kseparator, 1);

  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005a	ff 75 20	 push	 DWORD PTR __Kseparator$[ebp]
  0005d	89 4d f8	 mov	 DWORD PTR $T93943[ebp], ecx
  00060	8d 4d f8	 lea	 ecx, DWORD PTR $T93943[ebp]
  00063	89 45 fc	 mov	 DWORD PTR $T93943[ebp+4], eax
  00066	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
  0006b	8b 45 f8	 mov	 eax, DWORD PTR $T93943[ebp]
  0006e	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00071	8b 45 fc	 mov	 eax, DWORD PTR $T93943[ebp+4]
  00074	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
$LN4@Putgrouped:

; 1550 : 		for (; ; ++_Ptr, --_Count)

  00077	47		 inc	 edi
  00078	4b		 dec	 ebx
  00079	eb 94		 jmp	 SHORT $LL5@Putgrouped
$LN22@Putgrouped:

; 1562 : 			}
; 1563 : 		return (_Dest);

  0007b	8b 10		 mov	 edx, DWORD PTR [eax]
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00080	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00088	89 11		 mov	 DWORD PTR [ecx], edx
  0008a	8b c1		 mov	 eax, ecx
  0008c	5b		 pop	 ebx

; 1564 : 		}

  0008d	c9		 leave
  0008e	c3		 ret	 0
?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
tv296 = -20						; size = 4
__Newres$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1918 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 1919 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00014	83 cf 0f	 or	 edi, 15			; 0000000fH

; 1920 : 		if (max_size() < _Newres)

  00017	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0001a	76 05		 jbe	 SHORT $LN9@Copy

; 1921 : 			_Newres = _Newsize;	// undo roundup if too big

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0001f	eb 27		 jmp	 SHORT $LN5@Copy
$LN9@Copy:

; 1922 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00021	33 d2		 xor	 edx, edx
  00023	6a 03		 push	 3
  00025	8b c7		 mov	 eax, edi
  00027	5b		 pop	 ebx
  00028	f7 f3		 div	 ebx
  0002a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002d	89 4d ec	 mov	 DWORD PTR tv296[ebp], ecx
  00030	d1 6d ec	 shr	 DWORD PTR tv296[ebp], 1
  00033	8b 55 ec	 mov	 edx, DWORD PTR tv296[ebp]
  00036	3b d0		 cmp	 edx, eax
  00038	76 0e		 jbe	 SHORT $LN5@Copy

; 1923 : 			;
; 1924 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  0003a	6a fe		 push	 -2			; fffffffeH
  0003c	5f		 pop	 edi
  0003d	8b c7		 mov	 eax, edi
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	77 03		 ja	 SHORT $LN5@Copy

; 1925 : 			_Newres = this->_Myres
; 1926 : 				+ this->_Myres / 2;	// grow exponentially if possible

  00045	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]
$LN5@Copy:

; 1927 : 		else
; 1928 : 			_Newres = max_size();	// settle for max_size()
; 1929 : 
; 1930 : 		_Elem *_Ptr;
; 1931 : 		_TRY_BEGIN

  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1932 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  0004c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0004f	6a 00		 push	 0
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00057	59		 pop	 ecx
  00058	59		 pop	 ecx
  00059	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0005c	eb 27		 jmp	 SHORT $LN19@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1933 : 		_CATCH_ALL
; 1934 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0005e	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00061	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00064	89 45 ec	 mov	 DWORD PTR __Newres$[ebp], eax

; 1935 : 			_TRY_BEGIN
; 1936 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  00067	40		 inc	 eax
  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00074	59		 pop	 ecx
  00075	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00078	59		 pop	 ecx

; 1940 : 			_CATCH_END
; 1941 : 		_CATCH_END

  00079	b8 00 00 00 00	 mov	 eax, $LN63@Copy
  0007e	c3		 ret	 0
$LN63@Copy:
  0007f	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00082	8b 7d ec	 mov	 edi, DWORD PTR __Newres$[ebp]
$LN19@Copy:

; 1942 : 
; 1943 : 		if (0 < _Oldlen)

  00085	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  00088	85 db		 test	 ebx, ebx
  0008a	74 19		 je	 SHORT $LN52@Copy

; 1944 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  0008c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00090	72 04		 jb	 SHORT $LN50@Copy
  00092	8b 06		 mov	 eax, DWORD PTR [esi]
  00094	eb 02		 jmp	 SHORT $LN51@Copy
$LN50@Copy:
  00096	8b c6		 mov	 eax, esi
$LN51@Copy:
  00098	53		 push	 ebx
  00099	50		 push	 eax
  0009a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0009d	e8 00 00 00 00	 call	 _memcpy
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@Copy:

; 1945 : 		_Tidy(true);

  000a5	6a 00		 push	 0
  000a7	6a 01		 push	 1
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1946 : 		this->_Bx._Ptr = _Ptr;

  000b0	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b3	89 06		 mov	 DWORD PTR [esi], eax

; 1947 : 		this->_Myres = _Newres;

  000b5	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 1948 : 		_Eos(_Oldlen);

  000b8	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000bb	83 ff 10	 cmp	 edi, 16			; 00000010H
  000be	73 02		 jae	 SHORT $LN59@Copy
  000c0	8b c6		 mov	 eax, esi
$LN59@Copy:
  000c2	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 1949 : 		}

  000c6	e8 00 00 00 00	 call	 __EH_epilog3
  000cb	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1937 : 			_CATCH_ALL
; 1938 : 			_Tidy(true);	// failed again, discard storage and reraise

  000ce	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	33 f6		 xor	 esi, esi
  000d3	56		 push	 esi
  000d4	6a 01		 push	 1
  000d6	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1939 : 			_RERAISE;

  000db	56		 push	 esi
  000dc	56		 push	 esi
  000dd	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN67@Copy:
$LN66@Copy:
  000e2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T94079 = -52						; size = 36
$T94083 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T94078 = 8						; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat, COMDAT

; 1051 : 		{	// return locale category mask and construct standard facet

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 1052 : 		if (_Ppf != 0 && *_Ppf == 0)

  0000c	8b 5d 08	 mov	 ebx, DWORD PTR __Ppf$[ebp]
  0000f	83 65 f0 00	 and	 DWORD PTR $T94083[ebp], 0
  00013	85 db		 test	 ebx, ebx
  00015	74 6a		 je	 SHORT $LN9@Getcat
  00017	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  0001a	75 65		 jne	 SHORT $LN9@Getcat

; 1053 : 			*_Ppf = _NEW_CRT num_put<_Elem, _OutIt>(
; 1054 : 				_Locinfo(_Ploc->c_str()));

  0001c	6a 10		 push	 16			; 00000010H
  0001e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00023	8b f0		 mov	 esi, eax
  00025	59		 pop	 ecx
  00026	89 75 08	 mov	 DWORD PTR $T94078[ebp], esi
  00029	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	85 f6		 test	 esi, esi
  0002f	74 3a		 je	 SHORT $LN4@Getcat
  00031	8b 45 0c	 mov	 eax, DWORD PTR __Ploc$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00039	85 c9		 test	 ecx, ecx
  0003b	74 04		 je	 SHORT $LN14@Getcat
  0003d	8b c1		 mov	 eax, ecx
  0003f	eb 03		 jmp	 SHORT $LN15@Getcat
$LN14@Getcat:
  00041	83 c0 1c	 add	 eax, 28			; 0000001cH
$LN15@Getcat:
  00044	50		 push	 eax
  00045	8d 4d cc	 lea	 ecx, DWORD PTR $T94079[ebp]
  00048	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  0004d	83 66 04 00	 and	 DWORD PTR [esi+4], 0
  00051	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T94083[ebp], 1
  00058	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
  0005e	e8 00 00 00 00	 call	 __Getcvt
  00063	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00066	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  00069	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  0006b	33 f6		 xor	 esi, esi
$LN5@Getcat:
  0006d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	f6 45 f0 01	 test	 BYTE PTR $T94083[ebp], 1
  00075	89 33		 mov	 DWORD PTR [ebx], esi
  00077	74 08		 je	 SHORT $LN9@Getcat
  00079	8d 4d cc	 lea	 ecx, DWORD PTR $T94079[ebp]
  0007c	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN9@Getcat:

; 1055 : 		return (_X_NUMERIC);

  00081	6a 04		 push	 4
  00083	58		 pop	 eax

; 1056 : 		}

  00084	e8 00 00 00 00	 call	 __EH_epilog3
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR $T94078[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
PUBLIC	??_7?$numpunct@D@std@@6B@			; std::numpunct<char>::`vftable'
PUBLIC	??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z	; std::numpunct<char>::numpunct<char>
PUBLIC	??_R4?$numpunct@D@std@@6B@			; std::numpunct<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$numpunct@D@std@@@8			; std::numpunct<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@D@std@@8		; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_decimal_point@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_grouping
PUBLIC	?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_falsename
PUBLIC	?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_truename
EXTRN	??_E?$numpunct@D@std@@MAEPAXI@Z:PROC		; std::numpunct<char>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$numpunct@D@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@D@std@@8 DD FLAT:??_R0?AV?$numpunct@D@std@@@8 ; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$numpunct@D@std@@8 ; std::numpunct<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@D@std@@8 DD 00H				; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT
??_R0?AV?$numpunct@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::numpunct<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$numpunct@D@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@D@std@@6B@ DD 00H			; std::numpunct<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$numpunct@D@std@@@8
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$numpunct@D@std@@6B@
CONST	SEGMENT
??_7?$numpunct@D@std@@6B@ DD FLAT:??_R4?$numpunct@D@std@@6B@ ; std::numpunct<char>::`vftable'
	DD	FLAT:??_E?$numpunct@D@std@@MAEPAXI@Z
	DD	FLAT:?do_decimal_point@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0
__ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
__Isdef$ = 16						; size = 1
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z PROC	; std::numpunct<char>::numpunct<char>, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from specified locale

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  00014	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 106  : 		_Init(_Lobj, _Isdef);

  00017	ff 75 10	 push	 DWORD PTR __Isdef$[ebp]
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	ff 75 08	 push	 DWORD PTR __Lobj$[ebp]
  00021	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  00027	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init

; 107  : 		}

  0002c	8b c6		 mov	 eax, esi
  0002e	e8 00 00 00 00	 call	 __EH_epilog3
  00033	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@UAE@XZ ; std::locale::facet::~facet
__ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ENDP	; std::numpunct<char>::numpunct<char>
; Function compile flags: /Ogsp
;	COMDAT ?do_decimal_point@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_decimal_point@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_decimal_point, COMDAT
; _this$ = ecx

; 164  : 		return (_Dp);

  00000	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]

; 165  : 		}

  00003	c3		 ret	 0
?do_decimal_point@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_decimal_point
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_thousands_sep, COMDAT
; _this$ = ecx

; 169  : 		return (_Kseparator);

  00000	8a 41 0d	 mov	 al, BYTE PTR [ecx+13]

; 170  : 		}

  00003	c3		 ret	 0
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_thousands_sep
_TEXT	ENDS
PUBLIC	??1?$numpunct@D@std@@MAE@XZ			; std::numpunct<char>::~numpunct<char>
; Function compile flags: /Ogsp
;	COMDAT ??1?$numpunct@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$numpunct@D@std@@MAE@XZ PROC			; std::numpunct<char>::~numpunct<char>, COMDAT
; _this$ = ecx

; 120  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@

; 121  : 		_Tidy();

  00009	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AAEXXZ ; std::numpunct<char>::_Tidy

; 122  : 		}

  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00014	5e		 pop	 esi
  00015	c3		 ret	 0
??1?$numpunct@D@std@@MAE@XZ ENDP			; std::numpunct<char>::~numpunct<char>
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$numpunct@D@std@@MAEPAXI@Z PROC			; std::numpunct<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  0000c	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AAEXXZ ; std::numpunct<char>::_Tidy
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0001b	74 07		 je	 SHORT $LN1@scalar@7
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00023	59		 pop	 ecx
$LN1@scalar@7:
  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_G?$numpunct@D@std@@MAEPAXI@Z ENDP			; std::numpunct<char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 550  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 551  : 		_Tidy();

  00002	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00006	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
  0000d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 552  : 		}

  00010	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 753  : 		_Tidy(true);

  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 754  : 		}

  00009	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = ecx

; 570  : 		{	// flush output stream

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 571  : 		ios_base::iostate _State = ios_base::goodbit;
; 572  : 		if (!ios_base::fail() && _Myios::rdbuf()->pubsync() == -1)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	f6 44 30 0c 06	 test	 BYTE PTR [eax+esi+12], 6
  00010	75 13		 jne	 SHORT $LN1@flush
  00012	8b 44 30 38	 mov	 eax, DWORD PTR [eax+esi+56]
  00016	8b 10		 mov	 edx, DWORD PTR [eax]
  00018	8b c8		 mov	 ecx, eax
  0001a	ff 52 34	 call	 DWORD PTR [edx+52]
  0001d	83 f8 ff	 cmp	 eax, -1
  00020	75 03		 jne	 SHORT $LN1@flush

; 573  : 			_State |= ios_base::badbit;	// sync failed

  00022	6a 04		 push	 4
  00024	5f		 pop	 edi
$LN1@flush:

; 574  : 		_Myios::setstate(_State);

  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002a	6a 00		 push	 0
  0002c	57		 push	 edi
  0002d	03 ce		 add	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00034	5f		 pop	 edi

; 575  : 		return (*this);

  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi

; 576  : 		}

  00038	c3		 ret	 0
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
_TEXT	ENDS
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 114  : 			{	// construct locking and testing stream

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base

; 115  : 			if (_Ostr.good() && _Ostr.tie() != 0)

  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00023	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  00028	75 0f		 jne	 SHORT $LN1@sentry
  0002a	8b 44 30 3c	 mov	 eax, DWORD PTR [eax+esi+60]
  0002e	85 c0		 test	 eax, eax
  00030	74 07		 je	 SHORT $LN1@sentry

; 116  : 				_Ostr.tie()->flush();

  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN1@sentry:

; 117  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00039	8b 06		 mov	 eax, DWORD PTR [esi]
  0003b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003e	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  00043	0f 94 c0	 sete	 al
  00046	88 47 04	 mov	 BYTE PTR [edi+4], al

; 118  : 			}

  00049	8b c7		 mov	 eax, edi
  0004b	e8 00 00 00 00	 call	 __EH_epilog3
  00050	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 156  : 		{	// perform any wrapup

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 157  : 		_TRY_BEGIN
; 158  : 		if (ios_base::flags() & ios_base::unitbuf)

  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00011	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00015	f6 44 08 14 02	 test	 BYTE PTR [eax+ecx+20], 2
  0001a	74 05		 je	 SHORT $LN8@Osfx

; 159  : 			flush();	// flush stream as needed

  0001c	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN8@Osfx:

; 162  : 		}

  00021	e8 00 00 00 00	 call	 __EH_epilog3
  00026	c3		 ret	 0
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:

; 160  : 		_CATCH_ALL
; 161  : 		_CATCH_END

  00027	b8 00 00 00 00	 mov	 eax, $LN8@Osfx
  0002c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T94318 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::falsename, COMDAT
; _this$ = ecx

; 83   : 		{	// return name for false

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 84   : 		return (do_falsename());

  00004	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	83 65 fc 00	 and	 DWORD PTR $T94318[ebp], 0
  0000d	ff 50 10	 call	 DWORD PTR [eax+16]
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 85   : 		}

  00013	c9		 leave
  00014	c2 04 00	 ret	 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::falsename
_TEXT	ENDS
PUBLIC	?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
; Function compile flags: /Ogsp
;	COMDAT ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T94323 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::truename, COMDAT
; _this$ = ecx

; 88   : 		{	// return name for true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 89   : 		return (do_truename());

  00004	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	83 65 fc 00	 and	 DWORD PTR $T94323[ebp], 0
  0000d	ff 50 14	 call	 DWORD PTR [eax+20]
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 90   : 		}

  00013	c9		 leave
  00014	c2 04 00	 ret	 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::truename
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1958 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1959 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0000a	76 0a		 jbe	 SHORT $LN6@Grow

; 1960 : 			_Xlen();	// result too long

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN31@Grow:
$LN6@Grow:

; 1961 : 		if (this->_Myres < _Newsize)

  00016	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00019	3b c6		 cmp	 eax, esi
  0001b	73 0b		 jae	 SHORT $LN5@Grow

; 1962 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0001d	ff 71 10	 push	 DWORD PTR [ecx+16]
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00026	eb 2f		 jmp	 SHORT $LN28@Grow
$LN5@Grow:

; 1963 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00028	33 d2		 xor	 edx, edx
  0002a	38 55 0c	 cmp	 BYTE PTR __Trim$[ebp], dl
  0002d	74 18		 je	 SHORT $LN3@Grow
  0002f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00032	73 13		 jae	 SHORT $LN3@Grow

; 1964 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1965 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00034	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00037	3b f0		 cmp	 esi, eax
  00039	73 02		 jae	 SHORT $LN9@Grow
  0003b	8b c6		 mov	 eax, esi
$LN9@Grow:
  0003d	50		 push	 eax
  0003e	6a 01		 push	 1
  00040	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00045	eb 10		 jmp	 SHORT $LN28@Grow
$LN3@Grow:

; 1966 : 		else if (_Newsize == 0)

  00047	3b f2		 cmp	 esi, edx
  00049	75 0c		 jne	 SHORT $LN28@Grow

; 1967 : 			_Eos(0);	// new size is zero, just null terminate

  0004b	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0004e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00051	72 02		 jb	 SHORT $LN26@Grow
  00053	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN26@Grow:
  00055	88 11		 mov	 BYTE PTR [ecx], dl
$LN28@Grow:

; 1968 : 		return (0 < _Newsize);	// return true only if more work to do

  00057	33 c0		 xor	 eax, eax
  00059	3b c6		 cmp	 eax, esi
  0005b	1b c0		 sbb	 eax, eax
  0005d	f7 d8		 neg	 eax
  0005f	5e		 pop	 esi

; 1969 : 		}

  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN30@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
;	COMDAT ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T94380 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::grouping, COMDAT
; _this$ = ecx

; 78   : 		{	// return grouping string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 79   : 		return (do_grouping());

  00004	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	83 65 fc 00	 and	 DWORD PTR $T94380[ebp], 0
  0000d	ff 50 0c	 call	 DWORD PTR [eax+12]
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 80   : 		}

  00013	c9		 leave
  00014	c2 04 00	 ret	 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::grouping
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 798  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 799  : 		if (_Right.size() < _Roff)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	3b 45 0c	 cmp	 eax, DWORD PTR __Roff$[ebp]
  00010	73 0a		 jae	 SHORT $LN4@append

; 800  : 			_Xran();	// _Roff off end

  00012	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00017	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN36@append:
$LN4@append:

; 801  : 		size_type _Num = _Right.size() - _Roff;

  0001c	2b 45 0c	 sub	 eax, DWORD PTR __Roff$[ebp]

; 802  : 		if (_Num < _Count)

  0001f	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp]
  00022	3b c3		 cmp	 eax, ebx
  00024	73 02		 jae	 SHORT $LN3@append

; 803  : 			_Count = _Num;	// trim _Count to size

  00026	8b d8		 mov	 ebx, eax
$LN3@append:

; 804  : 		if (npos - this->_Mysize <= _Count)

  00028	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002b	83 c9 ff	 or	 ecx, -1
  0002e	2b c8		 sub	 ecx, eax
  00030	3b cb		 cmp	 ecx, ebx
  00032	77 0a		 ja	 SHORT $LN2@append

; 805  : 			_Xlen();	// result too long

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00039	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN37@append:
$LN2@append:

; 806  : 
; 807  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  0003e	85 db		 test	 ebx, ebx
  00040	74 50		 je	 SHORT $LN32@append
  00042	57		 push	 edi
  00043	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  00046	6a 00		 push	 0
  00048	57		 push	 edi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00050	84 c0		 test	 al, al
  00052	74 3d		 je	 SHORT $LN34@append

; 808  : 			{	// make room and append new stuff
; 809  : 			_Traits::copy(_Myptr() + this->_Mysize,
; 810  : 				_Right._Myptr() + _Roff, _Count);

  00054	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00057	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0005b	72 02		 jb	 SHORT $LN18@append
  0005d	8b 00		 mov	 eax, DWORD PTR [eax]
$LN18@append:
  0005f	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00063	72 04		 jb	 SHORT $LN22@append
  00065	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00067	eb 02		 jmp	 SHORT $LN23@append
$LN22@append:
  00069	8b ce		 mov	 ecx, esi
$LN23@append:
  0006b	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  0006e	53		 push	 ebx
  0006f	50		 push	 eax
  00070	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00073	03 c1		 add	 eax, ecx
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _memcpy
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 811  : 			_Eos(_Num);

  0007e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00082	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00085	72 04		 jb	 SHORT $LN30@append
  00087	8b 06		 mov	 eax, DWORD PTR [esi]
  00089	eb 02		 jmp	 SHORT $LN31@append
$LN30@append:
  0008b	8b c6		 mov	 eax, esi
$LN31@append:
  0008d	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN34@append:
  00091	5f		 pop	 edi
$LN32@append:

; 812  : 			}
; 813  : 		return (*this);

  00092	8b c6		 mov	 eax, esi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx

; 814  : 		}

  00096	5d		 pop	 ebp
  00097	c2 0c 00	 ret	 12			; 0000000cH
$LN35@append:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
PUBLIC	??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
EXTRN	??0bad_cast@std@@QAE@PBD@Z:PROC			; std::bad_cast::bad_cast
EXTRN	??1bad_cast@std@@UAE@XZ:PROC			; std::bad_cast::~bad_cast
EXTRN	??0bad_cast@std@@QAE@ABV01@@Z:PROC		; std::bad_cast::bad_cast
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
_BSS	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T94444 = -32						; size = 12
__Lock$90940 = -20					; size = 4
__Psave$90941 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >, COMDAT

; 504  : 	{	// get facet reference from locale

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 505  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  0000c	6a 00		 push	 0
  0000e	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$90940[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 506  : 		const locale::facet *_Psave =
; 507  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00016	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 508  : 
; 509  : 		size_t _Id = _Facet::id;

  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00025	89 75 f0	 mov	 DWORD PTR __Psave$90941[ebp], esi
  00028	e8 00 00 00 00	 call	 ??Bid@locale@std@@QAEIXZ ; std::locale::id::operator unsigned int

; 510  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  00036	8b f8		 mov	 edi, eax

; 511  : 
; 512  : 		if (_Pf != 0)

  00038	85 ff		 test	 edi, edi
  0003a	75 4d		 jne	 SHORT $LN10@use_facet

; 513  : 			;	// got facet from locale
; 514  : 		else if (_Psave != 0)

  0003c	85 f6		 test	 esi, esi
  0003e	74 04		 je	 SHORT $LN4@use_facet

; 515  : 			_Pf = _Psave;	// lazy facet already allocated

  00040	8b fe		 mov	 edi, esi
  00042	eb 45		 jmp	 SHORT $LN10@use_facet
$LN4@use_facet:

; 516  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  00044	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  00047	8d 45 f0	 lea	 eax, DWORD PTR __Psave$90941[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
  00050	59		 pop	 ecx
  00051	59		 pop	 ecx
  00052	83 f8 ff	 cmp	 eax, -1
  00055	75 1b		 jne	 SHORT $LN2@use_facet

; 517  : 
; 518  :  #if _HAS_EXCEPTIONS
; 519  : 
; 520  : 			_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  00057	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  0005c	8d 4d e0	 lea	 ecx, DWORD PTR $T94444[ebp]
  0005f	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  00064	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  00069	8d 45 e0	 lea	 eax, DWORD PTR $T94444[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@use_facet:
$LN2@use_facet:

; 521  : 
; 522  :  #else /* _HAS_EXCEPTIONS */
; 523  : 			abort();	// lazy disallowed
; 524  :  #endif /* _HAS_EXCEPTIONS */
; 525  : 
; 526  : 		else
; 527  : 			{	// queue up lazy facet for destruction
; 528  : 			_Pf = _Psave;

  00072	8b 7d f0	 mov	 edi, DWORD PTR __Psave$90941[ebp]

; 529  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 530  : 
; 531  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 532  : 			_Pfmod->_Incref();

  00075	8b cf		 mov	 ecx, edi
  00077	89 3d 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, edi ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  0007d	e8 00 00 00 00	 call	 ?_Incref@facet@locale@std@@QAEXXZ ; std::locale::facet::_Incref

; 533  : 			_Pfmod->_Register();

  00082	57		 push	 edi
  00083	e8 00 00 00 00	 call	 ?_Facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::_Facet_Register
  00088	59		 pop	 ecx
$LN10@use_facet:

; 534  : 			}
; 535  : 
; 536  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00089	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$90940[ebp]
  00090	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00095	8b c7		 mov	 eax, edi

; 537  : 	_END_LOCK()
; 538  : 	}

  00097	e8 00 00 00 00	 call	 __EH_epilog3
  0009c	c3		 ret	 0
$LN13@use_facet:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$90940[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T94463 = -52						; size = 36
$T94467 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T94462 = 8						; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::numpunct<char>::_Getcat, COMDAT

; 111  : 		{	// return locale category mask and construct standard facet

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	83 65 f0 00	 and	 DWORD PTR $T94467[ebp], 0

; 112  : 		if (_Ppf != 0 && *_Ppf == 0)

  00010	8b 5d 08	 mov	 ebx, DWORD PTR __Ppf$[ebp]
  00013	85 db		 test	 ebx, ebx
  00015	74 6a		 je	 SHORT $LN9@Getcat@2
  00017	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  0001a	75 65		 jne	 SHORT $LN9@Getcat@2

; 113  : 			*_Ppf = _NEW_CRT numpunct<_Elem>(
; 114  : 				_Locinfo(_Ploc->c_str()), 0, true);

  0001c	6a 18		 push	 24			; 00000018H
  0001e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00023	8b f0		 mov	 esi, eax
  00025	59		 pop	 ecx
  00026	89 75 08	 mov	 DWORD PTR $T94462[ebp], esi
  00029	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	85 f6		 test	 esi, esi
  0002f	74 3a		 je	 SHORT $LN4@Getcat@2
  00031	8b 45 0c	 mov	 eax, DWORD PTR __Ploc$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00039	85 c9		 test	 ecx, ecx
  0003b	75 03		 jne	 SHORT $LN15@Getcat@2
  0003d	8d 48 1c	 lea	 ecx, DWORD PTR [eax+28]
$LN15@Getcat@2:
  00040	51		 push	 ecx
  00041	8d 4d cc	 lea	 ecx, DWORD PTR $T94463[ebp]
  00044	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00049	83 66 04 00	 and	 DWORD PTR [esi+4], 0
  0004d	33 c9		 xor	 ecx, ecx
  0004f	41		 inc	 ecx
  00050	89 4d f0	 mov	 DWORD PTR $T94467[ebp], ecx
  00053	51		 push	 ecx
  00054	50		 push	 eax
  00055	8b ce		 mov	 ecx, esi
  00057	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0005e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  00064	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init
  00069	eb 02		 jmp	 SHORT $LN5@Getcat@2
$LN4@Getcat@2:
  0006b	33 f6		 xor	 esi, esi
$LN5@Getcat@2:
  0006d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	f6 45 f0 01	 test	 BYTE PTR $T94467[ebp], 1
  00075	89 33		 mov	 DWORD PTR [ebx], esi
  00077	74 08		 je	 SHORT $LN9@Getcat@2
  00079	8d 4d cc	 lea	 ecx, DWORD PTR $T94463[ebp]
  0007c	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN9@Getcat@2:

; 115  : 		return (_X_NUMERIC);

  00081	6a 04		 push	 4
  00083	58		 pop	 eax

; 116  : 		}

  00084	e8 00 00 00 00	 call	 __EH_epilog3
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR $T94462[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000a	8b 45 f0	 mov	 eax, DWORD PTR $T94467[ebp]
  0000d	83 e0 01	 and	 eax, 1
  00010	0f 84 0c 00 00
	00		 je	 $LN8@Getcat@2
  00016	83 65 f0 fe	 and	 DWORD PTR $T94467[ebp], -2 ; fffffffeH
  0001a	8d 4d cc	 lea	 ecx, DWORD PTR $T94463[ebp]
  0001d	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN8@Getcat@2:
  00022	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  00023	8b 4d 08	 mov	 ecx, DWORD PTR $T94462[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@UAE@XZ ; std::locale::facet::~facet
__ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::numpunct<char>::_Getcat
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 121  : 			{	// destroy the object

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 122  :  #if _HAS_EXCEPTIONS
; 123  : 			if (!uncaught_exception())

  00015	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0001a	84 c0		 test	 al, al
  0001c	75 07		 jne	 SHORT $LN1@sentry@2

; 124  : 				this->_Myostr._Osfx();

  0001e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00020	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN1@sentry@2:

; 125  : 
; 126  :  #else /* _HAS_EXCEPTIONS */
; 127  : 			this->_Myostr._Osfx();
; 128  :  #endif /* _HAS_EXCEPTIONS */
; 129  : 			}

  00025	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00030	e8 00 00 00 00	 call	 __EH_epilog3
  00035	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1040 : 		{	// insert _Count * _Ch at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1041 : 		if (this->_Mysize < _Off)

  00007	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR __Off$[ebp]
  0000e	3b df		 cmp	 ebx, edi
  00010	73 0a		 jae	 SHORT $LN3@insert

; 1042 : 			_Xran();	// _Off off end

  00012	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00017	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN30@insert:
$LN3@insert:

; 1043 : 		if (npos - this->_Mysize <= _Count)

  0001c	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0001f	83 c9 ff	 or	 ecx, -1
  00022	2b cb		 sub	 ecx, ebx
  00024	3b c8		 cmp	 ecx, eax
  00026	77 0a		 ja	 SHORT $LN2@insert

; 1044 : 			_Xlen();	// result too long

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0002d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN31@insert:
$LN2@insert:

; 1045 : 		size_type _Num;
; 1046 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00032	85 c0		 test	 eax, eax
  00034	74 61		 je	 SHORT $LN27@insert
  00036	03 d8		 add	 ebx, eax
  00038	6a 00		 push	 0
  0003a	53		 push	 ebx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00042	84 c0		 test	 al, al
  00044	74 51		 je	 SHORT $LN27@insert

; 1047 : 			{	// make room and insert new stuff
; 1048 : 			_Traits::move(_Myptr() + _Off + _Count,
; 1049 : 				_Myptr() + _Off, this->_Mysize - _Off);	// empty out hole

  00046	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 04		 jb	 SHORT $LN13@insert
  0004e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00050	eb 02		 jmp	 SHORT $LN14@insert
$LN13@insert:
  00052	8b ce		 mov	 ecx, esi
$LN14@insert:
  00054	83 f8 10	 cmp	 eax, 16			; 00000010H
  00057	72 04		 jb	 SHORT $LN17@insert
  00059	8b 06		 mov	 eax, DWORD PTR [esi]
  0005b	eb 02		 jmp	 SHORT $LN18@insert
$LN17@insert:
  0005d	8b c6		 mov	 eax, esi
$LN18@insert:
  0005f	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00062	2b d7		 sub	 edx, edi
  00064	52		 push	 edx
  00065	03 c7		 add	 eax, edi
  00067	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  0006a	03 cf		 add	 ecx, edi
  0006c	51		 push	 ecx
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 _memmove
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1050 : 			_Chassign(_Off, _Count, _Ch);	// fill hole

  00076	ff 75 10	 push	 DWORD PTR __Ch$[ebp]
  00079	8b ce		 mov	 ecx, esi
  0007b	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0007e	57		 push	 edi
  0007f	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1051 : 			_Eos(_Num);

  00084	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00088	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0008b	72 04		 jb	 SHORT $LN25@insert
  0008d	8b 06		 mov	 eax, DWORD PTR [esi]
  0008f	eb 02		 jmp	 SHORT $LN26@insert
$LN25@insert:
  00091	8b c6		 mov	 eax, esi
$LN26@insert:
  00093	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
$LN27@insert:

; 1052 : 			}
; 1053 : 		return (*this);

  00097	5f		 pop	 edi
  00098	8b c6		 mov	 eax, esi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx

; 1054 : 		}

  0009c	5d		 pop	 ebp
  0009d	c2 0c 00	 ret	 12			; 0000000cH
$LN29@insert:
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 817  : 		{	// append [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 818  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 819  : 		if (_Count != 0)
; 820  : 			_DEBUG_POINTER(_Ptr);
; 821  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 822  : 
; 823  : 		if (_Inside(_Ptr))

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 1c		 je	 SHORT $LN3@append@2

; 824  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN8@append@2
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN9@append@2
$LN8@append@2:
  0001e	8b c6		 mov	 eax, esi
$LN9@append@2:
  00020	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00023	2b f8		 sub	 edi, eax
  00025	57		 push	 edi
  00026	56		 push	 esi
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0002e	eb 63		 jmp	 SHORT $LN4@append@2
$LN3@append@2:

; 825  : 		if (npos - this->_Mysize <= _Count)

  00030	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00033	83 c9 ff	 or	 ecx, -1
  00036	53		 push	 ebx
  00037	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0003a	2b c8		 sub	 ecx, eax
  0003c	3b cb		 cmp	 ecx, ebx
  0003e	77 0a		 ja	 SHORT $LN2@append@2

; 826  : 			_Xlen();	// result too long

  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00045	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN28@append@2:
$LN2@append@2:

; 827  : 
; 828  : 		size_type _Num;
; 829  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  0004a	85 db		 test	 ebx, ebx
  0004c	74 42		 je	 SHORT $LN25@append@2
  0004e	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  00051	6a 00		 push	 0
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0005b	84 c0		 test	 al, al
  0005d	74 31		 je	 SHORT $LN25@append@2

; 830  : 			{	// make room and append new stuff
; 831  : 			_Traits::copy(_Myptr() + this->_Mysize, _Ptr, _Count);

  0005f	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00063	72 04		 jb	 SHORT $LN15@append@2
  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	eb 02		 jmp	 SHORT $LN16@append@2
$LN15@append@2:
  00069	8b c6		 mov	 eax, esi
$LN16@append@2:
  0006b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0006e	53		 push	 ebx
  0006f	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00072	03 c8		 add	 ecx, eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memcpy
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 832  : 			_Eos(_Num);

  0007d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00081	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00084	72 04		 jb	 SHORT $LN23@append@2
  00086	8b 06		 mov	 eax, DWORD PTR [esi]
  00088	eb 02		 jmp	 SHORT $LN24@append@2
$LN23@append@2:
  0008a	8b c6		 mov	 eax, esi
$LN24@append@2:
  0008c	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN25@append@2:

; 833  : 			}
; 834  : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5b		 pop	 ebx
$LN4@append@2:
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi

; 835  : 		}

  00095	5d		 pop	 ebp
  00096	c2 08 00	 ret	 8
$LN27@append@2:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 844  : 		{	// append _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 845  : 		if (npos - this->_Mysize <= _Count)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000d	83 c9 ff	 or	 ecx, -1
  00010	2b c8		 sub	 ecx, eax
  00012	3b cb		 cmp	 ecx, ebx
  00014	77 0a		 ja	 SHORT $LN2@append@3

; 846  : 			_Xlen();	// result too long

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0001b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN18@append@3:
$LN2@append@3:

; 847  : 
; 848  : 		size_type _Num;
; 849  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00020	85 db		 test	 ebx, ebx
  00022	74 34		 je	 SHORT $LN14@append@3
  00024	57		 push	 edi
  00025	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  00028	6a 00		 push	 0
  0002a	57		 push	 edi
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00032	84 c0		 test	 al, al
  00034	74 21		 je	 SHORT $LN16@append@3

; 850  : 			{	// make room and append new stuff using assign
; 851  : 			_Chassign(this->_Mysize, _Count, _Ch);

  00036	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  00039	8b ce		 mov	 ecx, esi
  0003b	53		 push	 ebx
  0003c	ff 76 10	 push	 DWORD PTR [esi+16]
  0003f	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 852  : 			_Eos(_Num);

  00044	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00048	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0004b	72 04		 jb	 SHORT $LN12@append@3
  0004d	8b 06		 mov	 eax, DWORD PTR [esi]
  0004f	eb 02		 jmp	 SHORT $LN13@append@3
$LN12@append@3:
  00051	8b c6		 mov	 eax, esi
$LN13@append@3:
  00053	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN16@append@3:
  00057	5f		 pop	 edi
$LN14@append@3:

; 853  : 			}
; 854  : 		return (*this);

  00058	8b c6		 mov	 eax, esi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx

; 855  : 		}

  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
$LN17@append@3:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 892  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 893  : 		if (_Right.size() < _Roff)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00010	57		 push	 edi
  00011	3b c1		 cmp	 eax, ecx
  00013	73 0a		 jae	 SHORT $LN5@assign

; 894  : 			_Xran();	// _Roff off end

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0001a	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN34@assign:
$LN5@assign:

; 895  : 		size_type _Num = _Right.size() - _Roff;

  0001f	2b c1		 sub	 eax, ecx
  00021	8b f8		 mov	 edi, eax

; 896  : 		if (_Count < _Num)

  00023	39 7d 10	 cmp	 DWORD PTR __Count$[ebp], edi
  00026	73 03		 jae	 SHORT $LN4@assign

; 897  : 			_Num = _Count;	// trim _Num to size

  00028	8b 7d 10	 mov	 edi, DWORD PTR __Count$[ebp]
$LN4@assign:

; 898  : 
; 899  : 		if (this == &_Right)

  0002b	3b f3		 cmp	 esi, ebx
  0002d	75 1a		 jne	 SHORT $LN3@assign

; 900  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002f	03 f9		 add	 edi, ecx
  00031	6a ff		 push	 -1
  00033	57		 push	 edi
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0003b	ff 75 0c	 push	 DWORD PTR __Roff$[ebp]
  0003e	8b ce		 mov	 ecx, esi
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00047	eb 47		 jmp	 SHORT $LN31@assign
$LN3@assign:

; 901  : 		else if (_Grow(_Num))

  00049	6a 00		 push	 0
  0004b	57		 push	 edi
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00053	84 c0		 test	 al, al
  00055	74 39		 je	 SHORT $LN31@assign

; 902  : 			{	// make room and assign new stuff
; 903  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  00057	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  0005b	72 04		 jb	 SHORT $LN17@assign
  0005d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005f	eb 02		 jmp	 SHORT $LN18@assign
$LN17@assign:
  00061	8b c3		 mov	 eax, ebx
$LN18@assign:
  00063	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00067	72 04		 jb	 SHORT $LN21@assign
  00069	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0006b	eb 02		 jmp	 SHORT $LN22@assign
$LN21@assign:
  0006d	8b ce		 mov	 ecx, esi
$LN22@assign:
  0006f	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memcpy
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 904  : 			_Eos(_Num);

  0007d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00081	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00084	72 04		 jb	 SHORT $LN29@assign
  00086	8b 06		 mov	 eax, DWORD PTR [esi]
  00088	eb 02		 jmp	 SHORT $LN30@assign
$LN29@assign:
  0008a	8b c6		 mov	 eax, esi
$LN30@assign:
  0008c	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN31@assign:

; 905  : 			}
; 906  : 		return (*this);

  00090	5f		 pop	 edi
  00091	8b c6		 mov	 eax, esi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx

; 907  : 		}

  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN33@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$12
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -40						; size = 8
__Pad$ = -32						; size = 8
$T94754 = -24						; size = 1
$T94733 = -24						; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 767  : 	{	// insert NTBS into char stream

  00000	6a 1c		 push	 28			; 0000001cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 768  : 	typedef char _Elem;
; 769  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 770  : 	ios_base::iostate _State = ios_base::goodbit;
; 771  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  0000c	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0000f	33 ff		 xor	 edi, edi
  00011	89 7d ec	 mov	 DWORD PTR __State$[ebp], edi
  00014	e8 00 00 00 00	 call	 _strlen

; 772  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 773  : 		? 0 : _Ostr.width() - _Count;

  00019	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0001c	8b d8		 mov	 ebx, eax
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00023	59		 pop	 ecx
  00024	8b 4c 30 20	 mov	 ecx, DWORD PTR [eax+esi+32]
  00028	8b 44 30 24	 mov	 eax, DWORD PTR [eax+esi+36]
  0002c	85 c0		 test	 eax, eax
  0002e	7c 1c		 jl	 SHORT $LN17@operator@4
  00030	7f 04		 jg	 SHORT $LN130@operator@4
  00032	85 c9		 test	 ecx, ecx
  00034	74 16		 je	 SHORT $LN17@operator@4
$LN130@operator@4:
  00036	3b c7		 cmp	 eax, edi
  00038	7c 12		 jl	 SHORT $LN17@operator@4
  0003a	7f 04		 jg	 SHORT $LN131@operator@4
  0003c	3b cb		 cmp	 ecx, ebx
  0003e	76 0c		 jbe	 SHORT $LN17@operator@4
$LN131@operator@4:
  00040	2b cb		 sub	 ecx, ebx
  00042	1b c7		 sbb	 eax, edi
  00044	89 4d e0	 mov	 DWORD PTR __Pad$[ebp], ecx
  00047	89 45 e4	 mov	 DWORD PTR __Pad$[ebp+4], eax
  0004a	eb 06		 jmp	 SHORT $LN18@operator@4
$LN17@operator@4:
  0004c	21 7d e0	 and	 DWORD PTR __Pad$[ebp], edi
  0004f	21 7d e4	 and	 DWORD PTR __Pad$[ebp+4], edi
$LN18@operator@4:

; 774  : 	const typename _Myos::sentry _Ok(_Ostr);

  00052	56		 push	 esi
  00053	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00056	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0005b	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 775  : 
; 776  : 	if (!_Ok)

  0005f	80 7d dc 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00063	75 0c		 jne	 SHORT $LN14@operator@4

; 777  : 		_State |= ios_base::badbit;

  00065	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4

; 778  : 	else

  0006c	e9 80 00 00 00	 jmp	 $LN22@operator@4
$LN14@operator@4:

; 779  : 		{	// state okay, insert
; 780  : 		_TRY_IO_BEGIN
; 781  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00071	8b 06		 mov	 eax, DWORD PTR [esi]
  00073	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00076	8b 44 30 14	 mov	 eax, DWORD PTR [eax+esi+20]
  0007a	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0007f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00083	83 f8 40	 cmp	 eax, 64			; 00000040H
  00086	74 35		 je	 SHORT $LN128@operator@4
$LL10@operator@4:

; 782  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00088	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  0008c	7c 29		 jl	 SHORT $LN8@operator@4
  0008e	7f 06		 jg	 SHORT $LN132@operator@4
  00090	83 7d e0 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00094	76 21		 jbe	 SHORT $LN8@operator@4
$LN132@operator@4:

; 783  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 784  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00096	8b 06		 mov	 eax, DWORD PTR [esi]
  00098	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0009b	8a 4c 30 40	 mov	 cl, BYTE PTR [eax+esi+64]
  0009f	88 4d e8	 mov	 BYTE PTR $T94733[ebp], cl
  000a2	ff 75 e8	 push	 DWORD PTR $T94733[ebp]
  000a5	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  000a9	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  000ae	83 f8 ff	 cmp	 eax, -1
  000b1	75 63		 jne	 SHORT $LN9@operator@4

; 785  : 					{	// insertion failed, quit
; 786  : 					_State |= ios_base::badbit;

  000b3	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN8@operator@4:

; 787  : 					break;
; 788  : 					}
; 789  : 
; 790  : 		if (_State == ios_base::goodbit
; 791  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  000b7	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  000bb	75 22		 jne	 SHORT $LN2@operator@4
$LN128@operator@4:
  000bd	8b 06		 mov	 eax, DWORD PTR [esi]
  000bf	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000c2	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  000c6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c8	57		 push	 edi
  000c9	53		 push	 ebx
  000ca	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  000cd	ff 50 24	 call	 DWORD PTR [eax+36]
  000d0	3b c3		 cmp	 eax, ebx
  000d2	75 04		 jne	 SHORT $LN133@operator@4
  000d4	3b d7		 cmp	 edx, edi
  000d6	74 4b		 je	 SHORT $LL129@operator@4
$LN133@operator@4:

; 792  : 			_State |= ios_base::badbit;

  000d8	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN2@operator@4:

; 801  : 					}
; 802  : 		_Ostr.width(0);

  000df	8b 06		 mov	 eax, DWORD PTR [esi]
  000e1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000e4	33 c9		 xor	 ecx, ecx
  000e6	89 4c 30 20	 mov	 DWORD PTR [eax+esi+32], ecx
  000ea	89 4c 30 24	 mov	 DWORD PTR [eax+esi+36], ecx
  000ee	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
$LN22@operator@4:

; 804  : 		}
; 805  : 
; 806  : 	_Ostr.setstate(_State);

  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
  000f3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f6	6a 00		 push	 0
  000f8	ff 75 ec	 push	 DWORD PTR __State$[ebp]
  000fb	03 ce		 add	 ecx, esi
  000fd	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 807  : 	return (_Ostr);

  00102	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00106	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00109	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0010e	8b c6		 mov	 eax, esi

; 808  : 	}

  00110	e8 00 00 00 00	 call	 __EH_epilog3
  00115	c3		 ret	 0
$LN9@operator@4:

; 782  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00116	83 45 e0 ff	 add	 DWORD PTR __Pad$[ebp], -1
  0011a	83 55 e4 ff	 adc	 DWORD PTR __Pad$[ebp+4], -1
  0011e	e9 65 ff ff ff	 jmp	 $LL10@operator@4
$LL129@operator@4:

; 793  : 
; 794  : 		if (_State == ios_base::goodbit)
; 795  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00123	83 7d e4 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00127	7c b6		 jl	 SHORT $LN2@operator@4
  00129	7f 06		 jg	 SHORT $LN134@operator@4
  0012b	83 7d e0 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  0012f	76 ae		 jbe	 SHORT $LN2@operator@4
$LN134@operator@4:

; 796  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 797  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00131	8b 06		 mov	 eax, DWORD PTR [esi]
  00133	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00136	8a 4c 30 40	 mov	 cl, BYTE PTR [eax+esi+64]
  0013a	88 4d e8	 mov	 BYTE PTR $T94754[ebp], cl
  0013d	ff 75 e8	 push	 DWORD PTR $T94754[ebp]
  00140	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00144	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  00149	83 f8 ff	 cmp	 eax, -1
  0014c	75 06		 jne	 SHORT $LN3@operator@4

; 798  : 					{	// insertion failed, quit
; 799  : 					_State |= ios_base::badbit;

  0014e	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4

; 800  : 					break;

  00152	eb 8b		 jmp	 SHORT $LN2@operator@4
$LN3@operator@4:

; 793  : 
; 794  : 		if (_State == ios_base::goodbit)
; 795  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00154	83 45 e0 ff	 add	 DWORD PTR __Pad$[ebp], -1
  00158	83 55 e4 ff	 adc	 DWORD PTR __Pad$[ebp+4], -1
  0015c	eb c5		 jmp	 SHORT $LL129@operator@4
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 803  : 		_CATCH_IO_(_Ostr)

  0015e	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00161	8b 01		 mov	 eax, DWORD PTR [ecx]
  00163	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00166	03 c1		 add	 eax, ecx
  00168	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0016b	33 d2		 xor	 edx, edx
  0016d	83 c9 04	 or	 ecx, 4
  00170	39 50 38	 cmp	 DWORD PTR [eax+56], edx
  00173	75 03		 jne	 SHORT $LN65@operator@4
  00175	83 c9 04	 or	 ecx, 4
$LN65@operator@4:
  00178	83 e1 17	 and	 ecx, 23			; 00000017H
  0017b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0017e	85 48 10	 test	 DWORD PTR [eax+16], ecx
  00181	75 11		 jne	 SHORT $LN74@operator@4
  00183	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edx
  00186	b8 00 00 00 00	 mov	 eax, $LN23@operator@4
  0018b	c3		 ret	 0
$LN23@operator@4:
  0018c	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0018f	e9 5d ff ff ff	 jmp	 $LN22@operator@4
$LN74@operator@4:
  00194	52		 push	 edx
  00195	52		 push	 edx
  00196	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN142@operator@4:
$LN141@operator@4:
  0019b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$12
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
_TEXT	SEGMENT
__Ok$ = -40						; size = 8
__Pad$90916 = -32					; size = 8
$T95151 = -24						; size = 1
$T95127 = -24						; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Ch$ = 12						; size = 1
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 813  : 	{	// insert a char into char stream

  00000	6a 1c		 push	 28			; 0000001cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 814  : 	typedef char _Elem;
; 815  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 816  : 	ios_base::iostate _State = ios_base::goodbit;
; 817  : 	const typename _Myos::sentry _Ok(_Ostr);

  0000c	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0000f	33 db		 xor	 ebx, ebx
  00011	56		 push	 esi
  00012	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00015	89 5d ec	 mov	 DWORD PTR __State$[ebp], ebx
  00018	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0001d	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 818  : 
; 819  : 	if (_Ok)

  00020	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00023	0f 84 16 01 00
	00		 je	 $LN20@operator@5

; 820  : 		{	// state okay, insert
; 821  : 		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002e	8b 4c 32 24	 mov	 ecx, DWORD PTR [edx+esi+36]
  00032	8b 44 32 20	 mov	 eax, DWORD PTR [edx+esi+32]
  00036	3b cb		 cmp	 ecx, ebx
  00038	7f 0e		 jg	 SHORT $LN15@operator@5
  0003a	7c 05		 jl	 SHORT $LN127@operator@5
  0003c	83 f8 01	 cmp	 eax, 1
  0003f	77 07		 ja	 SHORT $LN15@operator@5
$LN127@operator@5:
  00041	33 ff		 xor	 edi, edi
  00043	89 5d e4	 mov	 DWORD PTR __Pad$90916[ebp+4], ebx
  00046	eb 0a		 jmp	 SHORT $LN16@operator@5
$LN15@operator@5:
  00048	83 e8 01	 sub	 eax, 1
  0004b	1b cb		 sbb	 ecx, ebx
  0004d	8b f8		 mov	 edi, eax
  0004f	89 4d e4	 mov	 DWORD PTR __Pad$90916[ebp+4], ecx
$LN16@operator@5:

; 822  : 
; 823  : 		_TRY_IO_BEGIN
; 824  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00052	8b 54 32 14	 mov	 edx, DWORD PTR [edx+esi+20]
  00056	81 e2 c0 01 00
	00		 and	 edx, 448		; 000001c0H
  0005c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00060	83 fa 40	 cmp	 edx, 64			; 00000040H
  00063	74 41		 je	 SHORT $LN125@operator@5
$LL9@operator@5:

; 825  : 			for (; _State == ios_base::goodbit && 0 < _Pad;
; 826  : 				--_Pad)	// pad on left

  00065	39 5d ec	 cmp	 DWORD PTR __State$[ebp], ebx
  00068	0f 85 ce 00 00
	00		 jne	 $LN2@operator@5
  0006e	39 5d e4	 cmp	 DWORD PTR __Pad$90916[ebp+4], ebx
  00071	7c 33		 jl	 SHORT $LN125@operator@5
  00073	7f 04		 jg	 SHORT $LN128@operator@5
  00075	3b fb		 cmp	 edi, ebx
  00077	76 2d		 jbe	 SHORT $LN125@operator@5
$LN128@operator@5:

; 827  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 828  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00079	8b 06		 mov	 eax, DWORD PTR [esi]
  0007b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007e	8a 4c 30 40	 mov	 cl, BYTE PTR [eax+esi+64]
  00082	88 4d e8	 mov	 BYTE PTR $T95127[ebp], cl
  00085	ff 75 e8	 push	 DWORD PTR $T95127[ebp]
  00088	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  0008c	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  00091	83 f8 ff	 cmp	 eax, -1
  00094	75 07		 jne	 SHORT $LN8@operator@5

; 829  : 					_State |= ios_base::badbit;

  00096	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN8@operator@5:

; 825  : 			for (; _State == ios_base::goodbit && 0 < _Pad;
; 826  : 				--_Pad)	// pad on left

  0009d	83 c7 ff	 add	 edi, -1
  000a0	83 55 e4 ff	 adc	 DWORD PTR __Pad$90916[ebp+4], -1
  000a4	eb bf		 jmp	 SHORT $LL9@operator@5
$LN125@operator@5:

; 830  : 
; 831  : 		if (_State == ios_base::goodbit
; 832  : 			&& _Traits::eq_int_type(_Traits::eof(),
; 833  : 				_Ostr.rdbuf()->sputc(_Ch)))

  000a6	8b 06		 mov	 eax, DWORD PTR [esi]
  000a8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ab	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  000ae	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  000b2	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  000b7	83 f8 ff	 cmp	 eax, -1
  000ba	75 07		 jne	 SHORT $LL126@operator@5

; 834  : 			_State |= ios_base::badbit;

  000bc	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LL126@operator@5:

; 835  : 
; 836  : 		for (; _State == ios_base::goodbit && 0 < _Pad;
; 837  : 			--_Pad)	// pad on right

  000c3	39 5d ec	 cmp	 DWORD PTR __State$[ebp], ebx
  000c6	75 74		 jne	 SHORT $LN2@operator@5
  000c8	39 5d e4	 cmp	 DWORD PTR __Pad$90916[ebp+4], ebx
  000cb	7c 6f		 jl	 SHORT $LN2@operator@5
  000cd	7f 04		 jg	 SHORT $LN129@operator@5
  000cf	3b fb		 cmp	 edi, ebx
  000d1	76 69		 jbe	 SHORT $LN2@operator@5
$LN129@operator@5:

; 838  : 			if (_Traits::eq_int_type(_Traits::eof(),
; 839  : 				_Ostr.rdbuf()->sputc(_Ostr.fill())))

  000d3	8b 06		 mov	 eax, DWORD PTR [esi]
  000d5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000d8	8a 4c 30 40	 mov	 cl, BYTE PTR [eax+esi+64]
  000dc	88 4d e8	 mov	 BYTE PTR $T95151[ebp], cl
  000df	ff 75 e8	 push	 DWORD PTR $T95151[ebp]
  000e2	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  000e6	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  000eb	83 f8 ff	 cmp	 eax, -1
  000ee	75 07		 jne	 SHORT $LN3@operator@5

; 840  : 				_State |= ios_base::badbit;

  000f0	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN3@operator@5:

; 835  : 
; 836  : 		for (; _State == ios_base::goodbit && 0 < _Pad;
; 837  : 			--_Pad)	// pad on right

  000f7	83 c7 ff	 add	 edi, -1
  000fa	83 55 e4 ff	 adc	 DWORD PTR __Pad$90916[ebp+4], -1
  000fe	eb c3		 jmp	 SHORT $LL126@operator@5
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0:

; 841  : 		_CATCH_IO_(_Ostr)

  00100	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00103	8b 01		 mov	 eax, DWORD PTR [ecx]
  00105	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00108	03 c1		 add	 eax, ecx
  0010a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0010d	33 db		 xor	 ebx, ebx
  0010f	83 c9 04	 or	 ecx, 4
  00112	39 58 38	 cmp	 DWORD PTR [eax+56], ebx
  00115	75 03		 jne	 SHORT $LN59@operator@5
  00117	83 c9 04	 or	 ecx, 4
$LN59@operator@5:
  0011a	83 e1 17	 and	 ecx, 23			; 00000017H
  0011d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00120	85 48 10	 test	 DWORD PTR [eax+16], ecx
  00123	75 10		 jne	 SHORT $LN68@operator@5
  00125	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00128	b8 00 00 00 00	 mov	 eax, $LN21@operator@5
  0012d	c3		 ret	 0
$LN21@operator@5:
  0012e	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00131	33 db		 xor	 ebx, ebx
  00133	eb 0a		 jmp	 SHORT $LN20@operator@5
$LN68@operator@5:
  00135	53		 push	 ebx
  00136	53		 push	 ebx
  00137	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN138@operator@5:
$LN2@operator@5:
  0013c	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
$LN20@operator@5:

; 842  : 		}
; 843  : 
; 844  : 	_Ostr.width(0);

  0013f	8b 06		 mov	 eax, DWORD PTR [esi]
  00141	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00144	89 5c 30 20	 mov	 DWORD PTR [eax+esi+32], ebx
  00148	89 5c 30 24	 mov	 DWORD PTR [eax+esi+36], ebx

; 845  : 	_Ostr.setstate(_State);

  0014c	8b 06		 mov	 eax, DWORD PTR [esi]
  0014e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00151	53		 push	 ebx
  00152	ff 75 ec	 push	 DWORD PTR __State$[ebp]
  00155	03 ce		 add	 ecx, esi
  00157	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 846  : 	return (_Ostr);

  0015c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00160	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00163	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00168	8b c6		 mov	 eax, esi

; 847  : 	}

  0016a	e8 00 00 00 00	 call	 __EH_epilog3
  0016f	c3		 ret	 0
$LN137@operator@5:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
PUBLIC	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::numpunct<char> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T95492 = -32						; size = 12
__Lock$90981 = -20					; size = 4
__Psave$90982 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::numpunct<char> >, COMDAT

; 504  : 	{	// get facet reference from locale

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 505  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  0000c	6a 00		 push	 0
  0000e	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$90981[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 506  : 		const locale::facet *_Psave =
; 507  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00016	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 508  : 
; 509  : 		size_t _Id = _Facet::id;

  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
  00025	89 75 f0	 mov	 DWORD PTR __Psave$90982[ebp], esi
  00028	e8 00 00 00 00	 call	 ??Bid@locale@std@@QAEIXZ ; std::locale::id::operator unsigned int

; 510  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  00036	8b f8		 mov	 edi, eax

; 511  : 
; 512  : 		if (_Pf != 0)

  00038	85 ff		 test	 edi, edi
  0003a	75 4d		 jne	 SHORT $LN10@use_facet@2

; 513  : 			;	// got facet from locale
; 514  : 		else if (_Psave != 0)

  0003c	85 f6		 test	 esi, esi
  0003e	74 04		 je	 SHORT $LN4@use_facet@2

; 515  : 			_Pf = _Psave;	// lazy facet already allocated

  00040	8b fe		 mov	 edi, esi
  00042	eb 45		 jmp	 SHORT $LN10@use_facet@2
$LN4@use_facet@2:

; 516  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  00044	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  00047	8d 45 f0	 lea	 eax, DWORD PTR __Psave$90982[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
  00050	59		 pop	 ecx
  00051	59		 pop	 ecx
  00052	83 f8 ff	 cmp	 eax, -1
  00055	75 1b		 jne	 SHORT $LN2@use_facet@2

; 517  : 
; 518  :  #if _HAS_EXCEPTIONS
; 519  : 
; 520  : 			_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  00057	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  0005c	8d 4d e0	 lea	 ecx, DWORD PTR $T95492[ebp]
  0005f	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  00064	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  00069	8d 45 e0	 lea	 eax, DWORD PTR $T95492[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@use_facet@2:
$LN2@use_facet@2:

; 521  : 
; 522  :  #else /* _HAS_EXCEPTIONS */
; 523  : 			abort();	// lazy disallowed
; 524  :  #endif /* _HAS_EXCEPTIONS */
; 525  : 
; 526  : 		else
; 527  : 			{	// queue up lazy facet for destruction
; 528  : 			_Pf = _Psave;

  00072	8b 7d f0	 mov	 edi, DWORD PTR __Psave$90982[ebp]

; 529  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 530  : 
; 531  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 532  : 			_Pfmod->_Incref();

  00075	8b cf		 mov	 ecx, edi
  00077	89 3d 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B, edi ; std::_Facetptr<std::numpunct<char> >::_Psave
  0007d	e8 00 00 00 00	 call	 ?_Incref@facet@locale@std@@QAEXXZ ; std::locale::facet::_Incref

; 533  : 			_Pfmod->_Register();

  00082	57		 push	 edi
  00083	e8 00 00 00 00	 call	 ?_Facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::_Facet_Register
  00088	59		 pop	 ecx
$LN10@use_facet@2:

; 534  : 			}
; 535  : 
; 536  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00089	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$90981[ebp]
  00090	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00095	8b c7		 mov	 eax, edi

; 537  : 	_END_LOCK()
; 538  : 	}

  00097	e8 00 00 00 00	 call	 __EH_epilog3
  0009c	c3		 ret	 0
$LN13@use_facet@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$90981[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<char> >
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z$13 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z$13
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z
_TEXT	SEGMENT
$T95513 = -48						; size = 8
$T95512 = -48						; size = 8
__Ok$ = -40						; size = 8
$T95527 = -32						; size = 1
$T95509 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 1
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 207  : 		{	// insert a boolean

  00000	6a 24		 push	 36			; 00000024H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 208  : 		ios_base::iostate _State = ios_base::goodbit;

  00011	33 db		 xor	 ebx, ebx

; 209  : 		const sentry _Ok(*this);

  00013	56		 push	 esi
  00014	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00017	89 5d e8	 mov	 DWORD PTR __State$[ebp], ebx
  0001a	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0001f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 210  : 
; 211  : 		if (_Ok)

  00022	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00025	74 66		 je	 SHORT $LN12@operator@6

; 212  : 			{	// state okay, use facet to insert
; 213  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00027	8d 45 e4	 lea	 eax, DWORD PTR $T95509[ebp]
  0002a	50		 push	 eax
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00030	03 ce		 add	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00037	50		 push	 eax
  00038	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0003c	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00041	59		 pop	 ecx
  00042	8d 4d e4	 lea	 ecx, DWORD PTR $T95509[ebp]
  00045	8b f8		 mov	 edi, eax
  00047	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 214  : 
; 215  : 			_TRY_IO_BEGIN
; 216  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 217  : 				_Myios::fill(), _Val).failed())

  0004c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00051	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00054	8a 54 31 40	 mov	 dl, BYTE PTR [ecx+esi+64]
  00058	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  0005b	8b 4c 31 38	 mov	 ecx, DWORD PTR [ecx+esi+56]
  0005f	88 55 e0	 mov	 BYTE PTR $T95527[ebp], dl
  00062	ff 75 e0	 push	 DWORD PTR $T95527[ebp]
  00065	8b 17		 mov	 edx, DWORD PTR [edi]
  00067	03 c6		 add	 eax, esi
  00069	50		 push	 eax
  0006a	51		 push	 ecx
  0006b	88 5d d0	 mov	 BYTE PTR $T95512[ebp], bl
  0006e	ff 75 d0	 push	 DWORD PTR $T95512[ebp]
  00071	8d 45 d0	 lea	 eax, DWORD PTR $T95513[ebp]
  00074	50		 push	 eax
  00075	8b cf		 mov	 ecx, edi
  00077	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0007b	ff 52 20	 call	 DWORD PTR [edx+32]
  0007e	38 5d d0	 cmp	 BYTE PTR $T95513[ebp], bl
  00081	74 07		 je	 SHORT $LN1@operator@6

; 218  : 				_State |= ios_base::badbit;

  00083	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN1@operator@6:
  0008a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
$LN12@operator@6:

; 220  : 			}
; 221  : 
; 222  : 		_Myios::setstate(_State);

  0008d	8b 06		 mov	 eax, DWORD PTR [esi]
  0008f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00092	53		 push	 ebx
  00093	ff 75 e8	 push	 DWORD PTR __State$[ebp]
  00096	03 ce		 add	 ecx, esi
  00098	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 223  : 		return (*this);

  0009d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  000a1	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000a4	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000a9	8b c6		 mov	 eax, esi

; 224  : 		}

  000ab	e8 00 00 00 00	 call	 __EH_epilog3
  000b0	c2 04 00	 ret	 4
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z$0:

; 219  : 			_CATCH_IO_END

  000b3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000bb	03 c1		 add	 eax, ecx
  000bd	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000c0	33 db		 xor	 ebx, ebx
  000c2	83 c9 04	 or	 ecx, 4
  000c5	39 58 38	 cmp	 DWORD PTR [eax+56], ebx
  000c8	75 03		 jne	 SHORT $LN33@operator@6
  000ca	83 c9 04	 or	 ecx, 4
$LN33@operator@6:
  000cd	83 e1 17	 and	 ecx, 23			; 00000017H
  000d0	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000d3	85 48 10	 test	 DWORD PTR [eax+16], ecx
  000d6	75 10		 jne	 SHORT $LN42@operator@6
  000d8	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  000db	b8 00 00 00 00	 mov	 eax, $LN13@operator@6
  000e0	c3		 ret	 0
$LN13@operator@6:
  000e1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000e4	33 db		 xor	 ebx, ebx
  000e6	eb a5		 jmp	 SHORT $LN12@operator@6
$LN42@operator@6:
  000e8	53		 push	 ebx
  000e9	53		 push	 ebx
  000ea	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN96@operator@6:
$LN95@operator@6:
  000ef	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T95509[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$13 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$13
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
_TEXT	SEGMENT
$T95858 = -48						; size = 8
$T95857 = -48						; size = 8
__Ok$ = -40						; size = 8
$T95872 = -32						; size = 1
$T95854 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 2
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 261  : 		{	// insert an unsigned short

  00000	6a 24		 push	 36			; 00000024H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 262  : 		ios_base::iostate _State = ios_base::goodbit;

  00011	33 db		 xor	 ebx, ebx

; 263  : 		const sentry _Ok(*this);

  00013	56		 push	 esi
  00014	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00017	89 5d e8	 mov	 DWORD PTR __State$[ebp], ebx
  0001a	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0001f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 264  : 
; 265  : 		if (_Ok)

  00022	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00025	74 6a		 je	 SHORT $LN12@operator@7

; 266  : 			{	// state okay, use facet to insert
; 267  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00027	8d 45 e4	 lea	 eax, DWORD PTR $T95854[ebp]
  0002a	50		 push	 eax
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00030	03 ce		 add	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00037	50		 push	 eax
  00038	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0003c	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00041	59		 pop	 ecx
  00042	8d 4d e4	 lea	 ecx, DWORD PTR $T95854[ebp]
  00045	8b f8		 mov	 edi, eax
  00047	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 268  : 
; 269  : 			_TRY_IO_BEGIN
; 270  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 271  : 				_Myios::fill(), (unsigned long)_Val).failed())

  0004c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00051	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00054	8a 54 31 40	 mov	 dl, BYTE PTR [ecx+esi+64]
  00058	8b 4c 31 38	 mov	 ecx, DWORD PTR [ecx+esi+56]
  0005c	88 5d d0	 mov	 BYTE PTR $T95857[ebp], bl
  0005f	0f b7 5d 08	 movzx	 ebx, WORD PTR __Val$[ebp]
  00063	53		 push	 ebx
  00064	88 55 e0	 mov	 BYTE PTR $T95872[ebp], dl
  00067	ff 75 e0	 push	 DWORD PTR $T95872[ebp]
  0006a	8b 17		 mov	 edx, DWORD PTR [edi]
  0006c	03 c6		 add	 eax, esi
  0006e	50		 push	 eax
  0006f	51		 push	 ecx
  00070	ff 75 d0	 push	 DWORD PTR $T95857[ebp]
  00073	8d 45 d0	 lea	 eax, DWORD PTR $T95858[ebp]
  00076	50		 push	 eax
  00077	8b cf		 mov	 ecx, edi
  00079	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0007d	ff 52 18	 call	 DWORD PTR [edx+24]
  00080	33 db		 xor	 ebx, ebx
  00082	38 5d d0	 cmp	 BYTE PTR $T95858[ebp], bl
  00085	74 07		 je	 SHORT $LN1@operator@7

; 272  : 				_State |= ios_base::badbit;

  00087	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN1@operator@7:
  0008e	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
$LN12@operator@7:

; 274  : 			}
; 275  : 
; 276  : 		_Myios::setstate(_State);

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00096	53		 push	 ebx
  00097	ff 75 e8	 push	 DWORD PTR __State$[ebp]
  0009a	03 ce		 add	 ecx, esi
  0009c	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 277  : 		return (*this);

  000a1	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  000a5	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000a8	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000ad	8b c6		 mov	 eax, esi

; 278  : 		}

  000af	e8 00 00 00 00	 call	 __EH_epilog3
  000b4	c2 04 00	 ret	 4
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$0:

; 273  : 			_CATCH_IO_END

  000b7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	8b 01		 mov	 eax, DWORD PTR [ecx]
  000bc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000bf	03 c1		 add	 eax, ecx
  000c1	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000c4	33 d2		 xor	 edx, edx
  000c6	83 c9 04	 or	 ecx, 4
  000c9	39 50 38	 cmp	 DWORD PTR [eax+56], edx
  000cc	75 03		 jne	 SHORT $LN33@operator@7
  000ce	83 c9 04	 or	 ecx, 4
$LN33@operator@7:
  000d1	83 e1 17	 and	 ecx, 23			; 00000017H
  000d4	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000d7	85 48 10	 test	 DWORD PTR [eax+16], ecx
  000da	75 10		 jne	 SHORT $LN42@operator@7
  000dc	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edx
  000df	b8 00 00 00 00	 mov	 eax, $LN13@operator@7
  000e4	c3		 ret	 0
$LN13@operator@7:
  000e5	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000e8	33 db		 xor	 ebx, ebx
  000ea	eb a5		 jmp	 SHORT $LN12@operator@7
$LN42@operator@7:
  000ec	52		 push	 edx
  000ed	52		 push	 edx
  000ee	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN97@operator@7:
$LN96@operator@7:
  000f3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T95854[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$13 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$13
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
$T96206 = -48						; size = 8
$T96205 = -48						; size = 8
__Ok$ = -40						; size = 8
$T96224 = -32						; size = 1
$T96200 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 281  : 		{	// insert an int

  00000	6a 24		 push	 36			; 00000024H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 282  : 		ios_base::iostate _State = ios_base::goodbit;

  00011	33 db		 xor	 ebx, ebx

; 283  : 		const sentry _Ok(*this);

  00013	56		 push	 esi
  00014	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00017	89 5d e8	 mov	 DWORD PTR __State$[ebp], ebx
  0001a	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0001f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 284  : 
; 285  : 		if (_Ok)

  00022	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00025	74 66		 je	 SHORT $LN14@operator@8

; 286  : 			{	// state okay, use facet to insert
; 287  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00027	8d 45 e4	 lea	 eax, DWORD PTR $T96200[ebp]
  0002a	50		 push	 eax
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00030	03 ce		 add	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00037	50		 push	 eax
  00038	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0003c	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00041	59		 pop	 ecx
  00042	8d 4d e4	 lea	 ecx, DWORD PTR $T96200[ebp]
  00045	8b f8		 mov	 edi, eax
  00047	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 288  : 			ios_base::fmtflags _Bfl =
; 289  : 				ios_base::flags() & ios_base::basefield;

  0004c	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 290  : 			long _Tmp = (_Bfl == ios_base::oct
; 291  : 				|| _Bfl == ios_base::hex)
; 292  : 				? (long)(unsigned int)_Val : (long)_Val;
; 293  : 
; 294  : 			_TRY_IO_BEGIN
; 295  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 296  : 				_Myios::fill(), _Tmp).failed())

  0004e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00051	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00054	8a 54 31 40	 mov	 dl, BYTE PTR [ecx+esi+64]
  00058	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  0005b	8b 4c 31 38	 mov	 ecx, DWORD PTR [ecx+esi+56]
  0005f	88 55 e0	 mov	 BYTE PTR $T96224[ebp], dl
  00062	ff 75 e0	 push	 DWORD PTR $T96224[ebp]
  00065	8b 17		 mov	 edx, DWORD PTR [edi]
  00067	03 c6		 add	 eax, esi
  00069	50		 push	 eax
  0006a	51		 push	 ecx
  0006b	88 5d d0	 mov	 BYTE PTR $T96205[ebp], bl
  0006e	ff 75 d0	 push	 DWORD PTR $T96205[ebp]
  00071	8d 45 d0	 lea	 eax, DWORD PTR $T96206[ebp]
  00074	50		 push	 eax
  00075	8b cf		 mov	 ecx, edi
  00077	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0007b	ff 52 1c	 call	 DWORD PTR [edx+28]
  0007e	38 5d d0	 cmp	 BYTE PTR $T96206[ebp], bl
  00081	74 07		 je	 SHORT $LN1@operator@8

; 297  : 				_State |= ios_base::badbit;

  00083	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN1@operator@8:
  0008a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
$LN14@operator@8:

; 299  : 			}
; 300  : 
; 301  : 		_Myios::setstate(_State);

  0008d	8b 06		 mov	 eax, DWORD PTR [esi]
  0008f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00092	53		 push	 ebx
  00093	ff 75 e8	 push	 DWORD PTR __State$[ebp]
  00096	03 ce		 add	 ecx, esi
  00098	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 302  : 		return (*this);

  0009d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  000a1	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000a4	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000a9	8b c6		 mov	 eax, esi

; 303  : 		}

  000ab	e8 00 00 00 00	 call	 __EH_epilog3
  000b0	c2 04 00	 ret	 4
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0:

; 298  : 			_CATCH_IO_END

  000b3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000bb	03 c1		 add	 eax, ecx
  000bd	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000c0	33 db		 xor	 ebx, ebx
  000c2	83 c9 04	 or	 ecx, 4
  000c5	39 58 38	 cmp	 DWORD PTR [eax+56], ebx
  000c8	75 03		 jne	 SHORT $LN37@operator@8
  000ca	83 c9 04	 or	 ecx, 4
$LN37@operator@8:
  000cd	83 e1 17	 and	 ecx, 23			; 00000017H
  000d0	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000d3	85 48 10	 test	 DWORD PTR [eax+16], ecx
  000d6	75 10		 jne	 SHORT $LN46@operator@8
  000d8	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  000db	b8 00 00 00 00	 mov	 eax, $LN15@operator@8
  000e0	c3		 ret	 0
$LN15@operator@8:
  000e1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000e4	33 db		 xor	 ebx, ebx
  000e6	eb a5		 jmp	 SHORT $LN14@operator@8
$LN46@operator@8:
  000e8	53		 push	 ebx
  000e9	53		 push	 ebx
  000ea	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN100@operator@8:
$LN99@operator@8:
  000ef	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T96200[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$13 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$13
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
_TEXT	SEGMENT
$T96555 = -48						; size = 8
$T96554 = -48						; size = 8
__Ok$ = -40						; size = 8
$T96569 = -32						; size = 1
$T96551 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 306  : 		{	// insert an unsigned int

  00000	6a 24		 push	 36			; 00000024H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 307  : 		ios_base::iostate _State = ios_base::goodbit;

  00011	33 db		 xor	 ebx, ebx

; 308  : 		const sentry _Ok(*this);

  00013	56		 push	 esi
  00014	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00017	89 5d e8	 mov	 DWORD PTR __State$[ebp], ebx
  0001a	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0001f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 309  : 
; 310  : 		if (_Ok)

  00022	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00025	74 66		 je	 SHORT $LN12@operator@9

; 311  : 			{	// state okay, use facet to insert
; 312  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00027	8d 45 e4	 lea	 eax, DWORD PTR $T96551[ebp]
  0002a	50		 push	 eax
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00030	03 ce		 add	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00037	50		 push	 eax
  00038	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0003c	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00041	59		 pop	 ecx
  00042	8d 4d e4	 lea	 ecx, DWORD PTR $T96551[ebp]
  00045	8b f8		 mov	 edi, eax
  00047	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 313  : 
; 314  : 			_TRY_IO_BEGIN
; 315  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 316  : 				_Myios::fill(), (unsigned long)_Val).failed())

  0004c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00051	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00054	8a 54 31 40	 mov	 dl, BYTE PTR [ecx+esi+64]
  00058	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  0005b	8b 4c 31 38	 mov	 ecx, DWORD PTR [ecx+esi+56]
  0005f	88 55 e0	 mov	 BYTE PTR $T96569[ebp], dl
  00062	ff 75 e0	 push	 DWORD PTR $T96569[ebp]
  00065	8b 17		 mov	 edx, DWORD PTR [edi]
  00067	03 c6		 add	 eax, esi
  00069	50		 push	 eax
  0006a	51		 push	 ecx
  0006b	88 5d d0	 mov	 BYTE PTR $T96554[ebp], bl
  0006e	ff 75 d0	 push	 DWORD PTR $T96554[ebp]
  00071	8d 45 d0	 lea	 eax, DWORD PTR $T96555[ebp]
  00074	50		 push	 eax
  00075	8b cf		 mov	 ecx, edi
  00077	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0007b	ff 52 18	 call	 DWORD PTR [edx+24]
  0007e	38 5d d0	 cmp	 BYTE PTR $T96555[ebp], bl
  00081	74 07		 je	 SHORT $LN1@operator@9

; 317  : 				_State |= ios_base::badbit;

  00083	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN1@operator@9:
  0008a	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
$LN12@operator@9:

; 319  : 			}
; 320  : 
; 321  : 		_Myios::setstate(_State);

  0008d	8b 06		 mov	 eax, DWORD PTR [esi]
  0008f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00092	53		 push	 ebx
  00093	ff 75 e8	 push	 DWORD PTR __State$[ebp]
  00096	03 ce		 add	 ecx, esi
  00098	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 322  : 		return (*this);

  0009d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  000a1	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000a4	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000a9	8b c6		 mov	 eax, esi

; 323  : 		}

  000ab	e8 00 00 00 00	 call	 __EH_epilog3
  000b0	c2 04 00	 ret	 4
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$0:

; 318  : 			_CATCH_IO_END

  000b3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000bb	03 c1		 add	 eax, ecx
  000bd	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000c0	33 db		 xor	 ebx, ebx
  000c2	83 c9 04	 or	 ecx, 4
  000c5	39 58 38	 cmp	 DWORD PTR [eax+56], ebx
  000c8	75 03		 jne	 SHORT $LN33@operator@9
  000ca	83 c9 04	 or	 ecx, 4
$LN33@operator@9:
  000cd	83 e1 17	 and	 ecx, 23			; 00000017H
  000d0	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000d3	85 48 10	 test	 DWORD PTR [eax+16], ecx
  000d6	75 10		 jne	 SHORT $LN42@operator@9
  000d8	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  000db	b8 00 00 00 00	 mov	 eax, $LN13@operator@9
  000e0	c3		 ret	 0
$LN13@operator@9:
  000e1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000e4	33 db		 xor	 ebx, ebx
  000e6	eb a5		 jmp	 SHORT $LN12@operator@9
$LN42@operator@9:
  000e8	53		 push	 ebx
  000e9	53		 push	 ebx
  000ea	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN96@operator@9:
$LN95@operator@9:
  000ef	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T96551[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z ; std::basic_ostream<char,std::char_traits<char> >::put
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\system_error
xdata$x	SEGMENT
__catchsym$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$0
__tryblocktable$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$12
__unwindtable$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
_TEXT	SEGMENT
__Ok$ = -32						; size = 8
_this$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ch$ = 8						; size = 1
?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::put, COMDAT
; _this$ = ecx

; 525  : 		{	// insert a character

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 526  : 		ios_base::iostate _State = ios_base::goodbit;

  00011	33 db		 xor	 ebx, ebx

; 527  : 		const sentry _Ok(*this);

  00013	56		 push	 esi
  00014	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00017	89 5d ec	 mov	 DWORD PTR __State$[ebp], ebx
  0001a	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0001f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 528  : 
; 529  : 		if (!_Ok)

  00022	38 5d e4	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00025	75 09		 jne	 SHORT $LN4@put

; 530  : 			_State |= ios_base::badbit;

  00027	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4

; 531  : 		else

  0002e	eb 59		 jmp	 SHORT $LN11@put
$LN4@put:

; 532  : 			{	// state okay, insert character
; 533  : 			_TRY_IO_BEGIN
; 534  : 			if (_Traits::eq_int_type(_Traits::eof(),
; 535  : 				_Myios::rdbuf()->sputc(_Ch)))

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00035	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00038	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  0003c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00040	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  00045	83 f8 ff	 cmp	 eax, -1
  00048	75 07		 jne	 SHORT $LN1@put

; 536  : 				_State |= ios_base::badbit;

  0004a	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN1@put:
  00051	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00054	eb 33		 jmp	 SHORT $LN11@put
__catch$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$0:

; 537  : 			_CATCH_IO_END

  00056	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005e	03 c1		 add	 eax, ecx
  00060	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00063	33 db		 xor	 ebx, ebx
  00065	83 c9 04	 or	 ecx, 4
  00068	39 58 38	 cmp	 DWORD PTR [eax+56], ebx
  0006b	75 03		 jne	 SHORT $LN27@put
  0006d	83 c9 04	 or	 ecx, 4
$LN27@put:
  00070	83 e1 17	 and	 ecx, 23			; 00000017H
  00073	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00076	85 48 10	 test	 DWORD PTR [eax+16], ecx
  00079	75 34		 jne	 SHORT $LN36@put
  0007b	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0007e	b8 00 00 00 00	 mov	 eax, $LN88@put
  00083	c3		 ret	 0
$LN88@put:
  00084	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00087	33 db		 xor	 ebx, ebx
$LN11@put:

; 538  : 			}
; 539  : 
; 540  : 		_Myios::setstate(_State);

  00089	8b 06		 mov	 eax, DWORD PTR [esi]
  0008b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008e	53		 push	 ebx
  0008f	ff 75 ec	 push	 DWORD PTR __State$[ebp]
  00092	03 ce		 add	 ecx, esi
  00094	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 541  : 		return (*this);

  00099	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  0009d	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000a0	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000a5	8b c6		 mov	 eax, esi

; 542  : 		}

  000a7	e8 00 00 00 00	 call	 __EH_epilog3
  000ac	c2 04 00	 ret	 4

; 537  : 			_CATCH_IO_END

$LN36@put:
  000af	53		 push	 ebx
  000b0	53		 push	 ebx
  000b1	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN91@put:
$LN90@put:
  000b6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::put
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 910  : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 911  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 912  : 		if (_Count != 0)
; 913  : 			_DEBUG_POINTER(_Ptr);
; 914  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 915  : 
; 916  : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	53		 push	 ebx
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 1c		 je	 SHORT $LN2@assign@2

; 917  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN7@assign@2
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN8@assign@2
$LN7@assign@2:
  0001e	8b c6		 mov	 eax, esi
$LN8@assign@2:
  00020	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00023	2b d8		 sub	 ebx, eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002e	eb 3f		 jmp	 SHORT $LN3@assign@2
$LN2@assign@2:
  00030	57		 push	 edi

; 918  : 
; 919  : 		if (_Grow(_Count))

  00031	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00034	6a 00		 push	 0
  00036	57		 push	 edi
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0003e	84 c0		 test	 al, al
  00040	74 2a		 je	 SHORT $LN21@assign@2

; 920  : 			{	// make room and assign new stuff
; 921  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

  00042	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00046	72 04		 jb	 SHORT $LN11@assign@2
  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	eb 02		 jmp	 SHORT $LN12@assign@2
$LN11@assign@2:
  0004c	8b c6		 mov	 eax, esi
$LN12@assign@2:
  0004e	57		 push	 edi
  0004f	53		 push	 ebx
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _memcpy
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 922  : 			_Eos(_Count);

  00059	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0005d	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00060	72 04		 jb	 SHORT $LN19@assign@2
  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	eb 02		 jmp	 SHORT $LN20@assign@2
$LN19@assign@2:
  00066	8b c6		 mov	 eax, esi
$LN20@assign@2:
  00068	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN21@assign@2:

; 923  : 			}
; 924  : 		return (*this);

  0006c	8b c6		 mov	 eax, esi
  0006e	5f		 pop	 edi
$LN3@assign@2:
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 925  : 		}

  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??_C@_01KGKMHCOC@e?$AA@				; `string'
PUBLIC	??_C@_01DDCIFGEA@E?$AA@				; `string'
PUBLIC	__Count$GSCopy$
PUBLIC	__Trailing$GSCopy$
PUBLIC	__Afterpoint$GSCopy$
PUBLIC	__Beforepoint$GSCopy$
PUBLIC	__Fill$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
EXTRN	_strcspn:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT ??_C@_01KGKMHCOC@e?$AA@
CONST	SEGMENT
??_C@_01KGKMHCOC@e?$AA@ DB 'e', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT
??_C@_01DDCIFGEA@E?$AA@ DB 'E', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$2
__ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -140				; size = 4
$T97501 = -136						; size = 8
$T97271 = -132						; size = 4
__Kseparator$ = -128					; size = 1
__Fill$GSCopy$ = -124					; size = 1
__Prefix$ = -120					; size = 4
$T97289 = -116						; size = 8
$T97280 = -116						; size = 8
$T97279 = -116						; size = 8
$T97278 = -116						; size = 8
$T97277 = -116						; size = 8
__Eptr$ = -112						; size = 4
$T97288 = -108						; size = 8
$T97287 = -108						; size = 8
$T97284 = -108						; size = 8
$T97283 = -108						; size = 8
$T97282 = -108						; size = 8
$T97484 = -104						; size = 1
__Punct_fac$ = -104					; size = 4
__Afterpoint$GSCopy$ = -100				; size = 4
__Enders$ = -96						; size = 3
__Beforepoint$GSCopy$ = -92				; size = 4
__Trailing$GSCopy$ = -88				; size = 4
_this$GSCopy$ = -84					; size = 4
__Count$GSCopy$ = -80					; size = 4
__Fillcount$ = -76					; size = 4
__Off$90333 = -76					; size = 4
__Pointptr$ = -76					; size = 4
__Grouping$ = -72					; size = 28
__Groupstring$ = -44					; size = 28
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Beforepoint$ = 36					; size = 4
__Afterpoint$ = 40					; size = 4
__Trailing$ = 44					; size = 4
__Count$ = 48						; size = 4
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput, COMDAT

; 1333 : 		{	// put formatted floating-point to _Dest

  00000	68 80 00 00 00	 push	 128			; 00000080H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 1445 : 		_Iosbase.width(0);
; 1446 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 7d 18	 mov	 edi, DWORD PTR __Iosbase$[ebp]
  00015	8b 75 20	 mov	 esi, DWORD PTR __Buf$[ebp]
  00018	89 45 ac	 mov	 DWORD PTR _this$GSCopy$[ebp], eax
  0001b	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	89 85 74 ff ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  00024	8a 45 1c	 mov	 al, BYTE PTR __Fill$[ebp]
  00027	88 45 84	 mov	 BYTE PTR __Fill$GSCopy$[ebp], al
  0002a	8b 45 24	 mov	 eax, DWORD PTR __Beforepoint$[ebp]
  0002d	89 45 a4	 mov	 DWORD PTR __Beforepoint$GSCopy$[ebp], eax
  00030	8b 45 28	 mov	 eax, DWORD PTR __Afterpoint$[ebp]
  00033	89 45 9c	 mov	 DWORD PTR __Afterpoint$GSCopy$[ebp], eax
  00036	8b 45 2c	 mov	 eax, DWORD PTR __Trailing$[ebp]
  00039	89 45 a8	 mov	 DWORD PTR __Trailing$GSCopy$[ebp], eax
  0003c	8b 45 30	 mov	 eax, DWORD PTR __Count$[ebp]
  0003f	89 45 b0	 mov	 DWORD PTR __Count$GSCopy$[ebp], eax
  00042	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR $T97271[ebp]
  00048	50		 push	 eax
  00049	8b cf		 mov	 ecx, edi
  0004b	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00050	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0005a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0005e	59		 pop	 ecx
  0005f	8b d8		 mov	 ebx, eax
  00061	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T97271[ebp]
  00067	89 5d 98	 mov	 DWORD PTR __Punct_fac$[ebp], ebx
  0006a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  0006f	8d 45 b8	 lea	 eax, DWORD PTR __Grouping$[ebp]
  00072	50		 push	 eax
  00073	8b cb		 mov	 ecx, ebx
  00075	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
  0007a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0007c	8b cb		 mov	 ecx, ebx
  0007e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00085	ff 50 08	 call	 DWORD PTR [eax+8]
  00088	33 db		 xor	 ebx, ebx
  0008a	88 45 80	 mov	 BYTE PTR __Kseparator$[ebp], al
  0008d	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH
  00094	89 5d e4	 mov	 DWORD PTR __Groupstring$[ebp+16], ebx
  00097	88 5d d4	 mov	 BYTE PTR __Groupstring$[ebp], bl
  0009a	8a 06		 mov	 al, BYTE PTR [esi]
  0009c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000a0	3c 2b		 cmp	 al, 43			; 0000002bH
  000a2	74 07		 je	 SHORT $LN19@Fput

; 1334 : 		_DEBUG_POINTER(_Dest);
; 1335 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);
; 1336 : 		const string _Grouping = _Punct_fac.grouping();
; 1337 : 		const _Elem _Kseparator = _Punct_fac.thousands_sep();
; 1338 : 		string _Groupstring;
; 1339 : 		const _Elem _E0 = _MAKLOCCHR(_Elem, '0', _Cvt);
; 1340 : 		size_t _Prefix = _Buf[0] == '+' || _Buf[0] == '-' ? 1 : 0;

  000a4	89 5d 88	 mov	 DWORD PTR __Prefix$[ebp], ebx
  000a7	3c 2d		 cmp	 al, 45			; 0000002dH
  000a9	75 07		 jne	 SHORT $LN20@Fput
$LN19@Fput:
  000ab	c7 45 88 01 00
	00 00		 mov	 DWORD PTR __Prefix$[ebp], 1
$LN20@Fput:

; 1341 : 
; 1342 : 		char _Enders[3];
; 1343 : 		_Enders[0] = _CSTD localeconv()->decimal_point[0];

  000b2	e8 00 00 00 00	 call	 _localeconv
  000b7	8b 00		 mov	 eax, DWORD PTR [eax]

; 1344 : 		_Enders[1] = 'e';
; 1345 : 		_Enders[2] = '\0';
; 1346 : 
; 1347 : 		const char *_Eptr = (const char *)_CSTD memchr(_Buf,
; 1348 : 			'e', _Count);	// find exponent

  000b9	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  000bc	8a 00		 mov	 al, BYTE PTR [eax]
  000be	6a 65		 push	 101			; 00000065H
  000c0	56		 push	 esi
  000c1	88 45 a0	 mov	 BYTE PTR __Enders$[ebp], al
  000c4	66 c7 45 a1 65
	00		 mov	 WORD PTR __Enders$[ebp+1], 101 ; 00000065H
  000ca	e8 00 00 00 00	 call	 _memchr

; 1349 : 		const char *_Pointptr = (const char *)_CSTD memchr(_Buf,
; 1350 : 			_Enders[0], _Count);	// find decimal point

  000cf	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  000d2	89 45 90	 mov	 DWORD PTR __Eptr$[ebp], eax
  000d5	0f be 45 a0	 movsx	 eax, BYTE PTR __Enders$[ebp]
  000d9	50		 push	 eax
  000da	56		 push	 esi
  000db	e8 00 00 00 00	 call	 _memchr
  000e0	83 c4 18	 add	 esp, 24			; 00000018H
  000e3	89 45 b4	 mov	 DWORD PTR __Pointptr$[ebp], eax

; 1351 : 		if (_Pointptr == 0)

  000e6	3b c3		 cmp	 eax, ebx
  000e8	75 03		 jne	 SHORT $LN16@Fput

; 1352 : 			_Trailing = 0;

  000ea	89 5d a8	 mov	 DWORD PTR __Trailing$GSCopy$[ebp], ebx
$LN16@Fput:

; 1353 : 
; 1354 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  000ed	83 7d cc 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  000f1	8b 45 b8	 mov	 eax, DWORD PTR __Grouping$[ebp]
  000f4	73 03		 jae	 SHORT $LN63@Fput
  000f6	8d 45 b8	 lea	 eax, DWORD PTR __Grouping$[ebp]
$LN63@Fput:
  000f9	80 38 7f	 cmp	 BYTE PTR [eax], 127	; 0000007fH
  000fc	0f 84 0b 01 00
	00		 je	 $LN88@Fput
  00102	83 7d cc 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  00106	8b 45 b8	 mov	 eax, DWORD PTR __Grouping$[ebp]
  00109	73 03		 jae	 SHORT $LN69@Fput
  0010b	8d 45 b8	 lea	 eax, DWORD PTR __Grouping$[ebp]
$LN69@Fput:
  0010e	80 38 00	 cmp	 BYTE PTR [eax], 0
  00111	0f 8e f6 00 00
	00		 jle	 $LN88@Fput

; 1355 : 			{	// grouping specified, add thousands separators
; 1356 : 			_Groupstring.append(_Buf, _Count);	// assemble field into string

  00117	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  0011a	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0011d	56		 push	 esi
  0011e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1357 : 			if (_Eptr == 0)

  00123	8b 45 90	 mov	 eax, DWORD PTR __Eptr$[ebp]
  00126	3b c3		 cmp	 eax, ebx
  00128	75 0f		 jne	 SHORT $LN14@Fput

; 1358 : 				_Groupstring.append(_Trailing, '0');

  0012a	6a 30		 push	 48			; 00000030H
  0012c	ff 75 a8	 push	 DWORD PTR __Trailing$GSCopy$[ebp]
  0012f	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00132	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1359 : 			else

  00137	eb 28		 jmp	 SHORT $LN13@Fput
$LN14@Fput:

; 1360 : 				{	/* dispose of any zeros before exponent */
; 1361 : 				if (_Pointptr == 0)

  00139	39 5d b4	 cmp	 DWORD PTR __Pointptr$[ebp], ebx
  0013c	75 13		 jne	 SHORT $LN12@Fput

; 1362 : 					{	/* no point but exponent, put scaling zeros */
; 1363 : 					_Groupstring.append(_Beforepoint, '0');

  0013e	6a 30		 push	 48			; 00000030H
  00140	ff 75 a4	 push	 DWORD PTR __Beforepoint$GSCopy$[ebp]
  00143	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00146	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1364 : 					_Beforepoint = 0;

  0014b	8b 45 90	 mov	 eax, DWORD PTR __Eptr$[ebp]
  0014e	89 5d a4	 mov	 DWORD PTR __Beforepoint$GSCopy$[ebp], ebx
$LN12@Fput:

; 1365 : 					}
; 1366 : 				_Groupstring.insert(_Eptr - _Buf, _Trailing, '0');

  00151	6a 30		 push	 48			; 00000030H
  00153	ff 75 a8	 push	 DWORD PTR __Trailing$GSCopy$[ebp]
  00156	2b c6		 sub	 eax, esi
  00158	50		 push	 eax
  00159	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0015c	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
$LN13@Fput:

; 1367 : 				}
; 1368 : 			_Trailing = 0;
; 1369 : 
; 1370 : 			if (_Pointptr == 0)
; 1371 : 				_Groupstring.append(_Beforepoint, '0');

  00161	6a 30		 push	 48			; 00000030H
  00163	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00166	39 5d b4	 cmp	 DWORD PTR __Pointptr$[ebp], ebx
  00169	75 0a		 jne	 SHORT $LN11@Fput
  0016b	ff 75 a4	 push	 DWORD PTR __Beforepoint$GSCopy$[ebp]
  0016e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1372 : 			else

  00173	eb 25		 jmp	 SHORT $LN10@Fput
$LN11@Fput:

; 1373 : 				{	// fill in zeros around decimal point
; 1374 : 				_Groupstring.insert(_Pointptr - _Buf + 1, _Afterpoint, '0');

  00175	8b 5d b4	 mov	 ebx, DWORD PTR __Pointptr$[ebp]
  00178	ff 75 9c	 push	 DWORD PTR __Afterpoint$GSCopy$[ebp]
  0017b	2b de		 sub	 ebx, esi
  0017d	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1375 : 				_Groupstring.insert(_Pointptr - _Buf, _Beforepoint, '0');

  00186	6a 30		 push	 48			; 00000030H
  00188	ff 75 a4	 push	 DWORD PTR __Beforepoint$GSCopy$[ebp]
  0018b	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0018e	53		 push	 ebx
  0018f	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1376 : 				_Afterpoint = 0;

  00194	83 65 9c 00	 and	 DWORD PTR __Afterpoint$GSCopy$[ebp], 0
  00198	33 db		 xor	 ebx, ebx
$LN10@Fput:

; 1377 : 				}
; 1378 : 			_Beforepoint = 0;
; 1379 : 
; 1380 : 			const char *_Pg = _Grouping.c_str();

  0019a	83 7d cc 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  0019e	8b 75 b8	 mov	 esi, DWORD PTR __Grouping$[ebp]
  001a1	89 5d a4	 mov	 DWORD PTR __Beforepoint$GSCopy$[ebp], ebx
  001a4	73 03		 jae	 SHORT $LN75@Fput
  001a6	8d 75 b8	 lea	 esi, DWORD PTR __Grouping$[ebp]
$LN75@Fput:

; 1381 : 			size_t _Off = _CSTD strcspn(&_Groupstring[0], &_Enders[0]);

  001a9	83 7d e8 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
  001ad	8b 45 d4	 mov	 eax, DWORD PTR __Groupstring$[ebp]
  001b0	73 03		 jae	 SHORT $LN81@Fput
  001b2	8d 45 d4	 lea	 eax, DWORD PTR __Groupstring$[ebp]
$LN81@Fput:
  001b5	8d 4d a0	 lea	 ecx, DWORD PTR __Enders$[ebp]
  001b8	51		 push	 ecx
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 _strcspn
  001bf	59		 pop	 ecx
  001c0	59		 pop	 ecx
  001c1	89 45 b4	 mov	 DWORD PTR __Off$90333[ebp], eax

; 1382 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1383 : 				&& (size_t)*_Pg < _Off - _Prefix)

  001c4	eb 2c		 jmp	 SHORT $LN7@Fput
$LN9@Fput:
  001c6	84 c0		 test	 al, al
  001c8	7e 2e		 jle	 SHORT $LN8@Fput
  001ca	8b 4d b4	 mov	 ecx, DWORD PTR __Off$90333[ebp]
  001cd	2b 4d 88	 sub	 ecx, DWORD PTR __Prefix$[ebp]
  001d0	0f be c0	 movsx	 eax, al
  001d3	3b c1		 cmp	 eax, ecx
  001d5	73 21		 jae	 SHORT $LN8@Fput

; 1384 : 				{	// add a NUL to mark thousands separator
; 1385 : 				_Groupstring.insert(_Off -= *_Pg, (size_t)1, '\0');

  001d7	29 45 b4	 sub	 DWORD PTR __Off$90333[ebp], eax
  001da	53		 push	 ebx
  001db	6a 01		 push	 1
  001dd	ff 75 b4	 push	 DWORD PTR __Off$90333[ebp]
  001e0	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  001e3	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1386 : 				if ('\0' < _Pg[1])

  001e8	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  001eb	80 38 00	 cmp	 BYTE PTR [eax], 0
  001ee	7e 02		 jle	 SHORT $LN7@Fput

; 1387 : 					++_Pg;	// not last group, advance

  001f0	8b f0		 mov	 esi, eax
$LN7@Fput:

; 1382 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1383 : 				&& (size_t)*_Pg < _Off - _Prefix)

  001f2	8a 06		 mov	 al, BYTE PTR [esi]
  001f4	3c 7f		 cmp	 al, 127			; 0000007fH
  001f6	75 ce		 jne	 SHORT $LN9@Fput
$LN8@Fput:

; 1388 : 				}
; 1389 : 
; 1390 : 			_Buf = &_Groupstring[0];

  001f8	83 7d e8 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
  001fc	8b 75 d4	 mov	 esi, DWORD PTR __Groupstring$[ebp]
  001ff	73 03		 jae	 SHORT $LN87@Fput
  00201	8d 75 d4	 lea	 esi, DWORD PTR __Groupstring$[ebp]
$LN87@Fput:

; 1391 : 			_Trailing = 0;
; 1392 : 			_Count = _Groupstring.size();

  00204	8b 45 e4	 mov	 eax, DWORD PTR __Groupstring$[ebp+16]
  00207	89 5d a8	 mov	 DWORD PTR __Trailing$GSCopy$[ebp], ebx
  0020a	89 45 b0	 mov	 DWORD PTR __Count$GSCopy$[ebp], eax
$LN88@Fput:

; 1393 : 			}
; 1394 : 
; 1395 : 		size_t _Fillcount = _Beforepoint + _Afterpoint + _Trailing + _Count;

  0020d	8b 45 a8	 mov	 eax, DWORD PTR __Trailing$GSCopy$[ebp]
  00210	03 45 b0	 add	 eax, DWORD PTR __Count$GSCopy$[ebp]

; 1396 : 		_Fillcount = _Iosbase.width() <= 0
; 1397 : 			|| (size_t)_Iosbase.width() <= _Fillcount
; 1398 : 				? 0 : (size_t)_Iosbase.width() - _Fillcount;

  00213	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  00216	03 45 9c	 add	 eax, DWORD PTR __Afterpoint$GSCopy$[ebp]
  00219	03 45 a4	 add	 eax, DWORD PTR __Beforepoint$GSCopy$[ebp]
  0021c	39 5f 24	 cmp	 DWORD PTR [edi+36], ebx
  0021f	7c 11		 jl	 SHORT $LN21@Fput
  00221	7f 04		 jg	 SHORT $LN125@Fput
  00223	3b cb		 cmp	 ecx, ebx
  00225	76 0b		 jbe	 SHORT $LN21@Fput
$LN125@Fput:
  00227	3b c8		 cmp	 ecx, eax
  00229	76 07		 jbe	 SHORT $LN21@Fput
  0022b	2b c8		 sub	 ecx, eax
  0022d	89 4d b4	 mov	 DWORD PTR __Fillcount$[ebp], ecx
  00230	eb 03		 jmp	 SHORT $LN22@Fput
$LN21@Fput:
  00232	89 5d b4	 mov	 DWORD PTR __Fillcount$[ebp], ebx
$LN22@Fput:

; 1399 : 		ios_base::fmtflags _Adjustfield =
; 1400 : 			_Iosbase.flags() & ios_base::adjustfield;

  00235	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00238	25 c0 01 00 00	 and	 eax, 448		; 000001c0H

; 1401 : 		if (_Adjustfield != ios_base::left
; 1402 : 			&& _Adjustfield != ios_base::internal)

  0023d	83 f8 40	 cmp	 eax, 64			; 00000040H
  00240	74 5c		 je	 SHORT $LN4@Fput
  00242	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H

; 1403 : 			{	// put leading fill
; 1404 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);
; 1405 : 			_Fillcount = 0;

  00247	75 2c		 jne	 SHORT $LN3@Fput

; 1406 : 			}
; 1407 : 		else if (_Adjustfield == ios_base::internal)
; 1408 : 			{	// put internal fill
; 1409 : 			if (0 < _Prefix)

  00249	39 5d 88	 cmp	 DWORD PTR __Prefix$[ebp], ebx
  0024c	76 27		 jbe	 SHORT $LN3@Fput

; 1410 : 				{	// but first put sign
; 1411 : 				_Dest = _Putc(_Dest, _Buf, 1);

  0024e	6a 01		 push	 1
  00250	56		 push	 esi
  00251	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00254	8d 45 8c	 lea	 eax, DWORD PTR $T97277[ebp]
  00257	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0025a	50		 push	 eax
  0025b	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  0025e	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  00263	8b 08		 mov	 ecx, DWORD PTR [eax]
  00265	83 c4 18	 add	 esp, 24			; 00000018H
  00268	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  0026b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1412 : 				++_Buf, --_Count;

  0026e	46		 inc	 esi
  0026f	ff 4d b0	 dec	 DWORD PTR __Count$GSCopy$[ebp]
  00272	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
$LN3@Fput:

; 1413 : 				}
; 1414 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00275	ff 75 b4	 push	 DWORD PTR __Fillcount$[ebp]
  00278	8d 45 8c	 lea	 eax, DWORD PTR $T97278[ebp]
  0027b	ff 75 84	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  0027e	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00281	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00284	50		 push	 eax
  00285	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  00288	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0028d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0028f	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00292	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1415 : 			_Fillcount = 0;

  00295	89 5d b4	 mov	 DWORD PTR __Fillcount$[ebp], ebx
  00298	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  0029b	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@Fput:

; 1416 : 			}
; 1417 : 
; 1418 : 		_Pointptr = (const char *)_CSTD memchr(_Buf,
; 1419 : 			_Enders[0], _Count);	// find decimal point again

  0029e	0f be 45 a0	 movsx	 eax, BYTE PTR __Enders$[ebp]
  002a2	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  002a5	50		 push	 eax
  002a6	56		 push	 esi
  002a7	e8 00 00 00 00	 call	 _memchr
  002ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1420 : 		if (_Pointptr != 0)

  002af	3b c3		 cmp	 eax, ebx
  002b1	0f 84 b3 00 00
	00		 je	 $LN2@Fput

; 1421 : 			{	// has decimal point, put pieces and zero fills
; 1422 : 			size_t _Fracoffset = _Pointptr - _Buf + 1;
; 1423 : 			_Dest = _Putgrouped(_Dest, _Buf, _Fracoffset - 1, _Kseparator);

  002b7	ff 75 80	 push	 DWORD PTR __Kseparator$[ebp]
  002ba	2b c6		 sub	 eax, esi
  002bc	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
  002bf	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  002c2	50		 push	 eax
  002c3	56		 push	 esi
  002c4	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  002c7	8d 45 8c	 lea	 eax, DWORD PTR $T97279[ebp]
  002ca	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  002cd	50		 push	 eax
  002ce	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  002d1	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  002d6	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1424 : 			_Dest = _Rep(_Dest, _E0, _Beforepoint);

  002d8	ff 75 a4	 push	 DWORD PTR __Beforepoint$GSCopy$[ebp]
  002db	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  002de	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002e1	6a 30		 push	 48			; 00000030H
  002e3	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  002e6	ff 70 04	 push	 DWORD PTR [eax+4]
  002e9	ff 30		 push	 DWORD PTR [eax]
  002eb	8d 45 8c	 lea	 eax, DWORD PTR $T97280[ebp]
  002ee	50		 push	 eax
  002ef	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  002f2	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  002f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f9	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  002fc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1425 : 			_Dest = _Rep(_Dest, _Punct_fac.decimal_point(), 1);

  002ff	8b 4d 98	 mov	 ecx, DWORD PTR __Punct_fac$[ebp]
  00302	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00305	8b 01		 mov	 eax, DWORD PTR [ecx]
  00307	83 c4 34	 add	 esp, 52			; 00000034H
  0030a	ff 50 04	 call	 DWORD PTR [eax+4]
  0030d	88 45 98	 mov	 BYTE PTR $T97484[ebp], al
  00310	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00313	ff 75 98	 push	 DWORD PTR $T97484[ebp]
  00316	89 85 78 ff ff
	ff		 mov	 DWORD PTR $T97501[ebp], eax
  0031c	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  0031f	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T97501[ebp]
  00325	89 85 7c ff ff
	ff		 mov	 DWORD PTR $T97501[ebp+4], eax
  0032b	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=

; 1426 : 			_Dest = _Rep(_Dest, _E0, _Afterpoint);

  00330	ff 75 9c	 push	 DWORD PTR __Afterpoint$GSCopy$[ebp]
  00333	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR $T97501[ebp+4]
  00339	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR $T97501[ebp]
  0033f	6a 30		 push	 48			; 00000030H
  00341	51		 push	 ecx
  00342	50		 push	 eax
  00343	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00346	8d 45 94	 lea	 eax, DWORD PTR $T97282[ebp]
  00349	50		 push	 eax
  0034a	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  0034d	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  00350	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00355	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1427 : 			_Buf += _Fracoffset, _Count -= _Fracoffset;

  00357	29 5d b0	 sub	 DWORD PTR __Count$GSCopy$[ebp], ebx
  0035a	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  0035d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00360	83 c4 18	 add	 esp, 24			; 00000018H
  00363	03 f3		 add	 esi, ebx
  00365	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00368	33 db		 xor	 ebx, ebx
$LN2@Fput:

; 1428 : 			}
; 1429 : 
; 1430 : 		_Eptr = (const char *)_CSTD memchr(_Buf,
; 1431 : 			'e', _Count);	// find exponent again

  0036a	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  0036d	6a 65		 push	 101			; 00000065H
  0036f	56		 push	 esi
  00370	e8 00 00 00 00	 call	 _memchr
  00375	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1432 : 		if (_Eptr != 0)

  00378	3b c3		 cmp	 eax, ebx
  0037a	0f 84 8b 00 00
	00		 je	 $LN1@Fput

; 1433 : 			{	// has exponent field, put it out
; 1434 : 			size_t _Expoffset = _Eptr - _Buf + 1;
; 1435 : 			_Dest = _Putgrouped(_Dest, _Buf, _Expoffset - 1, _Kseparator);

  00380	ff 75 80	 push	 DWORD PTR __Kseparator$[ebp]
  00383	2b c6		 sub	 eax, esi
  00385	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
  00388	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  0038b	50		 push	 eax
  0038c	56		 push	 esi
  0038d	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00390	8d 45 94	 lea	 eax, DWORD PTR $T97283[ebp]
  00393	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00396	50		 push	 eax
  00397	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  0039a	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  0039f	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1436 : 			_Dest = _Rep(_Dest, _E0, _Trailing), _Trailing = 0;

  003a1	ff 75 a8	 push	 DWORD PTR __Trailing$GSCopy$[ebp]
  003a4	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  003a7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003aa	6a 30		 push	 48			; 00000030H
  003ac	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  003af	ff 70 04	 push	 DWORD PTR [eax+4]
  003b2	ff 30		 push	 DWORD PTR [eax]
  003b4	8d 45 94	 lea	 eax, DWORD PTR $T97284[ebp]
  003b7	50		 push	 eax
  003b8	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  003bb	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  003c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c2	83 65 a8 00	 and	 DWORD PTR __Trailing$GSCopy$[ebp], 0
  003c6	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  003c9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003cc	83 c4 34	 add	 esp, 52			; 00000034H

; 1437 : 			_Dest = _Putc(_Dest, _Iosbase.flags() & ios_base::uppercase
; 1438 : 				? "E" : "e", 1);

  003cf	f6 47 14 04	 test	 BYTE PTR [edi+20], 4
  003d3	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  003d6	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01DDCIFGEA@E?$AA@
  003db	75 05		 jne	 SHORT $LN24@Fput
  003dd	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01KGKMHCOC@e?$AA@
$LN24@Fput:
  003e2	6a 01		 push	 1
  003e4	51		 push	 ecx
  003e5	ff 70 04	 push	 DWORD PTR [eax+4]
  003e8	ff 30		 push	 DWORD PTR [eax]
  003ea	8d 45 94	 lea	 eax, DWORD PTR $T97287[ebp]
  003ed	50		 push	 eax
  003ee	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  003f1	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  003f6	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1439 : 			_Buf += _Expoffset, _Count -= _Expoffset;

  003f8	29 5d b0	 sub	 DWORD PTR __Count$GSCopy$[ebp], ebx
  003fb	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  003fe	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00401	83 c4 18	 add	 esp, 24			; 00000018H
  00404	03 f3		 add	 esi, ebx
  00406	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00409	33 db		 xor	 ebx, ebx
$LN1@Fput:

; 1440 : 			}
; 1441 : 
; 1442 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1443 : 			_Kseparator);	// put leftover field

  0040b	ff 75 80	 push	 DWORD PTR __Kseparator$[ebp]
  0040e	8d 45 94	 lea	 eax, DWORD PTR $T97288[ebp]
  00411	ff 75 b0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  00414	56		 push	 esi
  00415	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00418	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0041b	50		 push	 eax
  0041c	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  0041f	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  00424	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1444 : 		_Dest = _Rep(_Dest, _E0, _Trailing);	// put trailing zeros

  00426	ff 75 a8	 push	 DWORD PTR __Trailing$GSCopy$[ebp]
  00429	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  0042c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0042f	6a 30		 push	 48			; 00000030H
  00431	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  00434	ff 70 04	 push	 DWORD PTR [eax+4]
  00437	ff 30		 push	 DWORD PTR [eax]
  00439	8d 45 8c	 lea	 eax, DWORD PTR $T97289[ebp]
  0043c	50		 push	 eax
  0043d	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  00440	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00445	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1445 : 		_Iosbase.width(0);
; 1446 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00447	ff 75 b4	 push	 DWORD PTR __Fillcount$[ebp]
  0044a	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  0044d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00450	ff 75 84	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00453	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00456	50		 push	 eax
  00457	51		 push	 ecx
  00458	ff b5 74 ff ff
	ff		 push	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0045e	89 5f 20	 mov	 DWORD PTR [edi+32], ebx
  00461	ff 75 ac	 push	 DWORD PTR _this$GSCopy$[ebp]
  00464	89 5f 24	 mov	 DWORD PTR [edi+36], ebx
  00467	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0046c	83 c4 4c	 add	 esp, 76			; 0000004cH
  0046f	53		 push	 ebx
  00470	6a 01		 push	 1
  00472	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00475	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0047a	53		 push	 ebx
  0047b	6a 01		 push	 1
  0047d	8d 4d b8	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  00480	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00485	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]

; 1447 : 		}

  0048b	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00490	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$0:
  00000	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T97271[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$1:
  0000b	8d 4d b8	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$2:
  00013	8d 4d d4	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 8a 70 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-144]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
PUBLIC	__Count$GSCopy$
PUBLIC	__Fill$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
EXTRN	_memmove_s:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1
__ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
_TEXT	SEGMENT
$T97560 = -88						; size = 4
__Punct_fac$ = -84					; size = 4
___$ReturnUdt$GSCopy$ = -80				; size = 4
$T97571 = -76						; size = 8
__Pg$90387 = -72					; size = 4
$T97570 = -68						; size = 8
$T97568 = -68						; size = 8
tv379 = -64						; size = 4
$T97635 = -64						; size = 1
__Fill$GSCopy$ = -60					; size = 1
_this$GSCopy$ = -56					; size = 4
__Prefix$ = -52						; size = 4
__Count$GSCopy$ = -48					; size = 4
__Grouping$ = -44					; size = 28
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput, COMDAT

; 1479 : 		{	// put formatted integer to _Dest

  00000	6a 4c		 push	 76			; 0000004cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 1527 : 		_Iosbase.width(0);
; 1528 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0000c	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 5d 18	 mov	 ebx, DWORD PTR __Iosbase$[ebp]
  00012	8b 7d 24	 mov	 edi, DWORD PTR __Count$[ebp]
  00015	8b 75 20	 mov	 esi, DWORD PTR __Buf$[ebp]
  00018	89 45 c8	 mov	 DWORD PTR _this$GSCopy$[ebp], eax
  0001b	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	89 45 b0	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  00021	8a 45 1c	 mov	 al, BYTE PTR __Fill$[ebp]
  00024	88 45 c4	 mov	 BYTE PTR __Fill$GSCopy$[ebp], al
  00027	8d 45 a8	 lea	 eax, DWORD PTR $T97560[ebp]
  0002a	50		 push	 eax
  0002b	8b cb		 mov	 ecx, ebx
  0002d	89 7d d0	 mov	 DWORD PTR __Count$GSCopy$[ebp], edi
  00030	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00035	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0003f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00043	59		 pop	 ecx
  00044	8d 4d a8	 lea	 ecx, DWORD PTR $T97560[ebp]
  00047	89 45 ac	 mov	 DWORD PTR __Punct_fac$[ebp], eax
  0004a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  0004f	8b 4d ac	 mov	 ecx, DWORD PTR __Punct_fac$[ebp]
  00052	8d 45 d4	 lea	 eax, DWORD PTR __Grouping$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
  0005b	8a 06		 mov	 al, BYTE PTR [esi]
  0005d	33 c9		 xor	 ecx, ecx
  0005f	41		 inc	 ecx
  00060	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ecx
  00063	3c 2b		 cmp	 al, 43			; 0000002bH
  00065	74 22		 je	 SHORT $LN10@Iput

; 1480 : 		_DEBUG_POINTER(_Dest);
; 1481 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);
; 1482 : 		const string _Grouping = _Punct_fac.grouping();
; 1483 : 		const size_t _Prefix = *_Buf == '+' || *_Buf == '-' ? 1
; 1484 : 			: *_Buf == '0' && (_Buf[1] == 'x' || _Buf[1] == 'X') ? 2
; 1485 : 			: 0;

  00067	3c 2d		 cmp	 al, 45			; 0000002dH
  00069	74 1e		 je	 SHORT $LN10@Iput
  0006b	3c 30		 cmp	 al, 48			; 00000030H
  0006d	75 14		 jne	 SHORT $LN12@Iput
  0006f	8a 46 01	 mov	 al, BYTE PTR [esi+1]
  00072	3c 78		 cmp	 al, 120			; 00000078H
  00074	74 04		 je	 SHORT $LN11@Iput
  00076	3c 58		 cmp	 al, 88			; 00000058H
  00078	75 09		 jne	 SHORT $LN12@Iput
$LN11@Iput:
  0007a	c7 45 cc 02 00
	00 00		 mov	 DWORD PTR __Prefix$[ebp], 2
  00081	eb 09		 jmp	 SHORT $LN14@Iput
$LN12@Iput:
  00083	83 65 cc 00	 and	 DWORD PTR __Prefix$[ebp], 0
  00087	eb 03		 jmp	 SHORT $LN14@Iput
$LN10@Iput:
  00089	89 4d cc	 mov	 DWORD PTR __Prefix$[ebp], ecx
$LN14@Iput:

; 1486 : 
; 1487 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  0008c	83 7d e8 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  00090	8b 4d d4	 mov	 ecx, DWORD PTR __Grouping$[ebp]
  00093	8b c1		 mov	 eax, ecx
  00095	73 03		 jae	 SHORT $LN24@Iput
  00097	8d 45 d4	 lea	 eax, DWORD PTR __Grouping$[ebp]
$LN24@Iput:
  0009a	80 38 7f	 cmp	 BYTE PTR [eax], 127	; 0000007fH
  0009d	74 6c		 je	 SHORT $LN5@Iput
  0009f	83 7d e8 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  000a3	8b c1		 mov	 eax, ecx
  000a5	73 03		 jae	 SHORT $LN30@Iput
  000a7	8d 45 d4	 lea	 eax, DWORD PTR __Grouping$[ebp]
$LN30@Iput:
  000aa	80 38 00	 cmp	 BYTE PTR [eax], 0
  000ad	7e 5c		 jle	 SHORT $LN5@Iput

; 1488 : 			{	// grouping specified, add thousands separators
; 1489 : 			const char *_Pg = _Grouping.c_str();

  000af	83 7d e8 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  000b3	72 05		 jb	 SHORT $LN35@Iput
  000b5	89 4d b8	 mov	 DWORD PTR __Pg$90387[ebp], ecx
  000b8	eb 48		 jmp	 SHORT $LN4@Iput
$LN35@Iput:
  000ba	8d 45 d4	 lea	 eax, DWORD PTR __Grouping$[ebp]

; 1490 : 			size_t _Off = _Count;
; 1491 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1492 : 				&& (size_t)*_Pg < _Off - _Prefix)

  000bd	eb 40		 jmp	 SHORT $LN59@Iput
$LL6@Iput:
  000bf	84 c0		 test	 al, al
  000c1	7e 48		 jle	 SHORT $LN5@Iput
  000c3	8b cf		 mov	 ecx, edi
  000c5	2b 4d cc	 sub	 ecx, DWORD PTR __Prefix$[ebp]
  000c8	0f be c0	 movsx	 eax, al
  000cb	3b c1		 cmp	 eax, ecx
  000cd	73 3c		 jae	 SHORT $LN5@Iput

; 1493 : 				{	// add a NUL to mark thousands separator
; 1494 : 				_Off -= *_Pg;

  000cf	2b f8		 sub	 edi, eax

; 1495 : 
; 1496 : 				__analysis_assume(_Count + 1 > _Off);
; 1497 : 				_CRT_SECURE_MEMMOVE(&_Buf[_Off + 1], _Count + 1 - _Off,

  000d1	8b 45 d0	 mov	 eax, DWORD PTR __Count$GSCopy$[ebp]
  000d4	2b c7		 sub	 eax, edi
  000d6	40		 inc	 eax
  000d7	50		 push	 eax
  000d8	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
  000db	51		 push	 ecx
  000dc	50		 push	 eax
  000dd	8d 44 3e 01	 lea	 eax, DWORD PTR [esi+edi+1]
  000e1	50		 push	 eax
  000e2	89 4d c0	 mov	 DWORD PTR tv379[ebp], ecx
  000e5	e8 00 00 00 00	 call	 _memmove_s

; 1498 : 					&_Buf[_Off], _Count + 1 - _Off);
; 1499 : 
; 1500 : 				_Buf[_Off] = '\0', ++_Count;

  000ea	8b 45 c0	 mov	 eax, DWORD PTR tv379[ebp]
  000ed	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1501 : 				if ('\0' < _Pg[1])

  000f0	8b 45 b8	 mov	 eax, DWORD PTR __Pg$90387[ebp]
  000f3	83 c4 10	 add	 esp, 16			; 00000010H
  000f6	ff 45 d0	 inc	 DWORD PTR __Count$GSCopy$[ebp]
  000f9	40		 inc	 eax
  000fa	80 38 00	 cmp	 BYTE PTR [eax], 0
  000fd	7e 03		 jle	 SHORT $LN4@Iput
$LN59@Iput:

; 1502 : 					++_Pg;	// not last group, advance

  000ff	89 45 b8	 mov	 DWORD PTR __Pg$90387[ebp], eax
$LN4@Iput:

; 1490 : 			size_t _Off = _Count;
; 1491 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1492 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00102	8b 45 b8	 mov	 eax, DWORD PTR __Pg$90387[ebp]
  00105	8a 00		 mov	 al, BYTE PTR [eax]
  00107	3c 7f		 cmp	 al, 127			; 0000007fH
  00109	75 b4		 jne	 SHORT $LL6@Iput
$LN5@Iput:

; 1503 : 				}
; 1504 : 			}
; 1505 : 
; 1506 : 		size_t _Fillcount = _Iosbase.width() <= 0
; 1507 : 			|| (size_t)_Iosbase.width() <= _Count
; 1508 : 				? 0 : (size_t)_Iosbase.width() - _Count;

  0010b	83 7b 24 00	 cmp	 DWORD PTR [ebx+36], 0
  0010f	8b 7b 20	 mov	 edi, DWORD PTR [ebx+32]
  00112	7c 10		 jl	 SHORT $LN15@Iput
  00114	7f 04		 jg	 SHORT $LN55@Iput
  00116	85 ff		 test	 edi, edi
  00118	74 0a		 je	 SHORT $LN15@Iput
$LN55@Iput:
  0011a	3b 7d d0	 cmp	 edi, DWORD PTR __Count$GSCopy$[ebp]
  0011d	76 05		 jbe	 SHORT $LN15@Iput
  0011f	2b 7d d0	 sub	 edi, DWORD PTR __Count$GSCopy$[ebp]
  00122	eb 02		 jmp	 SHORT $LN16@Iput
$LN15@Iput:
  00124	33 ff		 xor	 edi, edi
$LN16@Iput:

; 1509 : 
; 1510 : 		ios_base::fmtflags _Adjustfield =
; 1511 : 			_Iosbase.flags() & ios_base::adjustfield;

  00126	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00129	25 c0 01 00 00	 and	 eax, 448		; 000001c0H

; 1512 : 		if (_Adjustfield != ios_base::left
; 1513 : 			&& _Adjustfield != ios_base::internal)

  0012e	83 f8 40	 cmp	 eax, 64			; 00000040H
  00131	74 6e		 je	 SHORT $LN1@Iput
  00133	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H

; 1514 : 			{	// put leading fill
; 1515 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00138	8d 45 bc	 lea	 eax, DWORD PTR $T97568[ebp]
  0013b	74 18		 je	 SHORT $LN54@Iput
  0013d	57		 push	 edi
  0013e	ff 75 c4	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00141	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00144	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00147	50		 push	 eax
  00148	ff 75 c8	 push	 DWORD PTR _this$GSCopy$[ebp]
  0014b	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00150	83 c4 18	 add	 esp, 24			; 00000018H

; 1516 : 			_Fillcount = 0;

  00153	eb 3f		 jmp	 SHORT $LN60@Iput
$LN54@Iput:

; 1517 : 			}
; 1518 : 		else if (_Adjustfield == ios_base::internal)
; 1519 : 			{	// put internal fill
; 1520 : 			_Dest = _Putc(_Dest, _Buf, _Prefix);	// put prefix

  00155	ff 75 cc	 push	 DWORD PTR __Prefix$[ebp]
  00158	56		 push	 esi
  00159	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  0015c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0015f	50		 push	 eax
  00160	ff 75 c8	 push	 DWORD PTR _this$GSCopy$[ebp]
  00163	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  00168	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1521 : 			_Buf += _Prefix, _Count -= _Prefix;

  0016a	03 75 cc	 add	 esi, DWORD PTR __Prefix$[ebp]

; 1522 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount), _Fillcount = 0;

  0016d	57		 push	 edi
  0016e	ff 75 c4	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00171	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00174	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00177	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  0017a	ff 70 04	 push	 DWORD PTR [eax+4]
  0017d	8b 4d cc	 mov	 ecx, DWORD PTR __Prefix$[ebp]
  00180	ff 30		 push	 DWORD PTR [eax]
  00182	29 4d d0	 sub	 DWORD PTR __Count$GSCopy$[ebp], ecx
  00185	8d 45 bc	 lea	 eax, DWORD PTR $T97570[ebp]
  00188	50		 push	 eax
  00189	ff 75 c8	 push	 DWORD PTR _this$GSCopy$[ebp]
  0018c	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00191	83 c4 30	 add	 esp, 48			; 00000030H
$LN60@Iput:
  00194	8b 08		 mov	 ecx, DWORD PTR [eax]
  00196	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00199	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019c	33 ff		 xor	 edi, edi
  0019e	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
$LN1@Iput:

; 1523 : 			}
; 1524 : 
; 1525 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1526 : 			_Punct_fac.thousands_sep());	// put field

  001a1	8b 4d ac	 mov	 ecx, DWORD PTR __Punct_fac$[ebp]
  001a4	8b 01		 mov	 eax, DWORD PTR [ecx]
  001a6	ff 50 08	 call	 DWORD PTR [eax+8]
  001a9	88 45 c0	 mov	 BYTE PTR $T97635[ebp], al
  001ac	ff 75 c0	 push	 DWORD PTR $T97635[ebp]
  001af	8d 45 b4	 lea	 eax, DWORD PTR $T97571[ebp]
  001b2	ff 75 d0	 push	 DWORD PTR __Count$GSCopy$[ebp]
  001b5	56		 push	 esi
  001b6	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  001b9	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  001bc	50		 push	 eax
  001bd	ff 75 c8	 push	 DWORD PTR _this$GSCopy$[ebp]
  001c0	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  001c5	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1527 : 		_Iosbase.width(0);
; 1528 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  001c7	57		 push	 edi
  001c8	ff 75 c4	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  001cb	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  001ce	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001d1	50		 push	 eax
  001d2	51		 push	 ecx
  001d3	ff 75 b0	 push	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  001d6	33 f6		 xor	 esi, esi
  001d8	ff 75 c8	 push	 DWORD PTR _this$GSCopy$[ebp]
  001db	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  001de	89 73 20	 mov	 DWORD PTR [ebx+32], esi
  001e1	89 73 24	 mov	 DWORD PTR [ebx+36], esi
  001e4	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  001e9	83 c4 34	 add	 esp, 52			; 00000034H
  001ec	56		 push	 esi
  001ed	6a 01		 push	 1
  001ef	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  001f2	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  001f7	8b 45 b0	 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]

; 1529 : 		}

  001fa	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001ff	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR $T97560[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 886  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 887  : 		return (assign(_Right, 0, npos));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 888  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@E@Z ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@E@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
__Ch$ = 12						; size = 1
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@E@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 960  : 	{	// insert an unsigned char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 962  : 	}

  00003	5d		 pop	 ebp

; 961  : 	return (_Ostr << (char)_Ch);

  00004	e9 00 00 00 00	 jmp	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@E@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
; Function compile flags: /Ogsp
;	COMDAT ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z PROC ; std::endl, COMDAT

; 1004 : 	{	// insert newline and flush byte stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1005 : 	_Ostr.put('\n');

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00006	6a 0a		 push	 10			; 0000000aH
  00008	e8 00 00 00 00	 call	 ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z ; std::basic_ostream<char,std::char_traits<char> >::put

; 1006 : 	_Ostr.flush();

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00010	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush

; 1007 : 	return (_Ostr);

  00015	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 1008 : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ENDP ; std::endl
_TEXT	ENDS
PUBLIC	??_C@_0BF@BOBNKKNJ@bad?5address?5family?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BD@EJJLEJHM@ipv6?5not?5supported?$AA@	; `string'
PUBLIC	??_C@_0BJ@MAINBDAO@hdrLen?5wrong?5for?5Address?$AA@ ; `string'
EXTRN	?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE ; std::clog
;	COMDAT ??_C@_0BF@BOBNKKNJ@bad?5address?5family?3?5?$AA@
CONST	SEGMENT
??_C@_0BF@BOBNKKNJ@bad?5address?5family?3?5?$AA@ DB 'bad address family: '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EJJLEJHM@ipv6?5not?5supported?$AA@
CONST	SEGMENT
??_C@_0BD@EJJLEJHM@ipv6?5not?5supported?$AA@ DB 'ipv6 not supported', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MAINBDAO@hdrLen?5wrong?5for?5Address?$AA@
CONST	SEGMENT
??_C@_0BJ@MAINBDAO@hdrLen?5wrong?5for?5Address?$AA@ DB 'hdrLen wrong for '
	DB	'Address', 00H				; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\stun.cpp
CONST	ENDS
;	COMDAT ?stunParseAtrAddress@@YA_NPADIAAUStunAtrAddress4@@@Z
_TEXT	SEGMENT
_naddr$86912 = -4					; size = 4
$T97689 = 8						; size = 1
_nport$86911 = 8					; size = 2
_hdrLen$ = 8						; size = 4
?stunParseAtrAddress@@YA_NPADIAAUStunAtrAddress4@@@Z PROC ; stunParseAtrAddress, COMDAT
; _body$ = eax
; _result$ = esi

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 52   :    if ( hdrLen != 8 )

  00004	83 7d 08 08	 cmp	 DWORD PTR _hdrLen$[ebp], 8
  00008	57		 push	 edi
  00009	8b f8		 mov	 edi, eax
  0000b	74 07		 je	 SHORT $LN5@stunParseA@2

; 53   :    {
; 54   :       clog << "hdrLen wrong for Address" <<endl;

  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@MAINBDAO@hdrLen?5wrong?5for?5Address?$AA@

; 55   :       return false;

  00012	eb 58		 jmp	 SHORT $LN16@stunParseA@2
$LN5@stunParseA@2:

; 56   :    }
; 57   :    result.pad = *body++;

  00014	8a 07		 mov	 al, BYTE PTR [edi]
  00016	88 06		 mov	 BYTE PTR [esi], al

; 58   :    result.family = *body++;

  00018	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  0001b	83 c7 02	 add	 edi, 2
  0001e	88 46 01	 mov	 BYTE PTR [esi+1], al

; 59   :    if (result.family == IPv4Family)

  00021	3c 01		 cmp	 al, 1
  00023	75 3e		 jne	 SHORT $LN4@stunParseA@2

; 60   :    {
; 61   :       UInt16 nport;
; 62   :       memcpy(&nport, body, 2); body+=2;

  00025	6a 02		 push	 2
  00027	8d 45 08	 lea	 eax, DWORD PTR _nport$86911[ebp]
  0002a	57		 push	 edi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _memcpy
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 63   :       result.ipv4.port = ntohs(nport);

  00034	ff 75 08	 push	 DWORD PTR _nport$86911[ebp]
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ntohs@4

; 64   : 		
; 65   :       UInt32 naddr;
; 66   :       memcpy(&naddr, body, 4); body+=4;

  0003d	6a 04		 push	 4
  0003f	66 89 46 02	 mov	 WORD PTR [esi+2], ax
  00043	83 c7 02	 add	 edi, 2
  00046	8d 45 fc	 lea	 eax, DWORD PTR _naddr$86912[ebp]
  00049	57		 push	 edi
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _memcpy
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH

; 67   :       result.ipv4.addr = ntohl(naddr);

  00053	ff 75 fc	 push	 DWORD PTR _naddr$86912[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ntohl@4
  0005c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 68   :       return true;

  0005f	b0 01		 mov	 al, 1
  00061	eb 44		 jmp	 SHORT $LN6@stunParseA@2
$LN4@stunParseA@2:

; 69   :    }
; 70   :    else if (result.family == IPv6Family)

  00063	3c 02		 cmp	 al, 2
  00065	75 1a		 jne	 SHORT $LN2@stunParseA@2

; 71   :    {
; 72   :       clog << "ipv6 not supported" << endl;

  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EJJLEJHM@ipv6?5not?5supported?$AA@
$LN16@stunParseA@2:
  0006c	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00071	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 73   :    }
; 74   :    else

  0007f	eb 24		 jmp	 SHORT $LN14@stunParseA@2
$LN2@stunParseA@2:

; 75   :    {
; 76   :       clog << "bad address family: " << result.family << endl;

  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BOBNKKNJ@bad?5address?5family?3?5?$AA@
  00086	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  0008b	88 45 08	 mov	 BYTE PTR $T97689[ebp], al
  0008e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00093	ff 75 08	 push	 DWORD PTR $T97689[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  000a2	83 c4 14	 add	 esp, 20			; 00000014H
$LN14@stunParseA@2:

; 77   :    }
; 78   : 	
; 79   :    return false;

  000a5	32 c0		 xor	 al, al
$LN6@stunParseA@2:
  000a7	5f		 pop	 edi

; 80   : }

  000a8	c9		 leave
  000a9	c3		 ret	 0
?stunParseAtrAddress@@YA_NPADIAAUStunAtrAddress4@@@Z ENDP ; stunParseAtrAddress
_TEXT	ENDS
PUBLIC	??_C@_0CB@NBKKIHAO@Incorrect?5size?5for?5ChangeRequest@ ; `string'
PUBLIC	??_C@_0O@GHMMFJKA@hdr?5length?5?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0M@INIEAFNA@?5expecting?5?$AA@		; `string'
;	COMDAT ??_C@_0CB@NBKKIHAO@Incorrect?5size?5for?5ChangeRequest@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
CONST	SEGMENT
??_C@_0CB@NBKKIHAO@Incorrect?5size?5for?5ChangeRequest@ DB 'Incorrect siz'
	DB	'e for ChangeRequest', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GHMMFJKA@hdr?5length?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0O@GHMMFJKA@hdr?5length?5?$DN?5?$AA@ DB 'hdr length = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@INIEAFNA@?5expecting?5?$AA@
CONST	SEGMENT
??_C@_0M@INIEAFNA@?5expecting?5?$AA@ DB ' expecting ', 00H ; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\stun.cpp
CONST	ENDS
;	COMDAT ?stunParseAtrChangeRequest@@YA_NPADIAAUStunAtrChangeRequest@@@Z
_TEXT	SEGMENT
_body$ = 8						; size = 4
_hdrLen$ = 12						; size = 4
?stunParseAtrChangeRequest@@YA_NPADIAAUStunAtrChangeRequest@@@Z PROC ; stunParseAtrChangeRequest, COMDAT
; _result$ = eax

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 85   :    if ( hdrLen != 4 )

  00003	83 7d 0c 04	 cmp	 DWORD PTR _hdrLen$[ebp], 4
  00007	56		 push	 esi
  00008	8b f0		 mov	 esi, eax

; 86   :    {
; 87   :       clog << "hdr length = " << hdrLen << " expecting " << sizeof(result) << endl;

  0000a	6a 04		 push	 4
  0000c	74 50		 je	 SHORT $LN2@stunParseA@3
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@INIEAFNA@?5expecting?5?$AA@
  00013	ff 75 0c	 push	 DWORD PTR _hdrLen$[ebp]
  00016	be 00 00 00 00	 mov	 esi, OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GHMMFJKA@hdr?5length?5?$DN?5?$AA@
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00026	59		 pop	 ecx
  00027	59		 pop	 ecx
  00028	8b c8		 mov	 ecx, eax
  0002a	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00035	59		 pop	 ecx
  00036	59		 pop	 ecx
  00037	8b c8		 mov	 ecx, eax
  00039	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl

; 88   : 		
; 89   :       clog << "Incorrect size for ChangeRequest" << endl;

  00044	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET ??_C@_0CB@NBKKIHAO@Incorrect?5size?5for?5ChangeRequest@
  0004b	56		 push	 esi
  0004c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 90   :       return false;

  0005a	32 c0		 xor	 al, al
  0005c	eb 18		 jmp	 SHORT $LN1@stunParseA@3
$LN2@stunParseA@3:

; 91   :    }
; 92   :    else
; 93   :    {
; 94   :       memcpy(&result.value, body, 4);

  0005e	ff 75 08	 push	 DWORD PTR _body$[ebp]
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 _memcpy
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH

; 95   :       result.value = ntohl(result.value);

  0006a	ff 36		 push	 DWORD PTR [esi]
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ntohl@4
  00072	89 06		 mov	 DWORD PTR [esi], eax

; 96   :       return true;

  00074	b0 01		 mov	 al, 1
$LN1@stunParseA@3:
  00076	5e		 pop	 esi

; 97   :    }
; 98   : }

  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
?stunParseAtrChangeRequest@@YA_NPADIAAUStunAtrChangeRequest@@@Z ENDP ; stunParseAtrChangeRequest
_TEXT	ENDS
PUBLIC	??_C@_0BI@GPGGKNLD@head?5on?5Error?5too?5large?$AA@ ; `string'
;	COMDAT ??_C@_0BI@GPGGKNLD@head?5on?5Error?5too?5large?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
CONST	SEGMENT
??_C@_0BI@GPGGKNLD@head?5on?5Error?5too?5large?$AA@ DB 'head on Error too'
	DB	' large', 00H				; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\stun.cpp
CONST	ENDS
;	COMDAT ?stunParseAtrError@@YA_NPADIAAUStunAtrError@@@Z
_TEXT	SEGMENT
?stunParseAtrError@@YA_NPADIAAUStunAtrError@@@Z PROC	; stunParseAtrError, COMDAT
; _body$ = ecx
; _hdrLen$ = eax
; _result$ = esi

; 102  : {

  00000	53		 push	 ebx
  00001	8b d8		 mov	 ebx, eax
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 103  :    if ( hdrLen >= sizeof(result) )

  00006	81 fb 06 01 00
	00		 cmp	 ebx, 262		; 00000106H
  0000c	72 1c		 jb	 SHORT $LN2@stunParseA@4

; 104  :    {
; 105  :       clog << "head on Error too large" << endl;

  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GPGGKNLD@head?5on?5Error?5too?5large?$AA@
  00013	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00018	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 106  :       return false;

  00026	32 c0		 xor	 al, al
  00028	eb 51		 jmp	 SHORT $LN1@stunParseA@4
$LN2@stunParseA@4:

; 107  :    }
; 108  :    else
; 109  :    {
; 110  :       memcpy(&result.pad, body, 2); body+=2;

  0002a	6a 02		 push	 2
  0002c	57		 push	 edi
  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 _memcpy

; 111  :       result.pad = ntohs(result.pad);

  00033	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
  00039	50		 push	 eax
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ntohs@4
  00040	66 89 06	 mov	 WORD PTR [esi], ax

; 112  :       result.errorClass = *body++;

  00043	8a 47 02	 mov	 al, BYTE PTR [edi+2]
  00046	88 46 02	 mov	 BYTE PTR [esi+2], al

; 113  :       result.number = *body++;

  00049	8a 47 03	 mov	 al, BYTE PTR [edi+3]
  0004c	88 46 03	 mov	 BYTE PTR [esi+3], al

; 114  : 		
; 115  :       result.sizeReason = hdrLen - 4;

  0004f	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  00052	66 89 86 04 01
	00 00		 mov	 WORD PTR [esi+260], ax

; 116  :       memcpy(&result.reason, body, result.sizeReason);

  00059	0f b7 c0	 movzx	 eax, ax
  0005c	50		 push	 eax
  0005d	83 c7 04	 add	 edi, 4
  00060	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00063	57		 push	 edi
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _memcpy

; 117  :       result.reason[result.sizeReason] = 0;

  0006a	0f b7 86 04 01
	00 00		 movzx	 eax, WORD PTR [esi+260]
  00071	c6 44 30 04 00	 mov	 BYTE PTR [eax+esi+4], 0
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 118  :       return true;

  00079	b0 01		 mov	 al, 1
$LN1@stunParseA@4:

; 119  :    }
; 120  : }

  0007b	5f		 pop	 edi
  0007c	5b		 pop	 ebx
  0007d	c3		 ret	 0
?stunParseAtrError@@YA_NPADIAAUStunAtrError@@@Z ENDP	; stunParseAtrError
_TEXT	ENDS
PUBLIC	??_C@_0BD@EBIFLCLC@Bad?5length?5string?5?$AA@	; `string'
PUBLIC	??_C@_0BE@GBAMLMLP@String?5is?5too?5large?$AA@	; `string'
;	COMDAT ??_C@_0BD@EBIFLCLC@Bad?5length?5string?5?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
CONST	SEGMENT
??_C@_0BD@EBIFLCLC@Bad?5length?5string?5?$AA@ DB 'Bad length string ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GBAMLMLP@String?5is?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BE@GBAMLMLP@String?5is?5too?5large?$AA@ DB 'String is too large', 00H ; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\stun.cpp
CONST	ENDS
;	COMDAT ?stunParseAtrString@@YA_NPADIAAUStunAtrString@@@Z
_TEXT	SEGMENT
_body$ = 8						; size = 4
?stunParseAtrString@@YA_NPADIAAUStunAtrString@@@Z PROC	; stunParseAtrString, COMDAT
; _hdrLen$ = ebx
; _result$ = esi

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 146  :    if ( hdrLen >= STUN_MAX_STRING )

  00003	81 fb 00 01 00
	00		 cmp	 ebx, 256		; 00000100H
  00009	72 1c		 jb	 SHORT $LN3@stunParseA@5

; 147  :    {
; 148  :       clog << "String is too large" << endl;

  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GBAMLMLP@String?5is?5too?5large?$AA@
  00010	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00015	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@stunParseA@5:

; 149  :       return false;

  00023	32 c0		 xor	 al, al

; 163  :    }
; 164  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN3@stunParseA@5:

; 150  :    }
; 151  :    else
; 152  :    {
; 153  :       if (hdrLen % 4 != 0)
; 154  :       {
; 155  :          clog << "Bad length string " << hdrLen << endl;

  00027	53		 push	 ebx
  00028	f6 c3 03	 test	 bl, 3
  0002b	74 21		 je	 SHORT $LN1@stunParseA@5
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EBIFLCLC@Bad?5length?5string?5?$AA@
  00032	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00037	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0003c	59		 pop	 ecx
  0003d	59		 pop	 ecx
  0003e	8b c8		 mov	 ecx, eax
  00040	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0004b	59		 pop	 ecx

; 156  :          return false;

  0004c	eb d5		 jmp	 SHORT $LN10@stunParseA@5
$LN1@stunParseA@5:

; 157  :       }
; 158  : 		
; 159  :       result.sizeValue = hdrLen;
; 160  :       memcpy(&result.value, body, hdrLen);

  0004e	ff 75 08	 push	 DWORD PTR _body$[ebp]
  00051	66 89 9e 00 01
	00 00		 mov	 WORD PTR [esi+256], bx
  00058	56		 push	 esi
  00059	e8 00 00 00 00	 call	 _memcpy
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 161  :       result.value[hdrLen] = 0;

  00061	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0

; 162  :       return true;

  00065	b0 01		 mov	 al, 1

; 163  :    }
; 164  : }

  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?stunParseAtrString@@YA_NPADIAAUStunAtrString@@@Z ENDP	; stunParseAtrString
_TEXT	ENDS
PUBLIC	??_C@_0CC@FMJFMHNK@MessageIntegrity?5must?5be?520?5byte@ ; `string'
;	COMDAT ??_C@_0CC@FMJFMHNK@MessageIntegrity?5must?5be?520?5byte@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
CONST	SEGMENT
??_C@_0CC@FMJFMHNK@MessageIntegrity?5must?5be?520?5byte@ DB 'MessageInteg'
	DB	'rity must be 20 bytes', 00H			; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\stun.cpp
CONST	ENDS
;	COMDAT ?stunParseAtrIntegrity@@YA_NPADIAAUStunAtrIntegrity@@@Z
_TEXT	SEGMENT
_body$ = 8						; size = 4
_hdrLen$ = 12						; size = 4
_result$ = 16						; size = 4
?stunParseAtrIntegrity@@YA_NPADIAAUStunAtrIntegrity@@@Z PROC ; stunParseAtrIntegrity, COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  :    if ( hdrLen != 20)

  00003	83 7d 0c 14	 cmp	 DWORD PTR _hdrLen$[ebp], 20 ; 00000014H
  00007	74 1c		 je	 SHORT $LN2@stunParseA@6

; 171  :    {
; 172  :       clog << "MessageIntegrity must be 20 bytes" << endl;

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FMJFMHNK@MessageIntegrity?5must?5be?520?5byte@
  0000e	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00013	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 173  :       return false;

  00021	32 c0		 xor	 al, al

; 179  :    }
; 180  : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
$LN2@stunParseA@6:

; 174  :    }
; 175  :    else
; 176  :    {
; 177  :       memcpy(&result.hash, body, hdrLen);

  00025	6a 14		 push	 20			; 00000014H
  00027	ff 75 08	 push	 DWORD PTR _body$[ebp]
  0002a	ff 75 10	 push	 DWORD PTR _result$[ebp]
  0002d	e8 00 00 00 00	 call	 _memcpy
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 178  :       return true;

  00035	b0 01		 mov	 al, 1

; 179  :    }
; 180  : }

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?stunParseAtrIntegrity@@YA_NPADIAAUStunAtrIntegrity@@@Z ENDP ; stunParseAtrIntegrity
_TEXT	ENDS
PUBLIC	??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUUInt128@@@Z ; operator<<
; Function compile flags: /Ogsp
;	COMDAT ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUUInt128@@@Z
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_r$ = 12						; size = 4
??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUUInt128@@@Z PROC ; operator<<, COMDAT

; 820  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 821  :    strm << int(r.octet[0]);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _r$[ebp]
  0000b	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 822  :    for ( int i=1; i<16; i++ )

  00014	33 f6		 xor	 esi, esi
  00016	46		 inc	 esi
$LL3@operator@10:

; 823  :    {
; 824  :       strm << ':' << int(r.octet[i]);

  00017	0f b6 04 3e	 movzx	 eax, BYTE PTR [esi+edi]
  0001b	50		 push	 eax
  0001c	6a 3a		 push	 58			; 0000003aH
  0001e	ff 75 08	 push	 DWORD PTR _strm$[ebp]
  00021	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00026	59		 pop	 ecx
  00027	59		 pop	 ecx
  00028	8b c8		 mov	 ecx, eax
  0002a	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0002f	46		 inc	 esi
  00030	83 fe 10	 cmp	 esi, 16			; 00000010H
  00033	7c e2		 jl	 SHORT $LL3@operator@10

; 825  :    }
; 826  :     
; 827  :    return strm;

  00035	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi

; 828  : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUUInt128@@@Z ENDP ; operator<<
_TEXT	ENDS
PUBLIC	??_C@_01JLIPDDHJ@?3?$AA@			; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
;	COMDAT ??_C@_01JLIPDDHJ@?3?$AA@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3?$AA@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_addr$ = 12						; size = 4
??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z PROC ; operator<<, COMDAT

; 832  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 833  :    UInt32 ip = addr.addr;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _addr$[ebp]

; 834  :    strm << ((int)(ip>>24)&0xFF) << ".";

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 70 02	 mov	 esi, DWORD PTR [eax+2]
  0000e	57		 push	 edi
  0000f	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_01LFCBOECM@?4?$AA@
  00014	8b c6		 mov	 eax, esi
  00016	53		 push	 ebx
  00017	c1 e8 18	 shr	 eax, 24			; 00000018H
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00026	59		 pop	 ecx
  00027	59		 pop	 ecx

; 835  :    strm << ((int)(ip>>16)&0xFF) << ".";

  00028	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0002b	8b c6		 mov	 eax, esi
  0002d	c1 e8 10	 shr	 eax, 16			; 00000010H
  00030	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  00035	53		 push	 ebx
  00036	23 c7		 and	 eax, edi
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00044	59		 pop	 ecx
  00045	59		 pop	 ecx

; 836  :    strm << ((int)(ip>> 8)&0xFF) << ".";

  00046	8b c6		 mov	 eax, esi
  00048	53		 push	 ebx
  00049	8b 5d 08	 mov	 ebx, DWORD PTR _strm$[ebp]
  0004c	c1 e8 08	 shr	 eax, 8
  0004f	23 c7		 and	 eax, edi
  00051	50		 push	 eax
  00052	8b cb		 mov	 ecx, ebx
  00054	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx

; 837  :    strm << ((int)(ip>> 0)&0xFF) ;

  00061	23 f7		 and	 esi, edi
  00063	56		 push	 esi
  00064	8b cb		 mov	 ecx, ebx
  00066	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 838  : 	
; 839  :    strm << ":" << addr.port;

  0006b	8b 45 0c	 mov	 eax, DWORD PTR _addr$[ebp]
  0006e	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
  00077	53		 push	 ebx
  00078	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0007d	59		 pop	 ecx
  0007e	59		 pop	 ecx
  0007f	8b c8		 mov	 ecx, eax
  00081	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi

; 840  : 	
; 841  :    return strm;

  00088	8b c3		 mov	 eax, ebx
  0008a	5b		 pop	 ebx

; 842  : }

  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ENDP ; operator<<
_TEXT	ENDS
PUBLIC	??_C@_0M@EHNBPAMO@Can?8t?5open?5?$AA@		; `string'
PUBLIC	?stunInitServer@@YA_NAAUStunServerInfo@@ABUStunAddress4@@1H_N@Z ; stunInitServer
EXTRN	?openPort@@YAIGI_N@Z:PROC			; openPort
;	COMDAT ??_C@_0M@EHNBPAMO@Can?8t?5open?5?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
CONST	SEGMENT
??_C@_0M@EHNBPAMO@Can?8t?5open?5?$AA@ DB 'Can''t open ', 00H ; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\stun.cpp
CONST	ENDS
;	COMDAT ?stunInitServer@@YA_NAAUStunServerInfo@@ABUStunAddress4@@1H_N@Z
_TEXT	SEGMENT
_info$ = 8						; size = 4
_myAddr$ = 12						; size = 4
_altAddr$ = 16						; size = 4
_startMediaPort$ = 20					; size = 4
_verbose$ = 24						; size = 1
?stunInitServer@@YA_NAAUStunServerInfo@@ABUStunAddress4@@1H_N@Z PROC ; stunInitServer, COMDAT

; 1216 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1217 : 	
; 1218 :    info.myAddr = myAddr;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _info$[ebp]
  00007	56		 push	 esi
  00008	8b 75 0c	 mov	 esi, DWORD PTR _myAddr$[ebp]
  0000b	57		 push	 edi
  0000c	8b fb		 mov	 edi, ebx
  0000e	a5		 movsd
  0000f	66 a5		 movsw

; 1219 :    info.altAddr = altAddr;

  00011	8b 75 10	 mov	 esi, DWORD PTR _altAddr$[ebp]
  00014	8d 7b 06	 lea	 edi, DWORD PTR [ebx+6]
  00017	a5		 movsd
  00018	66 a5		 movsw

; 1220 : 	
; 1221 :    info.myFd = INVALID_SOCKET;

  0001a	83 c8 ff	 or	 eax, -1

; 1222 :    info.altPortFd = INVALID_SOCKET;
; 1223 :    info.altIpFd = INVALID_SOCKET;
; 1224 :    info.altIpPortFd = INVALID_SOCKET;
; 1225 : 
; 1226 :    memset(info.relays, 0, sizeof(info.relays));

  0001d	68 f8 2a 00 00	 push	 11000			; 00002af8H
  00022	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
  00025	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  00028	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  0002b	89 43 18	 mov	 DWORD PTR [ebx+24], eax
  0002e	33 f6		 xor	 esi, esi
  00030	8d 43 1d	 lea	 eax, DWORD PTR [ebx+29]
  00033	56		 push	 esi
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _memset

; 1227 :    if (startMediaPort > 0)

  0003a	8b 55 14	 mov	 edx, DWORD PTR _startMediaPort$[ebp]
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00040	3b d6		 cmp	 edx, esi
  00042	7e 25		 jle	 SHORT $LN11@stunInitSe

; 1228 :    {
; 1229 :       info.relay = true;

  00044	c6 43 1c 01	 mov	 BYTE PTR [ebx+28], 1

; 1230 : 
; 1231 :       for (int i=0; i<MAX_MEDIA_RELAYS; ++i)

  00048	33 c9		 xor	 ecx, ecx
  0004a	8d 43 2b	 lea	 eax, DWORD PTR [ebx+43]
$LL10@stunInitSe:

; 1232 :       {
; 1233 :          StunMediaRelay* relay = &info.relays[i];
; 1234 :          relay->relayPort = startMediaPort+i;

  0004d	8d 3c 11	 lea	 edi, DWORD PTR [ecx+edx]
  00050	89 78 f2	 mov	 DWORD PTR [eax-14], edi

; 1235 :          relay->fd = 0;

  00053	89 70 f6	 mov	 DWORD PTR [eax-10], esi

; 1236 :          relay->expireTime = 0;

  00056	89 30		 mov	 DWORD PTR [eax], esi
  00058	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0005b	41		 inc	 ecx
  0005c	83 c0 16	 add	 eax, 22			; 00000016H
  0005f	81 f9 f4 01 00
	00		 cmp	 ecx, 500		; 000001f4H
  00065	7c e6		 jl	 SHORT $LL10@stunInitSe

; 1237 :       }
; 1238 :    }
; 1239 :    else

  00067	eb 04		 jmp	 SHORT $LN7@stunInitSe
$LN11@stunInitSe:

; 1240 :    {
; 1241 :       info.relay = false;

  00069	c6 43 1c 00	 mov	 BYTE PTR [ebx+28], 0
$LN7@stunInitSe:

; 1242 :    }
; 1243 :    
; 1244 :    if ((info.myFd = openPort(myAddr.port, myAddr.addr,verbose)) == INVALID_SOCKET)

  0006d	ff 75 18	 push	 DWORD PTR _verbose$[ebp]
  00070	8b 75 0c	 mov	 esi, DWORD PTR _myAddr$[ebp]
  00073	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00076	ff 76 02	 push	 DWORD PTR [esi+2]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?openPort@@YAIGI_N@Z	; openPort
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00082	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
  00085	83 f8 ff	 cmp	 eax, -1
  00088	75 2b		 jne	 SHORT $LN6@stunInitSe
$LN25@stunInitSe:

; 1245 :    {
; 1246 :       clog << "Can't open " << myAddr << endl;

  0008a	56		 push	 esi
$LN26@stunInitSe:
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EHNBPAMO@Can?8t?5open?5?$AA@
  00090	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00095	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0009a	59		 pop	 ecx
  0009b	59		 pop	 ecx
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl

; 1247 :       stunStopServer(info);

  000a8	53		 push	 ebx
  000a9	e8 00 00 00 00	 call	 ?stunStopServer@@YAXAAUStunServerInfo@@@Z ; stunStopServer
  000ae	83 c4 10	 add	 esp, 16			; 00000010H

; 1248 : 
; 1249 :       return false;

  000b1	32 c0		 xor	 al, al
  000b3	eb 68		 jmp	 SHORT $LN12@stunInitSe
$LN6@stunInitSe:

; 1250 :    }
; 1251 :    //if (verbose) clog << "Opened " << myAddr.addr << ":" << myAddr.port << " --> " << info.myFd << endl;
; 1252 : 
; 1253 :    if ((info.altPortFd = openPort(altAddr.port,myAddr.addr,verbose)) == INVALID_SOCKET)

  000b5	ff 75 18	 push	 DWORD PTR _verbose$[ebp]
  000b8	8b 7d 10	 mov	 edi, DWORD PTR _altAddr$[ebp]
  000bb	0f b7 07	 movzx	 eax, WORD PTR [edi]
  000be	ff 76 02	 push	 DWORD PTR [esi+2]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ?openPort@@YAIGI_N@Z	; openPort
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ca	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  000cd	83 f8 ff	 cmp	 eax, -1

; 1254 :    {
; 1255 :       clog << "Can't open " << myAddr << endl;
; 1256 :       stunStopServer(info);
; 1257 :       return false;

  000d0	74 b8		 je	 SHORT $LN25@stunInitSe

; 1258 :    }
; 1259 :    //if (verbose) clog << "Opened " << myAddr.addr << ":" << altAddr.port << " --> " << info.altPortFd << endl;
; 1260 :    
; 1261 :    
; 1262 :    info.altIpFd = INVALID_SOCKET;

  000d2	83 4b 14 ff	 or	 DWORD PTR [ebx+20], -1

; 1263 :    if (  altAddr.addr != 0 )

  000d6	8b 47 02	 mov	 eax, DWORD PTR [edi+2]
  000d9	85 c0		 test	 eax, eax
  000db	74 1b		 je	 SHORT $LN24@stunInitSe

; 1264 :    {
; 1265 :       if ((info.altIpFd = openPort( myAddr.port, altAddr.addr,verbose)) == INVALID_SOCKET)

  000dd	ff 75 18	 push	 DWORD PTR _verbose$[ebp]
  000e0	50		 push	 eax
  000e1	0f b7 06	 movzx	 eax, WORD PTR [esi]
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?openPort@@YAIGI_N@Z	; openPort
  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ed	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  000f0	83 f8 ff	 cmp	 eax, -1
  000f3	75 03		 jne	 SHORT $LN24@stunInitSe
$LN27@stunInitSe:

; 1266 :       {
; 1267 :          clog << "Can't open " << altAddr << endl;

  000f5	57		 push	 edi

; 1268 :          stunStopServer(info);
; 1269 :          return false;

  000f6	eb 93		 jmp	 SHORT $LN26@stunInitSe
$LN24@stunInitSe:

; 1270 :       }
; 1271 :       //if (verbose) clog << "Opened " << altAddr.addr << ":" << myAddr.port << " --> " << info.altIpFd << endl;
; 1272 :    }
; 1273 :    
; 1274 :    info.altIpPortFd = INVALID_SOCKET;

  000f8	83 4b 18 ff	 or	 DWORD PTR [ebx+24], -1

; 1275 :    if (  altAddr.addr != 0 )

  000fc	8b 47 02	 mov	 eax, DWORD PTR [edi+2]
  000ff	85 c0		 test	 eax, eax
  00101	74 18		 je	 SHORT $LN1@stunInitSe

; 1276 :    {  if ((info.altIpPortFd = openPort(altAddr.port, altAddr.addr,verbose)) == INVALID_SOCKET)

  00103	ff 75 18	 push	 DWORD PTR _verbose$[ebp]
  00106	50		 push	 eax
  00107	0f b7 07	 movzx	 eax, WORD PTR [edi]
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?openPort@@YAIGI_N@Z	; openPort
  00110	83 c4 0c	 add	 esp, 12			; 0000000cH
  00113	89 43 18	 mov	 DWORD PTR [ebx+24], eax
  00116	83 f8 ff	 cmp	 eax, -1

; 1277 :       {
; 1278 :          clog << "Can't open " << altAddr << endl;
; 1279 :          stunStopServer(info);
; 1280 :          return false;

  00119	74 da		 je	 SHORT $LN27@stunInitSe
$LN1@stunInitSe:

; 1281 :       }
; 1282 :       //if (verbose) clog << "Opened " << altAddr.addr << ":" << altAddr.port << " --> " << info.altIpPortFd << endl;
; 1283 :    }
; 1284 :    
; 1285 :    return true;

  0011b	b0 01		 mov	 al, 1
$LN12@stunInitSe:
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx

; 1286 : }

  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
?stunInitServer@@YA_NAAUStunServerInfo@@ABUStunAddress4@@1H_N@Z ENDP ; stunInitServer
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 928  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 929  : 		_DEBUG_POINTER(_Ptr);
; 930  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 _strlen
  0000e	59		 pop	 ecx
  0000f	50		 push	 eax
  00010	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0001a	5e		 pop	 esi

; 931  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??_C@_02EAOCLKAK@ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	_sprintf_s:PROC
;	COMDAT ??_C@_02EAOCLKAK@ld?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02EAOCLKAK@ld?$AA@ DB 'ld', 00H			; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1173 : 		{	// put formatted long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1174 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[6];
; 1175 : 
; 1176 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1177 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
; 1178 : 				_Iosbase.flags()), _Val)));

  00015	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00018	57		 push	 edi
  00019	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  0001c	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	50		 push	 eax
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02EAOCLKAK@ld?$AA@
  00025	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00028	8b d9		 mov	 ebx, ecx
  0002a	50		 push	 eax
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00031	83 c4 10	 add	 esp, 16			; 00000010H
  00034	50		 push	 eax
  00035	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00038	6a 40		 push	 64			; 00000040H
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _sprintf_s
  00040	50		 push	 eax
  00041	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00044	50		 push	 eax
  00045	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00048	56		 push	 esi
  00049	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0004c	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0004f	57		 push	 edi
  00050	53		 push	 ebx
  00051	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1179 : 		}

  00056	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00059	83 c4 30	 add	 esp, 48			; 00000030H
  0005c	8b c7		 mov	 eax, edi
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	33 cd		 xor	 ecx, ebp
  00062	5b		 pop	 ebx
  00063	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00068	c9		 leave
  00069	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BDDLJJBK@lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BDDLJJBK@lu?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02BDDLJJBK@lu?$AA@ DB 'lu', 00H			; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1183 : 		{	// put formatted unsigned long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1184 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[6];
; 1185 : 
; 1186 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1187 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
; 1188 : 				_Iosbase.flags()), _Val)));

  00015	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00018	57		 push	 edi
  00019	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  0001c	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	50		 push	 eax
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02BDDLJJBK@lu?$AA@
  00025	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00028	8b d9		 mov	 ebx, ecx
  0002a	50		 push	 eax
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00031	83 c4 10	 add	 esp, 16			; 00000010H
  00034	50		 push	 eax
  00035	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00038	6a 40		 push	 64			; 00000040H
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _sprintf_s
  00040	50		 push	 eax
  00041	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00044	50		 push	 eax
  00045	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00048	56		 push	 esi
  00049	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0004c	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0004f	57		 push	 edi
  00050	53		 push	 ebx
  00051	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1189 : 		}

  00056	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00059	83 c4 30	 add	 esp, 48			; 00000030H
  0005c	8b c7		 mov	 eax, edi
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	33 cd		 xor	 ecx, ebp
  00062	5b		 pop	 ebx
  00063	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00068	c9		 leave
  00069	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02HIKPPMOK@Ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02HIKPPMOK@Ld?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02HIKPPMOK@Ld?$AA@ DB 'Ld', 00H			; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1194 : 		{	// put formatted long long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1195 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[8];
; 1196 : 
; 1197 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1198 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
; 1199 : 				_Iosbase.flags()), _Val)));

  00015	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00018	57		 push	 edi
  00019	ff 75 20	 push	 DWORD PTR __Val$[ebp+4]
  0001c	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00022	8b d9		 mov	 ebx, ecx
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_02HIKPPMOK@Ld?$AA@
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  0002d	50		 push	 eax
  0002e	53		 push	 ebx
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  0003b	6a 40		 push	 64			; 00000040H
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _sprintf_s
  00043	50		 push	 eax
  00044	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00047	50		 push	 eax
  00048	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0004b	56		 push	 esi
  0004c	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0004f	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00052	57		 push	 edi
  00053	53		 push	 ebx
  00054	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1200 : 		}

  00059	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005c	83 c4 34	 add	 esp, 52			; 00000034H
  0005f	8b c7		 mov	 eax, edi
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	33 cd		 xor	 ecx, ebp
  00065	5b		 pop	 ebx
  00066	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006b	c9		 leave
  0006c	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02CLHGNPPK@Lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02CLHGNPPK@Lu?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02CLHGNPPK@Lu?$AA@ DB 'Lu', 00H			; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1204 : 		{	// put formatted unsigned long long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1205 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[8];
; 1206 : 
; 1207 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1208 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
; 1209 : 				_Iosbase.flags()), _Val)));

  00015	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00018	57		 push	 edi
  00019	ff 75 20	 push	 DWORD PTR __Val$[ebp+4]
  0001c	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00022	8b d9		 mov	 ebx, ecx
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_02CLHGNPPK@Lu?$AA@
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  0002d	50		 push	 eax
  0002e	53		 push	 ebx
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  0003b	6a 40		 push	 64			; 00000040H
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _sprintf_s
  00043	50		 push	 eax
  00044	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00047	50		 push	 eax
  00048	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0004b	56		 push	 esi
  0004c	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0004f	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00052	57		 push	 edi
  00053	53		 push	 ebx
  00054	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1210 : 		}

  00059	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005c	83 c4 34	 add	 esp, 52			; 00000034H
  0005f	8b c7		 mov	 eax, edi
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	33 cd		 xor	 ecx, ebp
  00065	5b		 pop	 ebx
  00066	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006b	c9		 leave
  0006c	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	__real@38aa95a5b7f87a0f
PUBLIC	__real@4202a05f20000000
PUBLIC	__real@4733426172c74d82
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	_this$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__fltused:DWORD
;	COMDAT __real@38aa95a5b7f87a0f
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xiosbase
CONST	SEGMENT
__real@38aa95a5b7f87a0f DQ 038aa95a5b7f87a0fr	; 1e-035
CONST	ENDS
;	COMDAT __real@4202a05f20000000
CONST	SEGMENT
__real@4202a05f20000000 DQ 04202a05f20000000r	; 1e+010
CONST	ENDS
;	COMDAT __real@4733426172c74d82
CONST	SEGMENT
__real@4733426172c74d82 DQ 04733426172c74d82r	; 1e+035
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -144				; size = 4
_this$GSCopy$ = -140					; size = 4
__Significance$ = -136					; size = 4
__Afterpoint$ = -132					; size = 4
__Beforepoint$ = -128					; size = 4
__Signed$90132 = -121					; size = 1
__Buf$ = -120						; size = 108
__Fmt$ = -12						; size = 8
__Precision$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1215 : 		{	// put formatted double to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1246 : 			}
; 1247 : 
; 1248 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1249 : 			_Beforepoint, _Afterpoint, (size_t)_Precision,
; 1250 : 				_CSTD sprintf_s(_Buf, sizeof (_Buf),
; 1251 : 					_Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1252 : 					_Significance, _Val)));	// convert and put

  0001b	89 85 70 ff ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  00021	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00024	57		 push	 edi
  00025	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0002b	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0002e	bf 00 20 00 00	 mov	 edi, 8192		; 00002000H
  00033	85 c0		 test	 eax, eax
  00035	7f 10		 jg	 SHORT $LN13@do_put

; 1216 : 		char _Buf[_MAX_EXP_DIG + _MAX_SIG_DIG + 64], _Fmt[8];
; 1217 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1218 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1219 : 				? 6 : _Iosbase.precision();	// desired precision

  00037	7c 04		 jl	 SHORT $LN34@do_put
  00039	85 c9		 test	 ecx, ecx
  0003b	75 0a		 jne	 SHORT $LN13@do_put
$LN34@do_put:
  0003d	85 7e 14	 test	 DWORD PTR [esi+20], edi
  00040	75 05		 jne	 SHORT $LN13@do_put
  00042	6a 06		 push	 6
  00044	59		 pop	 ecx
  00045	33 c0		 xor	 eax, eax
$LN13@do_put:
  00047	8b d9		 mov	 ebx, ecx
  00049	89 45 f8	 mov	 DWORD PTR __Precision$[ebp+4], eax

; 1220 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1221 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  0004c	85 c0		 test	 eax, eax
  0004e	7c 11		 jl	 SHORT $LN15@do_put
  00050	6a 24		 push	 36			; 00000024H
  00052	58		 pop	 eax
  00053	7f 04		 jg	 SHORT $LN35@do_put
  00055	3b d8		 cmp	 ebx, eax
  00057	76 08		 jbe	 SHORT $LN15@do_put
$LN35@do_put:
  00059	89 85 78 ff ff
	ff		 mov	 DWORD PTR __Significance$[ebp], eax
  0005f	eb 06		 jmp	 SHORT $LN16@do_put
$LN15@do_put:
  00061	89 9d 78 ff ff
	ff		 mov	 DWORD PTR __Significance$[ebp], ebx
$LN16@do_put:

; 1222 : 		_Precision -= _Significance;

  00067	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR __Significance$[ebp]

; 1223 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1224 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1225 : 
; 1226 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
; 1227 : 			&& _Val * 0.5 != _Val)	// skip -Inf, 0, Inf

  0006d	dd 45 1c	 fld	 QWORD PTR __Val$[ebp]
  00070	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00073	99		 cdq
  00074	2b d8		 sub	 ebx, eax
  00076	19 55 f8	 sbb	 DWORD PTR __Precision$[ebp+4], edx
  00079	83 65 80 00	 and	 DWORD PTR __Beforepoint$[ebp], 0
  0007d	83 a5 7c ff ff
	ff 00		 and	 DWORD PTR __Afterpoint$[ebp], 0
  00084	8b c1		 mov	 eax, ecx
  00086	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  0008b	3b c7		 cmp	 eax, edi
  0008d	0f 85 bb 00 00
	00		 jne	 $LN40@do_put
  00093	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe0000000000000
  00099	d8 c9		 fmul	 ST(0), ST(1)
  0009b	d9 c1		 fld	 ST(1)
  0009d	da e9		 fucompp
  0009f	df e0		 fnstsw	 ax
  000a1	f6 c4 44	 test	 ah, 68			; 00000044H
  000a4	0f 8b a4 00 00
	00		 jnp	 $LN40@do_put

; 1228 : 			{	// scale silly fixed-point value
; 1229 : 			bool _Signed = _Val < 0;

  000aa	d9 ee		 fldz
  000ac	d8 d1		 fcom	 ST(1)
  000ae	df e0		 fnstsw	 ax
  000b0	f6 c4 41	 test	 ah, 65			; 00000041H
  000b3	75 0a		 jne	 SHORT $LN17@do_put

; 1230 : 			if (_Signed)
; 1231 : 				_Val = -_Val;

  000b5	d9 c9		 fxch	 ST(1)
  000b7	c6 45 87 01	 mov	 BYTE PTR __Signed$90132[ebp], 1
  000bb	d9 e0		 fchs
  000bd	eb 06		 jmp	 SHORT $LN9@do_put
$LN17@do_put:

; 1228 : 			{	// scale silly fixed-point value
; 1229 : 			bool _Signed = _Val < 0;

  000bf	c6 45 87 00	 mov	 BYTE PTR __Signed$90132[ebp], 0

; 1245 : 				_Val = -_Val;

  000c3	d9 c9		 fxch	 ST(1)
$LN9@do_put:

; 1232 : 
; 1233 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000c5	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  000cb	6a 0a		 push	 10			; 0000000aH
  000cd	d8 d1		 fcom	 ST(1)
  000cf	ba 88 13 00 00	 mov	 edx, 5000		; 00001388H
  000d4	5f		 pop	 edi
  000d5	df e0		 fnstsw	 ax
  000d7	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  000dd	f6 c4 41	 test	 ah, 65			; 00000041H
  000e0	7b 06		 jnp	 SHORT $LN8@do_put
$LN50@do_put:
  000e2	dd d9		 fstp	 ST(1)
  000e4	eb 19		 jmp	 SHORT $LN6@do_put
$LN56@do_put:
  000e6	d9 c9		 fxch	 ST(1)
$LN8@do_put:
  000e8	39 55 80	 cmp	 DWORD PTR __Beforepoint$[ebp], edx
  000eb	73 f5		 jae	 SHORT $LN50@do_put

; 1234 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000ed	dc fa		 fdiv	 ST(2), ST(0)
  000ef	01 7d 80	 add	 DWORD PTR __Beforepoint$[ebp], edi
  000f2	d9 c9		 fxch	 ST(1)
  000f4	d8 d2		 fcom	 ST(2)
  000f6	df e0		 fnstsw	 ax
  000f8	f6 c4 41	 test	 ah, 65			; 00000041H
  000fb	7b e9		 jnp	 SHORT $LN56@do_put

; 1232 : 
; 1233 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000fd	dd d8		 fstp	 ST(0)
$LN6@do_put:

; 1235 : 
; 1236 : 			if (0 < _Val)

  000ff	d9 ca		 fxch	 ST(2)
  00101	d8 d9		 fcomp	 ST(1)
  00103	df e0		 fnstsw	 ax
  00105	f6 c4 05	 test	 ah, 5
  00108	7a 3a		 jp	 SHORT $LN78@do_put

; 1237 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1238 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  0010a	83 7d f8 00	 cmp	 DWORD PTR __Precision$[ebp+4], 0
  0010e	7c 34		 jl	 SHORT $LN78@do_put
  00110	7f 04		 jg	 SHORT $LN41@do_put
$LN82@do_put:
  00112	3b df		 cmp	 ebx, edi
  00114	72 2e		 jb	 SHORT $LN78@do_put
$LN41@do_put:
  00116	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  0011c	d8 d9		 fcomp	 ST(1)
  0011e	df e0		 fnstsw	 ax
  00120	f6 c4 01	 test	 ah, 1
  00123	75 1f		 jne	 SHORT $LN78@do_put
  00125	39 95 7c ff ff
	ff		 cmp	 DWORD PTR __Afterpoint$[ebp], edx
  0012b	73 17		 jae	 SHORT $LN78@do_put

; 1239 : 					{	// drop 10 zeros after decimal point
; 1240 : 					_Val *= 1e10;
; 1241 : 					_Precision -= 10;

  0012d	83 c3 f6	 add	 ebx, -10		; fffffff6H
  00130	d8 c9		 fmul	 ST(0), ST(1)
  00132	83 55 f8 ff	 adc	 DWORD PTR __Precision$[ebp+4], -1
  00136	01 bd 7c ff ff
	ff		 add	 DWORD PTR __Afterpoint$[ebp], edi
  0013c	83 7d f8 00	 cmp	 DWORD PTR __Precision$[ebp+4], 0
  00140	7f d4		 jg	 SHORT $LN41@do_put

; 1237 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1238 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00142	7d ce		 jge	 SHORT $LN82@do_put
$LN78@do_put:

; 1242 : 					}
; 1243 : 
; 1244 : 			if (_Signed)

  00144	80 7d 87 00	 cmp	 BYTE PTR __Signed$90132[ebp], 0
  00148	dd d9		 fstp	 ST(1)
  0014a	74 02		 je	 SHORT $LN40@do_put

; 1245 : 				_Val = -_Val;

  0014c	d9 e0		 fchs
$LN40@do_put:

; 1246 : 			}
; 1247 : 
; 1248 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1249 : 			_Beforepoint, _Afterpoint, (size_t)_Precision,
; 1250 : 				_CSTD sprintf_s(_Buf, sizeof (_Buf),
; 1251 : 					_Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1252 : 					_Significance, _Val)));	// convert and put

  0014e	51		 push	 ecx
  0014f	51		 push	 ecx
  00150	dd 1c 24	 fstp	 QWORD PTR [esp]
  00153	ff b5 78 ff ff
	ff		 push	 DWORD PTR __Significance$[ebp]
  00159	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  0015c	51		 push	 ecx
  0015d	6a 00		 push	 0
  0015f	50		 push	 eax
  00160	ff b5 74 ff ff
	ff		 push	 DWORD PTR _this$GSCopy$[ebp]
  00166	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
  0016b	83 c4 10	 add	 esp, 16			; 00000010H
  0016e	50		 push	 eax
  0016f	8d 45 88	 lea	 eax, DWORD PTR __Buf$[ebp]
  00172	6a 6c		 push	 108			; 0000006cH
  00174	50		 push	 eax
  00175	e8 00 00 00 00	 call	 _sprintf_s
  0017a	50		 push	 eax
  0017b	53		 push	 ebx
  0017c	ff b5 7c ff ff
	ff		 push	 DWORD PTR __Afterpoint$[ebp]
  00182	8d 45 88	 lea	 eax, DWORD PTR __Buf$[ebp]
  00185	ff 75 80	 push	 DWORD PTR __Beforepoint$[ebp]
  00188	50		 push	 eax
  00189	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0018c	56		 push	 esi
  0018d	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00190	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00193	ff b5 70 ff ff
	ff		 push	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00199	ff b5 74 ff ff
	ff		 push	 DWORD PTR _this$GSCopy$[ebp]
  0019f	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput

; 1253 : 		}

  001a4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a7	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  001ad	83 c4 44	 add	 esp, 68			; 00000044H
  001b0	5f		 pop	 edi
  001b1	5e		 pop	 esi
  001b2	33 cd		 xor	 ecx, ebp
  001b4	5b		 pop	 ebx
  001b5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ba	c9		 leave
  001bb	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogsp
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -144				; size = 4
_this$GSCopy$ = -140					; size = 4
__Significance$ = -136					; size = 4
__Afterpoint$ = -132					; size = 4
__Beforepoint$ = -128					; size = 4
__Signed$90155 = -121					; size = 1
__Buf$ = -120						; size = 108
__Fmt$ = -12						; size = 8
__Precision$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1257 : 		{	// put formatted long double to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1287 : 			}
; 1288 : 
; 1289 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1290 : 			_Beforepoint, _Afterpoint, (size_t)_Precision,
; 1291 : 				_CSTD sprintf_s(_Buf, sizeof (_Buf),
; 1292 : 					_Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1293 : 					_Significance, _Val)));	// convert and put

  0001b	89 85 70 ff ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  00021	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00024	57		 push	 edi
  00025	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0002b	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0002e	bf 00 20 00 00	 mov	 edi, 8192		; 00002000H
  00033	85 c0		 test	 eax, eax
  00035	7f 10		 jg	 SHORT $LN13@do_put@2

; 1258 : 		char _Buf[_MAX_EXP_DIG + _MAX_SIG_DIG + 64], _Fmt[8];
; 1259 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1260 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1261 : 				? 6 : _Iosbase.precision();	// desired precision

  00037	7c 04		 jl	 SHORT $LN34@do_put@2
  00039	85 c9		 test	 ecx, ecx
  0003b	75 0a		 jne	 SHORT $LN13@do_put@2
$LN34@do_put@2:
  0003d	85 7e 14	 test	 DWORD PTR [esi+20], edi
  00040	75 05		 jne	 SHORT $LN13@do_put@2
  00042	6a 06		 push	 6
  00044	59		 pop	 ecx
  00045	33 c0		 xor	 eax, eax
$LN13@do_put@2:
  00047	8b d9		 mov	 ebx, ecx
  00049	89 45 f8	 mov	 DWORD PTR __Precision$[ebp+4], eax

; 1262 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1263 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  0004c	85 c0		 test	 eax, eax
  0004e	7c 11		 jl	 SHORT $LN15@do_put@2
  00050	6a 24		 push	 36			; 00000024H
  00052	58		 pop	 eax
  00053	7f 04		 jg	 SHORT $LN35@do_put@2
  00055	3b d8		 cmp	 ebx, eax
  00057	76 08		 jbe	 SHORT $LN15@do_put@2
$LN35@do_put@2:
  00059	89 85 78 ff ff
	ff		 mov	 DWORD PTR __Significance$[ebp], eax
  0005f	eb 06		 jmp	 SHORT $LN16@do_put@2
$LN15@do_put@2:
  00061	89 9d 78 ff ff
	ff		 mov	 DWORD PTR __Significance$[ebp], ebx
$LN16@do_put@2:

; 1264 : 		_Precision -= _Significance;

  00067	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR __Significance$[ebp]

; 1265 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1266 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1267 : 
; 1268 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)

  0006d	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00070	99		 cdq
  00071	2b d8		 sub	 ebx, eax
  00073	19 55 f8	 sbb	 DWORD PTR __Precision$[ebp+4], edx
  00076	83 65 80 00	 and	 DWORD PTR __Beforepoint$[ebp], 0
  0007a	83 a5 7c ff ff
	ff 00		 and	 DWORD PTR __Afterpoint$[ebp], 0
  00081	8b c1		 mov	 eax, ecx
  00083	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00088	3b c7		 cmp	 eax, edi
  0008a	0f 85 a5 00 00
	00		 jne	 $LN39@do_put@2

; 1269 : 			{	// scale silly fixed-point value
; 1270 : 			bool _Signed = _Val < 0;

  00090	d9 ee		 fldz
  00092	dd 45 1c	 fld	 QWORD PTR __Val$[ebp]
  00095	d8 d1		 fcom	 ST(1)
  00097	df e0		 fnstsw	 ax
  00099	f6 c4 05	 test	 ah, 5
  0009c	7a 27		 jp	 SHORT $LN17@do_put@2
  0009e	c6 45 87 01	 mov	 BYTE PTR __Signed$90155[ebp], 1

; 1272 : 				_Val = -_Val;

  000a2	d9 e0		 fchs
$LN9@do_put@2:

; 1273 : 
; 1274 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000a4	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  000aa	6a 0a		 push	 10			; 0000000aH
  000ac	d8 d1		 fcom	 ST(1)
  000ae	ba 88 13 00 00	 mov	 edx, 5000		; 00001388H
  000b3	5f		 pop	 edi
  000b4	df e0		 fnstsw	 ax
  000b6	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  000bc	f6 c4 41	 test	 ah, 65			; 00000041H
  000bf	7b 0c		 jnp	 SHORT $LN8@do_put@2
$LN46@do_put@2:
  000c1	dd d9		 fstp	 ST(1)
  000c3	eb 1f		 jmp	 SHORT $LN6@do_put@2
$LN17@do_put@2:

; 1269 : 			{	// scale silly fixed-point value
; 1270 : 			bool _Signed = _Val < 0;

  000c5	c6 45 87 00	 mov	 BYTE PTR __Signed$90155[ebp], 0

; 1271 : 			if (_Signed)

  000c9	eb d9		 jmp	 SHORT $LN9@do_put@2
$LN52@do_put@2:

; 1273 : 
; 1274 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000cb	d9 c9		 fxch	 ST(1)
$LN8@do_put@2:
  000cd	39 55 80	 cmp	 DWORD PTR __Beforepoint$[ebp], edx
  000d0	73 ef		 jae	 SHORT $LN46@do_put@2

; 1275 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000d2	dc fa		 fdiv	 ST(2), ST(0)
  000d4	01 7d 80	 add	 DWORD PTR __Beforepoint$[ebp], edi
  000d7	d9 c9		 fxch	 ST(1)
  000d9	d8 d2		 fcom	 ST(2)
  000db	df e0		 fnstsw	 ax
  000dd	f6 c4 41	 test	 ah, 65			; 00000041H
  000e0	7b e9		 jnp	 SHORT $LN52@do_put@2

; 1273 : 
; 1274 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000e2	dd d8		 fstp	 ST(0)
$LN6@do_put@2:

; 1276 : 
; 1277 : 			if (0 < _Val)

  000e4	d9 ca		 fxch	 ST(2)
  000e6	d8 d9		 fcomp	 ST(1)
  000e8	df e0		 fnstsw	 ax
  000ea	f6 c4 05	 test	 ah, 5
  000ed	7a 3a		 jp	 SHORT $LN74@do_put@2

; 1278 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1279 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000ef	83 7d f8 00	 cmp	 DWORD PTR __Precision$[ebp+4], 0
  000f3	7c 34		 jl	 SHORT $LN74@do_put@2
  000f5	7f 04		 jg	 SHORT $LN40@do_put@2
$LN78@do_put@2:
  000f7	3b df		 cmp	 ebx, edi
  000f9	72 2e		 jb	 SHORT $LN74@do_put@2
$LN40@do_put@2:
  000fb	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  00101	d8 d9		 fcomp	 ST(1)
  00103	df e0		 fnstsw	 ax
  00105	f6 c4 01	 test	 ah, 1
  00108	75 1f		 jne	 SHORT $LN74@do_put@2
  0010a	39 95 7c ff ff
	ff		 cmp	 DWORD PTR __Afterpoint$[ebp], edx
  00110	73 17		 jae	 SHORT $LN74@do_put@2

; 1280 : 					{	// drop 10 zeros after decimal point
; 1281 : 					_Val *= 1e10;
; 1282 : 					_Precision -= 10;

  00112	83 c3 f6	 add	 ebx, -10		; fffffff6H
  00115	d8 c9		 fmul	 ST(0), ST(1)
  00117	83 55 f8 ff	 adc	 DWORD PTR __Precision$[ebp+4], -1
  0011b	01 bd 7c ff ff
	ff		 add	 DWORD PTR __Afterpoint$[ebp], edi
  00121	83 7d f8 00	 cmp	 DWORD PTR __Precision$[ebp+4], 0
  00125	7f d4		 jg	 SHORT $LN40@do_put@2

; 1278 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1279 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00127	7d ce		 jge	 SHORT $LN78@do_put@2
$LN74@do_put@2:

; 1283 : 					}
; 1284 : 
; 1285 : 			if (_Signed)

  00129	80 7d 87 00	 cmp	 BYTE PTR __Signed$90155[ebp], 0
  0012d	dd d9		 fstp	 ST(1)
  0012f	74 07		 je	 SHORT $LN1@do_put@2

; 1286 : 				_Val = -_Val;

  00131	d9 e0		 fchs
  00133	eb 03		 jmp	 SHORT $LN1@do_put@2
$LN39@do_put@2:
  00135	dd 45 1c	 fld	 QWORD PTR __Val$[ebp]
$LN1@do_put@2:

; 1287 : 			}
; 1288 : 
; 1289 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1290 : 			_Beforepoint, _Afterpoint, (size_t)_Precision,
; 1291 : 				_CSTD sprintf_s(_Buf, sizeof (_Buf),
; 1292 : 					_Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1293 : 					_Significance, _Val)));	// convert and put

  00138	51		 push	 ecx
  00139	51		 push	 ecx
  0013a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0013d	ff b5 78 ff ff
	ff		 push	 DWORD PTR __Significance$[ebp]
  00143	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00146	51		 push	 ecx
  00147	6a 4c		 push	 76			; 0000004cH
  00149	50		 push	 eax
  0014a	ff b5 74 ff ff
	ff		 push	 DWORD PTR _this$GSCopy$[ebp]
  00150	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
  00155	83 c4 10	 add	 esp, 16			; 00000010H
  00158	50		 push	 eax
  00159	8d 45 88	 lea	 eax, DWORD PTR __Buf$[ebp]
  0015c	6a 6c		 push	 108			; 0000006cH
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 _sprintf_s
  00164	50		 push	 eax
  00165	53		 push	 ebx
  00166	ff b5 7c ff ff
	ff		 push	 DWORD PTR __Afterpoint$[ebp]
  0016c	8d 45 88	 lea	 eax, DWORD PTR __Buf$[ebp]
  0016f	ff 75 80	 push	 DWORD PTR __Beforepoint$[ebp]
  00172	50		 push	 eax
  00173	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00176	56		 push	 esi
  00177	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0017a	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0017d	ff b5 70 ff ff
	ff		 push	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00183	ff b5 74 ff ff
	ff		 push	 DWORD PTR _this$GSCopy$[ebp]
  00189	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput

; 1294 : 		}

  0018e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00191	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00197	83 c4 44	 add	 esp, 68			; 00000044H
  0019a	5f		 pop	 edi
  0019b	5e		 pop	 esi
  0019c	33 cd		 xor	 ecx, ebp
  0019e	5b		 pop	 ebx
  0019f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a4	c9		 leave
  001a5	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BBAHNLBA@?$CFp?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp?$AA@ DB '%p', 00H		; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
_TEXT	SEGMENT
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1298 : 		{	// put formatted void pointer to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 1c	 mov	 eax, DWORD PTR __Val$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00018	57		 push	 edi
  00019	8b 7d 14	 mov	 edi, DWORD PTR __Iosbase$[ebp]

; 1299 : 		char _Buf[2 * _MAX_INT_DIG];
; 1300 : 
; 1301 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1302 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));

  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02BBAHNLBA@?$CFp?$AA@
  00022	8d 45 bc	 lea	 eax, DWORD PTR __Buf$[ebp]
  00025	6a 40		 push	 64			; 00000040H
  00027	50		 push	 eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	e8 00 00 00 00	 call	 _sprintf_s
  0002f	50		 push	 eax
  00030	8d 45 bc	 lea	 eax, DWORD PTR __Buf$[ebp]
  00033	50		 push	 eax
  00034	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00037	57		 push	 edi
  00038	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0003b	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0003e	56		 push	 esi
  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1303 : 		}

  00045	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00048	83 c4 30	 add	 esp, 48			; 00000030H
  0004b	5f		 pop	 edi
  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi
  0004f	33 cd		 xor	 ecx, ebp
  00051	5b		 pop	 ebx
  00052	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00057	c9		 leave
  00058	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 762  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 763  : 		return (assign(_Right));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 764  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??_C@_0CB@GJKHBANH@problem?5parsing?5secondaryAddress@ ; `string'
PUBLIC	??_C@_0BK@HDJDCBOJ@problem?5parsing?5ErrorCode?$AA@ ; `string'
PUBLIC	??_C@_0CB@IEFFDMD@problem?5parsing?5XorMappedAddress@ ; `string'
PUBLIC	??_C@_0BL@IJNJDJHA@problem?5parsing?5ServerName?$AA@ ; `string'
PUBLIC	??_C@_0BO@DDDEDPBC@problem?5parsing?5MappedAddress?$AA@ ; `string'
PUBLIC	??_C@_0CA@EHNEEKMJ@problem?5parsing?5ResponseAddress?$AA@ ; `string'
PUBLIC	??_C@_0BO@PNLAAONJ@problem?5parsing?5ChangeRequest?$AA@ ; `string'
PUBLIC	??_C@_0BO@LOFBPAJL@problem?5parsing?5SourceAddress?$AA@ ; `string'
PUBLIC	??_C@_0BP@IEGGBCLM@problem?5parsing?5ChangedAddress?$AA@ ; `string'
PUBLIC	??_C@_0BJ@LKAAPGKD@problem?5parsing?5Username?$AA@ ; `string'
PUBLIC	??_C@_0BJ@ICBFKICH@problem?5parsing?5Password?$AA@ ; `string'
PUBLIC	??_C@_0DB@DKFBBPGG@claims?5attribute?5is?5larger?5than?5@ ; `string'
PUBLIC	??_C@_0BB@LAKBDLMI@?$CIattribute?5type?$DN?$AA@	; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ?$AA@			; `string'
PUBLIC	??_C@_0CB@PJGJDGEM@problem?5parsing?5MessageIntegrity@ ; `string'
PUBLIC	??_C@_0BE@OPDHDJFG@Unknown?5attribute?3?5?$AA@	; `string'
PUBLIC	??_C@_0BE@BHPGFMLA@SecondaryAddress?5?$DN?5?$AA@ ; `string'
PUBLIC	??_C@_0N@MBPBGKBO@ErrorCode?5?$DN?5?$AA@	; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_0CB@PDJNNLDG@problem?5parsing?5UnknownAttribute@ ; `string'
PUBLIC	??_C@_0BO@NDELOMMB@problem?5parsing?5ReflectedFrom?$AA@ ; `string'
PUBLIC	??_C@_0BE@IDHFJIOE@XorMappedAddress?5?$DN?5?$AA@ ; `string'
PUBLIC	??_C@_0P@IGCMKEFP@xorOnly?5?$DN?5true?$AA@	; `string'
PUBLIC	??_C@_0O@LMOECMOH@ServerName?5?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0BB@OJAFNMGM@MappedAddress?5?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0BD@NBDAGAJC@ResponseAddress?5?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0BB@FIHHOFII@ChangeRequest?5?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0BB@HGFLKCLI@SourceAddress?5?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0BC@GHJJIAHO@ChangedAddress?5?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0M@LKLEOICH@Username?5?$DN?5?$AA@		; `string'
PUBLIC	??_C@_0M@BFGNMPHC@Password?5?$DN?5?$AA@		; `string'
PUBLIC	??_C@_0DD@GNMPDDMO@Message?5header?5length?5doesn?8t?5ma@ ; `string'
PUBLIC	??_C@_03NLJIHOMM@?5?9?5?$AA@			; `string'
PUBLIC	??_C@_0M@OEPJJONH@Bad?5message?$AA@		; `string'
PUBLIC	??_C@_0BI@GCBGJEHM@Received?5stun?5message?3?5?$AA@ ; `string'
PUBLIC	??_C@_06LCIDCBMH@?5bytes?$AA@			; `string'
PUBLIC	?stunParseMessage@@YA_NPADIAAUStunMessage@@_N@Z	; stunParseMessage
;	COMDAT ??_C@_0CB@GJKHBANH@problem?5parsing?5secondaryAddress@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
CONST	SEGMENT
??_C@_0CB@GJKHBANH@problem?5parsing?5secondaryAddress@ DB 'problem parsin'
	DB	'g secondaryAddress', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HDJDCBOJ@problem?5parsing?5ErrorCode?$AA@
CONST	SEGMENT
??_C@_0BK@HDJDCBOJ@problem?5parsing?5ErrorCode?$AA@ DB 'problem parsing E'
	DB	'rrorCode', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IEFFDMD@problem?5parsing?5XorMappedAddress@
CONST	SEGMENT
??_C@_0CB@IEFFDMD@problem?5parsing?5XorMappedAddress@ DB 'problem parsing'
	DB	' XorMappedAddress', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IJNJDJHA@problem?5parsing?5ServerName?$AA@
CONST	SEGMENT
??_C@_0BL@IJNJDJHA@problem?5parsing?5ServerName?$AA@ DB 'problem parsing '
	DB	'ServerName', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DDDEDPBC@problem?5parsing?5MappedAddress?$AA@
CONST	SEGMENT
??_C@_0BO@DDDEDPBC@problem?5parsing?5MappedAddress?$AA@ DB 'problem parsi'
	DB	'ng MappedAddress', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EHNEEKMJ@problem?5parsing?5ResponseAddress?$AA@
CONST	SEGMENT
??_C@_0CA@EHNEEKMJ@problem?5parsing?5ResponseAddress?$AA@ DB 'problem par'
	DB	'sing ResponseAddress', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PNLAAONJ@problem?5parsing?5ChangeRequest?$AA@
CONST	SEGMENT
??_C@_0BO@PNLAAONJ@problem?5parsing?5ChangeRequest?$AA@ DB 'problem parsi'
	DB	'ng ChangeRequest', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LOFBPAJL@problem?5parsing?5SourceAddress?$AA@
CONST	SEGMENT
??_C@_0BO@LOFBPAJL@problem?5parsing?5SourceAddress?$AA@ DB 'problem parsi'
	DB	'ng SourceAddress', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IEGGBCLM@problem?5parsing?5ChangedAddress?$AA@
CONST	SEGMENT
??_C@_0BP@IEGGBCLM@problem?5parsing?5ChangedAddress?$AA@ DB 'problem pars'
	DB	'ing ChangedAddress', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LKAAPGKD@problem?5parsing?5Username?$AA@
CONST	SEGMENT
??_C@_0BJ@LKAAPGKD@problem?5parsing?5Username?$AA@ DB 'problem parsing Us'
	DB	'ername', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@ICBFKICH@problem?5parsing?5Password?$AA@
CONST	SEGMENT
??_C@_0BJ@ICBFKICH@problem?5parsing?5Password?$AA@ DB 'problem parsing Pa'
	DB	'ssword', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DKFBBPGG@claims?5attribute?5is?5larger?5than?5@
CONST	SEGMENT
??_C@_0DB@DKFBBPGG@claims?5attribute?5is?5larger?5than?5@ DB 'claims attr'
	DB	'ibute is larger than size of message ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LAKBDLMI@?$CIattribute?5type?$DN?$AA@
CONST	SEGMENT
??_C@_0BB@LAKBDLMI@?$CIattribute?5type?$DN?$AA@ DB '(attribute type=', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ?$AA@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ?$AA@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PJGJDGEM@problem?5parsing?5MessageIntegrity@
CONST	SEGMENT
??_C@_0CB@PJGJDGEM@problem?5parsing?5MessageIntegrity@ DB 'problem parsin'
	DB	'g MessageIntegrity', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OPDHDJFG@Unknown?5attribute?3?5?$AA@
CONST	SEGMENT
??_C@_0BE@OPDHDJFG@Unknown?5attribute?3?5?$AA@ DB 'Unknown attribute: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BHPGFMLA@SecondaryAddress?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0BE@BHPGFMLA@SecondaryAddress?5?$DN?5?$AA@ DB 'SecondaryAddress = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MBPBGKBO@ErrorCode?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0N@MBPBGKBO@ErrorCode?5?$DN?5?$AA@ DB 'ErrorCode = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PDJNNLDG@problem?5parsing?5UnknownAttribute@
CONST	SEGMENT
??_C@_0CB@PDJNNLDG@problem?5parsing?5UnknownAttribute@ DB 'problem parsin'
	DB	'g UnknownAttribute', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NDELOMMB@problem?5parsing?5ReflectedFrom?$AA@
CONST	SEGMENT
??_C@_0BO@NDELOMMB@problem?5parsing?5ReflectedFrom?$AA@ DB 'problem parsi'
	DB	'ng ReflectedFrom', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IDHFJIOE@XorMappedAddress?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0BE@IDHFJIOE@XorMappedAddress?5?$DN?5?$AA@ DB 'XorMappedAddress = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IGCMKEFP@xorOnly?5?$DN?5true?$AA@
CONST	SEGMENT
??_C@_0P@IGCMKEFP@xorOnly?5?$DN?5true?$AA@ DB 'xorOnly = true', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LMOECMOH@ServerName?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0O@LMOECMOH@ServerName?5?$DN?5?$AA@ DB 'ServerName = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OJAFNMGM@MappedAddress?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0BB@OJAFNMGM@MappedAddress?5?$DN?5?$AA@ DB 'MappedAddress = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NBDAGAJC@ResponseAddress?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0BD@NBDAGAJC@ResponseAddress?5?$DN?5?$AA@ DB 'ResponseAddress = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FIHHOFII@ChangeRequest?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0BB@FIHHOFII@ChangeRequest?5?$DN?5?$AA@ DB 'ChangeRequest = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HGFLKCLI@SourceAddress?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0BB@HGFLKCLI@SourceAddress?5?$DN?5?$AA@ DB 'SourceAddress = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GHJJIAHO@ChangedAddress?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0BC@GHJJIAHO@ChangedAddress?5?$DN?5?$AA@ DB 'ChangedAddress = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LKLEOICH@Username?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0M@LKLEOICH@Username?5?$DN?5?$AA@ DB 'Username = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BFGNMPHC@Password?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0M@BFGNMPHC@Password?5?$DN?5?$AA@ DB 'Password = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GNMPDDMO@Message?5header?5length?5doesn?8t?5ma@
CONST	SEGMENT
??_C@_0DD@GNMPDDMO@Message?5header?5length?5doesn?8t?5ma@ DB 'Message hea'
	DB	'der length doesn''t match message size: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03NLJIHOMM@?5?9?5?$AA@
CONST	SEGMENT
??_C@_03NLJIHOMM@?5?9?5?$AA@ DB ' - ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OEPJJONH@Bad?5message?$AA@
CONST	SEGMENT
??_C@_0M@OEPJJONH@Bad?5message?$AA@ DB 'Bad message', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GCBGJEHM@Received?5stun?5message?3?5?$AA@
CONST	SEGMENT
??_C@_0BI@GCBGJEHM@Received?5stun?5message?3?5?$AA@ DB 'Received stun mes'
	DB	'sage: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06LCIDCBMH@?5bytes?$AA@
CONST	SEGMENT
??_C@_06LCIDCBMH@?5bytes?$AA@ DB ' bytes', 00H		; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\stun.cpp
CONST	ENDS
;	COMDAT ?stunParseMessage@@YA_NPADIAAUStunMessage@@_N@Z
_TEXT	SEGMENT
_size$ = -8						; size = 4
_attrLen$87092 = -4					; size = 4
_buf$ = 8						; size = 4
_body$ = 12						; size = 4
_bufLen$ = 12						; size = 4
_msg$ = 16						; size = 4
_verbose$ = 20						; size = 1
?stunParseMessage@@YA_NPADIAAUStunMessage@@_N@Z PROC	; stunParseMessage, COMDAT

; 185  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 186  :    if (verbose) clog << "Received stun message: " << bufLen << " bytes" << endl;

  00005	80 7d 14 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	bf 00 00 00 00	 mov	 edi, OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00010	74 2b		 je	 SHORT $LN69@stunParseM
  00012	68 00 00 00 00	 push	 OFFSET ??_C@_06LCIDCBMH@?5bytes?$AA@
  00017	ff 75 0c	 push	 DWORD PTR _bufLen$[ebp]
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GCBGJEHM@Received?5stun?5message?3?5?$AA@
  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00025	59		 pop	 ecx
  00026	59		 pop	 ecx
  00027	8b c8		 mov	 ecx, eax
  00029	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN69@stunParseM:

; 187  :    memset(&msg, 0, sizeof(msg));

  0003d	8b 5d 10	 mov	 ebx, DWORD PTR _msg$[ebp]
  00040	68 91 04 00 00	 push	 1169			; 00000491H
  00045	6a 00		 push	 0
  00047	53		 push	 ebx
  00048	e8 00 00 00 00	 call	 _memset
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 188  : 	
; 189  :    if (sizeof(StunMsgHdr) > bufLen)

  00050	83 7d 0c 14	 cmp	 DWORD PTR _bufLen$[ebp], 20 ; 00000014H
  00054	73 1b		 jae	 SHORT $LN63@stunParseM

; 190  :    {
; 191  :       clog << "Bad message" << endl;

  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OEPJJONH@Bad?5message?$AA@
  0005b	57		 push	 edi
  0005c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH

; 192  :       return false;

  0006a	32 c0		 xor	 al, al
  0006c	e9 68 01 00 00	 jmp	 $LN65@stunParseM
$LN63@stunParseM:
  00071	56		 push	 esi

; 193  :    }
; 194  : 	
; 195  :    memcpy(&msg.msgHdr, buf, sizeof(StunMsgHdr));

  00072	6a 14		 push	 20			; 00000014H
  00074	ff 75 08	 push	 DWORD PTR _buf$[ebp]
  00077	53		 push	 ebx
  00078	e8 00 00 00 00	 call	 _memcpy

; 196  :    msg.msgHdr.msgType = ntohs(msg.msgHdr.msgType);

  0007d	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00080	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__ntohs@4
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH
  00089	50		 push	 eax
  0008a	ff d6		 call	 esi
  0008c	66 89 03	 mov	 WORD PTR [ebx], ax

; 197  :    msg.msgHdr.msgLength = ntohs(msg.msgHdr.msgLength);

  0008f	0f b7 43 02	 movzx	 eax, WORD PTR [ebx+2]
  00093	50		 push	 eax
  00094	ff d6		 call	 esi

; 198  : 	
; 199  :    if (msg.msgHdr.msgLength + sizeof(StunMsgHdr) != bufLen)

  00096	0f b7 c8	 movzx	 ecx, ax
  00099	8d 51 14	 lea	 edx, DWORD PTR [ecx+20]
  0009c	66 89 43 02	 mov	 WORD PTR [ebx+2], ax
  000a0	3b 55 0c	 cmp	 edx, DWORD PTR _bufLen$[ebp]
  000a3	74 38		 je	 SHORT $LN62@stunParseM

; 200  :    {
; 201  :       clog << "Message header length doesn't match message size: " << msg.msgHdr.msgLength << " - " << bufLen << endl;

  000a5	ff 75 0c	 push	 DWORD PTR _bufLen$[ebp]
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_03NLJIHOMM@?5?9?5?$AA@
  000ad	50		 push	 eax
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@GNMPDDMO@Message?5header?5length?5doesn?8t?5ma@
  000b3	57		 push	 edi
  000b4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000b9	59		 pop	 ecx
  000ba	59		 pop	 ecx
  000bb	8b c8		 mov	 ecx, eax
  000bd	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000c8	59		 pop	 ecx
  000c9	59		 pop	 ecx
  000ca	8b c8		 mov	 ecx, eax
  000cc	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  000d7	59		 pop	 ecx

; 202  :       return false;

  000d8	e9 19 05 00 00	 jmp	 $LN153@stunParseM
$LN62@stunParseM:

; 203  :    }
; 204  : 	
; 205  :    char* body = buf + sizeof(StunMsgHdr);

  000dd	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  000e0	83 c0 14	 add	 eax, 20			; 00000014H
  000e3	89 45 0c	 mov	 DWORD PTR _body$[ebp], eax

; 206  :    unsigned int size = msg.msgHdr.msgLength;

  000e6	89 4d f8	 mov	 DWORD PTR _size$[ebp], ecx

; 207  : 	
; 208  :    //clog << "bytes after header = " << size << endl;
; 209  : 	
; 210  :    while ( size > 0 )

  000e9	85 c9		 test	 ecx, ecx
  000eb	0f 84 e5 00 00
	00		 je	 $LN162@stunParseM
$LL61@stunParseM:

; 211  :    {
; 212  :       // !jf! should check that there are enough bytes left in the buffer
; 213  : 		
; 214  :       StunAtrHdr* attr = reinterpret_cast<StunAtrHdr*>(body);
; 215  : 		
; 216  :       unsigned int attrLen = ntohs(attr->length);

  000f1	8b 45 0c	 mov	 eax, DWORD PTR _body$[ebp]
  000f4	0f b7 40 02	 movzx	 eax, WORD PTR [eax+2]
  000f8	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__ntohs@4
  000fe	50		 push	 eax
  000ff	ff d6		 call	 esi
  00101	0f b7 c0	 movzx	 eax, ax
  00104	89 45 fc	 mov	 DWORD PTR _attrLen$87092[ebp], eax

; 217  :       int atrType = ntohs(attr->type);

  00107	8b 45 0c	 mov	 eax, DWORD PTR _body$[ebp]
  0010a	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0010d	50		 push	 eax
  0010e	ff d6		 call	 esi
  00110	0f b7 f0	 movzx	 esi, ax

; 218  : 		
; 219  :       //if (verbose) clog << "Found attribute type=" << AttrNames[atrType] << " length=" << attrLen << endl;
; 220  :       if ( attrLen+4 > size ) 

  00113	8b 45 fc	 mov	 eax, DWORD PTR _attrLen$87092[ebp]
  00116	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00119	3b 4d f8	 cmp	 ecx, DWORD PTR _size$[ebp]
  0011c	0f 87 47 04 00
	00		 ja	 $LN138@stunParseM

; 224  :       }
; 225  : 		
; 226  :       body += 4; // skip the length and type in attribute header

  00122	83 45 0c 04	 add	 DWORD PTR _body$[ebp], 4

; 227  :       size -= 4;

  00126	83 6d f8 04	 sub	 DWORD PTR _size$[ebp], 4

; 228  : 		
; 229  :       switch ( atrType )

  0012a	83 fe 50	 cmp	 esi, 80			; 00000050H
  0012d	0f 8f e8 03 00
	00		 jg	 $LN67@stunParseM
  00133	0f 84 8f 03 00
	00		 je	 $LN7@stunParseM
  00139	83 fe 08	 cmp	 esi, 8
  0013c	0f 8f fa 01 00
	00		 jg	 $LN68@stunParseM
  00142	0f 84 cf 01 00
	00		 je	 $LN28@stunParseM
  00148	8b c6		 mov	 eax, esi
  0014a	48		 dec	 eax
  0014b	0f 84 93 01 00
	00		 je	 $LN56@stunParseM
  00151	48		 dec	 eax
  00152	0f 84 59 01 00
	00		 je	 $LN52@stunParseM
  00158	48		 dec	 eax
  00159	0f 84 09 01 00
	00		 je	 $LN48@stunParseM
  0015f	48		 dec	 eax
  00160	0f 84 cf 00 00
	00		 je	 $LN44@stunParseM
  00166	48		 dec	 eax
  00167	0f 84 99 00 00
	00		 je	 $LN40@stunParseM
  0016d	48		 dec	 eax
  0016e	74 6d		 je	 SHORT $LN36@stunParseM
  00170	48		 dec	 eax
  00171	0f 85 a4 03 00
	00		 jne	 $LN67@stunParseM

; 310  : 				
; 311  :          case Password: 
; 312  :             msg.hasPassword = true;
; 313  :             if (stunParseAtrString( body, attrLen, msg.password) == false)

  00177	ff 75 0c	 push	 DWORD PTR _body$[ebp]
  0017a	c6 83 40 01 00
	00 01		 mov	 BYTE PTR [ebx+320], 1
  00181	8d b3 41 01 00
	00		 lea	 esi, DWORD PTR [ebx+321]
  00187	8b 5d fc	 mov	 ebx, DWORD PTR _attrLen$87092[ebp]
  0018a	e8 00 00 00 00	 call	 ?stunParseAtrString@@YA_NPADIAAUStunAtrString@@@Z ; stunParseAtrString
  0018f	59		 pop	 ecx
  00190	84 c0		 test	 al, al
  00192	0f 84 fb 03 00
	00		 je	 $LN139@stunParseM

; 317  :             }
; 318  :             else
; 319  :             {
; 320  :                if (verbose) clog << "Password = " << msg.password.value << endl;

  00198	80 7d 14 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  0019c	74 21		 je	 SHORT $LN160@stunParseM
  0019e	56		 push	 esi
  0019f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BFGNMPHC@Password?5?$DN?5?$AA@
$LN168@stunParseM:
  001a4	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  001a9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001ae	59		 pop	 ecx
  001af	59		 pop	 ecx
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  001bc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN160@stunParseM:

; 420  :             }
; 421  :             break;  

  001bf	8b 5d 10	 mov	 ebx, DWORD PTR _msg$[ebp]
$LN167@stunParseM:
  001c2	bf 00 00 00 00	 mov	 edi, OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
$LN164@stunParseM:

; 428  :             }
; 429  :       }
; 430  : 		
; 431  :       body += attrLen;

  001c7	8b 45 fc	 mov	 eax, DWORD PTR _attrLen$87092[ebp]
  001ca	01 45 0c	 add	 DWORD PTR _body$[ebp], eax

; 432  :       size -= attrLen;

  001cd	29 45 f8	 sub	 DWORD PTR _size$[ebp], eax
  001d0	0f 85 1b ff ff
	ff		 jne	 $LL61@stunParseM
$LN162@stunParseM:

; 433  :    }
; 434  :     
; 435  :    return true;

  001d6	b0 01		 mov	 al, 1
$LN166@stunParseM:
  001d8	5e		 pop	 esi
$LN65@stunParseM:
  001d9	5f		 pop	 edi
  001da	5b		 pop	 ebx

; 436  : }

  001db	c9		 leave
  001dc	c3		 ret	 0
$LN36@stunParseM:

; 296  : 				
; 297  :          case Username: 
; 298  :             msg.hasUsername = true;
; 299  :             if (stunParseAtrString( body, attrLen, msg.username) == false)

  001dd	ff 75 0c	 push	 DWORD PTR _body$[ebp]
  001e0	c6 43 3d 01	 mov	 BYTE PTR [ebx+61], 1
  001e4	8d 73 3e	 lea	 esi, DWORD PTR [ebx+62]
  001e7	8b 5d fc	 mov	 ebx, DWORD PTR _attrLen$87092[ebp]
  001ea	e8 00 00 00 00	 call	 ?stunParseAtrString@@YA_NPADIAAUStunAtrString@@@Z ; stunParseAtrString
  001ef	59		 pop	 ecx
  001f0	84 c0		 test	 al, al
  001f2	0f 84 a5 03 00
	00		 je	 $LN140@stunParseM

; 303  :             }
; 304  :             else
; 305  :             {
; 306  :                if (verbose) clog << "Username = " << msg.username.value << endl;

  001f8	80 7d 14 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  001fc	74 c1		 je	 SHORT $LN160@stunParseM
  001fe	56		 push	 esi
  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LKLEOICH@Username?5?$DN?5?$AA@

; 307  :             }
; 308  : 					
; 309  :             break;

  00204	eb 9e		 jmp	 SHORT $LN168@stunParseM
$LN40@stunParseM:

; 283  : 				
; 284  :          case ChangedAddress:
; 285  :             msg.hasChangedAddress = true;
; 286  :             if ( stunParseAtrAddress(  body,  attrLen,  msg.changedAddress )== false )

  00206	ff 75 fc	 push	 DWORD PTR _attrLen$87092[ebp]
  00209	8b 45 0c	 mov	 eax, DWORD PTR _body$[ebp]
  0020c	8d 73 35	 lea	 esi, DWORD PTR [ebx+53]
  0020f	c6 43 34 01	 mov	 BYTE PTR [ebx+52], 1
  00213	e8 00 00 00 00	 call	 ?stunParseAtrAddress@@YA_NPADIAAUStunAtrAddress4@@@Z ; stunParseAtrAddress
  00218	59		 pop	 ecx
  00219	84 c0		 test	 al, al
  0021b	0f 84 86 03 00
	00		 je	 $LN141@stunParseM

; 290  :             }
; 291  :             else
; 292  :             {
; 293  :                if (verbose) clog << "ChangedAddress = " << msg.changedAddress.ipv4 << endl;

  00221	80 7d 14 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00225	74 a0		 je	 SHORT $LN164@stunParseM
  00227	8d 43 37	 lea	 eax, DWORD PTR [ebx+55]
  0022a	50		 push	 eax
  0022b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GHJJIAHO@ChangedAddress?5?$DN?5?$AA@

; 294  :             }
; 295  :             break;  

  00230	e9 ca 02 00 00	 jmp	 $LN170@stunParseM
$LN44@stunParseM:

; 270  : 				
; 271  :          case SourceAddress:
; 272  :             msg.hasSourceAddress = true;
; 273  :             if ( stunParseAtrAddress(  body,  attrLen,  msg.sourceAddress )== false )

  00235	ff 75 fc	 push	 DWORD PTR _attrLen$87092[ebp]
  00238	8b 45 0c	 mov	 eax, DWORD PTR _body$[ebp]
  0023b	8d 73 2c	 lea	 esi, DWORD PTR [ebx+44]
  0023e	c6 43 2b 01	 mov	 BYTE PTR [ebx+43], 1
  00242	e8 00 00 00 00	 call	 ?stunParseAtrAddress@@YA_NPADIAAUStunAtrAddress4@@@Z ; stunParseAtrAddress
  00247	59		 pop	 ecx
  00248	84 c0		 test	 al, al
  0024a	0f 84 5e 03 00
	00		 je	 $LN142@stunParseM

; 277  :             }
; 278  :             else
; 279  :             {
; 280  :                if (verbose) clog << "SourceAddress = " << msg.sourceAddress.ipv4 << endl;

  00250	80 7d 14 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00254	0f 84 6d ff ff
	ff		 je	 $LN164@stunParseM
  0025a	8d 43 2e	 lea	 eax, DWORD PTR [ebx+46]
  0025d	50		 push	 eax
  0025e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@HGFLKCLI@SourceAddress?5?$DN?5?$AA@

; 281  :             }
; 282  :             break;  

  00263	e9 97 02 00 00	 jmp	 $LN170@stunParseM
$LN48@stunParseM:

; 257  : 				
; 258  :          case ChangeRequest:
; 259  :             msg.hasChangeRequest = true;
; 260  :             if (stunParseAtrChangeRequest( body, attrLen, msg.changeRequest) == false)

  00268	ff 75 fc	 push	 DWORD PTR _attrLen$87092[ebp]
  0026b	8d 43 27	 lea	 eax, DWORD PTR [ebx+39]
  0026e	ff 75 0c	 push	 DWORD PTR _body$[ebp]
  00271	c6 43 26 01	 mov	 BYTE PTR [ebx+38], 1
  00275	e8 00 00 00 00	 call	 ?stunParseAtrChangeRequest@@YA_NPADIAAUStunAtrChangeRequest@@@Z ; stunParseAtrChangeRequest
  0027a	59		 pop	 ecx
  0027b	59		 pop	 ecx
  0027c	84 c0		 test	 al, al
  0027e	0f 84 31 03 00
	00		 je	 $LN143@stunParseM

; 264  :             }
; 265  :             else
; 266  :             {
; 267  :                if (verbose) clog << "ChangeRequest = " << msg.changeRequest.value << endl;

  00284	80 7d 14 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00288	0f 84 39 ff ff
	ff		 je	 $LN164@stunParseM
  0028e	ff 73 27	 push	 DWORD PTR [ebx+39]
  00291	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FIHHOFII@ChangeRequest?5?$DN?5?$AA@
  00296	57		 push	 edi
  00297	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0029c	59		 pop	 ecx
  0029d	59		 pop	 ecx
  0029e	8b c8		 mov	 ecx, eax
  002a0	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  002a5	50		 push	 eax
  002a6	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  002ab	59		 pop	 ecx

; 268  :             }
; 269  :             break;

  002ac	e9 16 ff ff ff	 jmp	 $LN164@stunParseM
$LN52@stunParseM:

; 244  : 
; 245  :          case ResponseAddress:
; 246  :             msg.hasResponseAddress = true;
; 247  :             if ( stunParseAtrAddress(  body,  attrLen,  msg.responseAddress )== false )

  002b1	ff 75 fc	 push	 DWORD PTR _attrLen$87092[ebp]
  002b4	8b 45 0c	 mov	 eax, DWORD PTR _body$[ebp]
  002b7	8d 73 1e	 lea	 esi, DWORD PTR [ebx+30]
  002ba	c6 43 1d 01	 mov	 BYTE PTR [ebx+29], 1
  002be	e8 00 00 00 00	 call	 ?stunParseAtrAddress@@YA_NPADIAAUStunAtrAddress4@@@Z ; stunParseAtrAddress
  002c3	59		 pop	 ecx
  002c4	84 c0		 test	 al, al
  002c6	0f 84 f0 02 00
	00		 je	 $LN144@stunParseM

; 251  :             }
; 252  :             else
; 253  :             {
; 254  :                if (verbose) clog << "ResponseAddress = " << msg.responseAddress.ipv4 << endl;

  002cc	80 7d 14 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  002d0	0f 84 f1 fe ff
	ff		 je	 $LN164@stunParseM
  002d6	8d 43 20	 lea	 eax, DWORD PTR [ebx+32]
  002d9	50		 push	 eax
  002da	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@NBDAGAJC@ResponseAddress?5?$DN?5?$AA@

; 255  :             }
; 256  :             break;  

  002df	e9 1b 02 00 00	 jmp	 $LN170@stunParseM
$LN56@stunParseM:

; 230  :       {
; 231  :          case MappedAddress:
; 232  :             msg.hasMappedAddress = true;
; 233  :             if ( stunParseAtrAddress(  body,  attrLen,  msg.mappedAddress )== false )

  002e4	ff 75 fc	 push	 DWORD PTR _attrLen$87092[ebp]
  002e7	8b 45 0c	 mov	 eax, DWORD PTR _body$[ebp]
  002ea	8d 73 15	 lea	 esi, DWORD PTR [ebx+21]
  002ed	c6 43 14 01	 mov	 BYTE PTR [ebx+20], 1
  002f1	e8 00 00 00 00	 call	 ?stunParseAtrAddress@@YA_NPADIAAUStunAtrAddress4@@@Z ; stunParseAtrAddress
  002f6	59		 pop	 ecx
  002f7	84 c0		 test	 al, al
  002f9	0f 84 c4 02 00
	00		 je	 $LN145@stunParseM

; 237  :             }
; 238  :             else
; 239  :             {
; 240  :                if (verbose) clog << "MappedAddress = " << msg.mappedAddress.ipv4 << endl;

  002ff	80 7d 14 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00303	0f 84 be fe ff
	ff		 je	 $LN164@stunParseM
  00309	8d 43 17	 lea	 eax, DWORD PTR [ebx+23]
  0030c	50		 push	 eax
  0030d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OJAFNMGM@MappedAddress?5?$DN?5?$AA@

; 241  :             }
; 242  : 					
; 243  :             break;  

  00312	e9 e8 01 00 00	 jmp	 $LN170@stunParseM
$LN28@stunParseM:

; 321  :             }
; 322  :             break;
; 323  : 				
; 324  :          case MessageIntegrity:
; 325  :             msg.hasMessageIntegrity = true;

  00317	c6 83 43 02 00
	00 01		 mov	 BYTE PTR [ebx+579], 1

; 326  :             if (stunParseAtrIntegrity( body, attrLen, msg.messageIntegrity) == false)

  0031e	83 f8 14	 cmp	 eax, 20			; 00000014H
  00321	0f 85 27 02 00
	00		 jne	 $LN155@stunParseM
  00327	50		 push	 eax
  00328	ff 75 0c	 push	 DWORD PTR _body$[ebp]
  0032b	8d 83 44 02 00
	00		 lea	 eax, DWORD PTR [ebx+580]
  00331	50		 push	 eax
  00332	e8 00 00 00 00	 call	 _memcpy

; 330  :             }
; 331  :             else
; 332  :             {
; 333  :                //if (verbose) clog << "MessageIntegrity = " << msg.messageIntegrity.hash << endl;
; 334  :             }
; 335  : 					
; 336  :             // read the current HMAC
; 337  :             // look up the password given the user of given the transaction id 
; 338  :             // compute the HMAC on the buffer
; 339  :             // decide if they match or not
; 340  :             break;

  00337	e9 d7 01 00 00	 jmp	 $LN171@stunParseM
$LN68@stunParseM:

; 228  : 		
; 229  :       switch ( atrType )

  0033c	8b c6		 mov	 eax, esi
  0033e	83 e8 09	 sub	 eax, 9
  00341	0f 84 08 01 00
	00		 je	 $LN25@stunParseM
  00347	48		 dec	 eax
  00348	0f 84 d1 00 00
	00		 je	 $LN21@stunParseM
  0034e	48		 dec	 eax
  0034f	0f 84 9f 00 00
	00		 je	 $LN19@stunParseM
  00355	83 e8 15	 sub	 eax, 21			; 00000015H
  00358	74 61		 je	 SHORT $LN17@stunParseM
  0035a	48		 dec	 eax
  0035b	74 3d		 je	 SHORT $LN13@stunParseM
  0035d	48		 dec	 eax
  0035e	0f 85 b7 01 00
	00		 jne	 $LN67@stunParseM

; 396  : 				
; 397  :          case ServerName: 
; 398  :             msg.hasServerName = true;
; 399  :             if (stunParseAtrString( body, attrLen, msg.serverName) == false)

  00364	ff 75 0c	 push	 DWORD PTR _body$[ebp]
  00367	c6 83 85 03 00
	00 01		 mov	 BYTE PTR [ebx+901], 1
  0036e	8d b3 86 03 00
	00		 lea	 esi, DWORD PTR [ebx+902]
  00374	8b 5d fc	 mov	 ebx, DWORD PTR _attrLen$87092[ebp]
  00377	e8 00 00 00 00	 call	 ?stunParseAtrString@@YA_NPADIAAUStunAtrString@@@Z ; stunParseAtrString
  0037c	59		 pop	 ecx
  0037d	84 c0		 test	 al, al
  0037f	0f 84 45 02 00
	00		 je	 $LN147@stunParseM

; 403  :             }
; 404  :             else
; 405  :             {
; 406  :                if (verbose) clog << "ServerName = " << msg.serverName.value << endl;

  00385	80 7d 14 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00389	0f 84 30 fe ff
	ff		 je	 $LN160@stunParseM
  0038f	56		 push	 esi
  00390	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LMOECMOH@ServerName?5?$DN?5?$AA@

; 407  :             }
; 408  :             break;

  00395	e9 0a fe ff ff	 jmp	 $LN168@stunParseM
$LN13@stunParseM:

; 388  : 
; 389  :          case XorOnly:
; 390  :             msg.xorOnly = true;
; 391  :             if (verbose) 

  0039a	80 7d 14 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  0039e	c6 83 84 03 00
	00 01		 mov	 BYTE PTR [ebx+900], 1
  003a5	0f 84 1c fe ff
	ff		 je	 $LN164@stunParseM

; 392  :             {
; 393  :                clog << "xorOnly = true" << endl;

  003ab	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IGCMKEFP@xorOnly?5?$DN?5true?$AA@
  003b0	57		 push	 edi
$LN172@stunParseM:
  003b1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 394  :             }
; 395  :             break;  

  003b6	e9 52 01 00 00	 jmp	 $LN169@stunParseM
$LN17@stunParseM:

; 373  :             }
; 374  :             break;  
; 375  : 				
; 376  :          case XorMappedAddress:
; 377  :             msg.hasXorMappedAddress = true;
; 378  :             if ( stunParseAtrAddress(  body,  attrLen,  msg.xorMappedAddress ) == false )

  003bb	ff 75 fc	 push	 DWORD PTR _attrLen$87092[ebp]
  003be	8b 45 0c	 mov	 eax, DWORD PTR _body$[ebp]
  003c1	8d b3 7c 03 00
	00		 lea	 esi, DWORD PTR [ebx+892]
  003c7	c6 83 7b 03 00
	00 01		 mov	 BYTE PTR [ebx+891], 1
  003ce	e8 00 00 00 00	 call	 ?stunParseAtrAddress@@YA_NPADIAAUStunAtrAddress4@@@Z ; stunParseAtrAddress
  003d3	59		 pop	 ecx
  003d4	84 c0		 test	 al, al
  003d6	0f 84 f8 01 00
	00		 je	 $LN148@stunParseM

; 382  :             }
; 383  :             else
; 384  :             {
; 385  :                if (verbose) clog << "XorMappedAddress = " << msg.mappedAddress.ipv4 << endl;

  003dc	80 7d 14 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  003e0	0f 84 e1 fd ff
	ff		 je	 $LN164@stunParseM
  003e6	8d 43 17	 lea	 eax, DWORD PTR [ebx+23]
  003e9	50		 push	 eax
  003ea	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@IDHFJIOE@XorMappedAddress?5?$DN?5?$AA@

; 386  :             }
; 387  :             break;  

  003ef	e9 0b 01 00 00	 jmp	 $LN170@stunParseM
$LN19@stunParseM:

; 364  :             }
; 365  :             break;
; 366  : 				
; 367  :          case ReflectedFrom:
; 368  :             msg.hasReflectedFrom = true;
; 369  :             if ( stunParseAtrAddress(  body,  attrLen,  msg.reflectedFrom ) == false )

  003f4	ff 75 fc	 push	 DWORD PTR _attrLen$87092[ebp]
  003f7	8b 45 0c	 mov	 eax, DWORD PTR _body$[ebp]
  003fa	8d b3 73 03 00
	00		 lea	 esi, DWORD PTR [ebx+883]
  00400	c6 83 72 03 00
	00 01		 mov	 BYTE PTR [ebx+882], 1
  00407	e8 00 00 00 00	 call	 ?stunParseAtrAddress@@YA_NPADIAAUStunAtrAddress4@@@Z ; stunParseAtrAddress
  0040c	59		 pop	 ecx
  0040d	84 c0		 test	 al, al
  0040f	0f 85 b2 fd ff
	ff		 jne	 $LN164@stunParseM

; 370  :             {
; 371  :                clog << "problem parsing ReflectedFrom" << endl;

  00415	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NDELOMMB@problem?5parsing?5ReflectedFrom?$AA@

; 372  :                return false;

  0041a	e9 c8 01 00 00	 jmp	 $LN174@stunParseM
$LN21@stunParseM:

; 357  : 				
; 358  :          case UnknownAttribute:
; 359  :             msg.hasUnknownAttributes = true;
; 360  :             if (stunParseAtrUnknown(body, attrLen, msg.unknownAttributes) == false)

  0041f	ff 75 0c	 push	 DWORD PTR _body$[ebp]
  00422	8b 45 fc	 mov	 eax, DWORD PTR _attrLen$87092[ebp]
  00425	8d bb 60 03 00
	00		 lea	 edi, DWORD PTR [ebx+864]
  0042b	c6 83 5f 03 00
	00 01		 mov	 BYTE PTR [ebx+863], 1
  00432	e8 00 00 00 00	 call	 ?stunParseAtrUnknown@@YA_NPADIAAUStunAtrUnknown@@@Z ; stunParseAtrUnknown
  00437	59		 pop	 ecx
  00438	84 c0		 test	 al, al
  0043a	0f 85 82 fd ff
	ff		 jne	 $LN167@stunParseM

; 361  :             {
; 362  :                clog << "problem parsing UnknownAttribute" << endl;

  00440	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@PDJNNLDG@problem?5parsing?5UnknownAttribute@
$LN175@stunParseM:
  00445	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog

; 363  :                return false;

  0044a	e9 99 01 00 00	 jmp	 $LN173@stunParseM
$LN25@stunParseM:

; 341  : 				
; 342  :          case ErrorCode:
; 343  :             msg.hasErrorCode = true;
; 344  :             if (stunParseAtrError(body, attrLen, msg.errorCode) == false)

  0044f	8b 45 fc	 mov	 eax, DWORD PTR _attrLen$87092[ebp]
  00452	8b 4d 0c	 mov	 ecx, DWORD PTR _body$[ebp]
  00455	8d b3 59 02 00
	00		 lea	 esi, DWORD PTR [ebx+601]
  0045b	c6 83 58 02 00
	00 01		 mov	 BYTE PTR [ebx+600], 1
  00462	e8 00 00 00 00	 call	 ?stunParseAtrError@@YA_NPADIAAUStunAtrError@@@Z ; stunParseAtrError
  00467	84 c0		 test	 al, al
  00469	0f 84 6c 01 00
	00		 je	 $LN151@stunParseM

; 348  :             }
; 349  :             else
; 350  :             {
; 351  :                if (verbose) clog << "ErrorCode = " << int(msg.errorCode.errorClass) 

  0046f	80 7d 14 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00473	0f 84 4e fd ff
	ff		 je	 $LN164@stunParseM

; 352  :                                  << " " << int(msg.errorCode.number) 
; 353  :                                  << " " << msg.errorCode.reason << endl;

  00479	0f b6 8b 5c 02
	00 00		 movzx	 ecx, BYTE PTR [ebx+604]
  00480	8d 83 5d 02 00
	00		 lea	 eax, DWORD PTR [ebx+605]
  00486	50		 push	 eax
  00487	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  0048c	50		 push	 eax
  0048d	51		 push	 ecx
  0048e	50		 push	 eax
  0048f	0f b6 83 5b 02
	00 00		 movzx	 eax, BYTE PTR [ebx+603]
  00496	50		 push	 eax
  00497	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MBPBGKBO@ErrorCode?5?$DN?5?$AA@
  0049c	57		 push	 edi
  0049d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  004a2	59		 pop	 ecx
  004a3	59		 pop	 ecx
  004a4	8b c8		 mov	 ecx, eax
  004a6	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  004ab	50		 push	 eax
  004ac	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  004b1	59		 pop	 ecx
  004b2	59		 pop	 ecx
  004b3	8b c8		 mov	 ecx, eax
  004b5	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  004ba	50		 push	 eax
  004bb	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  004c0	59		 pop	 ecx
  004c1	59		 pop	 ecx
  004c2	50		 push	 eax

; 354  :             }
; 355  : 					
; 356  :             break;

  004c3	e9 e9 fe ff ff	 jmp	 $LN172@stunParseM
$LN7@stunParseM:

; 409  : 				
; 410  :          case SecondaryAddress:
; 411  :             msg.hasSecondaryAddress = true;
; 412  :             if ( stunParseAtrAddress(  body,  attrLen,  msg.secondaryAddress ) == false )

  004c8	ff 75 fc	 push	 DWORD PTR _attrLen$87092[ebp]
  004cb	8b 45 0c	 mov	 eax, DWORD PTR _body$[ebp]
  004ce	8d b3 89 04 00
	00		 lea	 esi, DWORD PTR [ebx+1161]
  004d4	c6 83 88 04 00
	00 01		 mov	 BYTE PTR [ebx+1160], 1
  004db	e8 00 00 00 00	 call	 ?stunParseAtrAddress@@YA_NPADIAAUStunAtrAddress4@@@Z ; stunParseAtrAddress
  004e0	59		 pop	 ecx
  004e1	84 c0		 test	 al, al
  004e3	0f 84 f9 00 00
	00		 je	 $LN152@stunParseM

; 415  :                return false;
; 416  :             }
; 417  :             else
; 418  :             {
; 419  :                if (verbose) clog << "SecondaryAddress = " << msg.secondaryAddress.ipv4 << endl;

  004e9	80 7d 14 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  004ed	0f 84 d4 fc ff
	ff		 je	 $LN164@stunParseM
  004f3	8d 83 8b 04 00
	00		 lea	 eax, DWORD PTR [ebx+1163]
  004f9	50		 push	 eax
  004fa	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BHPGFMLA@SecondaryAddress?5?$DN?5?$AA@
$LN170@stunParseM:
  004ff	57		 push	 edi
  00500	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00505	59		 pop	 ecx
  00506	59		 pop	 ecx
  00507	50		 push	 eax
  00508	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
$LN169@stunParseM:
  0050d	50		 push	 eax
  0050e	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
$LN171@stunParseM:
  00513	83 c4 0c	 add	 esp, 12			; 0000000cH

; 420  :             }
; 421  :             break;  

  00516	e9 ac fc ff ff	 jmp	 $LN164@stunParseM
$LN67@stunParseM:

; 422  : 					
; 423  :          default:
; 424  :             if (verbose) clog << "Unknown attribute: " << atrType << endl;

  0051b	80 7d 14 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  0051f	74 1c		 je	 SHORT $LN135@stunParseM
  00521	56		 push	 esi
  00522	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@OPDHDJFG@Unknown?5attribute?3?5?$AA@
  00527	57		 push	 edi
  00528	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0052d	59		 pop	 ecx
  0052e	59		 pop	 ecx
  0052f	8b c8		 mov	 ecx, eax
  00531	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00536	50		 push	 eax
  00537	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0053c	59		 pop	 ecx
$LN135@stunParseM:

; 425  :             if ( atrType <= 0x7FFF ) 

  0053d	81 fe ff 7f 00
	00		 cmp	 esi, 32767		; 00007fffH
  00543	0f 8e ad 00 00
	00		 jle	 $LN153@stunParseM
  00549	e9 79 fc ff ff	 jmp	 $LN164@stunParseM
$LN155@stunParseM:

; 326  :             if (stunParseAtrIntegrity( body, attrLen, msg.messageIntegrity) == false)

  0054e	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FMJFMHNK@MessageIntegrity?5must?5be?520?5byte@
  00553	57		 push	 edi
  00554	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00559	50		 push	 eax
  0055a	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0055f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 327  :             {
; 328  :                clog << "problem parsing MessageIntegrity" << endl;

  00562	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@PJGJDGEM@problem?5parsing?5MessageIntegrity@

; 329  :                return false;

  00567	eb 7e		 jmp	 SHORT $LN174@stunParseM
$LN138@stunParseM:

; 221  :       {
; 222  :          clog << "claims attribute is larger than size of message " <<"(attribute type="<<atrType<<")"<< endl;

  00569	68 00 00 00 00	 push	 OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
  0056e	56		 push	 esi
  0056f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LAKBDLMI@?$CIattribute?5type?$DN?$AA@
  00574	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@DKFBBPGG@claims?5attribute?5is?5larger?5than?5@
  00579	57		 push	 edi
  0057a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0057f	59		 pop	 ecx
  00580	59		 pop	 ecx
  00581	50		 push	 eax
  00582	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00587	59		 pop	 ecx
  00588	59		 pop	 ecx
  00589	8b c8		 mov	 ecx, eax
  0058b	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00590	50		 push	 eax

; 223  :          return false;

  00591	eb 55		 jmp	 SHORT $LN173@stunParseM
$LN139@stunParseM:

; 314  :             {
; 315  :                clog << "problem parsing Password" << endl;

  00593	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@ICBFKICH@problem?5parsing?5Password?$AA@

; 316  :                return false;

  00598	e9 a8 fe ff ff	 jmp	 $LN175@stunParseM
$LN140@stunParseM:

; 300  :             {
; 301  :                clog << "problem parsing Username" << endl;

  0059d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LKAAPGKD@problem?5parsing?5Username?$AA@

; 302  :                return false;

  005a2	e9 9e fe ff ff	 jmp	 $LN175@stunParseM
$LN141@stunParseM:

; 287  :             {
; 288  :                clog << "problem parsing ChangedAddress" << endl;

  005a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@IEGGBCLM@problem?5parsing?5ChangedAddress?$AA@

; 289  :                return false;

  005ac	eb 39		 jmp	 SHORT $LN174@stunParseM
$LN142@stunParseM:

; 274  :             {
; 275  :                clog << "problem parsing SourceAddress" << endl;

  005ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@LOFBPAJL@problem?5parsing?5SourceAddress?$AA@

; 276  :                return false;

  005b3	eb 32		 jmp	 SHORT $LN174@stunParseM
$LN143@stunParseM:

; 261  :             {
; 262  :                clog << "problem parsing ChangeRequest" << endl;

  005b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@PNLAAONJ@problem?5parsing?5ChangeRequest?$AA@

; 263  :                return false;

  005ba	eb 2b		 jmp	 SHORT $LN174@stunParseM
$LN144@stunParseM:

; 248  :             {
; 249  :                clog << "problem parsing ResponseAddress" << endl;

  005bc	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@EHNEEKMJ@problem?5parsing?5ResponseAddress?$AA@

; 250  :                return false;

  005c1	eb 24		 jmp	 SHORT $LN174@stunParseM
$LN145@stunParseM:

; 234  :             {
; 235  :                clog << "problem parsing MappedAddress" << endl;

  005c3	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DDDEDPBC@problem?5parsing?5MappedAddress?$AA@

; 236  :                return false;

  005c8	eb 1d		 jmp	 SHORT $LN174@stunParseM
$LN147@stunParseM:

; 400  :             {
; 401  :                clog << "problem parsing ServerName" << endl;

  005ca	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IJNJDJHA@problem?5parsing?5ServerName?$AA@

; 402  :                return false;

  005cf	e9 71 fe ff ff	 jmp	 $LN175@stunParseM
$LN148@stunParseM:

; 379  :             {
; 380  :                clog << "problem parsing XorMappedAddress" << endl;

  005d4	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@IEFFDMD@problem?5parsing?5XorMappedAddress@

; 381  :                return false;

  005d9	eb 0c		 jmp	 SHORT $LN174@stunParseM
$LN151@stunParseM:

; 345  :             {
; 346  :                clog << "problem parsing ErrorCode" << endl;

  005db	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@HDJDCBOJ@problem?5parsing?5ErrorCode?$AA@

; 347  :                return false;

  005e0	eb 05		 jmp	 SHORT $LN174@stunParseM
$LN152@stunParseM:

; 413  :             {
; 414  :                clog << "problem parsing secondaryAddress" << endl;

  005e2	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@GJKHBANH@problem?5parsing?5secondaryAddress@
$LN174@stunParseM:
  005e7	57		 push	 edi
$LN173@stunParseM:
  005e8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  005ed	50		 push	 eax
  005ee	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  005f3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN153@stunParseM:

; 426  :             {
; 427  :                return false;

  005f6	32 c0		 xor	 al, al
  005f8	e9 db fb ff ff	 jmp	 $LN166@stunParseM
?stunParseMessage@@YA_NPADIAAUStunMessage@@_N@Z ENDP	; stunParseMessage
_TEXT	ENDS
PUBLIC	??_C@_0BF@NBGHEMFO@HMAC?5with?5password?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BM@CABNMKNF@Encoding?5SecondaryAddress?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BG@JKHGOEJC@Encoding?5ServerName?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BD@FMMKAEL@Encoding?5xorOnly?3?5?$AA@	; `string'
PUBLIC	??_C@_0BM@MHOCBKFM@Encoding?5XorMappedAddress?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MCAOCAIA@Encoding?5ReflectedFrom?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BP@JIMFNDPN@Encoding?5UnknownAttribute?3?5?$DP?$DP?$DP?$AA@ ; `string'
PUBLIC	??_C@_0BL@JPEDEMHI@Encoding?5ErrorCode?3?5class?$DN?$AA@ ; `string'
PUBLIC	??_C@_08IGMLOPOP@?5number?$DN?$AA@		; `string'
PUBLIC	??_C@_08JKMCJDHM@?5reason?$DN?$AA@		; `string'
PUBLIC	??_C@_0BE@KKGBLINP@Encoding?5Password?3?5?$AA@	; `string'
PUBLIC	??_C@_0BE@HJFNKBHG@Encoding?5Username?3?5?$AA@	; `string'
PUBLIC	??_C@_0BK@MOLIFLAH@Encoding?5ChangedAddress?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BJ@JGFLKEAL@Encoding?5SourceAddress?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OBBBFHG@Encoding?5ChangeRequest?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BL@BJFJAHCK@Encoding?5ResponseAddress?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BJ@HHMBNFEN@Encoding?5MappedAddress?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BI@NDMOCNKF@Encoding?5stun?5message?3?5?$AA@ ; `string'
PUBLIC	_buf$GSCopy$
PUBLIC	_password$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?stunEncodeMessage@@YAIABUStunMessage@@PADIABUStunAtrString@@_N@Z ; stunEncodeMessage
;	COMDAT ??_C@_0BF@NBGHEMFO@HMAC?5with?5password?3?5?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
CONST	SEGMENT
??_C@_0BF@NBGHEMFO@HMAC?5with?5password?3?5?$AA@ DB 'HMAC with password: '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CABNMKNF@Encoding?5SecondaryAddress?3?5?$AA@
CONST	SEGMENT
??_C@_0BM@CABNMKNF@Encoding?5SecondaryAddress?3?5?$AA@ DB 'Encoding Secon'
	DB	'daryAddress: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JKHGOEJC@Encoding?5ServerName?3?5?$AA@
CONST	SEGMENT
??_C@_0BG@JKHGOEJC@Encoding?5ServerName?3?5?$AA@ DB 'Encoding ServerName:'
	DB	' ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FMMKAEL@Encoding?5xorOnly?3?5?$AA@
CONST	SEGMENT
??_C@_0BD@FMMKAEL@Encoding?5xorOnly?3?5?$AA@ DB 'Encoding xorOnly: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MHOCBKFM@Encoding?5XorMappedAddress?3?5?$AA@
CONST	SEGMENT
??_C@_0BM@MHOCBKFM@Encoding?5XorMappedAddress?3?5?$AA@ DB 'Encoding XorMa'
	DB	'ppedAddress: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MCAOCAIA@Encoding?5ReflectedFrom?3?5?$AA@
CONST	SEGMENT
??_C@_0BJ@MCAOCAIA@Encoding?5ReflectedFrom?3?5?$AA@ DB 'Encoding Reflecte'
	DB	'dFrom: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JIMFNDPN@Encoding?5UnknownAttribute?3?5?$DP?$DP?$DP?$AA@
CONST	SEGMENT
??_C@_0BP@JIMFNDPN@Encoding?5UnknownAttribute?3?5?$DP?$DP?$DP?$AA@ DB 'En'
	DB	'coding UnknownAttribute: ???', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JPEDEMHI@Encoding?5ErrorCode?3?5class?$DN?$AA@
CONST	SEGMENT
??_C@_0BL@JPEDEMHI@Encoding?5ErrorCode?3?5class?$DN?$AA@ DB 'Encoding Err'
	DB	'orCode: class=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IGMLOPOP@?5number?$DN?$AA@
CONST	SEGMENT
??_C@_08IGMLOPOP@?5number?$DN?$AA@ DB ' number=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JKMCJDHM@?5reason?$DN?$AA@
CONST	SEGMENT
??_C@_08JKMCJDHM@?5reason?$DN?$AA@ DB ' reason=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KKGBLINP@Encoding?5Password?3?5?$AA@
CONST	SEGMENT
??_C@_0BE@KKGBLINP@Encoding?5Password?3?5?$AA@ DB 'Encoding Password: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HJFNKBHG@Encoding?5Username?3?5?$AA@
CONST	SEGMENT
??_C@_0BE@HJFNKBHG@Encoding?5Username?3?5?$AA@ DB 'Encoding Username: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MOLIFLAH@Encoding?5ChangedAddress?3?5?$AA@
CONST	SEGMENT
??_C@_0BK@MOLIFLAH@Encoding?5ChangedAddress?3?5?$AA@ DB 'Encoding Changed'
	DB	'Address: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JGFLKEAL@Encoding?5SourceAddress?3?5?$AA@
CONST	SEGMENT
??_C@_0BJ@JGFLKEAL@Encoding?5SourceAddress?3?5?$AA@ DB 'Encoding SourceAd'
	DB	'dress: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OBBBFHG@Encoding?5ChangeRequest?3?5?$AA@
CONST	SEGMENT
??_C@_0BJ@OBBBFHG@Encoding?5ChangeRequest?3?5?$AA@ DB 'Encoding ChangeReq'
	DB	'uest: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BJFJAHCK@Encoding?5ResponseAddress?3?5?$AA@
CONST	SEGMENT
??_C@_0BL@BJFJAHCK@Encoding?5ResponseAddress?3?5?$AA@ DB 'Encoding Respon'
	DB	'seAddress: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HHMBNFEN@Encoding?5MappedAddress?3?5?$AA@
CONST	SEGMENT
??_C@_0BJ@HHMBNFEN@Encoding?5MappedAddress?3?5?$AA@ DB 'Encoding MappedAd'
	DB	'dress: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NDMOCNKF@Encoding?5stun?5message?3?5?$AA@
CONST	SEGMENT
??_C@_0BI@NDMOCNKF@Encoding?5stun?5message?3?5?$AA@ DB 'Encoding stun mes'
	DB	'sage: ', 00H				; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\stun.cpp
CONST	ENDS
;	COMDAT ?stunEncodeMessage@@YAIABUStunMessage@@PADIABUStunAtrString@@_N@Z
_TEXT	SEGMENT
_lengthp$ = -40						; size = 4
_password$GSCopy$ = -36					; size = 4
_buf$GSCopy$ = -32					; size = 4
_ptr$ = -28						; size = 4
_integrity$87524 = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_msg$ = 8						; size = 4
_buf$ = 12						; size = 4
_bufLen$ = 16						; size = 4
_password$ = 20						; size = 4
_verbose$ = 24						; size = 1
?stunEncodeMessage@@YAIABUStunMessage@@PADIABUStunAtrString@@_N@Z PROC ; stunEncodeMessage, COMDAT

; 547  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 548  :    char* ptr = buf;
; 549  : 	
; 550  :    ptr = encode16(ptr, msg.msgHdr.msgType);
; 551  :    char* lengthp = ptr;

  00010	8b 45 14	 mov	 eax, DWORD PTR _password$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _msg$[ebp]
  00017	56		 push	 esi
  00018	8b 75 0c	 mov	 esi, DWORD PTR _buf$[ebp]
  0001b	89 45 dc	 mov	 DWORD PTR _password$GSCopy$[ebp], eax
  0001e	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00021	57		 push	 edi
  00022	50		 push	 eax
  00023	89 75 e0	 mov	 DWORD PTR _buf$GSCopy$[ebp], esi
  00026	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16

; 552  :    ptr = encode16(ptr, 0);

  0002b	6a 00		 push	 0
  0002d	8b f0		 mov	 esi, eax
  0002f	89 45 d8	 mov	 DWORD PTR _lengthp$[ebp], eax
  00032	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16
  00037	89 45 e4	 mov	 DWORD PTR _ptr$[ebp], eax

; 553  :    ptr = encode(ptr, reinterpret_cast<const char*>(msg.msgHdr.id.octet), sizeof(msg.msgHdr.id));

  0003a	6a 10		 push	 16			; 00000010H
  0003c	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0003f	50		 push	 eax
  00040	ff 75 e4	 push	 DWORD PTR _ptr$[ebp]
  00043	e8 00 00 00 00	 call	 _memcpy
  00048	83 45 e4 10	 add	 DWORD PTR _ptr$[ebp], 16 ; 00000010H
  0004c	83 c4 14	 add	 esp, 20			; 00000014H

; 554  : 	
; 555  :    if (verbose) clog << "Encoding stun message: " << endl;

  0004f	80 7d 18 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00053	be 00 00 00 00	 mov	 esi, OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00058	74 14		 je	 SHORT $LN37@stunEncode
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NDMOCNKF@Encoding?5stun?5message?3?5?$AA@
  0005f	56		 push	 esi
  00060	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN37@stunEncode:

; 556  :    if (msg.hasMappedAddress)

  0006e	80 7b 14 00	 cmp	 BYTE PTR [ebx+20], 0
  00072	74 37		 je	 SHORT $LN31@stunEncode

; 557  :    {
; 558  :       if (verbose) clog << "Encoding MappedAddress: " << msg.mappedAddress.ipv4 << endl;

  00074	80 7d 18 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00078	74 20		 je	 SHORT $LN39@stunEncode
  0007a	8d 43 17	 lea	 eax, DWORD PTR [ebx+23]
  0007d	50		 push	 eax
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HHMBNFEN@Encoding?5MappedAddress?3?5?$AA@
  00083	56		 push	 esi
  00084	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00089	59		 pop	 ecx
  0008a	59		 pop	 ecx
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN39@stunEncode:

; 559  :       ptr = encodeAtrAddress4 (ptr, MappedAddress, msg.mappedAddress);

  0009a	8b 45 e4	 mov	 eax, DWORD PTR _ptr$[ebp]
  0009d	8d 7b 15	 lea	 edi, DWORD PTR [ebx+21]
  000a0	6a 01		 push	 1
  000a2	e8 00 00 00 00	 call	 ?encodeAtrAddress4@@YAPADPADGABUStunAtrAddress4@@@Z ; encodeAtrAddress4
  000a7	59		 pop	 ecx
  000a8	89 45 e4	 mov	 DWORD PTR _ptr$[ebp], eax
$LN31@stunEncode:

; 560  :    }
; 561  :    if (msg.hasResponseAddress)

  000ab	80 7b 1d 00	 cmp	 BYTE PTR [ebx+29], 0
  000af	74 37		 je	 SHORT $LN29@stunEncode

; 562  :    {
; 563  :       if (verbose) clog << "Encoding ResponseAddress: " << msg.responseAddress.ipv4 << endl;

  000b1	80 7d 18 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  000b5	74 20		 je	 SHORT $LN41@stunEncode
  000b7	8d 43 20	 lea	 eax, DWORD PTR [ebx+32]
  000ba	50		 push	 eax
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BJFJAHCK@Encoding?5ResponseAddress?3?5?$AA@
  000c0	56		 push	 esi
  000c1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000c6	59		 pop	 ecx
  000c7	59		 pop	 ecx
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN41@stunEncode:

; 564  :       ptr = encodeAtrAddress4(ptr, ResponseAddress, msg.responseAddress);

  000d7	8b 45 e4	 mov	 eax, DWORD PTR _ptr$[ebp]
  000da	8d 7b 1e	 lea	 edi, DWORD PTR [ebx+30]
  000dd	6a 02		 push	 2
  000df	e8 00 00 00 00	 call	 ?encodeAtrAddress4@@YAPADPADGABUStunAtrAddress4@@@Z ; encodeAtrAddress4
  000e4	59		 pop	 ecx
  000e5	89 45 e4	 mov	 DWORD PTR _ptr$[ebp], eax
$LN29@stunEncode:

; 565  :    }
; 566  :    if (msg.hasChangeRequest)

  000e8	80 7b 26 00	 cmp	 BYTE PTR [ebx+38], 0
  000ec	74 4c		 je	 SHORT $LN27@stunEncode

; 567  :    {
; 568  :       if (verbose) clog << "Encoding ChangeRequest: " << msg.changeRequest.value << endl;

  000ee	80 7d 18 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  000f2	74 1e		 je	 SHORT $LN43@stunEncode
  000f4	ff 73 27	 push	 DWORD PTR [ebx+39]
  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@OBBBFHG@Encoding?5ChangeRequest?3?5?$AA@
  000fc	56		 push	 esi
  000fd	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00102	59		 pop	 ecx
  00103	59		 pop	 ecx
  00104	8b c8		 mov	 ecx, eax
  00106	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00111	59		 pop	 ecx
$LN43@stunEncode:

; 569  :       ptr = encodeAtrChangeRequest(ptr, msg.changeRequest);

  00112	8b 75 e4	 mov	 esi, DWORD PTR _ptr$[ebp]
  00115	6a 03		 push	 3
  00117	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16
  0011c	6a 04		 push	 4
  0011e	8b f0		 mov	 esi, eax
  00120	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16
  00125	ff 73 27	 push	 DWORD PTR [ebx+39]
  00128	8b f0		 mov	 esi, eax
  0012a	e8 00 00 00 00	 call	 ?encode32@@YAPADPADI@Z	; encode32
  0012f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00132	89 45 e4	 mov	 DWORD PTR _ptr$[ebp], eax
  00135	be 00 00 00 00	 mov	 esi, OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
$LN27@stunEncode:

; 570  :    }
; 571  :    if (msg.hasSourceAddress)

  0013a	80 7b 2b 00	 cmp	 BYTE PTR [ebx+43], 0
  0013e	74 37		 je	 SHORT $LN25@stunEncode

; 572  :    {
; 573  :       if (verbose) clog << "Encoding SourceAddress: " << msg.sourceAddress.ipv4 << endl;

  00140	80 7d 18 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00144	74 20		 je	 SHORT $LN47@stunEncode
  00146	8d 43 2e	 lea	 eax, DWORD PTR [ebx+46]
  00149	50		 push	 eax
  0014a	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JGFLKEAL@Encoding?5SourceAddress?3?5?$AA@
  0014f	56		 push	 esi
  00150	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00155	59		 pop	 ecx
  00156	59		 pop	 ecx
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00163	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN47@stunEncode:

; 574  :       ptr = encodeAtrAddress4(ptr, SourceAddress, msg.sourceAddress);

  00166	8b 45 e4	 mov	 eax, DWORD PTR _ptr$[ebp]
  00169	8d 7b 2c	 lea	 edi, DWORD PTR [ebx+44]
  0016c	6a 04		 push	 4
  0016e	e8 00 00 00 00	 call	 ?encodeAtrAddress4@@YAPADPADGABUStunAtrAddress4@@@Z ; encodeAtrAddress4
  00173	59		 pop	 ecx
  00174	89 45 e4	 mov	 DWORD PTR _ptr$[ebp], eax
$LN25@stunEncode:

; 575  :    }
; 576  :    if (msg.hasChangedAddress)

  00177	80 7b 34 00	 cmp	 BYTE PTR [ebx+52], 0
  0017b	74 37		 je	 SHORT $LN23@stunEncode

; 577  :    {
; 578  :       if (verbose) clog << "Encoding ChangedAddress: " << msg.changedAddress.ipv4 << endl;

  0017d	80 7d 18 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00181	74 20		 je	 SHORT $LN49@stunEncode
  00183	8d 43 37	 lea	 eax, DWORD PTR [ebx+55]
  00186	50		 push	 eax
  00187	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@MOLIFLAH@Encoding?5ChangedAddress?3?5?$AA@
  0018c	56		 push	 esi
  0018d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00192	59		 pop	 ecx
  00193	59		 pop	 ecx
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  001a0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN49@stunEncode:

; 579  :       ptr = encodeAtrAddress4(ptr, ChangedAddress, msg.changedAddress);

  001a3	8b 45 e4	 mov	 eax, DWORD PTR _ptr$[ebp]
  001a6	8d 7b 35	 lea	 edi, DWORD PTR [ebx+53]
  001a9	6a 05		 push	 5
  001ab	e8 00 00 00 00	 call	 ?encodeAtrAddress4@@YAPADPADGABUStunAtrAddress4@@@Z ; encodeAtrAddress4
  001b0	59		 pop	 ecx
  001b1	89 45 e4	 mov	 DWORD PTR _ptr$[ebp], eax
$LN23@stunEncode:

; 580  :    }
; 581  :    if (msg.hasUsername)

  001b4	80 7b 3d 00	 cmp	 BYTE PTR [ebx+61], 0
  001b8	74 39		 je	 SHORT $LN21@stunEncode

; 582  :    {
; 583  :       if (verbose) clog << "Encoding Username: " << msg.username.value << endl;

  001ba	80 7d 18 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  001be	74 20		 je	 SHORT $LN51@stunEncode
  001c0	8d 43 3e	 lea	 eax, DWORD PTR [ebx+62]
  001c3	50		 push	 eax
  001c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HJFNKBHG@Encoding?5Username?3?5?$AA@
  001c9	56		 push	 esi
  001ca	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001cf	59		 pop	 ecx
  001d0	59		 pop	 ecx
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001d7	50		 push	 eax
  001d8	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  001dd	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN51@stunEncode:

; 584  :       ptr = encodeAtrString(ptr, Username, msg.username);

  001e0	8d 43 3e	 lea	 eax, DWORD PTR [ebx+62]
  001e3	50		 push	 eax
  001e4	8b 45 e4	 mov	 eax, DWORD PTR _ptr$[ebp]
  001e7	6a 06		 push	 6
  001e9	e8 00 00 00 00	 call	 ?encodeAtrString@@YAPADPADGABUStunAtrString@@@Z ; encodeAtrString
  001ee	59		 pop	 ecx
  001ef	59		 pop	 ecx
  001f0	89 45 e4	 mov	 DWORD PTR _ptr$[ebp], eax
$LN21@stunEncode:

; 585  :    }
; 586  :    if (msg.hasPassword)

  001f3	80 bb 40 01 00
	00 00		 cmp	 BYTE PTR [ebx+320], 0
  001fa	74 3f		 je	 SHORT $LN19@stunEncode

; 587  :    {
; 588  :       if (verbose) clog << "Encoding Password: " << msg.password.value << endl;

  001fc	80 7d 18 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00200	74 23		 je	 SHORT $LN53@stunEncode
  00202	8d 83 41 01 00
	00		 lea	 eax, DWORD PTR [ebx+321]
  00208	50		 push	 eax
  00209	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KKGBLINP@Encoding?5Password?3?5?$AA@
  0020e	56		 push	 esi
  0020f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00214	59		 pop	 ecx
  00215	59		 pop	 ecx
  00216	50		 push	 eax
  00217	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0021c	50		 push	 eax
  0021d	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00222	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN53@stunEncode:

; 589  :       ptr = encodeAtrString(ptr, Password, msg.password);

  00225	8d 83 41 01 00
	00		 lea	 eax, DWORD PTR [ebx+321]
  0022b	50		 push	 eax
  0022c	8b 45 e4	 mov	 eax, DWORD PTR _ptr$[ebp]
  0022f	6a 07		 push	 7
  00231	e8 00 00 00 00	 call	 ?encodeAtrString@@YAPADPADGABUStunAtrString@@@Z ; encodeAtrString
  00236	59		 pop	 ecx
  00237	59		 pop	 ecx
  00238	89 45 e4	 mov	 DWORD PTR _ptr$[ebp], eax
$LN19@stunEncode:

; 590  :    }
; 591  :    if (msg.hasErrorCode)

  0023b	80 bb 58 02 00
	00 00		 cmp	 BYTE PTR [ebx+600], 0
  00242	74 72		 je	 SHORT $LN17@stunEncode

; 592  :    {
; 593  :       if (verbose) clog << "Encoding ErrorCode: class=" 

  00244	80 7d 18 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00248	74 5b		 je	 SHORT $LN55@stunEncode

; 594  : 			<< int(msg.errorCode.errorClass)  
; 595  : 			<< " number=" << int(msg.errorCode.number) 
; 596  : 			<< " reason=" 
; 597  : 			<< msg.errorCode.reason 
; 598  : 			<< endl;

  0024a	8d 83 5d 02 00
	00		 lea	 eax, DWORD PTR [ebx+605]
  00250	50		 push	 eax
  00251	0f b6 83 5c 02
	00 00		 movzx	 eax, BYTE PTR [ebx+604]
  00258	68 00 00 00 00	 push	 OFFSET ??_C@_08JKMCJDHM@?5reason?$DN?$AA@
  0025d	50		 push	 eax
  0025e	0f b6 83 5b 02
	00 00		 movzx	 eax, BYTE PTR [ebx+603]
  00265	68 00 00 00 00	 push	 OFFSET ??_C@_08IGMLOPOP@?5number?$DN?$AA@
  0026a	50		 push	 eax
  0026b	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JPEDEMHI@Encoding?5ErrorCode?3?5class?$DN?$AA@
  00270	56		 push	 esi
  00271	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00276	59		 pop	 ecx
  00277	59		 pop	 ecx
  00278	8b c8		 mov	 ecx, eax
  0027a	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0027f	50		 push	 eax
  00280	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00285	59		 pop	 ecx
  00286	59		 pop	 ecx
  00287	8b c8		 mov	 ecx, eax
  00289	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0028e	50		 push	 eax
  0028f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00294	59		 pop	 ecx
  00295	59		 pop	 ecx
  00296	50		 push	 eax
  00297	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0029c	50		 push	 eax
  0029d	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  002a2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN55@stunEncode:

; 599  : 		
; 600  :       ptr = encodeAtrError(ptr, msg.errorCode);

  002a5	8b 4d e4	 mov	 ecx, DWORD PTR _ptr$[ebp]
  002a8	8d 83 59 02 00
	00		 lea	 eax, DWORD PTR [ebx+601]
  002ae	e8 00 00 00 00	 call	 ?encodeAtrError@@YAPADPADABUStunAtrError@@@Z ; encodeAtrError
  002b3	89 45 e4	 mov	 DWORD PTR _ptr$[ebp], eax
$LN17@stunEncode:

; 601  :    }
; 602  :    if (msg.hasUnknownAttributes)

  002b6	80 bb 5f 03 00
	00 00		 cmp	 BYTE PTR [ebx+863], 0
  002bd	74 2b		 je	 SHORT $LN15@stunEncode

; 603  :    {
; 604  :       if (verbose) clog << "Encoding UnknownAttribute: ???" << endl;

  002bf	80 7d 18 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  002c3	74 14		 je	 SHORT $LN57@stunEncode
  002c5	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JIMFNDPN@Encoding?5UnknownAttribute?3?5?$DP?$DP?$DP?$AA@
  002ca	56		 push	 esi
  002cb	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002d0	50		 push	 eax
  002d1	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  002d6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN57@stunEncode:

; 605  :       ptr = encodeAtrUnknown(ptr, msg.unknownAttributes);

  002d9	8b 45 e4	 mov	 eax, DWORD PTR _ptr$[ebp]
  002dc	8d bb 60 03 00
	00		 lea	 edi, DWORD PTR [ebx+864]
  002e2	e8 00 00 00 00	 call	 ?encodeAtrUnknown@@YAPADPADABUStunAtrUnknown@@@Z ; encodeAtrUnknown
  002e7	89 45 e4	 mov	 DWORD PTR _ptr$[ebp], eax
$LN15@stunEncode:

; 606  :    }
; 607  :    if (msg.hasReflectedFrom)

  002ea	80 bb 72 03 00
	00 00		 cmp	 BYTE PTR [ebx+882], 0
  002f1	74 3d		 je	 SHORT $LN13@stunEncode

; 608  :    {
; 609  :       if (verbose) clog << "Encoding ReflectedFrom: " << msg.reflectedFrom.ipv4 << endl;

  002f3	80 7d 18 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  002f7	74 23		 je	 SHORT $LN59@stunEncode
  002f9	8d 83 75 03 00
	00		 lea	 eax, DWORD PTR [ebx+885]
  002ff	50		 push	 eax
  00300	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@MCAOCAIA@Encoding?5ReflectedFrom?3?5?$AA@
  00305	56		 push	 esi
  00306	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0030b	59		 pop	 ecx
  0030c	59		 pop	 ecx
  0030d	50		 push	 eax
  0030e	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  00313	50		 push	 eax
  00314	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00319	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN59@stunEncode:

; 610  :       ptr = encodeAtrAddress4(ptr, ReflectedFrom, msg.reflectedFrom);

  0031c	8b 45 e4	 mov	 eax, DWORD PTR _ptr$[ebp]
  0031f	8d bb 73 03 00
	00		 lea	 edi, DWORD PTR [ebx+883]
  00325	6a 0b		 push	 11			; 0000000bH
  00327	e8 00 00 00 00	 call	 ?encodeAtrAddress4@@YAPADPADGABUStunAtrAddress4@@@Z ; encodeAtrAddress4
  0032c	59		 pop	 ecx
  0032d	89 45 e4	 mov	 DWORD PTR _ptr$[ebp], eax
$LN13@stunEncode:

; 611  :    }
; 612  :    if (msg.hasXorMappedAddress)

  00330	80 bb 7b 03 00
	00 00		 cmp	 BYTE PTR [ebx+891], 0
  00337	74 3d		 je	 SHORT $LN11@stunEncode

; 613  :    {
; 614  :       if (verbose) clog << "Encoding XorMappedAddress: " << msg.xorMappedAddress.ipv4 << endl;

  00339	80 7d 18 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  0033d	74 23		 je	 SHORT $LN61@stunEncode
  0033f	8d 83 7e 03 00
	00		 lea	 eax, DWORD PTR [ebx+894]
  00345	50		 push	 eax
  00346	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MHOCBKFM@Encoding?5XorMappedAddress?3?5?$AA@
  0034b	56		 push	 esi
  0034c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00351	59		 pop	 ecx
  00352	59		 pop	 ecx
  00353	50		 push	 eax
  00354	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  00359	50		 push	 eax
  0035a	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0035f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN61@stunEncode:

; 615  :       ptr = encodeAtrAddress4 (ptr, XorMappedAddress, msg.xorMappedAddress);

  00362	8b 45 e4	 mov	 eax, DWORD PTR _ptr$[ebp]
  00365	8d bb 7c 03 00
	00		 lea	 edi, DWORD PTR [ebx+892]
  0036b	6a 20		 push	 32			; 00000020H
  0036d	e8 00 00 00 00	 call	 ?encodeAtrAddress4@@YAPADPADGABUStunAtrAddress4@@@Z ; encodeAtrAddress4
  00372	59		 pop	 ecx
  00373	89 45 e4	 mov	 DWORD PTR _ptr$[ebp], eax
$LN11@stunEncode:

; 616  :    }
; 617  :    if (msg.xorOnly)

  00376	80 bb 84 03 00
	00 00		 cmp	 BYTE PTR [ebx+900], 0
  0037d	74 2d		 je	 SHORT $LN9@stunEncode

; 618  :    {
; 619  :       if (verbose) clog << "Encoding xorOnly: " << endl;

  0037f	80 7d 18 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00383	74 14		 je	 SHORT $LN63@stunEncode
  00385	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FMMKAEL@Encoding?5xorOnly?3?5?$AA@
  0038a	56		 push	 esi
  0038b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00390	50		 push	 eax
  00391	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00396	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN63@stunEncode:

; 620  :       ptr = encodeXorOnly( ptr );

  00399	8b 75 e4	 mov	 esi, DWORD PTR _ptr$[ebp]
  0039c	6a 21		 push	 33			; 00000021H
  0039e	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16
  003a3	59		 pop	 ecx
  003a4	89 45 e4	 mov	 DWORD PTR _ptr$[ebp], eax
  003a7	be 00 00 00 00	 mov	 esi, OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
$LN9@stunEncode:

; 621  :    }
; 622  :    if (msg.hasServerName)

  003ac	80 bb 85 03 00
	00 00		 cmp	 BYTE PTR [ebx+901], 0
  003b3	74 3f		 je	 SHORT $LN7@stunEncode

; 623  :    {
; 624  :       if (verbose) clog << "Encoding ServerName: " << msg.serverName.value << endl;

  003b5	80 7d 18 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  003b9	74 23		 je	 SHORT $LN67@stunEncode
  003bb	8d 83 86 03 00
	00		 lea	 eax, DWORD PTR [ebx+902]
  003c1	50		 push	 eax
  003c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@JKHGOEJC@Encoding?5ServerName?3?5?$AA@
  003c7	56		 push	 esi
  003c8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003cd	59		 pop	 ecx
  003ce	59		 pop	 ecx
  003cf	50		 push	 eax
  003d0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003d5	50		 push	 eax
  003d6	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  003db	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN67@stunEncode:

; 625  :       ptr = encodeAtrString(ptr, ServerName, msg.serverName);

  003de	8d 83 86 03 00
	00		 lea	 eax, DWORD PTR [ebx+902]
  003e4	50		 push	 eax
  003e5	8b 45 e4	 mov	 eax, DWORD PTR _ptr$[ebp]
  003e8	6a 22		 push	 34			; 00000022H
  003ea	e8 00 00 00 00	 call	 ?encodeAtrString@@YAPADPADGABUStunAtrString@@@Z ; encodeAtrString
  003ef	59		 pop	 ecx
  003f0	59		 pop	 ecx
  003f1	89 45 e4	 mov	 DWORD PTR _ptr$[ebp], eax
$LN7@stunEncode:

; 626  :    }
; 627  :    if (msg.hasSecondaryAddress)

  003f4	80 bb 88 04 00
	00 00		 cmp	 BYTE PTR [ebx+1160], 0
  003fb	74 3d		 je	 SHORT $LN5@stunEncode

; 628  :    {
; 629  :       if (verbose) clog << "Encoding SecondaryAddress: " << msg.secondaryAddress.ipv4 << endl;

  003fd	80 7d 18 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00401	74 23		 je	 SHORT $LN69@stunEncode
  00403	8d 83 8b 04 00
	00		 lea	 eax, DWORD PTR [ebx+1163]
  00409	50		 push	 eax
  0040a	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@CABNMKNF@Encoding?5SecondaryAddress?3?5?$AA@
  0040f	56		 push	 esi
  00410	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00415	59		 pop	 ecx
  00416	59		 pop	 ecx
  00417	50		 push	 eax
  00418	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  0041d	50		 push	 eax
  0041e	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00423	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN69@stunEncode:

; 630  :       ptr = encodeAtrAddress4 (ptr, SecondaryAddress, msg.secondaryAddress);

  00426	8b 45 e4	 mov	 eax, DWORD PTR _ptr$[ebp]
  00429	8d bb 89 04 00
	00		 lea	 edi, DWORD PTR [ebx+1161]
  0042f	6a 50		 push	 80			; 00000050H
  00431	e8 00 00 00 00	 call	 ?encodeAtrAddress4@@YAPADPADGABUStunAtrAddress4@@@Z ; encodeAtrAddress4
  00436	59		 pop	 ecx
  00437	89 45 e4	 mov	 DWORD PTR _ptr$[ebp], eax
$LN5@stunEncode:

; 631  :    }
; 632  : 
; 633  :    if (password.sizeValue > 0)

  0043a	8b 45 dc	 mov	 eax, DWORD PTR _password$GSCopy$[ebp]
  0043d	66 83 b8 00 01
	00 00 00	 cmp	 WORD PTR [eax+256], 0
  00445	6a 14		 push	 20			; 00000014H
  00447	5f		 pop	 edi
  00448	76 5f		 jbe	 SHORT $LN84@stunEncode

; 634  :    {
; 635  :       if (verbose) clog << "HMAC with password: " << password.value << endl;

  0044a	80 7d 18 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  0044e	74 1d		 je	 SHORT $LN71@stunEncode
  00450	50		 push	 eax
  00451	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@NBGHEMFO@HMAC?5with?5password?3?5?$AA@
  00456	56		 push	 esi
  00457	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0045c	59		 pop	 ecx
  0045d	59		 pop	 ecx
  0045e	50		 push	 eax
  0045f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00464	50		 push	 eax
  00465	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0046a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN71@stunEncode:

; 636  : 		
; 637  :       StunAtrIntegrity integrity;
; 638  :       computeHmac(integrity.hash, buf, int(ptr-buf) , password.value, password.sizeValue);

  0046d	57		 push	 edi
  0046e	8d 45 e8	 lea	 eax, DWORD PTR _integrity$87524[ebp]
  00471	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@CBILOHLA@hmac?9not?9implemented?$AA@
  00476	50		 push	 eax
  00477	e8 00 00 00 00	 call	 _strncpy

; 639  :       ptr = encodeAtrIntegrity(ptr, integrity);

  0047c	8b 75 e4	 mov	 esi, DWORD PTR _ptr$[ebp]
  0047f	6a 08		 push	 8
  00481	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16
  00486	57		 push	 edi
  00487	8b f0		 mov	 esi, eax
  00489	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16
  0048e	8b f0		 mov	 esi, eax
  00490	57		 push	 edi
  00491	8d 45 e8	 lea	 eax, DWORD PTR _integrity$87524[ebp]
  00494	50		 push	 eax
  00495	56		 push	 esi
  00496	e8 00 00 00 00	 call	 _memcpy
  0049b	83 c4 20	 add	 esp, 32			; 00000020H
  0049e	83 c6 14	 add	 esi, 20			; 00000014H
  004a1	89 75 e4	 mov	 DWORD PTR _ptr$[ebp], esi
  004a4	be 00 00 00 00	 mov	 esi, OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
$LN84@stunEncode:

; 640  :    }
; 641  :    if (verbose) clog << endl;

  004a9	80 7d 18 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  004ad	74 10		 je	 SHORT $LN81@stunEncode
  004af	6a 0a		 push	 10			; 0000000aH
  004b1	8b ce		 mov	 ecx, esi
  004b3	e8 00 00 00 00	 call	 ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z ; std::basic_ostream<char,std::char_traits<char> >::put
  004b8	8b ce		 mov	 ecx, esi
  004ba	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN81@stunEncode:

; 642  : 	
; 643  :    encode16(lengthp, UInt16(ptr - buf - sizeof(StunMsgHdr)));

  004bf	8b 45 e4	 mov	 eax, DWORD PTR _ptr$[ebp]
  004c2	2b 45 e0	 sub	 eax, DWORD PTR _buf$GSCopy$[ebp]
  004c5	8b 75 d8	 mov	 esi, DWORD PTR _lengthp$[ebp]
  004c8	2b c7		 sub	 eax, edi
  004ca	50		 push	 eax
  004cb	e8 00 00 00 00	 call	 ?encode16@@YAPADPADG@Z	; encode16

; 644  :    return int(ptr - buf);

  004d0	8b 45 e4	 mov	 eax, DWORD PTR _ptr$[ebp]
  004d3	2b 45 e0	 sub	 eax, DWORD PTR _buf$GSCopy$[ebp]
  004d6	59		 pop	 ecx

; 645  : }

  004d7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004da	5f		 pop	 edi
  004db	5e		 pop	 esi
  004dc	33 cd		 xor	 ecx, ebp
  004de	5b		 pop	 ebx
  004df	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004e4	c9		 leave
  004e5	c3		 ret	 0
?stunEncodeMessage@@YAIABUStunMessage@@PADIABUStunAtrString@@_N@Z ENDP ; stunEncodeMessage
_TEXT	ENDS
PUBLIC	??_C@_02NJNOFBBI@?$CFx?$AA@			; `string'
PUBLIC	??_C@_0BA@LLCFHEFL@Vovida?4org?50?494?$AA@	; `string'
PUBLIC	??_C@_0M@JNKIGFHB@?7?5mapped?5?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0BA@EOFEFLLK@?7?5respond?5to?5?$DN?5?$AA@	; `string'
PUBLIC	??_C@_09IOOHKFPC@?7?5from?5?$DN?5?$AA@		; `string'
PUBLIC	??_C@_0O@MAFJAMNO@?7?5changePort?$DN?$AA@	; `string'
PUBLIC	??_C@_0M@BJJKHHAC@?7?5changeIp?$DN?$AA@		; `string'
PUBLIC	??_C@_08OFIPIGFC@?7?5flags?$DN?$AA@		; `string'
PUBLIC	??_C@_0BC@EFDBFKGE@Request?5is?5valid?3?$AA@	; `string'
PUBLIC	??_C@_0BD@EMEBIGMN@Invalid?5username?3?5?$AA@	; `string'
PUBLIC	??_C@_09HMMFBENF@Send?5430?4?$AA@		; `string'
PUBLIC	??_C@_0CO@FDGPPPCP@Unknown?5username?4?5Try?5test?5with?5@ ; `string'
PUBLIC	??_C@_0CC@FODCHMPJ@MessageIntegrity?5is?5bad?4?5Sending@ ; `string'
PUBLIC	??_C@_0BM@JKILABJG@Validating?5MessageIntegrity?$AA@ ; `string'
PUBLIC	??_C@_04CEJDCDCH@test?$AA@			; `string'
PUBLIC	??_C@_0BG@FLNFCGKF@Validating?5username?3?5?$AA@ ; `string'
PUBLIC	??_C@_0CK@PKAANLDE@No?5UserName?5and?5contains?5Message@ ; `string'
PUBLIC	??_C@_0BH@DDJKKMJN@No?5UserName?4?5Send?5432?4?$AA@ ; `string'
PUBLIC	??_C@_0CO@EGOKMPM@BindRequest?5does?5not?5contain?5Mes@ ; `string'
PUBLIC	??_C@_0DI@JOBKIPJJ@Received?5SharedSecretRequestMsg?5@ ; `string'
PUBLIC	??_C@_0CA@FLELELCL@Unknown?5or?5unsupported?5request?5?$AA@ ; `string'
PUBLIC	??_C@_0BC@LLIPNMDJ@Request?5parsed?5ok?$AA@	; `string'
PUBLIC	??_C@_0BG@JFKOBGAD@Request?5did?5not?5parse?$AA@ ; `string'
PUBLIC	_changeIp$GSCopy$
PUBLIC	_changePort$GSCopy$
PUBLIC	_hmacPassword$GSCopy$
PUBLIC	_destination$GSCopy$
PUBLIC	_from$GSCopy$
PUBLIC	_buf$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?stunServerProcessMsg@@YA_NPADIAAUStunAddress4@@111PAUStunMessage@@PAU1@PAUStunAtrString@@PA_N5_N@Z ; stunServerProcessMsg
EXTRN	_sscanf:PROC
EXTRN	_memcmp:PROC
EXTRN	_strcmp:PROC
;	COMDAT ??_C@_02NJNOFBBI@?$CFx?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
CONST	SEGMENT
??_C@_02NJNOFBBI@?$CFx?$AA@ DB '%x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LLCFHEFL@Vovida?4org?50?494?$AA@
CONST	SEGMENT
??_C@_0BA@LLCFHEFL@Vovida?4org?50?494?$AA@ DB 'Vovida.org 0.94', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JNKIGFHB@?7?5mapped?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0M@JNKIGFHB@?7?5mapped?5?$DN?5?$AA@ DB 09H, ' mapped = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EOFEFLLK@?7?5respond?5to?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0BA@EOFEFLLK@?7?5respond?5to?5?$DN?5?$AA@ DB 09H, ' respond to = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09IOOHKFPC@?7?5from?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_09IOOHKFPC@?7?5from?5?$DN?5?$AA@ DB 09H, ' from = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MAFJAMNO@?7?5changePort?$DN?$AA@
CONST	SEGMENT
??_C@_0O@MAFJAMNO@?7?5changePort?$DN?$AA@ DB 09H, ' changePort=', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BJJKHHAC@?7?5changeIp?$DN?$AA@
CONST	SEGMENT
??_C@_0M@BJJKHHAC@?7?5changeIp?$DN?$AA@ DB 09H, ' changeIp=', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OFIPIGFC@?7?5flags?$DN?$AA@
CONST	SEGMENT
??_C@_08OFIPIGFC@?7?5flags?$DN?$AA@ DB 09H, ' flags=', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EFDBFKGE@Request?5is?5valid?3?$AA@
CONST	SEGMENT
??_C@_0BC@EFDBFKGE@Request?5is?5valid?3?$AA@ DB 'Request is valid:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EMEBIGMN@Invalid?5username?3?5?$AA@
CONST	SEGMENT
??_C@_0BD@EMEBIGMN@Invalid?5username?3?5?$AA@ DB 'Invalid username: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HMMFBENF@Send?5430?4?$AA@
CONST	SEGMENT
??_C@_09HMMFBENF@Send?5430?4?$AA@ DB 'Send 430.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FDGPPPCP@Unknown?5username?4?5Try?5test?5with?5@
CONST	SEGMENT
??_C@_0CO@FDGPPPCP@Unknown?5username?4?5Try?5test?5with?5@ DB 'Unknown us'
	DB	'ername. Try test with password 1234', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FODCHMPJ@MessageIntegrity?5is?5bad?4?5Sending@
CONST	SEGMENT
??_C@_0CC@FODCHMPJ@MessageIntegrity?5is?5bad?4?5Sending@ DB 'MessageInteg'
	DB	'rity is bad. Sending ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JKILABJG@Validating?5MessageIntegrity?$AA@
CONST	SEGMENT
??_C@_0BM@JKILABJG@Validating?5MessageIntegrity?$AA@ DB 'Validating Messa'
	DB	'geIntegrity', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04CEJDCDCH@test?$AA@
CONST	SEGMENT
??_C@_04CEJDCDCH@test?$AA@ DB 'test', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FLNFCGKF@Validating?5username?3?5?$AA@
CONST	SEGMENT
??_C@_0BG@FLNFCGKF@Validating?5username?3?5?$AA@ DB 'Validating username:'
	DB	' ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PKAANLDE@No?5UserName?5and?5contains?5Message@
CONST	SEGMENT
??_C@_0CK@PKAANLDE@No?5UserName?5and?5contains?5Message@ DB 'No UserName '
	DB	'and contains MessageIntegrity', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DDJKKMJN@No?5UserName?4?5Send?5432?4?$AA@
CONST	SEGMENT
??_C@_0BH@DDJKKMJN@No?5UserName?4?5Send?5432?4?$AA@ DB 'No UserName. Send'
	DB	' 432.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@EGOKMPM@BindRequest?5does?5not?5contain?5Mes@
CONST	SEGMENT
??_C@_0CO@EGOKMPM@BindRequest?5does?5not?5contain?5Mes@ DB 'BindRequest d'
	DB	'oes not contain MessageIntegrity', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@JOBKIPJJ@Received?5SharedSecretRequestMsg?5@
CONST	SEGMENT
??_C@_0DI@JOBKIPJJ@Received?5SharedSecretRequestMsg?5@ DB 'Received Share'
	DB	'dSecretRequestMsg on udp. send error 433.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FLELELCL@Unknown?5or?5unsupported?5request?5?$AA@
CONST	SEGMENT
??_C@_0CA@FLELELCL@Unknown?5or?5unsupported?5request?5?$AA@ DB 'Unknown o'
	DB	'r unsupported request ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LLIPNMDJ@Request?5parsed?5ok?$AA@
CONST	SEGMENT
??_C@_0BC@LLIPNMDJ@Request?5parsed?5ok?$AA@ DB 'Request parsed ok', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JFKOBGAD@Request?5did?5not?5parse?$AA@
CONST	SEGMENT
??_C@_0BG@JFKOBGAD@Request?5did?5not?5parse?$AA@ DB 'Request did not pars'
	DB	'e', 00H					; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\stun.cpp
CONST	ENDS
;	COMDAT ?stunServerProcessMsg@@YA_NPADIAAUStunAddress4@@111PAUStunMessage@@PAU1@PAUStunAtrString@@PA_N5_N@Z
_TEXT	SEGMENT
_destination$GSCopy$ = -1240				; size = 4
_changeIp$GSCopy$ = -1236				; size = 4
_changePort$GSCopy$ = -1232				; size = 4
_buf$GSCopy$ = -1228					; size = 4
_flags$ = -1224						; size = 4
_respondTo$ = -1220					; size = 6
_hmacPassword$GSCopy$ = -1212				; size = 4
_source$87864 = -1212					; size = 4
_mapped$ = -1208					; size = 6
_from$GSCopy$ = -1200					; size = 4
_req$ = -1196						; size = 1169
_hmac$87776 = -24					; size = 20
_serverName$87860 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_buf$ = 8						; size = 4
_bufLen$ = 12						; size = 4
_from$ = 16						; size = 4
_secondary$ = 20					; size = 4
_myAddr$ = 24						; size = 4
_altAddr$ = 28						; size = 4
_resp$ = 32						; size = 4
_destination$ = 36					; size = 4
_hmacPassword$ = 40					; size = 4
_changePort$ = 44					; size = 4
_changeIp$ = 48						; size = 4
_verbose$ = 52						; size = 1
?stunServerProcessMsg@@YA_NPADIAAUStunAddress4@@111PAUStunMessage@@PAU1@PAUStunAtrString@@PA_N5_N@Z PROC ; stunServerProcessMsg, COMDAT

; 1004 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 04 00
	00		 sub	 esp, 1240		; 000004d8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1005 :     
; 1006 :    // set up information for default response 
; 1007 : 	
; 1008 :    memset( resp, 0 , sizeof(*resp) );
; 1009 : 	
; 1010 :    *changeIp = false;
; 1011 :    *changePort = false;
; 1012 : 	
; 1013 :    StunMessage req;
; 1014 :    int i;
; 1015 :    bool ok = stunParseMessage( buf,bufLen, req, verbose);
; 1016 : 	
; 1017 :    if (!ok)      // Complete garbage, drop it on the floor

  00013	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  00016	53		 push	 ebx
  00017	8b 5d 20	 mov	 ebx, DWORD PTR _resp$[ebp]
  0001a	56		 push	 esi
  0001b	8b 75 2c	 mov	 esi, DWORD PTR _changePort$[ebp]
  0001e	89 85 34 fb ff
	ff		 mov	 DWORD PTR _buf$GSCopy$[ebp], eax
  00024	8b 45 10	 mov	 eax, DWORD PTR _from$[ebp]
  00027	57		 push	 edi
  00028	8b 7d 30	 mov	 edi, DWORD PTR _changeIp$[ebp]

; 1192 :          {
; 1193 :             UInt32 source;
; 1194 : 					
; 1195 :             sscanf(req.username.value, "%x", &source);

  0002b	89 85 50 fb ff
	ff		 mov	 DWORD PTR _from$GSCopy$[ebp], eax
  00031	8b 45 24	 mov	 eax, DWORD PTR _destination$[ebp]
  00034	68 91 04 00 00	 push	 1169			; 00000491H
  00039	89 85 28 fb ff
	ff		 mov	 DWORD PTR _destination$GSCopy$[ebp], eax
  0003f	8b 45 28	 mov	 eax, DWORD PTR _hmacPassword$[ebp]
  00042	6a 00		 push	 0
  00044	53		 push	 ebx
  00045	89 85 44 fb ff
	ff		 mov	 DWORD PTR _hmacPassword$GSCopy$[ebp], eax
  0004b	89 b5 30 fb ff
	ff		 mov	 DWORD PTR _changePort$GSCopy$[ebp], esi
  00051	89 bd 2c fb ff
	ff		 mov	 DWORD PTR _changeIp$GSCopy$[ebp], edi
  00057	e8 00 00 00 00	 call	 _memset
  0005c	ff 75 34	 push	 DWORD PTR _verbose$[ebp]
  0005f	8d 85 54 fb ff
	ff		 lea	 eax, DWORD PTR _req$[ebp]
  00065	50		 push	 eax
  00066	ff 75 0c	 push	 DWORD PTR _bufLen$[ebp]
  00069	c6 07 00	 mov	 BYTE PTR [edi], 0
  0006c	ff b5 34 fb ff
	ff		 push	 DWORD PTR _buf$GSCopy$[ebp]
  00072	c6 06 00	 mov	 BYTE PTR [esi], 0
  00075	e8 00 00 00 00	 call	 ?stunParseMessage@@YA_NPADIAAUStunMessage@@_N@Z ; stunParseMessage
  0007a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0007d	84 c0		 test	 al, al
  0007f	75 24		 jne	 SHORT $LN40@stunServer

; 1018 :    {
; 1019 :       if (verbose) clog << "Request did not parse" << endl;

  00081	38 45 34	 cmp	 BYTE PTR _verbose$[ebp], al
  00084	74 18		 je	 SHORT $LN47@stunServer
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@JFKOBGAD@Request?5did?5not?5parse?$AA@
$LN95@stunServer:
  0008b	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00090	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN47@stunServer:

; 1020 :       return false;

  0009e	32 c0		 xor	 al, al
  000a0	e9 58 05 00 00	 jmp	 $LN41@stunServer
$LN40@stunServer:

; 1021 :    }
; 1022 :    if (verbose) clog << "Request parsed ok" << endl;

  000a5	80 7d 34 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  000a9	74 18		 je	 SHORT $LN49@stunServer
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LLIPNMDJ@Request?5parsed?5ok?$AA@
  000b0	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  000b5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN49@stunServer:

; 1023 : 	
; 1024 :    StunAddress4 mapped = req.mappedAddress.ipv4;
; 1025 :    StunAddress4 respondTo = req.responseAddress.ipv4;
; 1026 :    UInt32 flags = req.changeRequest.value;

  000c3	8b 85 7b fb ff
	ff		 mov	 eax, DWORD PTR _req$[ebp+39]
  000c9	8d b5 6b fb ff
	ff		 lea	 esi, DWORD PTR _req$[ebp+23]
  000cf	8d bd 48 fb ff
	ff		 lea	 edi, DWORD PTR _mapped$[ebp]
  000d5	a5		 movsd
  000d6	66 a5		 movsw
  000d8	8d b5 74 fb ff
	ff		 lea	 esi, DWORD PTR _req$[ebp+32]
  000de	8d bd 3c fb ff
	ff		 lea	 edi, DWORD PTR _respondTo$[ebp]
  000e4	89 85 38 fb ff
	ff		 mov	 DWORD PTR _flags$[ebp], eax

; 1027 : 	
; 1028 :    switch (req.msgHdr.msgType)

  000ea	0f b7 85 54 fb
	ff ff		 movzx	 eax, WORD PTR _req$[ebp]
  000f1	48		 dec	 eax
  000f2	a5		 movsd
  000f3	66 a5		 movsw
  000f5	74 72		 je	 SHORT $LN33@stunServer
  000f7	48		 dec	 eax
  000f8	74 0d		 je	 SHORT $LN35@stunServer

; 1205 : 			
; 1206 :       default:
; 1207 :          if (verbose) clog << "Unknown or unsupported request " << endl;

  000fa	80 7d 34 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  000fe	74 9e		 je	 SHORT $LN47@stunServer
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@FLELELCL@Unknown?5or?5unsupported?5request?5?$AA@

; 1208 :          return false;

  00105	eb 84		 jmp	 SHORT $LN95@stunServer
$LN35@stunServer:

; 1029 :    {
; 1030 :       case SharedSecretRequestMsg:
; 1031 :          if(verbose) clog << "Received SharedSecretRequestMsg on udp. send error 433." << endl;

  00107	80 7d 34 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  0010b	74 18		 je	 SHORT $LN51@stunServer
  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@JOBKIPJJ@Received?5SharedSecretRequestMsg?5@
  00112	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00117	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00122	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN51@stunServer:

; 1032 :          // !cj! - should fix so you know if this came over TLS or UDP
; 1033 :          stunCreateSharedSecretResponse(req, from, *resp);

  00125	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  00128	8d b5 58 fb ff
	ff		 lea	 esi, DWORD PTR _req$[ebp+4]
  0012e	a5		 movsd
  0012f	a5		 movsd
  00130	a5		 movsd
  00131	a5		 movsd
  00132	8d 73 3e	 lea	 esi, DWORD PTR [ebx+62]
  00135	56		 push	 esi
  00136	ff b5 50 fb ff
	ff		 push	 DWORD PTR _from$GSCopy$[ebp]
  0013c	b8 02 01 00 00	 mov	 eax, 258		; 00000102H
  00141	66 89 03	 mov	 WORD PTR [ebx], ax
  00144	c6 43 3d 01	 mov	 BYTE PTR [ebx+61], 1
  00148	e8 00 00 00 00	 call	 ?stunCreateUserName@@YAXABUStunAddress4@@PAUStunAtrString@@@Z ; stunCreateUserName
  0014d	c6 83 40 01 00
	00 01		 mov	 BYTE PTR [ebx+320], 1
  00154	81 c3 41 01 00
	00		 add	 ebx, 321		; 00000141H
  0015a	53		 push	 ebx
  0015b	56		 push	 esi
  0015c	e8 00 00 00 00	 call	 ?stunCreatePassword@@YAXABUStunAtrString@@PAU1@@Z ; stunCreatePassword
  00161	83 c4 10	 add	 esp, 16			; 00000010H

; 1034 :          //stunCreateSharedSecretErrorResponse(*resp, 4, 33, "this request must be over TLS");
; 1035 :          return true;

  00164	e9 92 04 00 00	 jmp	 $LN92@stunServer
$LN33@stunServer:

; 1036 : 			
; 1037 :       case BindRequestMsg:
; 1038 :          if (!req.hasMessageIntegrity)

  00169	80 bd 97 fd ff
	ff 00		 cmp	 BYTE PTR _req$[ebp+579], 0
  00170	75 19		 jne	 SHORT $LN32@stunServer

; 1039 :          {
; 1040 :             if (verbose) clog << "BindRequest does not contain MessageIntegrity" << endl;

  00172	80 7d 34 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00176	0f 84 41 01 00
	00		 je	 $LN88@stunServer
  0017c	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@EGOKMPM@BindRequest?5does?5not?5contain?5Mes@
  00181	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog

; 1041 : 				
; 1042 :             if (0) // !jf! mustAuthenticate
; 1043 :             {
; 1044 :                if(verbose) clog << "Received BindRequest with no MessageIntegrity. Sending 401." << endl;
; 1045 :                stunCreateErrorResponse(*resp, 4, 1, "Missing MessageIntegrity");
; 1046 :                return true;
; 1047 :             }
; 1048 :          }
; 1049 :          else

  00186	e9 24 01 00 00	 jmp	 $LN93@stunServer
$LN32@stunServer:

; 1050 :          {
; 1051 :             if (!req.hasUsername)

  0018b	80 bd 91 fb ff
	ff 00		 cmp	 BYTE PTR _req$[ebp+61], 0
  00192	75 36		 jne	 SHORT $LN27@stunServer

; 1052 :             {
; 1053 :                if (verbose) clog << "No UserName. Send 432." << endl;

  00194	80 7d 34 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00198	74 18		 je	 SHORT $LN59@stunServer
  0019a	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@DDJKKMJN@No?5UserName?4?5Send?5432?4?$AA@
  0019f	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  001a4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001a9	50		 push	 eax
  001aa	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  001af	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN59@stunServer:

; 1054 :                stunCreateErrorResponse(*resp, 4, 32, "No UserName and contains MessageIntegrity");

  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PKAANLDE@No?5UserName?5and?5contains?5Message@
  001b7	6a 20		 push	 32			; 00000020H
$LN94@stunServer:
  001b9	6a 04		 push	 4
  001bb	8b c3		 mov	 eax, ebx
  001bd	e8 00 00 00 00	 call	 ?stunCreateErrorResponse@@YAXAAUStunMessage@@HHPBD@Z ; stunCreateErrorResponse
  001c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1055 :                return true;

  001c5	e9 31 04 00 00	 jmp	 $LN92@stunServer
$LN27@stunServer:

; 1056 :             }
; 1057 :             else
; 1058 :             {
; 1059 :                if (verbose) clog << "Validating username: " << req.username.value << endl;

  001ca	80 7d 34 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  001d3	74 23		 je	 SHORT $LN61@stunServer
  001d5	8d 85 92 fb ff
	ff		 lea	 eax, DWORD PTR _req$[ebp+62]
  001db	50		 push	 eax
  001dc	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FLNFCGKF@Validating?5username?3?5?$AA@
  001e1	56		 push	 esi
  001e2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001e7	59		 pop	 ecx
  001e8	59		 pop	 ecx
  001e9	50		 push	 eax
  001ea	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001ef	50		 push	 eax
  001f0	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  001f5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN61@stunServer:

; 1060 :                // !jf! could retrieve associated password from provisioning here
; 1061 :                if (strcmp(req.username.value, "test") == 0)

  001f8	8d 85 92 fb ff
	ff		 lea	 eax, DWORD PTR _req$[ebp+62]
  001fe	68 00 00 00 00	 push	 OFFSET ??_C@_04CEJDCDCH@test?$AA@
  00203	50		 push	 eax
  00204	e8 00 00 00 00	 call	 _strcmp
  00209	59		 pop	 ecx
  0020a	59		 pop	 ecx
  0020b	85 c0		 test	 eax, eax
  0020d	75 74		 jne	 SHORT $LN23@stunServer

; 1062 :                {
; 1063 :                   if (0)
; 1064 :                   {
; 1065 :                      // !jf! if the credentials are stale 
; 1066 :                      stunCreateErrorResponse(*resp, 4, 30, "Stale credentials on BindRequest");
; 1067 :                      return true;
; 1068 :                   }
; 1069 :                   else
; 1070 :                   {
; 1071 :                      if (verbose) clog << "Validating MessageIntegrity" << endl;

  0020f	38 45 34	 cmp	 BYTE PTR _verbose$[ebp], al
  00212	74 14		 je	 SHORT $LN63@stunServer
  00214	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JKILABJG@Validating?5MessageIntegrity?$AA@
  00219	56		 push	 esi
  0021a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0021f	50		 push	 eax
  00220	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00225	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN63@stunServer:

; 1072 :                      // need access to shared secret
; 1073 : 							
; 1074 :                      unsigned char hmac[20];
; 1075 : #ifndef NOSSL
; 1076 :                      unsigned int hmacSize=20;
; 1077 : 
; 1078 :                      HMAC(EVP_sha1(), 
; 1079 :                           "1234", 4, 
; 1080 :                           reinterpret_cast<const unsigned char*>(buf), bufLen-20-4, 
; 1081 :                           hmac, &hmacSize);
; 1082 : #endif
; 1083 : 							
; 1084 :                      if (memcmp(buf, hmac, 20) != 0)

  00228	6a 14		 push	 20			; 00000014H
  0022a	8d 45 e8	 lea	 eax, DWORD PTR _hmac$87776[ebp]
  0022d	50		 push	 eax
  0022e	ff b5 34 fb ff
	ff		 push	 DWORD PTR _buf$GSCopy$[ebp]
  00234	e8 00 00 00 00	 call	 _memcmp
  00239	83 c4 0c	 add	 esp, 12			; 0000000cH
  0023c	85 c0		 test	 eax, eax
  0023e	74 26		 je	 SHORT $LN19@stunServer

; 1085 :                      {
; 1086 :                         if (verbose) clog << "MessageIntegrity is bad. Sending " << endl;

  00240	80 7d 34 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00244	74 14		 je	 SHORT $LN65@stunServer
  00246	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FODCHMPJ@MessageIntegrity?5is?5bad?4?5Sending@
  0024b	56		 push	 esi
  0024c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00251	50		 push	 eax
  00252	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00257	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN65@stunServer:

; 1087 :                         stunCreateErrorResponse(*resp, 4, 3, "Unknown username. Try test with password 1234");

  0025a	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@FDGPPPCP@Unknown?5username?4?5Try?5test?5with?5@
  0025f	6a 03		 push	 3

; 1088 :                         return true;

  00261	e9 53 ff ff ff	 jmp	 $LN94@stunServer
$LN19@stunServer:

; 1089 :                      }
; 1090 : 							
; 1091 :                      // need to compute this later after message is filled in
; 1092 :                      resp->hasMessageIntegrity = true;
; 1093 :                      resp->hasUsername = true;
; 1094 :                      resp->username = req.username; // copy username in

  00266	6a 40		 push	 64			; 00000040H
  00268	8d 7b 3e	 lea	 edi, DWORD PTR [ebx+62]
  0026b	59		 pop	 ecx
  0026c	8d b5 92 fb ff
	ff		 lea	 esi, DWORD PTR _req$[ebp+62]
  00272	f3 a5		 rep movsd
  00274	c6 83 43 02 00
	00 01		 mov	 BYTE PTR [ebx+579], 1
  0027b	c6 43 3d 01	 mov	 BYTE PTR [ebx+61], 1
  0027f	66 a5		 movsw

; 1095 :                   }
; 1096 :                }
; 1097 :                else

  00281	eb 3a		 jmp	 SHORT $LN88@stunServer
$LN23@stunServer:

; 1098 :                {
; 1099 :                   if (verbose) clog << "Invalid username: " << req.username.value << "Send 430." << endl; 

  00283	80 7d 34 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00287	74 34		 je	 SHORT $LN88@stunServer
  00289	68 00 00 00 00	 push	 OFFSET ??_C@_09HMMFBENF@Send?5430?4?$AA@
  0028e	8d 85 92 fb ff
	ff		 lea	 eax, DWORD PTR _req$[ebp+62]
  00294	50		 push	 eax
  00295	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EMEBIGMN@Invalid?5username?3?5?$AA@
  0029a	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  0029f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002a4	59		 pop	 ecx
  002a5	59		 pop	 ecx
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002ac	59		 pop	 ecx
  002ad	59		 pop	 ecx
  002ae	50		 push	 eax
$LN93@stunServer:
  002af	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002b4	50		 push	 eax
  002b5	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  002ba	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN88@stunServer:

; 1100 :                }
; 1101 :             }
; 1102 :          }
; 1103 : 			
; 1104 :          // TODO !jf! should check for unknown attributes here and send 420 listing the
; 1105 :          // unknown attributes. 
; 1106 : 			
; 1107 :          if ( respondTo.port == 0 ) respondTo = from;

  002bd	66 83 bd 3c fb
	ff ff 00	 cmp	 WORD PTR _respondTo$[ebp], 0
  002c5	75 0f		 jne	 SHORT $LN90@stunServer
  002c7	8b b5 50 fb ff
	ff		 mov	 esi, DWORD PTR _from$GSCopy$[ebp]
  002cd	8d bd 3c fb ff
	ff		 lea	 edi, DWORD PTR _respondTo$[ebp]
  002d3	a5		 movsd
  002d4	66 a5		 movsw
$LN90@stunServer:

; 1108 :          if ( mapped.port == 0 ) mapped = from;

  002d6	66 83 bd 48 fb
	ff ff 00	 cmp	 WORD PTR _mapped$[ebp], 0
  002de	75 0f		 jne	 SHORT $LN14@stunServer
  002e0	8b b5 50 fb ff
	ff		 mov	 esi, DWORD PTR _from$GSCopy$[ebp]
  002e6	8d bd 48 fb ff
	ff		 lea	 edi, DWORD PTR _mapped$[ebp]
  002ec	a5		 movsd
  002ed	66 a5		 movsw
$LN14@stunServer:

; 1109 : 				
; 1110 :          *changeIp   = ( flags & ChangeIpFlag )?true:false;

  002ef	8b 85 38 fb ff
	ff		 mov	 eax, DWORD PTR _flags$[ebp]
  002f5	8b bd 2c fb ff
	ff		 mov	 edi, DWORD PTR _changeIp$GSCopy$[ebp]

; 1111 :          *changePort = ( flags & ChangePortFlag )?true:false;

  002fb	8b b5 30 fb ff
	ff		 mov	 esi, DWORD PTR _changePort$GSCopy$[ebp]
  00301	c1 e8 02	 shr	 eax, 2
  00304	24 01		 and	 al, 1
  00306	88 07		 mov	 BYTE PTR [edi], al
  00308	8b 85 38 fb ff
	ff		 mov	 eax, DWORD PTR _flags$[ebp]
  0030e	d1 e8		 shr	 eax, 1
  00310	24 01		 and	 al, 1

; 1112 : 			
; 1113 :          if (verbose)

  00312	80 7d 34 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00316	88 06		 mov	 BYTE PTR [esi], al
  00318	0f 84 e8 00 00
	00		 je	 $LN81@stunServer

; 1114 :          {
; 1115 :             clog << "Request is valid:" << endl;

  0031e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EFDBFKGE@Request?5is?5valid?3?$AA@
  00323	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00328	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0032d	50		 push	 eax
  0032e	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00333	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1116 :             clog << "\t flags=" << flags << endl;

  00336	ff b5 38 fb ff
	ff		 push	 DWORD PTR _flags$[ebp]
  0033c	68 00 00 00 00	 push	 OFFSET ??_C@_08OFIPIGFC@?7?5flags?$DN?$AA@
  00341	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00346	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0034b	59		 pop	 ecx
  0034c	59		 pop	 ecx
  0034d	8b c8		 mov	 ecx, eax
  0034f	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00354	50		 push	 eax
  00355	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl

; 1117 :             clog << "\t changeIp=" << *changeIp << endl;

  0035a	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0035d	59		 pop	 ecx
  0035e	50		 push	 eax
  0035f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BJJKHHAC@?7?5changeIp?$DN?$AA@
  00364	bf 00 00 00 00	 mov	 edi, OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00369	57		 push	 edi
  0036a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0036f	59		 pop	 ecx
  00370	59		 pop	 ecx
  00371	8b c8		 mov	 ecx, eax
  00373	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00378	50		 push	 eax
  00379	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl

; 1118 :             clog << "\t changePort=" << *changePort << endl;

  0037e	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00381	59		 pop	 ecx
  00382	50		 push	 eax
  00383	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MAFJAMNO@?7?5changePort?$DN?$AA@
  00388	57		 push	 edi
  00389	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0038e	59		 pop	 ecx
  0038f	59		 pop	 ecx
  00390	8b c8		 mov	 ecx, eax
  00392	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00397	50		 push	 eax
  00398	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0039d	59		 pop	 ecx

; 1119 :             clog << "\t from = " << from << endl;

  0039e	ff b5 50 fb ff
	ff		 push	 DWORD PTR _from$GSCopy$[ebp]
  003a4	68 00 00 00 00	 push	 OFFSET ??_C@_09IOOHKFPC@?7?5from?5?$DN?5?$AA@
  003a9	57		 push	 edi
  003aa	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003af	59		 pop	 ecx
  003b0	59		 pop	 ecx
  003b1	50		 push	 eax
  003b2	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  003b7	50		 push	 eax
  003b8	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  003bd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1120 :             clog << "\t respond to = " << respondTo << endl;

  003c0	8d 85 3c fb ff
	ff		 lea	 eax, DWORD PTR _respondTo$[ebp]
  003c6	50		 push	 eax
  003c7	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EOFEFLLK@?7?5respond?5to?5?$DN?5?$AA@
  003cc	57		 push	 edi
  003cd	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003d2	59		 pop	 ecx
  003d3	59		 pop	 ecx
  003d4	50		 push	 eax
  003d5	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  003da	50		 push	 eax
  003db	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  003e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1121 :             clog << "\t mapped = " << mapped << endl;

  003e3	8d 85 48 fb ff
	ff		 lea	 eax, DWORD PTR _mapped$[ebp]
  003e9	50		 push	 eax
  003ea	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JNKIGFHB@?7?5mapped?5?$DN?5?$AA@
  003ef	57		 push	 edi
  003f0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003f5	59		 pop	 ecx
  003f6	59		 pop	 ecx
  003f7	50		 push	 eax
  003f8	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  003fd	50		 push	 eax
  003fe	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00403	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN81@stunServer:

; 1122 :          }
; 1123 : 				
; 1124 :          // form the outgoing message
; 1125 :          resp->msgHdr.msgType = BindResponseMsg;
; 1126 :          for ( i=0; i<16; i++ )
; 1127 :          {
; 1128 :             resp->msgHdr.id.octet[i] = req.msgHdr.id.octet[i];
; 1129 :          }
; 1130 : 		
; 1131 :          if ( req.xorOnly == false )

  00406	80 bd d8 fe ff
	ff 00		 cmp	 BYTE PTR _req$[ebp+900], 0
  0040d	b8 01 01 00 00	 mov	 eax, 257		; 00000101H
  00412	66 89 03	 mov	 WORD PTR [ebx], ax
  00415	8b 85 4a fb ff
	ff		 mov	 eax, DWORD PTR _mapped$[ebp+2]
  0041b	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0041e	8d b5 58 fb ff
	ff		 lea	 esi, DWORD PTR _req$[ebp+4]
  00424	a5		 movsd
  00425	a5		 movsd
  00426	a5		 movsd
  00427	a5		 movsd
  00428	75 12		 jne	 SHORT $LN91@stunServer

; 1132 :          {
; 1133 :             resp->hasMappedAddress = true;
; 1134 :             resp->mappedAddress.ipv4.port = mapped.port;

  0042a	66 8b 8d 48 fb
	ff ff		 mov	 cx, WORD PTR _mapped$[ebp]
  00431	c6 43 14 01	 mov	 BYTE PTR [ebx+20], 1
  00435	66 89 4b 17	 mov	 WORD PTR [ebx+23], cx

; 1135 :             resp->mappedAddress.ipv4.addr = mapped.addr;

  00439	89 43 19	 mov	 DWORD PTR [ebx+25], eax
$LN91@stunServer:

; 1136 :          }
; 1137 : 
; 1138 :          if (1) // do xorMapped address or not 
; 1139 :          {
; 1140 :             resp->hasXorMappedAddress = true;
; 1141 :             UInt16 id16 = req.msgHdr.id.octet[7]<<8 
; 1142 :                | req.msgHdr.id.octet[6];
; 1143 :             UInt32 id32 = req.msgHdr.id.octet[7]<<24 
; 1144 :                |  req.msgHdr.id.octet[6]<<16 
; 1145 :                |  req.msgHdr.id.octet[5]<<8 
; 1146 :                | req.msgHdr.id.octet[4];
; 1147 :             resp->xorMappedAddress.ipv4.port = mapped.port^id16;

  0043c	0f b6 8d 5f fb
	ff ff		 movzx	 ecx, BYTE PTR _req$[ebp+11]
  00443	0f b6 95 5e fb
	ff ff		 movzx	 edx, BYTE PTR _req$[ebp+10]
  0044a	66 c1 e1 08	 shl	 cx, 8
  0044e	66 0b ca	 or	 cx, dx
  00451	66 33 8d 48 fb
	ff ff		 xor	 cx, WORD PTR _mapped$[ebp]

; 1148 :             resp->xorMappedAddress.ipv4.addr = mapped.addr^id32;

  00458	0f b6 95 5e fb
	ff ff		 movzx	 edx, BYTE PTR _req$[ebp+10]
  0045f	66 89 8b 7e 03
	00 00		 mov	 WORD PTR [ebx+894], cx
  00466	0f b6 8d 5f fb
	ff ff		 movzx	 ecx, BYTE PTR _req$[ebp+11]
  0046d	c1 e1 08	 shl	 ecx, 8
  00470	0b ca		 or	 ecx, edx
  00472	0f b6 95 5d fb
	ff ff		 movzx	 edx, BYTE PTR _req$[ebp+9]
  00479	c1 e1 08	 shl	 ecx, 8
  0047c	0b ca		 or	 ecx, edx
  0047e	0f b6 95 5c fb
	ff ff		 movzx	 edx, BYTE PTR _req$[ebp+8]
  00485	c1 e1 08	 shl	 ecx, 8
  00488	0b ca		 or	 ecx, edx

; 1149 :          }
; 1150 :          
; 1151 :          resp->hasSourceAddress = true;
; 1152 :          resp->sourceAddress.ipv4.port = (*changePort) ? altAddr.port : myAddr.port;

  0048a	8b 55 18	 mov	 edx, DWORD PTR _myAddr$[ebp]
  0048d	33 c8		 xor	 ecx, eax
  0048f	8b 85 30 fb ff
	ff		 mov	 eax, DWORD PTR _changePort$GSCopy$[ebp]
  00495	c6 83 7b 03 00
	00 01		 mov	 BYTE PTR [ebx+891], 1
  0049c	89 8b 80 03 00
	00		 mov	 DWORD PTR [ebx+896], ecx
  004a2	c6 43 2b 01	 mov	 BYTE PTR [ebx+43], 1
  004a6	80 38 00	 cmp	 BYTE PTR [eax], 0
  004a9	8b 45 1c	 mov	 eax, DWORD PTR _altAddr$[ebp]
  004ac	74 05		 je	 SHORT $LN43@stunServer
  004ae	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  004b1	eb 03		 jmp	 SHORT $LN44@stunServer
$LN43@stunServer:
  004b3	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
$LN44@stunServer:
  004b6	66 89 4b 2e	 mov	 WORD PTR [ebx+46], cx

; 1153 :          resp->sourceAddress.ipv4.addr = (*changeIp)   ? altAddr.addr : myAddr.addr;

  004ba	8b 8d 2c fb ff
	ff		 mov	 ecx, DWORD PTR _changeIp$GSCopy$[ebp]
  004c0	80 39 00	 cmp	 BYTE PTR [ecx], 0
  004c3	74 05		 je	 SHORT $LN45@stunServer
  004c5	8b 48 02	 mov	 ecx, DWORD PTR [eax+2]
  004c8	eb 03		 jmp	 SHORT $LN46@stunServer
$LN45@stunServer:
  004ca	8b 4a 02	 mov	 ecx, DWORD PTR [edx+2]
$LN46@stunServer:
  004cd	89 4b 30	 mov	 DWORD PTR [ebx+48], ecx

; 1154 : 			
; 1155 :          resp->hasChangedAddress = true;

  004d0	c6 43 34 01	 mov	 BYTE PTR [ebx+52], 1

; 1156 :          resp->changedAddress.ipv4.port = altAddr.port;

  004d4	66 8b 08	 mov	 cx, WORD PTR [eax]
  004d7	66 89 4b 37	 mov	 WORD PTR [ebx+55], cx

; 1157 :          resp->changedAddress.ipv4.addr = altAddr.addr;

  004db	8b 40 02	 mov	 eax, DWORD PTR [eax+2]
  004de	89 43 39	 mov	 DWORD PTR [ebx+57], eax

; 1158 : 	
; 1159 :          if ( secondary.port != 0 )

  004e1	8b 45 14	 mov	 eax, DWORD PTR _secondary$[ebp]
  004e4	66 83 38 00	 cmp	 WORD PTR [eax], 0
  004e8	74 1a		 je	 SHORT $LN7@stunServer

; 1160 :          {
; 1161 :             resp->hasSecondaryAddress = true;

  004ea	c6 83 88 04 00
	00 01		 mov	 BYTE PTR [ebx+1160], 1

; 1162 :             resp->secondaryAddress.ipv4.port = secondary.port;

  004f1	66 8b 08	 mov	 cx, WORD PTR [eax]
  004f4	66 89 8b 8b 04
	00 00		 mov	 WORD PTR [ebx+1163], cx

; 1163 :             resp->secondaryAddress.ipv4.addr = secondary.addr;

  004fb	8b 40 02	 mov	 eax, DWORD PTR [eax+2]
  004fe	89 83 8d 04 00
	00		 mov	 DWORD PTR [ebx+1165], eax
$LN7@stunServer:

; 1164 :          }
; 1165 :          
; 1166 :          if ( req.hasUsername && req.username.sizeValue > 0 ) 

  00504	80 bd 91 fb ff
	ff 00		 cmp	 BYTE PTR _req$[ebp+61], 0
  0050b	74 37		 je	 SHORT $LN6@stunServer
  0050d	66 83 bd 92 fc
	ff ff 00	 cmp	 WORD PTR _req$[ebp+318], 0
  00515	76 2d		 jbe	 SHORT $LN6@stunServer

; 1167 :          {
; 1168 :             // copy username in
; 1169 :             resp->hasUsername = true;
; 1170 :             memcpy( resp->username.value, req.username.value, req.username.sizeValue );

  00517	0f b7 85 92 fc
	ff ff		 movzx	 eax, WORD PTR _req$[ebp+318]
  0051e	50		 push	 eax
  0051f	8d 85 92 fb ff
	ff		 lea	 eax, DWORD PTR _req$[ebp+62]
  00525	50		 push	 eax
  00526	8d 43 3e	 lea	 eax, DWORD PTR [ebx+62]
  00529	50		 push	 eax
  0052a	c6 43 3d 01	 mov	 BYTE PTR [ebx+61], 1
  0052e	e8 00 00 00 00	 call	 _memcpy

; 1171 :             resp->username.sizeValue = req.username.sizeValue;

  00533	66 8b 85 92 fc
	ff ff		 mov	 ax, WORD PTR _req$[ebp+318]
  0053a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0053d	66 89 83 3e 01
	00 00		 mov	 WORD PTR [ebx+318], ax
$LN6@stunServer:

; 1172 :          }
; 1173 : 		
; 1174 :          if (1) // add ServerName 
; 1175 :          {
; 1176 :             resp->hasServerName = true;

  00544	c6 83 85 03 00
	00 01		 mov	 BYTE PTR [ebx+901], 1

; 1177 :             const char serverName[] = "Vovida.org " STUN_VERSION; // must pad to mult of 4

  0054b	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BA@LLCFHEFL@Vovida?4org?50?494?$AA@
  00550	8d 7d ec	 lea	 edi, DWORD PTR _serverName$87860[ebp]
  00553	a5		 movsd
  00554	a5		 movsd

; 1178 :             
; 1179 :             //cerr << "sizeof serverName is "  << sizeof(serverName) << endl;
; 1180 :             memcpy( resp->serverName.value, serverName, sizeof(serverName));

  00555	6a 10		 push	 16			; 00000010H
  00557	8d 45 ec	 lea	 eax, DWORD PTR _serverName$87860[ebp]
  0055a	a5		 movsd
  0055b	50		 push	 eax
  0055c	8d 83 86 03 00
	00		 lea	 eax, DWORD PTR [ebx+902]
  00562	50		 push	 eax
  00563	a5		 movsd
  00564	e8 00 00 00 00	 call	 _memcpy
  00569	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1181 :             resp->serverName.sizeValue = sizeof(serverName);

  0056c	6a 10		 push	 16			; 00000010H
  0056e	58		 pop	 eax
  0056f	66 89 83 86 04
	00 00		 mov	 WORD PTR [ebx+1158], ax

; 1182 :          }
; 1183 :          
; 1184 :          if ( req.hasMessageIntegrity & req.hasUsername )  

  00576	8a 85 91 fb ff
	ff		 mov	 al, BYTE PTR _req$[ebp+61]
  0057c	84 85 97 fd ff
	ff		 test	 BYTE PTR _req$[ebp+579], al
  00582	74 14		 je	 SHORT $LN4@stunServer

; 1185 :          {
; 1186 :             // this creates the password that will be used in the HMAC when then
; 1187 :             // messages is sent
; 1188 :             stunCreatePassword( req.username, hmacPassword );

  00584	ff b5 44 fb ff
	ff		 push	 DWORD PTR _hmacPassword$GSCopy$[ebp]
  0058a	8d 85 92 fb ff
	ff		 lea	 eax, DWORD PTR _req$[ebp+62]
  00590	50		 push	 eax
  00591	e8 00 00 00 00	 call	 ?stunCreatePassword@@YAXABUStunAtrString@@PAU1@@Z ; stunCreatePassword
  00596	59		 pop	 ecx
  00597	59		 pop	 ecx
$LN4@stunServer:

; 1189 :          }
; 1190 : 				
; 1191 :          if (req.hasUsername && (req.username.sizeValue > 64 ) )

  00598	80 bd 91 fb ff
	ff 00		 cmp	 BYTE PTR _req$[ebp+61], 0
  0059f	74 41		 je	 SHORT $LN3@stunServer
  005a1	66 83 bd 92 fc
	ff ff 40	 cmp	 WORD PTR _req$[ebp+318], 64 ; 00000040H
  005a9	76 37		 jbe	 SHORT $LN3@stunServer

; 1192 :          {
; 1193 :             UInt32 source;
; 1194 : 					
; 1195 :             sscanf(req.username.value, "%x", &source);

  005ab	8d 85 44 fb ff
	ff		 lea	 eax, DWORD PTR _source$87864[ebp]
  005b1	50		 push	 eax
  005b2	8d 85 92 fb ff
	ff		 lea	 eax, DWORD PTR _req$[ebp+62]
  005b8	68 00 00 00 00	 push	 OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
  005bd	50		 push	 eax
  005be	e8 00 00 00 00	 call	 _sscanf
  005c3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1196 :             resp->hasReflectedFrom = true;
; 1197 :             resp->reflectedFrom.ipv4.port = 0;

  005c6	33 c0		 xor	 eax, eax
  005c8	66 89 83 75 03
	00 00		 mov	 WORD PTR [ebx+885], ax

; 1198 :             resp->reflectedFrom.ipv4.addr = source;

  005cf	8b 85 44 fb ff
	ff		 mov	 eax, DWORD PTR _source$87864[ebp]
  005d5	c6 83 72 03 00
	00 01		 mov	 BYTE PTR [ebx+882], 1
  005dc	89 83 77 03 00
	00		 mov	 DWORD PTR [ebx+887], eax
$LN3@stunServer:

; 1199 :          }
; 1200 : 				
; 1201 :          destination->port = respondTo.port;

  005e2	66 8b 8d 3c fb
	ff ff		 mov	 cx, WORD PTR _respondTo$[ebp]
  005e9	8b 85 28 fb ff
	ff		 mov	 eax, DWORD PTR _destination$GSCopy$[ebp]
  005ef	66 89 08	 mov	 WORD PTR [eax], cx

; 1202 :          destination->addr = respondTo.addr;

  005f2	8b 8d 3e fb ff
	ff		 mov	 ecx, DWORD PTR _respondTo$[ebp+2]
  005f8	89 48 02	 mov	 DWORD PTR [eax+2], ecx
$LN92@stunServer:

; 1203 : 			
; 1204 :          return true;

  005fb	b0 01		 mov	 al, 1
$LN41@stunServer:

; 1209 :    }
; 1210 : 	
; 1211 :    return false;
; 1212 : }

  005fd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00600	5f		 pop	 edi
  00601	5e		 pop	 esi
  00602	33 cd		 xor	 ecx, ebp
  00604	5b		 pop	 ebx
  00605	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0060a	c9		 leave
  0060b	c3		 ret	 0
?stunServerProcessMsg@@YA_NPADIAAUStunAddress4@@111PAUStunMessage@@PAU1@PAUStunAtrString@@PA_N5_N@Z ENDP ; stunServerProcessMsg
_TEXT	ENDS
PUBLIC	??_C@_0BI@EJENPBPM@Failed?5to?5parse?5message?$AA@ ; `string'
PUBLIC	??_C@_0BE@FNGODCNG@Got?5a?5request?5?$CIlen?$DN?$AA@ ; `string'
PUBLIC	??_C@_07FICIKEBL@?$CJ?5from?5?$AA@		; `string'
PUBLIC	??_C@_0CL@EFADNAMM@Get?5message?5did?5not?5return?5a?5val@ ; `string'
PUBLIC	??_C@_0BB@PFKKAHAF@Open?5relay?5port?5?$AA@	; `string'
PUBLIC	??_C@_0BC@BNKBANOP@received?5on?5A2?3P2?$AA@	; `string'
PUBLIC	??_C@_0BC@DGIMFOCM@received?5on?5A2?3P1?$AA@	; `string'
PUBLIC	??_C@_0BC@FKABHHDP@received?5on?5A1?3P2?$AA@	; `string'
PUBLIC	??_C@_0BC@HBCMCEPM@received?5on?5A1?3P1?$AA@	; `string'
PUBLIC	??_C@_0BB@MMHGAHCM@Relay?5packet?5on?5?$AA@	; `string'
PUBLIC	??_C@_06EGFPNNHB@?5from?5?$AA@			; `string'
PUBLIC	??_C@_04BBDFLMDN@?5?9?$DO?5?$AA@		; `string'
PUBLIC	??_C@_0BC@FEJAIJAK@Error?5on?5select?3?5?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?stunServerProcess@@YA_NAAUStunServerInfo@@_N@Z	; stunServerProcess
EXTRN	?sendMessage@@YA_NIPADHIG_N@Z:PROC		; sendMessage
EXTRN	?getMessage@@YA_NIPADPAHPAIPAG_N@Z:PROC		; getMessage
EXTRN	___WSAFDIsSet@8:PROC
EXTRN	_strerror:PROC
EXTRN	__imp__select@20:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0BI@EJENPBPM@Failed?5to?5parse?5message?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
CONST	SEGMENT
??_C@_0BI@EJENPBPM@Failed?5to?5parse?5message?$AA@ DB 'Failed to parse me'
	DB	'ssage', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FNGODCNG@Got?5a?5request?5?$CIlen?$DN?$AA@
CONST	SEGMENT
??_C@_0BE@FNGODCNG@Got?5a?5request?5?$CIlen?$DN?$AA@ DB 'Got a request (l'
	DB	'en=', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07FICIKEBL@?$CJ?5from?5?$AA@
CONST	SEGMENT
??_C@_07FICIKEBL@?$CJ?5from?5?$AA@ DB ') from ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EFADNAMM@Get?5message?5did?5not?5return?5a?5val@
CONST	SEGMENT
??_C@_0CL@EFADNAMM@Get?5message?5did?5not?5return?5a?5val@ DB 'Get messag'
	DB	'e did not return a valid message', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PFKKAHAF@Open?5relay?5port?5?$AA@
CONST	SEGMENT
??_C@_0BB@PFKKAHAF@Open?5relay?5port?5?$AA@ DB 'Open relay port ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BNKBANOP@received?5on?5A2?3P2?$AA@
CONST	SEGMENT
??_C@_0BC@BNKBANOP@received?5on?5A2?3P2?$AA@ DB 'received on A2:P2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DGIMFOCM@received?5on?5A2?3P1?$AA@
CONST	SEGMENT
??_C@_0BC@DGIMFOCM@received?5on?5A2?3P1?$AA@ DB 'received on A2:P1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FKABHHDP@received?5on?5A1?3P2?$AA@
CONST	SEGMENT
??_C@_0BC@FKABHHDP@received?5on?5A1?3P2?$AA@ DB 'received on A1:P2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HBCMCEPM@received?5on?5A1?3P1?$AA@
CONST	SEGMENT
??_C@_0BC@HBCMCEPM@received?5on?5A1?3P1?$AA@ DB 'received on A1:P1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MMHGAHCM@Relay?5packet?5on?5?$AA@
CONST	SEGMENT
??_C@_0BB@MMHGAHCM@Relay?5packet?5on?5?$AA@ DB 'Relay packet on ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EGFPNNHB@?5from?5?$AA@
CONST	SEGMENT
??_C@_06EGFPNNHB@?5from?5?$AA@ DB ' from ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BBDFLMDN@?5?9?$DO?5?$AA@
CONST	SEGMENT
??_C@_04BBDFLMDN@?5?9?$DO?5?$AA@ DB ' -> ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FEJAIJAK@Error?5on?5select?3?5?$AA@
CONST	SEGMENT
??_C@_0BC@FEJAIJAK@Error?5on?5select?3?5?$AA@ DB 'Error on select: ', 00H ; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\stun.cpp
CONST	ENDS
;	COMDAT ?stunServerProcess@@YA_NAAUStunServerInfo@@_N@Z
_TEXT	SEGMENT
_tv$ = -7348						; size = 8
_now$88094 = -7340					; size = 8
_secondary$88201 = -7332				; size = 6
_rtpFrom$88106 = -7332					; size = 6
_dest$88199 = -7324					; size = 6
tv153 = -7324						; size = 4
_msgLen$ = -7316					; size = 4
tv321 = -7312						; size = 4
_relayPort$88160 = -7312				; size = 4
_msgLen$88105 = -7312					; size = 4
_from$88092 = -7308					; size = 6
_changeIp$88197 = -7297					; size = 1
_changePort$88196 = -7296				; size = 1
_recvAltPort$ = -7295					; size = 1
_recvAltIp$ = -7294					; size = 1
_ok$ = -7293						; size = 1
_resp$88198 = -7292					; size = 1169
_hmacPassword$88200 = -6120				; size = 258
_fdSet$ = -5860						; size = 260
_buf$88214 = -5600					; size = 2048
_msg$88104 = -3552					; size = 1500
_msg$ = -2052						; size = 2048
__$ArrayPad$ = -4					; size = 4
_info$ = 8						; size = 4
_verbose$ = 12						; size = 1
?stunServerProcess@@YA_NAAUStunServerInfo@@_N@Z PROC	; stunServerProcess, COMDAT

; 1313 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 b4 1c 00 00	 mov	 eax, 7348		; 00001cb4H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	8b 5d 08	 mov	 ebx, DWORD PTR _info$[ebp]

; 1314 :    char msg[STUN_MAX_MESSAGE_SIZE];
; 1315 :    int msgLen = sizeof(msg);
; 1316 :    	
; 1317 :    bool ok = false;
; 1318 :    bool recvAltIp =false;
; 1319 :    bool recvAltPort = false;
; 1320 : 	
; 1321 :    fd_set fdSet; 
; 1322 : #ifdef WIN32
; 1323 :    unsigned int maxFd=0;
; 1324 : #else
; 1325 :    int maxFd=0;
; 1326 : #endif
; 1327 :    FD_ZERO(&fdSet); 
; 1328 :    FD_SET(info.myFd,&fdSet); 

  0001b	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0001e	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00021	56		 push	 esi
  00022	33 f6		 xor	 esi, esi
  00024	46		 inc	 esi
  00025	57		 push	 edi
  00026	c7 85 6c e3 ff
	ff 00 08 00 00	 mov	 DWORD PTR _msgLen$[ebp], 2048 ; 00000800H
  00030	89 85 20 e9 ff
	ff		 mov	 DWORD PTR _fdSet$[ebp+4], eax
  00036	89 b5 1c e9 ff
	ff		 mov	 DWORD PTR _fdSet$[ebp], esi

; 1329 :    if ( info.myFd >= maxFd ) maxFd=info.myFd+1;

  0003c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1330 :    FD_SET(info.altPortFd,&fdSet); 

  0003f	33 d2		 xor	 edx, edx
$LL121@stunServer@2:
  00041	39 8c 95 20 e9
	ff ff		 cmp	 DWORD PTR _fdSet$[ebp+edx*4+4], ecx
  00048	74 05		 je	 SHORT $LN181@stunServer@2
  0004a	42		 inc	 edx
  0004b	3b d6		 cmp	 edx, esi
  0004d	72 f2		 jb	 SHORT $LL121@stunServer@2
$LN181@stunServer@2:
  0004f	3b d6		 cmp	 edx, esi
  00051	75 10		 jne	 SHORT $LN123@stunServer@2
  00053	89 8d 24 e9 ff
	ff		 mov	 DWORD PTR _fdSet$[ebp+8], ecx
  00059	c7 85 1c e9 ff
	ff 02 00 00 00	 mov	 DWORD PTR _fdSet$[ebp], 2
$LN123@stunServer@2:

; 1331 :    if ( info.altPortFd >= maxFd ) maxFd=info.altPortFd+1;

  00063	3b cf		 cmp	 ecx, edi
  00065	72 03		 jb	 SHORT $LN115@stunServer@2
  00067	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LN115@stunServer@2:

; 1332 : 
; 1333 :    if ( info.altIpFd != INVALID_SOCKET )

  0006a	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0006d	83 f8 ff	 cmp	 eax, -1
  00070	74 41		 je	 SHORT $LN216@stunServer@2

; 1334 :    {
; 1335 :       FD_SET(info.altIpFd,&fdSet);

  00072	33 c9		 xor	 ecx, ecx
  00074	3b 8d 1c e9 ff
	ff		 cmp	 ecx, DWORD PTR _fdSet$[ebp]
  0007a	73 18		 jae	 SHORT $LN217@stunServer@2
$LL110@stunServer@2:
  0007c	39 84 8d 20 e9
	ff ff		 cmp	 DWORD PTR _fdSet$[ebp+ecx*4+4], eax
  00083	74 09		 je	 SHORT $LN182@stunServer@2
  00085	41		 inc	 ecx
  00086	3b 8d 1c e9 ff
	ff		 cmp	 ecx, DWORD PTR _fdSet$[ebp]
  0008c	72 ee		 jb	 SHORT $LL110@stunServer@2
$LN182@stunServer@2:
  0008e	3b 8d 1c e9 ff
	ff		 cmp	 ecx, DWORD PTR _fdSet$[ebp]
$LN217@stunServer@2:
  00094	75 16		 jne	 SHORT $LN112@stunServer@2
  00096	83 bd 1c e9 ff
	ff 40		 cmp	 DWORD PTR _fdSet$[ebp], 64 ; 00000040H
  0009d	73 0d		 jae	 SHORT $LN112@stunServer@2
  0009f	89 84 8d 20 e9
	ff ff		 mov	 DWORD PTR _fdSet$[ebp+ecx*4+4], eax
  000a6	ff 85 1c e9 ff
	ff		 inc	 DWORD PTR _fdSet$[ebp]
$LN112@stunServer@2:

; 1336 :       if (info.altIpFd>=maxFd) maxFd=info.altIpFd+1;

  000ac	3b c7		 cmp	 eax, edi
  000ae	72 03		 jb	 SHORT $LN216@stunServer@2
  000b0	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LN216@stunServer@2:

; 1337 :    }
; 1338 :    if ( info.altIpPortFd != INVALID_SOCKET )

  000b3	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  000b6	83 fa ff	 cmp	 edx, -1
  000b9	74 41		 je	 SHORT $LN93@stunServer@2

; 1339 :    {
; 1340 :       FD_SET(info.altIpPortFd,&fdSet);

  000bb	33 c9		 xor	 ecx, ecx
  000bd	3b 8d 1c e9 ff
	ff		 cmp	 ecx, DWORD PTR _fdSet$[ebp]
  000c3	73 18		 jae	 SHORT $LN218@stunServer@2
$LL99@stunServer@2:
  000c5	39 94 8d 20 e9
	ff ff		 cmp	 DWORD PTR _fdSet$[ebp+ecx*4+4], edx
  000cc	74 09		 je	 SHORT $LN183@stunServer@2
  000ce	41		 inc	 ecx
  000cf	3b 8d 1c e9 ff
	ff		 cmp	 ecx, DWORD PTR _fdSet$[ebp]
  000d5	72 ee		 jb	 SHORT $LL99@stunServer@2
$LN183@stunServer@2:
  000d7	3b 8d 1c e9 ff
	ff		 cmp	 ecx, DWORD PTR _fdSet$[ebp]
$LN218@stunServer@2:
  000dd	75 16		 jne	 SHORT $LN101@stunServer@2
  000df	83 bd 1c e9 ff
	ff 40		 cmp	 DWORD PTR _fdSet$[ebp], 64 ; 00000040H
  000e6	73 0d		 jae	 SHORT $LN101@stunServer@2
  000e8	89 94 8d 20 e9
	ff ff		 mov	 DWORD PTR _fdSet$[ebp+ecx*4+4], edx
  000ef	ff 85 1c e9 ff
	ff		 inc	 DWORD PTR _fdSet$[ebp]
$LN101@stunServer@2:

; 1341 :       if (info.altIpPortFd>=maxFd) maxFd=info.altIpPortFd+1;

  000f5	3b d7		 cmp	 edx, edi
  000f7	72 03		 jb	 SHORT $LN93@stunServer@2
  000f9	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LN93@stunServer@2:

; 1342 :    }
; 1343 : 
; 1344 :    if (info.relay)

  000fc	80 7b 1c 00	 cmp	 BYTE PTR [ebx+28], 0
  00100	74 60		 je	 SHORT $LN89@stunServer@2

; 1345 :    {
; 1346 :       for (int i=0; i<MAX_MEDIA_RELAYS; ++i)

  00102	8d 73 1d	 lea	 esi, DWORD PTR [ebx+29]
  00105	c7 85 70 e3 ff
	ff f4 01 00 00	 mov	 DWORD PTR tv321[ebp], 500 ; 000001f4H
$LL91@stunServer@2:

; 1347 :       {
; 1348 :          StunMediaRelay* relay = &info.relays[i];
; 1349 :          if (relay->fd)

  0010f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00112	85 c9		 test	 ecx, ecx
  00114	74 41		 je	 SHORT $LN90@stunServer@2

; 1350 :          {
; 1351 :             FD_SET(relay->fd, &fdSet);

  00116	33 d2		 xor	 edx, edx
  00118	3b 95 1c e9 ff
	ff		 cmp	 edx, DWORD PTR _fdSet$[ebp]
  0011e	73 18		 jae	 SHORT $LN219@stunServer@2
$LL84@stunServer@2:
  00120	39 8c 95 20 e9
	ff ff		 cmp	 DWORD PTR _fdSet$[ebp+edx*4+4], ecx
  00127	74 09		 je	 SHORT $LN184@stunServer@2
  00129	42		 inc	 edx
  0012a	3b 95 1c e9 ff
	ff		 cmp	 edx, DWORD PTR _fdSet$[ebp]
  00130	72 ee		 jb	 SHORT $LL84@stunServer@2
$LN184@stunServer@2:
  00132	3b 95 1c e9 ff
	ff		 cmp	 edx, DWORD PTR _fdSet$[ebp]
$LN219@stunServer@2:
  00138	75 16		 jne	 SHORT $LN86@stunServer@2
  0013a	83 bd 1c e9 ff
	ff 40		 cmp	 DWORD PTR _fdSet$[ebp], 64 ; 00000040H
  00141	73 0d		 jae	 SHORT $LN86@stunServer@2
  00143	89 8c 95 20 e9
	ff ff		 mov	 DWORD PTR _fdSet$[ebp+edx*4+4], ecx
  0014a	ff 85 1c e9 ff
	ff		 inc	 DWORD PTR _fdSet$[ebp]
$LN86@stunServer@2:

; 1352 :             if ((UINT)(relay->fd) >= maxFd) maxFd=relay->fd+1;

  00150	3b cf		 cmp	 ecx, edi
  00152	72 03		 jb	 SHORT $LN90@stunServer@2
  00154	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LN90@stunServer@2:

; 1345 :    {
; 1346 :       for (int i=0; i<MAX_MEDIA_RELAYS; ++i)

  00157	83 c6 16	 add	 esi, 22			; 00000016H
  0015a	ff 8d 70 e3 ff
	ff		 dec	 DWORD PTR tv321[ebp]
  00160	75 ad		 jne	 SHORT $LL91@stunServer@2
$LN89@stunServer@2:

; 1353 :          }
; 1354 :       }
; 1355 :    }
; 1356 :    
; 1357 :    if ( info.altIpFd != INVALID_SOCKET )

  00162	83 f8 ff	 cmp	 eax, -1
  00165	74 37		 je	 SHORT $LN213@stunServer@2

; 1358 :    {
; 1359 :       FD_SET(info.altIpFd,&fdSet);

  00167	8b 95 1c e9 ff
	ff		 mov	 edx, DWORD PTR _fdSet$[ebp]
  0016d	33 c9		 xor	 ecx, ecx
  0016f	85 d2		 test	 edx, edx
  00171	74 0e		 je	 SHORT $LN185@stunServer@2
$LL73@stunServer@2:
  00173	39 84 8d 20 e9
	ff ff		 cmp	 DWORD PTR _fdSet$[ebp+ecx*4+4], eax
  0017a	74 05		 je	 SHORT $LN185@stunServer@2
  0017c	41		 inc	 ecx
  0017d	3b ca		 cmp	 ecx, edx
  0017f	72 f2		 jb	 SHORT $LL73@stunServer@2
$LN185@stunServer@2:
  00181	3b ca		 cmp	 ecx, edx
  00183	75 12		 jne	 SHORT $LN75@stunServer@2
  00185	83 fa 40	 cmp	 edx, 64			; 00000040H
  00188	73 0d		 jae	 SHORT $LN75@stunServer@2
  0018a	89 84 8d 20 e9
	ff ff		 mov	 DWORD PTR _fdSet$[ebp+ecx*4+4], eax
  00191	ff 85 1c e9 ff
	ff		 inc	 DWORD PTR _fdSet$[ebp]
$LN75@stunServer@2:

; 1360 :       if (info.altIpFd>=maxFd) maxFd=info.altIpFd+1;

  00197	3b c7		 cmp	 eax, edi
  00199	72 03		 jb	 SHORT $LN213@stunServer@2
  0019b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LN213@stunServer@2:

; 1361 :    }
; 1362 :    if ( info.altIpPortFd != INVALID_SOCKET )

  0019e	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  001a1	83 f8 ff	 cmp	 eax, -1
  001a4	74 37		 je	 SHORT $LN56@stunServer@2

; 1363 :    {
; 1364 :       FD_SET(info.altIpPortFd,&fdSet);

  001a6	8b 95 1c e9 ff
	ff		 mov	 edx, DWORD PTR _fdSet$[ebp]
  001ac	33 c9		 xor	 ecx, ecx
  001ae	85 d2		 test	 edx, edx
  001b0	74 0e		 je	 SHORT $LN186@stunServer@2
$LL62@stunServer@2:
  001b2	39 84 8d 20 e9
	ff ff		 cmp	 DWORD PTR _fdSet$[ebp+ecx*4+4], eax
  001b9	74 05		 je	 SHORT $LN186@stunServer@2
  001bb	41		 inc	 ecx
  001bc	3b ca		 cmp	 ecx, edx
  001be	72 f2		 jb	 SHORT $LL62@stunServer@2
$LN186@stunServer@2:
  001c0	3b ca		 cmp	 ecx, edx
  001c2	75 12		 jne	 SHORT $LN64@stunServer@2
  001c4	83 fa 40	 cmp	 edx, 64			; 00000040H
  001c7	73 0d		 jae	 SHORT $LN64@stunServer@2
  001c9	89 84 8d 20 e9
	ff ff		 mov	 DWORD PTR _fdSet$[ebp+ecx*4+4], eax
  001d0	ff 85 1c e9 ff
	ff		 inc	 DWORD PTR _fdSet$[ebp]
$LN64@stunServer@2:

; 1365 :       if (info.altIpPortFd>=maxFd) maxFd=info.altIpPortFd+1;

  001d6	3b c7		 cmp	 eax, edi
  001d8	72 03		 jb	 SHORT $LN56@stunServer@2
  001da	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LN56@stunServer@2:

; 1366 :    }
; 1367 :    
; 1368 :    struct timeval tv;
; 1369 :    tv.tv_sec = 0;
; 1370 :    tv.tv_usec = 1000;
; 1371 : 	
; 1372 :    int e = select( maxFd, &fdSet, NULL,NULL, &tv );

  001dd	8d 85 4c e3 ff
	ff		 lea	 eax, DWORD PTR _tv$[ebp]
  001e3	50		 push	 eax
  001e4	33 f6		 xor	 esi, esi
  001e6	56		 push	 esi
  001e7	56		 push	 esi
  001e8	8d 85 1c e9 ff
	ff		 lea	 eax, DWORD PTR _fdSet$[ebp]
  001ee	50		 push	 eax
  001ef	57		 push	 edi
  001f0	89 b5 4c e3 ff
	ff		 mov	 DWORD PTR _tv$[ebp], esi
  001f6	c7 85 50 e3 ff
	ff e8 03 00 00	 mov	 DWORD PTR _tv$[ebp+4], 1000 ; 000003e8H
  00200	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__select@20

; 1373 :    if (e < 0)

  00206	3b c6		 cmp	 eax, esi
  00208	7d 33		 jge	 SHORT $LN200@stunServer@2

; 1374 :    {
; 1375 :       int err = getErrno();

  0020a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0

; 1376 :       clog << "Error on select: " << strerror(err) << endl;

  00210	50		 push	 eax
  00211	e8 00 00 00 00	 call	 _strerror
  00216	59		 pop	 ecx
  00217	50		 push	 eax
  00218	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FEJAIJAK@Error?5on?5select?3?5?$AA@
  0021d	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00222	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00227	59		 pop	 ecx
  00228	59		 pop	 ecx
  00229	50		 push	 eax
$LN222@stunServer@2:
  0022a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0022f	50		 push	 eax
  00230	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00235	83 c4 0c	 add	 esp, 12			; 0000000cH
  00238	e9 ec 05 00 00	 jmp	 $LN1@stunServer@2
$LN200@stunServer@2:

; 1377 :    }
; 1378 :    else if (e >= 0)
; 1379 :    {
; 1380 :       StunAddress4 from;
; 1381 : 
; 1382 :       // do the media relaying
; 1383 :       if (info.relay)

  0023d	80 7b 1c 00	 cmp	 BYTE PTR [ebx+28], 0
  00241	0f 84 47 01 00
	00		 je	 $LN49@stunServer@2

; 1384 :       {
; 1385 :          time_t now = time(0);

  00247	6a 00		 push	 0
  00249	e8 00 00 00 00	 call	 __time64
  0024e	59		 pop	 ecx
  0024f	89 85 54 e3 ff
	ff		 mov	 DWORD PTR _now$88094[ebp], eax
  00255	89 95 58 e3 ff
	ff		 mov	 DWORD PTR _now$88094[ebp+4], edx
  0025b	8d 7b 21	 lea	 edi, DWORD PTR [ebx+33]
  0025e	c7 85 64 e3 ff
	ff f4 01 00 00	 mov	 DWORD PTR tv153[ebp], 500 ; 000001f4H
$LL214@stunServer@2:

; 1387 :          {
; 1388 :             StunMediaRelay* relay = &info.relays[i];
; 1389 :             if (relay->fd)

  00268	8b 07		 mov	 eax, DWORD PTR [edi]
  0026a	85 c0		 test	 eax, eax
  0026c	0f 84 0d 01 00
	00		 je	 $LN50@stunServer@2

; 1390 :             {
; 1391 :                if (FD_ISSET(relay->fd, &fdSet))

  00272	8d 8d 1c e9 ff
	ff		 lea	 ecx, DWORD PTR _fdSet$[ebp]
  00278	51		 push	 ecx
  00279	50		 push	 eax
  0027a	e8 00 00 00 00	 call	 ___WSAFDIsSet@8
  0027f	85 c0		 test	 eax, eax
  00281	0f 84 d5 00 00
	00		 je	 $LN47@stunServer@2

; 1392 :                {
; 1393 :                   char msg[MAX_RTP_MSG_SIZE];
; 1394 :                   int msgLen = sizeof(msg);
; 1395 :                   
; 1396 :                   StunAddress4 rtpFrom;
; 1397 :                   ok = getMessage( relay->fd, msg, &msgLen, &rtpFrom.addr, &rtpFrom.port ,verbose);

  00287	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  0028a	8d 85 5c e3 ff
	ff		 lea	 eax, DWORD PTR _rtpFrom$88106[ebp]
  00290	50		 push	 eax
  00291	8d 85 5e e3 ff
	ff		 lea	 eax, DWORD PTR _rtpFrom$88106[ebp+2]
  00297	50		 push	 eax
  00298	8d 85 70 e3 ff
	ff		 lea	 eax, DWORD PTR _msgLen$88105[ebp]
  0029e	50		 push	 eax
  0029f	8d 85 20 f2 ff
	ff		 lea	 eax, DWORD PTR _msg$88104[ebp]
  002a5	50		 push	 eax
  002a6	ff 37		 push	 DWORD PTR [edi]
  002a8	c7 85 70 e3 ff
	ff dc 05 00 00	 mov	 DWORD PTR _msgLen$88105[ebp], 1500 ; 000005dcH
  002b2	e8 00 00 00 00	 call	 ?getMessage@@YA_NIPADPAHPAIPAG_N@Z ; getMessage
  002b7	83 c4 18	 add	 esp, 24			; 00000018H

; 1398 :                   if (ok)

  002ba	84 c0		 test	 al, al
  002bc	0f 84 bd 00 00
	00		 je	 $LN50@stunServer@2

; 1399 :                   {
; 1400 :                      sendMessage(info.myFd, msg, msgLen, relay->destination.addr, relay->destination.port, verbose);

  002c2	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  002c5	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  002c8	0f b7 06	 movzx	 eax, WORD PTR [esi]
  002cb	50		 push	 eax
  002cc	ff 76 02	 push	 DWORD PTR [esi+2]
  002cf	8d 85 20 f2 ff
	ff		 lea	 eax, DWORD PTR _msg$88104[ebp]
  002d5	ff b5 70 e3 ff
	ff		 push	 DWORD PTR _msgLen$88105[ebp]
  002db	50		 push	 eax
  002dc	ff 73 0c	 push	 DWORD PTR [ebx+12]
  002df	e8 00 00 00 00	 call	 ?sendMessage@@YA_NIPADHIG_N@Z ; sendMessage

; 1401 :                      relay->expireTime = now + MEDIA_RELAY_TIMEOUT;

  002e4	8b 85 54 e3 ff
	ff		 mov	 eax, DWORD PTR _now$88094[ebp]
  002ea	8b 8d 58 e3 ff
	ff		 mov	 ecx, DWORD PTR _now$88094[ebp+4]
  002f0	83 c4 18	 add	 esp, 24			; 00000018H
  002f3	05 b4 00 00 00	 add	 eax, 180		; 000000b4H
  002f8	83 d1 00	 adc	 ecx, 0

; 1402 :                      if ( verbose ) clog << "Relay packet on " 

  002fb	80 7d 0c 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  002ff	89 46 06	 mov	 DWORD PTR [esi+6], eax
  00302	89 4e 0a	 mov	 DWORD PTR [esi+10], ecx
  00305	74 78		 je	 SHORT $LN50@stunServer@2

; 1403 :                                          << relay->fd 
; 1404 :                                          << " from " << rtpFrom 
; 1405 :                                          << " -> " << relay->destination 
; 1406 :                                          << endl;

  00307	56		 push	 esi
  00308	68 00 00 00 00	 push	 OFFSET ??_C@_04BBDFLMDN@?5?9?$DO?5?$AA@
  0030d	8d 85 5c e3 ff
	ff		 lea	 eax, DWORD PTR _rtpFrom$88106[ebp]
  00313	50		 push	 eax
  00314	68 00 00 00 00	 push	 OFFSET ??_C@_06EGFPNNHB@?5from?5?$AA@
  00319	ff 37		 push	 DWORD PTR [edi]
  0031b	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MMHGAHCM@Relay?5packet?5on?5?$AA@
  00320	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00325	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0032a	59		 pop	 ecx
  0032b	59		 pop	 ecx
  0032c	8b c8		 mov	 ecx, eax
  0032e	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00333	50		 push	 eax
  00334	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00339	59		 pop	 ecx
  0033a	59		 pop	 ecx
  0033b	50		 push	 eax
  0033c	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  00341	59		 pop	 ecx
  00342	59		 pop	 ecx
  00343	50		 push	 eax
  00344	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00349	59		 pop	 ecx
  0034a	59		 pop	 ecx
  0034b	50		 push	 eax
  0034c	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  00351	50		 push	 eax
  00352	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00357	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1407 :                   }
; 1408 :                }

  0035a	eb 23		 jmp	 SHORT $LN50@stunServer@2
$LN47@stunServer@2:

; 1409 :                else if (now > relay->expireTime)

  0035c	8b 85 58 e3 ff
	ff		 mov	 eax, DWORD PTR _now$88094[ebp+4]
  00362	3b 47 0e	 cmp	 eax, DWORD PTR [edi+14]
  00365	7c 18		 jl	 SHORT $LN50@stunServer@2
  00367	7f 0b		 jg	 SHORT $LN204@stunServer@2
  00369	8b 85 54 e3 ff
	ff		 mov	 eax, DWORD PTR _now$88094[ebp]
  0036f	3b 47 0a	 cmp	 eax, DWORD PTR [edi+10]
  00372	76 0b		 jbe	 SHORT $LN50@stunServer@2
$LN204@stunServer@2:

; 1410 :                {
; 1411 :                   closesocket(relay->fd);

  00374	ff 37		 push	 DWORD PTR [edi]
  00376	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 1412 :                   relay->fd = 0;

  0037c	83 27 00	 and	 DWORD PTR [edi], 0
$LN50@stunServer@2:

; 1386 :          for (int i=0; i<MAX_MEDIA_RELAYS; ++i)

  0037f	83 c7 16	 add	 edi, 22			; 00000016H
  00382	ff 8d 64 e3 ff
	ff		 dec	 DWORD PTR tv153[ebp]
  00388	0f 85 da fe ff
	ff		 jne	 $LL214@stunServer@2
$LN49@stunServer@2:

; 1413 :                }
; 1414 :             }
; 1415 :          }
; 1416 :       }
; 1417 :       
; 1418 :      
; 1419 :       if (FD_ISSET(info.myFd,&fdSet))

  0038e	8d 85 1c e9 ff
	ff		 lea	 eax, DWORD PTR _fdSet$[ebp]
  00394	50		 push	 eax
  00395	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00398	e8 00 00 00 00	 call	 ___WSAFDIsSet@8
  0039d	85 c0		 test	 eax, eax
  0039f	74 53		 je	 SHORT $LN42@stunServer@2

; 1420 :       {
; 1421 :          if (verbose) clog << "received on A1:P1" << endl;

  003a1	80 7d 0c 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  003a5	74 18		 je	 SHORT $LN149@stunServer@2
  003a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HBCMCEPM@received?5on?5A1?3P1?$AA@
  003ac	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  003b1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003b6	50		 push	 eax
  003b7	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  003bc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN149@stunServer@2:

; 1422 :          recvAltIp = false;
; 1423 :          recvAltPort = false;
; 1424 :          ok = getMessage( info.myFd, msg, &msgLen, &from.addr, &from.port,verbose );

  003bf	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  003c2	8d 85 74 e3 ff
	ff		 lea	 eax, DWORD PTR _from$88092[ebp]
  003c8	50		 push	 eax
  003c9	8d 85 76 e3 ff
	ff		 lea	 eax, DWORD PTR _from$88092[ebp+2]
  003cf	50		 push	 eax
  003d0	8d 85 6c e3 ff
	ff		 lea	 eax, DWORD PTR _msgLen$[ebp]
  003d6	50		 push	 eax
  003d7	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  003dd	50		 push	 eax
  003de	ff 73 0c	 push	 DWORD PTR [ebx+12]
  003e1	c6 85 82 e3 ff
	ff 00		 mov	 BYTE PTR _recvAltIp$[ebp], 0
  003e8	c6 85 81 e3 ff
	ff 00		 mov	 BYTE PTR _recvAltPort$[ebp], 0
  003ef	e9 37 01 00 00	 jmp	 $LN220@stunServer@2
$LN42@stunServer@2:

; 1425 :       }
; 1426 :       else if (FD_ISSET(info.altPortFd, &fdSet))

  003f4	8d 85 1c e9 ff
	ff		 lea	 eax, DWORD PTR _fdSet$[ebp]
  003fa	50		 push	 eax
  003fb	ff 73 10	 push	 DWORD PTR [ebx+16]
  003fe	e8 00 00 00 00	 call	 ___WSAFDIsSet@8
  00403	85 c0		 test	 eax, eax
  00405	74 4c		 je	 SHORT $LN39@stunServer@2

; 1427 :       {
; 1428 :          if (verbose) clog << "received on A1:P2" << endl;

  00407	80 7d 0c 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  0040b	74 18		 je	 SHORT $LN151@stunServer@2
  0040d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FKABHHDP@received?5on?5A1?3P2?$AA@
  00412	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00417	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0041c	50		 push	 eax
  0041d	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00422	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN151@stunServer@2:

; 1429 :          recvAltIp = false;
; 1430 :          recvAltPort = true;
; 1431 :          ok = getMessage( info.altPortFd, msg, &msgLen, &from.addr, &from.port,verbose );

  00425	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  00428	8d 85 74 e3 ff
	ff		 lea	 eax, DWORD PTR _from$88092[ebp]
  0042e	50		 push	 eax
  0042f	8d 85 76 e3 ff
	ff		 lea	 eax, DWORD PTR _from$88092[ebp+2]
  00435	50		 push	 eax
  00436	8d 85 6c e3 ff
	ff		 lea	 eax, DWORD PTR _msgLen$[ebp]
  0043c	50		 push	 eax
  0043d	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00443	50		 push	 eax
  00444	ff 73 10	 push	 DWORD PTR [ebx+16]
  00447	c6 85 82 e3 ff
	ff 00		 mov	 BYTE PTR _recvAltIp$[ebp], 0
  0044e	e9 d1 00 00 00	 jmp	 $LN221@stunServer@2
$LN39@stunServer@2:

; 1432 :       }
; 1433 :       else if ( (info.altIpFd!=INVALID_SOCKET) && FD_ISSET(info.altIpFd,&fdSet))

  00453	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00456	83 f8 ff	 cmp	 eax, -1
  00459	74 61		 je	 SHORT $LN36@stunServer@2
  0045b	8d 8d 1c e9 ff
	ff		 lea	 ecx, DWORD PTR _fdSet$[ebp]
  00461	51		 push	 ecx
  00462	50		 push	 eax
  00463	e8 00 00 00 00	 call	 ___WSAFDIsSet@8
  00468	85 c0		 test	 eax, eax
  0046a	74 50		 je	 SHORT $LN36@stunServer@2

; 1434 :       {
; 1435 :          if (verbose) clog << "received on A2:P1" << endl;

  0046c	80 7d 0c 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00470	74 18		 je	 SHORT $LN153@stunServer@2
  00472	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DGIMFOCM@received?5on?5A2?3P1?$AA@
  00477	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  0047c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00481	50		 push	 eax
  00482	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00487	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN153@stunServer@2:

; 1436 :          recvAltIp = true;
; 1437 :          recvAltPort = false;
; 1438 :          ok = getMessage( info.altIpFd, msg, &msgLen, &from.addr, &from.port ,verbose);

  0048a	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  0048d	8d 85 74 e3 ff
	ff		 lea	 eax, DWORD PTR _from$88092[ebp]
  00493	50		 push	 eax
  00494	8d 85 76 e3 ff
	ff		 lea	 eax, DWORD PTR _from$88092[ebp+2]
  0049a	50		 push	 eax
  0049b	8d 85 6c e3 ff
	ff		 lea	 eax, DWORD PTR _msgLen$[ebp]
  004a1	50		 push	 eax
  004a2	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  004a8	50		 push	 eax
  004a9	ff 73 14	 push	 DWORD PTR [ebx+20]
  004ac	c6 85 82 e3 ff
	ff 01		 mov	 BYTE PTR _recvAltIp$[ebp], 1
  004b3	c6 85 81 e3 ff
	ff 00		 mov	 BYTE PTR _recvAltPort$[ebp], 0
  004ba	eb 6f		 jmp	 SHORT $LN220@stunServer@2
$LN36@stunServer@2:

; 1439 :       }
; 1440 :       else if ( (info.altIpPortFd!=INVALID_SOCKET) && FD_ISSET(info.altIpPortFd, &fdSet))

  004bc	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  004bf	83 f8 ff	 cmp	 eax, -1
  004c2	0f 84 61 03 00
	00		 je	 $LN1@stunServer@2
  004c8	8d 8d 1c e9 ff
	ff		 lea	 ecx, DWORD PTR _fdSet$[ebp]
  004ce	51		 push	 ecx
  004cf	50		 push	 eax
  004d0	e8 00 00 00 00	 call	 ___WSAFDIsSet@8
  004d5	85 c0		 test	 eax, eax
  004d7	0f 84 4c 03 00
	00		 je	 $LN1@stunServer@2

; 1441 :       {
; 1442 :          if (verbose) clog << "received on A2:P2" << endl;

  004dd	80 7d 0c 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  004e1	74 18		 je	 SHORT $LN155@stunServer@2
  004e3	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BNKBANOP@received?5on?5A2?3P2?$AA@
  004e8	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  004ed	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  004f2	50		 push	 eax
  004f3	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  004f8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN155@stunServer@2:

; 1445 :          ok = getMessage( info.altIpPortFd, msg, &msgLen, &from.addr, &from.port,verbose );

  004fb	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  004fe	8d 85 74 e3 ff
	ff		 lea	 eax, DWORD PTR _from$88092[ebp]
  00504	50		 push	 eax
  00505	8d 85 76 e3 ff
	ff		 lea	 eax, DWORD PTR _from$88092[ebp+2]
  0050b	50		 push	 eax
  0050c	8d 85 6c e3 ff
	ff		 lea	 eax, DWORD PTR _msgLen$[ebp]
  00512	50		 push	 eax
  00513	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00519	50		 push	 eax
  0051a	ff 73 18	 push	 DWORD PTR [ebx+24]
  0051d	c6 85 82 e3 ff
	ff 01		 mov	 BYTE PTR _recvAltIp$[ebp], 1
$LN221@stunServer@2:

; 1443 :          recvAltIp = true;
; 1444 :          recvAltPort = true;

  00524	c6 85 81 e3 ff
	ff 01		 mov	 BYTE PTR _recvAltPort$[ebp], 1
$LN220@stunServer@2:

; 1445 :          ok = getMessage( info.altIpPortFd, msg, &msgLen, &from.addr, &from.port,verbose );

  0052b	e8 00 00 00 00	 call	 ?getMessage@@YA_NIPADPAHPAIPAG_N@Z ; getMessage

; 1446 :       }
; 1447 :       else
; 1448 :       {
; 1449 :          return true;
; 1450 :       }
; 1451 : 
; 1452 :       int relayPort = 0;

  00530	83 a5 70 e3 ff
	ff 00		 and	 DWORD PTR _relayPort$88160[ebp], 0
  00537	83 c4 18	 add	 esp, 24			; 00000018H

; 1453 :       if (info.relay)

  0053a	80 7b 1c 00	 cmp	 BYTE PTR [ebx+28], 0
  0053e	88 85 83 e3 ff
	ff		 mov	 BYTE PTR _ok$[ebp], al
  00544	0f 84 d4 00 00
	00		 je	 $LN207@stunServer@2

; 1454 :       {
; 1455 :          for (int i=0; i<MAX_MEDIA_RELAYS; ++i)

  0054a	33 c0		 xor	 eax, eax
  0054c	8d 73 25	 lea	 esi, DWORD PTR [ebx+37]
$LL29@stunServer@2:

; 1456 :          {
; 1457 :             StunMediaRelay* relay = &info.relays[i];
; 1458 :             if (relay->destination.addr == from.addr && 
; 1459 :                 relay->destination.port == from.port)

  0054f	8b 4e 02	 mov	 ecx, DWORD PTR [esi+2]
  00552	3b 8d 76 e3 ff
	ff		 cmp	 ecx, DWORD PTR _from$88092[ebp+2]
  00558	75 0c		 jne	 SHORT $LN28@stunServer@2
  0055a	66 8b 0e	 mov	 cx, WORD PTR [esi]
  0055d	66 3b 8d 74 e3
	ff ff		 cmp	 cx, WORD PTR _from$88092[ebp]
  00564	74 0d		 je	 SHORT $LN187@stunServer@2
$LN28@stunServer@2:

; 1454 :       {
; 1455 :          for (int i=0; i<MAX_MEDIA_RELAYS; ++i)

  00566	40		 inc	 eax
  00567	83 c6 16	 add	 esi, 22			; 00000016H
  0056a	3d f4 01 00 00	 cmp	 eax, 500		; 000001f4H
  0056f	7c de		 jl	 SHORT $LL29@stunServer@2

; 1470 :             {
; 1471 :                StunMediaRelay* relay = &info.relays[i];
; 1472 :                if (relay->fd == 0)

  00571	eb 27		 jmp	 SHORT $LN203@stunServer@2
$LN187@stunServer@2:

; 1460 :             {
; 1461 :                relayPort = relay->relayPort;

  00573	8b 7e f8	 mov	 edi, DWORD PTR [esi-8]

; 1462 :                relay->expireTime = time(0) + MEDIA_RELAY_TIMEOUT;

  00576	6a 00		 push	 0
  00578	89 bd 70 e3 ff
	ff		 mov	 DWORD PTR _relayPort$88160[ebp], edi
  0057e	e8 00 00 00 00	 call	 __time64
  00583	05 b4 00 00 00	 add	 eax, 180		; 000000b4H
  00588	83 d2 00	 adc	 edx, 0
  0058b	59		 pop	 ecx
  0058c	89 46 06	 mov	 DWORD PTR [esi+6], eax
  0058f	89 56 0a	 mov	 DWORD PTR [esi+10], edx

; 1463 :                break;
; 1464 :             }
; 1465 :          }
; 1466 : 
; 1467 :          if (relayPort == 0)

  00592	85 ff		 test	 edi, edi
  00594	0f 85 84 00 00
	00		 jne	 $LN207@stunServer@2
$LN203@stunServer@2:

; 1468 :          {
; 1469 :             for (int i=0; i<MAX_MEDIA_RELAYS; ++i)

  0059a	33 ff		 xor	 edi, edi
  0059c	33 c0		 xor	 eax, eax
  0059e	8d 73 1d	 lea	 esi, DWORD PTR [ebx+29]
$LL24@stunServer@2:

; 1470 :             {
; 1471 :                StunMediaRelay* relay = &info.relays[i];
; 1472 :                if (relay->fd == 0)

  005a1	39 7e 04	 cmp	 DWORD PTR [esi+4], edi
  005a4	74 0d		 je	 SHORT $LN188@stunServer@2

; 1468 :          {
; 1469 :             for (int i=0; i<MAX_MEDIA_RELAYS; ++i)

  005a6	40		 inc	 eax
  005a7	83 c6 16	 add	 esi, 22			; 00000016H
  005aa	3d f4 01 00 00	 cmp	 eax, 500		; 000001f4H
  005af	7c f0		 jl	 SHORT $LL24@stunServer@2

; 1470 :             {
; 1471 :                StunMediaRelay* relay = &info.relays[i];
; 1472 :                if (relay->fd == 0)

  005b1	eb 6b		 jmp	 SHORT $LN207@stunServer@2
$LN188@stunServer@2:

; 1473 :                {
; 1474 :                   if ( verbose ) clog << "Open relay port " << relay->relayPort << endl;

  005b3	80 7d 0c 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  005b7	74 21		 je	 SHORT $LN159@stunServer@2
  005b9	ff 36		 push	 DWORD PTR [esi]
  005bb	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PFKKAHAF@Open?5relay?5port?5?$AA@
  005c0	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  005c5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  005ca	59		 pop	 ecx
  005cb	59		 pop	 ecx
  005cc	8b c8		 mov	 ecx, eax
  005ce	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  005d3	50		 push	 eax
  005d4	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  005d9	59		 pop	 ecx
$LN159@stunServer@2:

; 1475 :                   
; 1476 :                   relay->fd = openPort(relay->relayPort, info.myAddr.addr, verbose);

  005da	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  005dd	0f b7 06	 movzx	 eax, WORD PTR [esi]
  005e0	ff 73 02	 push	 DWORD PTR [ebx+2]
  005e3	50		 push	 eax
  005e4	e8 00 00 00 00	 call	 ?openPort@@YAIGI_N@Z	; openPort
  005e9	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1477 :                   relay->destination.addr = from.addr;

  005ec	8b 85 76 e3 ff
	ff		 mov	 eax, DWORD PTR _from$88092[ebp+2]
  005f2	89 46 0a	 mov	 DWORD PTR [esi+10], eax

; 1478 :                   relay->destination.port = from.port;

  005f5	66 8b 85 74 e3
	ff ff		 mov	 ax, WORD PTR _from$88092[ebp]

; 1479 :                   relay->expireTime = time(0) + MEDIA_RELAY_TIMEOUT;

  005fc	57		 push	 edi
  005fd	66 89 46 08	 mov	 WORD PTR [esi+8], ax
  00601	e8 00 00 00 00	 call	 __time64
  00606	83 c4 10	 add	 esp, 16			; 00000010H
  00609	05 b4 00 00 00	 add	 eax, 180		; 000000b4H
  0060e	89 46 0e	 mov	 DWORD PTR [esi+14], eax

; 1480 :                   relayPort = relay->relayPort;

  00611	8b 06		 mov	 eax, DWORD PTR [esi]
  00613	13 d7		 adc	 edx, edi
  00615	89 56 12	 mov	 DWORD PTR [esi+18], edx
  00618	89 85 70 e3 ff
	ff		 mov	 DWORD PTR _relayPort$88160[ebp], eax
$LN207@stunServer@2:

; 1481 :                   break;
; 1482 :                }
; 1483 :             }
; 1484 :          }
; 1485 :       }
; 1486 :          
; 1487 :       if ( !ok ) 

  0061e	80 bd 83 e3 ff
	ff 00		 cmp	 BYTE PTR _ok$[ebp], 0
  00625	75 19		 jne	 SHORT $LN19@stunServer@2

; 1488 :       {
; 1489 :          if ( verbose ) clog << "Get message did not return a valid message" <<endl;

  00627	80 7d 0c 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  0062b	0f 84 f8 01 00
	00		 je	 $LN1@stunServer@2
  00631	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@EFADNAMM@Get?5message?5did?5not?5return?5a?5val@
$LN223@stunServer@2:
  00636	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog

; 1490 :          return true;

  0063b	e9 ea fb ff ff	 jmp	 $LN222@stunServer@2
$LN19@stunServer@2:

; 1491 :       }
; 1492 : 		
; 1493 :       if ( verbose ) clog << "Got a request (len=" << msgLen << ") from " << from << endl;

  00640	80 7d 0c 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00644	74 41		 je	 SHORT $LN208@stunServer@2
  00646	8d 85 74 e3 ff
	ff		 lea	 eax, DWORD PTR _from$88092[ebp]
  0064c	50		 push	 eax
  0064d	68 00 00 00 00	 push	 OFFSET ??_C@_07FICIKEBL@?$CJ?5from?5?$AA@
  00652	ff b5 6c e3 ff
	ff		 push	 DWORD PTR _msgLen$[ebp]
  00658	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FNGODCNG@Got?5a?5request?5?$CIlen?$DN?$AA@
  0065d	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00662	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00667	59		 pop	 ecx
  00668	59		 pop	 ecx
  00669	8b c8		 mov	 ecx, eax
  0066b	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00670	50		 push	 eax
  00671	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00676	59		 pop	 ecx
  00677	59		 pop	 ecx
  00678	50		 push	 eax
  00679	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  0067e	50		 push	 eax
  0067f	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00684	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN208@stunServer@2:

; 1494 : 		
; 1495 :       if ( msgLen <= 0 )

  00687	33 c0		 xor	 eax, eax
  00689	39 85 6c e3 ff
	ff		 cmp	 DWORD PTR _msgLen$[ebp], eax

; 1496 :       {
; 1497 :          return true;

  0068f	0f 8e 94 01 00
	00		 jle	 $LN1@stunServer@2

; 1498 :       }
; 1499 : 		
; 1500 :       bool changePort = false;
; 1501 :       bool changeIp = false;
; 1502 : 		
; 1503 :       StunMessage resp;
; 1504 :       StunAddress4 dest;
; 1505 :       StunAtrString hmacPassword;  
; 1506 :       hmacPassword.sizeValue = 0;

  00695	33 c9		 xor	 ecx, ecx
  00697	88 85 80 e3 ff
	ff		 mov	 BYTE PTR _changePort$88196[ebp], al
  0069d	88 85 7f e3 ff
	ff		 mov	 BYTE PTR _changeIp$88197[ebp], al
  006a3	66 89 8d 18 e9
	ff ff		 mov	 WORD PTR _hmacPassword$88200[ebp+256], cx

; 1507 : 
; 1508 :       StunAddress4 secondary;
; 1509 :       secondary.port = 0;

  006aa	66 89 8d 5c e3
	ff ff		 mov	 WORD PTR _secondary$88201[ebp], cx

; 1510 :       secondary.addr = 0;

  006b1	89 85 5e e3 ff
	ff		 mov	 DWORD PTR _secondary$88201[ebp+2], eax

; 1511 :                
; 1512 :       if (info.relay && relayPort)

  006b7	38 43 1c	 cmp	 BYTE PTR [ebx+28], al
  006ba	74 2e		 je	 SHORT $LN15@stunServer@2
  006bc	39 85 70 e3 ff
	ff		 cmp	 DWORD PTR _relayPort$88160[ebp], eax
  006c2	74 26		 je	 SHORT $LN15@stunServer@2

; 1513 :       {
; 1514 :          secondary = from;
; 1515 :          
; 1516 :          from.addr = info.myAddr.addr;

  006c4	8b 43 02	 mov	 eax, DWORD PTR [ebx+2]
  006c7	8d b5 74 e3 ff
	ff		 lea	 esi, DWORD PTR _from$88092[ebp]
  006cd	8d bd 5c e3 ff
	ff		 lea	 edi, DWORD PTR _secondary$88201[ebp]
  006d3	a5		 movsd
  006d4	66 a5		 movsw
  006d6	89 85 76 e3 ff
	ff		 mov	 DWORD PTR _from$88092[ebp+2], eax

; 1517 :          from.port = relayPort;

  006dc	66 8b 85 70 e3
	ff ff		 mov	 ax, WORD PTR _relayPort$88160[ebp]
  006e3	66 89 85 74 e3
	ff ff		 mov	 WORD PTR _from$88092[ebp], ax
$LN15@stunServer@2:

; 1518 :       }
; 1519 :       
; 1520 :       ok = stunServerProcessMsg( msg, msgLen, from, secondary,
; 1521 :                                  recvAltIp ? info.altAddr : info.myAddr,
; 1522 :                                  recvAltIp ? info.myAddr : info.altAddr, 
; 1523 :                                  &resp,
; 1524 :                                  &dest,
; 1525 :                                  &hmacPassword,
; 1526 :                                  &changePort,
; 1527 :                                  &changeIp,
; 1528 :                                  verbose );

  006ea	38 8d 82 e3 ff
	ff		 cmp	 BYTE PTR _recvAltIp$[ebp], cl
  006f0	8b cb		 mov	 ecx, ebx
  006f2	75 03		 jne	 SHORT $LN138@stunServer@2
  006f4	8d 4b 06	 lea	 ecx, DWORD PTR [ebx+6]
$LN138@stunServer@2:
  006f7	80 bd 82 e3 ff
	ff 00		 cmp	 BYTE PTR _recvAltIp$[ebp], 0
  006fe	8d 43 06	 lea	 eax, DWORD PTR [ebx+6]
  00701	75 02		 jne	 SHORT $LN140@stunServer@2
  00703	8b c3		 mov	 eax, ebx
$LN140@stunServer@2:
  00705	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  00708	8d 95 7f e3 ff
	ff		 lea	 edx, DWORD PTR _changeIp$88197[ebp]
  0070e	52		 push	 edx
  0070f	8d 95 80 e3 ff
	ff		 lea	 edx, DWORD PTR _changePort$88196[ebp]
  00715	52		 push	 edx
  00716	8d 95 18 e8 ff
	ff		 lea	 edx, DWORD PTR _hmacPassword$88200[ebp]
  0071c	52		 push	 edx
  0071d	8d 95 64 e3 ff
	ff		 lea	 edx, DWORD PTR _dest$88199[ebp]
  00723	52		 push	 edx
  00724	8d 95 84 e3 ff
	ff		 lea	 edx, DWORD PTR _resp$88198[ebp]
  0072a	52		 push	 edx
  0072b	51		 push	 ecx
  0072c	50		 push	 eax
  0072d	8d 85 5c e3 ff
	ff		 lea	 eax, DWORD PTR _secondary$88201[ebp]
  00733	50		 push	 eax
  00734	8d 85 74 e3 ff
	ff		 lea	 eax, DWORD PTR _from$88092[ebp]
  0073a	50		 push	 eax
  0073b	ff b5 6c e3 ff
	ff		 push	 DWORD PTR _msgLen$[ebp]
  00741	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00747	50		 push	 eax
  00748	e8 00 00 00 00	 call	 ?stunServerProcessMsg@@YA_NPADIAAUStunAddress4@@111PAUStunMessage@@PAU1@PAUStunAtrString@@PA_N5_N@Z ; stunServerProcessMsg
  0074d	83 c4 30	 add	 esp, 48			; 00000030H
  00750	88 85 83 e3 ff
	ff		 mov	 BYTE PTR _ok$[ebp], al

; 1529 : 		
; 1530 :       if ( !ok )

  00756	84 c0		 test	 al, al
  00758	75 13		 jne	 SHORT $LN14@stunServer@2

; 1531 :       {
; 1532 :          if ( verbose ) clog << "Failed to parse message" << endl;

  0075a	38 45 0c	 cmp	 BYTE PTR _verbose$[ebp], al
  0075d	0f 84 c6 00 00
	00		 je	 $LN1@stunServer@2
  00763	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EJENPBPM@Failed?5to?5parse?5message?$AA@

; 1533 :          return true;

  00768	e9 c9 fe ff ff	 jmp	 $LN223@stunServer@2
$LN14@stunServer@2:

; 1534 :       }
; 1535 : 		
; 1536 :       char buf[STUN_MAX_MESSAGE_SIZE];
; 1537 :       int len = sizeof(buf);
; 1538 :       		
; 1539 :       len = stunEncodeMessage( resp, buf, len, hmacPassword,verbose );

  0076d	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  00770	8d 85 18 e8 ff
	ff		 lea	 eax, DWORD PTR _hmacPassword$88200[ebp]
  00776	50		 push	 eax
  00777	68 00 08 00 00	 push	 2048			; 00000800H
  0077c	8d 85 20 ea ff
	ff		 lea	 eax, DWORD PTR _buf$88214[ebp]
  00782	50		 push	 eax
  00783	8d 85 84 e3 ff
	ff		 lea	 eax, DWORD PTR _resp$88198[ebp]
  00789	50		 push	 eax
  0078a	e8 00 00 00 00	 call	 ?stunEncodeMessage@@YAIABUStunMessage@@PADIABUStunAtrString@@_N@Z ; stunEncodeMessage
  0078f	83 c4 14	 add	 esp, 20			; 00000014H

; 1540 : 		
; 1541 :       if ( dest.addr == 0 )  ok=false;

  00792	83 bd 66 e3 ff
	ff 00		 cmp	 DWORD PTR _dest$88199[ebp+2], 0
  00799	8b f0		 mov	 esi, eax
  0079b	75 07		 jne	 SHORT $LN205@stunServer@2
  0079d	c6 85 83 e3 ff
	ff 00		 mov	 BYTE PTR _ok$[ebp], 0
$LN205@stunServer@2:

; 1542 :       if ( dest.port == 0 ) ok=false;

  007a4	66 83 bd 64 e3
	ff ff 00	 cmp	 WORD PTR _dest$88199[ebp], 0
  007ac	75 07		 jne	 SHORT $LN215@stunServer@2
  007ae	c6 85 83 e3 ff
	ff 00		 mov	 BYTE PTR _ok$[ebp], 0
$LN215@stunServer@2:

; 1543 : 		
; 1544 :       if ( ok )

  007b5	80 bd 83 e3 ff
	ff 00		 cmp	 BYTE PTR _ok$[ebp], 0
  007bc	74 6b		 je	 SHORT $LN1@stunServer@2

; 1545 :       {
; 1546 : 			
; 1547 :          Socket sendFd;
; 1548 : 			
; 1549 :          bool sendAltIp   = recvAltIp;   // send on the received IP address 
; 1550 :          bool sendAltPort = recvAltPort; // send on the received port
; 1551 : 			
; 1552 :          if ( changeIp )   sendAltIp   = !sendAltIp;   // if need to change IP, then flip logic 

  007be	80 bd 7f e3 ff
	ff 00		 cmp	 BYTE PTR _changeIp$88197[ebp], 0
  007c5	8a 95 82 e3 ff
	ff		 mov	 dl, BYTE PTR _recvAltIp$[ebp]
  007cb	8a 8d 81 e3 ff
	ff		 mov	 cl, BYTE PTR _recvAltPort$[ebp]
  007d1	74 05		 je	 SHORT $LN9@stunServer@2
  007d3	84 d2		 test	 dl, dl
  007d5	0f 94 c2	 sete	 dl
$LN9@stunServer@2:

; 1553 :          if ( changePort ) sendAltPort = !sendAltPort; // if need to change port, then flip logic 

  007d8	80 bd 80 e3 ff
	ff 00		 cmp	 BYTE PTR _changePort$88196[ebp], 0
  007df	74 05		 je	 SHORT $LN8@stunServer@2
  007e1	84 c9		 test	 cl, cl
  007e3	0f 94 c1	 sete	 cl
$LN8@stunServer@2:

; 1554 : 			
; 1555 :          if ( !sendAltPort )

  007e6	84 c9		 test	 cl, cl
  007e8	75 0e		 jne	 SHORT $LN7@stunServer@2

; 1556 :          {
; 1557 :             if ( !sendAltIp )

  007ea	84 d2		 test	 dl, dl
  007ec	75 05		 jne	 SHORT $LN6@stunServer@2

; 1558 :             {
; 1559 :                sendFd = info.myFd;

  007ee	8b 5b 0c	 mov	 ebx, DWORD PTR [ebx+12]

; 1560 :             }
; 1561 :             else

  007f1	eb 11		 jmp	 SHORT $LN2@stunServer@2
$LN6@stunServer@2:

; 1562 :             {
; 1563 :                sendFd = info.altIpFd;

  007f3	8b 5b 14	 mov	 ebx, DWORD PTR [ebx+20]

; 1564 :             }
; 1565 :          }
; 1566 :          else

  007f6	eb 0c		 jmp	 SHORT $LN2@stunServer@2
$LN7@stunServer@2:

; 1567 :          {
; 1568 :             if ( !sendAltIp )

  007f8	84 d2		 test	 dl, dl
  007fa	75 05		 jne	 SHORT $LN3@stunServer@2

; 1569 :             {
; 1570 :                sendFd = info.altPortFd;

  007fc	8b 5b 10	 mov	 ebx, DWORD PTR [ebx+16]

; 1571 :             }
; 1572 :             else

  007ff	eb 03		 jmp	 SHORT $LN2@stunServer@2
$LN3@stunServer@2:

; 1573 :             {
; 1574 :                sendFd = info.altIpPortFd;

  00801	8b 5b 18	 mov	 ebx, DWORD PTR [ebx+24]
$LN2@stunServer@2:

; 1575 :             }
; 1576 :          }
; 1577 : 	
; 1578 :          if ( sendFd != INVALID_SOCKET )

  00804	83 fb ff	 cmp	 ebx, -1
  00807	74 20		 je	 SHORT $LN1@stunServer@2

; 1579 :          {
; 1580 :             sendMessage( sendFd, buf, len, dest.addr, dest.port, verbose );

  00809	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  0080c	8d 85 20 ea ff
	ff		 lea	 eax, DWORD PTR _buf$88214[ebp]
  00812	ff b5 64 e3 ff
	ff		 push	 DWORD PTR _dest$88199[ebp]
  00818	ff b5 66 e3 ff
	ff		 push	 DWORD PTR _dest$88199[ebp+2]
  0081e	56		 push	 esi
  0081f	50		 push	 eax
  00820	53		 push	 ebx
  00821	e8 00 00 00 00	 call	 ?sendMessage@@YA_NIPADHIG_N@Z ; sendMessage
  00826	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@stunServer@2:

; 1581 :          }
; 1582 :       }
; 1583 :    }
; 1584 : 	
; 1585 :    return true;
; 1586 : }

  00829	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0082c	5f		 pop	 edi
  0082d	5e		 pop	 esi
  0082e	33 cd		 xor	 ecx, ebp
  00830	b0 01		 mov	 al, 1
  00832	5b		 pop	 ebx
  00833	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00838	c9		 leave
  00839	c3		 ret	 0
?stunServerProcess@@YA_NAAUStunServerInfo@@_N@Z ENDP	; stunServerProcess
_TEXT	ENDS
PUBLIC	??_C@_0BK@GGJMGLBI@About?5to?5send?5msg?5of?5len?5?$AA@ ; `string'
PUBLIC	??_C@_04MKEOLIJC@?5to?5?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	_clock:PROC
;	COMDAT ??_C@_0BK@GGJMGLBI@About?5to?5send?5msg?5of?5len?5?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
CONST	SEGMENT
??_C@_0BK@GGJMGLBI@About?5to?5send?5msg?5of?5len?5?$AA@ DB 'About to send'
	DB	' msg of len ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04MKEOLIJC@?5to?5?$AA@
CONST	SEGMENT
??_C@_04MKEOLIJC@?5to?5?$AA@ DB ' to ', 00H		; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\stun.cpp
CONST	ENDS
;	COMDAT ?stunSendTest@@YAXIAAUStunAddress4@@ABUStunAtrString@@1H_N@Z
_TEXT	SEGMENT
_changePort$ = -3232					; size = 1
_changeIP$ = -3228					; size = 1
_req$ = -3224						; size = 1169
_buf$ = -2052						; size = 2048
__$ArrayPad$ = -4					; size = 4
_myFd$ = 8						; size = 4
_username$ = 12						; size = 4
_testNum$ = 16						; size = 4
_verbose$ = 20						; size = 1
?stunSendTest@@YAXIAAUStunAddress4@@ABUStunAtrString@@1H_N@Z PROC ; stunSendTest, COMDAT
; _dest$ = ecx
; _password$ = edx

; 1694 : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 0c 00
	00		 sub	 esp, 3232		; 00000ca0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1695 : 	
; 1696 :    bool changePort=false;
; 1697 :    bool changeIP=false;
; 1698 :    bool discard=false;
; 1699 : 	
; 1700 :    switch (testNum)

  00013	8b 45 10	 mov	 eax, DWORD PTR _testNum$[ebp]
  00016	56		 push	 esi
  00017	48		 dec	 eax
  00018	48		 dec	 eax
  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx
  0001c	8b fa		 mov	 edi, edx
  0001e	c6 85 60 f3 ff
	ff 00		 mov	 BYTE PTR _changePort$[ebp], 0
  00025	c6 85 64 f3 ff
	ff 00		 mov	 BYTE PTR _changeIP$[ebp], 0
  0002c	74 0a		 je	 SHORT $LN8@stunSendTe
  0002e	48		 dec	 eax
  0002f	0f 84 d4 00 00
	00		 je	 $LN7@stunSendTe
  00035	48		 dec	 eax
  00036	75 07		 jne	 SHORT $LN10@stunSendTe
$LN8@stunSendTe:

; 1701 :    {
; 1702 :       case 1:
; 1703 :       case 10:
; 1704 :       case 11:
; 1705 :          break;
; 1706 :       case 2:
; 1707 :          //changePort=true;
; 1708 :          changeIP=true;

  00038	c6 85 64 f3 ff
	ff 01		 mov	 BYTE PTR _changeIP$[ebp], 1
$LN10@stunSendTe:

; 1713 :       case 4:
; 1714 :          changeIP=true;
; 1715 :          break;
; 1716 :       case 5:
; 1717 :          discard=true;
; 1718 :          break;
; 1719 :       default:
; 1720 :          break;
; 1721 :    }
; 1722 : 	
; 1723 :    StunMessage req;
; 1724 :    memset(&req, 0, sizeof(StunMessage));

  0003f	68 91 04 00 00	 push	 1169			; 00000491H
  00044	8d 85 68 f3 ff
	ff		 lea	 eax, DWORD PTR _req$[ebp]
  0004a	6a 00		 push	 0
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _memset

; 1725 : 	
; 1726 :    stunBuildReqSimple( &req, username, 
; 1727 :                        changePort , changeIP , 
; 1728 :                        testNum );

  00052	ff 75 10	 push	 DWORD PTR _testNum$[ebp]
  00055	8d 85 68 f3 ff
	ff		 lea	 eax, DWORD PTR _req$[ebp]
  0005b	ff b5 64 f3 ff
	ff		 push	 DWORD PTR _changeIP$[ebp]
  00061	ff b5 60 f3 ff
	ff		 push	 DWORD PTR _changePort$[ebp]
  00067	ff 75 0c	 push	 DWORD PTR _username$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?stunBuildReqSimple@@YAXPAUStunMessage@@ABUStunAtrString@@_N2I@Z ; stunBuildReqSimple

; 1729 : 	
; 1730 :    char buf[STUN_MAX_MESSAGE_SIZE];
; 1731 :    int len = STUN_MAX_MESSAGE_SIZE;
; 1732 : 	
; 1733 :    len = stunEncodeMessage( req, buf, len, password,verbose );

  00070	ff 75 14	 push	 DWORD PTR _verbose$[ebp]
  00073	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00079	57		 push	 edi
  0007a	68 00 08 00 00	 push	 2048			; 00000800H
  0007f	50		 push	 eax
  00080	8d 85 68 f3 ff
	ff		 lea	 eax, DWORD PTR _req$[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ?stunEncodeMessage@@YAIABUStunMessage@@PADIABUStunAtrString@@_N@Z ; stunEncodeMessage
  0008c	83 c4 34	 add	 esp, 52			; 00000034H

; 1734 : 	
; 1735 :    if ( verbose )

  0008f	80 7d 14 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00093	8b f8		 mov	 edi, eax
  00095	74 36		 je	 SHORT $LN14@stunSendTe

; 1736 :    {
; 1737 :       clog << "About to send msg of len " << len << " to " << dest << endl;

  00097	56		 push	 esi
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_04MKEOLIJC@?5to?5?$AA@
  0009d	57		 push	 edi
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@GGJMGLBI@About?5to?5send?5msg?5of?5len?5?$AA@
  000a3	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  000a8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000ad	59		 pop	 ecx
  000ae	59		 pop	 ecx
  000af	8b c8		 mov	 ecx, eax
  000b1	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000bc	59		 pop	 ecx
  000bd	59		 pop	 ecx
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN14@stunSendTe:

; 1738 :    }
; 1739 : 	
; 1740 :    sendMessage( myFd, buf, len, dest.addr, dest.port, verbose );

  000cd	ff 75 14	 push	 DWORD PTR _verbose$[ebp]
  000d0	0f b7 06	 movzx	 eax, WORD PTR [esi]
  000d3	50		 push	 eax
  000d4	ff 76 02	 push	 DWORD PTR [esi+2]
  000d7	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  000dd	57		 push	 edi
  000de	50		 push	 eax
  000df	ff 75 08	 push	 DWORD PTR _myFd$[ebp]
  000e2	e8 00 00 00 00	 call	 ?sendMessage@@YA_NIPADHIG_N@Z ; sendMessage
  000e7	83 c4 18	 add	 esp, 24			; 00000018H

; 1741 : 	
; 1742 :    // add some delay so the packets don't get sent too quickly 
; 1743 : #ifdef WIN32 // !cj! TODO - should fix this up in windows
; 1744 : 		 clock_t now = clock();

  000ea	e8 00 00 00 00	 call	 _clock
  000ef	8d 70 0a	 lea	 esi, DWORD PTR [eax+10]
$LL2@stunSendTe:

; 1745 : 		 while ( clock() <= now+10 ) { };

  000f2	e8 00 00 00 00	 call	 _clock
  000f7	3b c6		 cmp	 eax, esi
  000f9	7e f7		 jle	 SHORT $LL2@stunSendTe

; 1746 : #else
; 1747 : 		 usleep(10*1000);
; 1748 : #endif
; 1749 : 
; 1750 : }

  000fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fe	5f		 pop	 edi
  000ff	33 cd		 xor	 ecx, ebp
  00101	5e		 pop	 esi
  00102	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00107	c9		 leave
  00108	c3		 ret	 0
$LN7@stunSendTe:

; 1709 :          break;
; 1710 :       case 3:
; 1711 :          changePort=true;

  00109	c6 85 60 f3 ff
	ff 01		 mov	 BYTE PTR _changePort$[ebp], 1

; 1712 :          break;

  00110	e9 2a ff ff ff	 jmp	 $LN10@stunSendTe
?stunSendTest@@YAXIAAUStunAddress4@@ABUStunAtrString@@1H_N@Z ENDP ; stunSendTest
_TEXT	ENDS
PUBLIC	??_C@_0P@KOLGPECG@?7?5changedAddr?$DN?$AA@	; `string'
PUBLIC	??_C@_0O@NELMAKGH@?7?5mappedAddr?$DN?$AA@	; `string'
PUBLIC	??_C@_05MLOLLDFL@?7?5id?$DN?$AA@		; `string'
PUBLIC	??_C@_05OFNMKLLK@?7?5ok?$DN?$AA@		; `string'
PUBLIC	??_C@_0P@BLOJPNO@Got?5a?5response?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?stunTest@@YAXAAUStunAddress4@@H_NPAU1@@Z	; stunTest
;	COMDAT ??_C@_0P@KOLGPECG@?7?5changedAddr?$DN?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
CONST	SEGMENT
??_C@_0P@KOLGPECG@?7?5changedAddr?$DN?$AA@ DB 09H, ' changedAddr=', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NELMAKGH@?7?5mappedAddr?$DN?$AA@
CONST	SEGMENT
??_C@_0O@NELMAKGH@?7?5mappedAddr?$DN?$AA@ DB 09H, ' mappedAddr=', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MLOLLDFL@?7?5id?$DN?$AA@
CONST	SEGMENT
??_C@_05MLOLLDFL@?7?5id?$DN?$AA@ DB 09H, ' id=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OFNMKLLK@?7?5ok?$DN?$AA@
CONST	SEGMENT
??_C@_05OFNMKLLK@?7?5ok?$DN?$AA@ DB 09H, ' ok=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BLOJPNO@Got?5a?5response?$AA@
CONST	SEGMENT
??_C@_0P@BLOJPNO@Got?5a?5response?$AA@ DB 'Got a response', 00H ; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\stun.cpp
CONST	ENDS
;	COMDAT ?stunTest@@YAXAAUStunAddress4@@H_NPAU1@@Z
_TEXT	SEGMENT
_username$ = -3764					; size = 258
_from$ = -3504						; size = 6
_ok$ = -3496						; size = 1
_myFd$ = -3492						; size = 4
_msgLen$ = -3488					; size = 4
_resp$ = -3484						; size = 1169
_password$ = -2312					; size = 258
_msg$ = -2052						; size = 2048
__$ArrayPad$ = -4					; size = 4
_dest$ = 8						; size = 4
_testNum$ = 12						; size = 4
_verbose$ = 16						; size = 1
_sAddr$ = 20						; size = 4
?stunTest@@YAXAAUStunAddress4@@H_NPAU1@@Z PROC		; stunTest, COMDAT

; 1767 : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b4 0e 00
	00		 sub	 esp, 3764		; 00000eb4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _dest$[ebp]
  00017	57		 push	 edi
  00018	8b 7d 14	 mov	 edi, DWORD PTR _sAddr$[ebp]

; 1768 : 	
; 1769 :    int port = randomPort();

  0001b	e8 00 00 00 00	 call	 ?randomPort@@YAHXZ	; randomPort

; 1770 :    UInt32 interfaceIp=0;

  00020	33 c9		 xor	 ecx, ecx

; 1771 :    if (sAddr)

  00022	85 ff		 test	 edi, edi
  00024	74 0d		 je	 SHORT $LN4@stunTest

; 1772 :    {
; 1773 :       interfaceIp = sAddr->addr;
; 1774 :       if ( sAddr->port != 0 )

  00026	0f b7 17	 movzx	 edx, WORD PTR [edi]
  00029	8b 4f 02	 mov	 ecx, DWORD PTR [edi+2]
  0002c	66 85 d2	 test	 dx, dx
  0002f	74 02		 je	 SHORT $LN4@stunTest

; 1775 :       {
; 1776 :         port = sAddr->port;

  00031	8b c2		 mov	 eax, edx
$LN4@stunTest:
  00033	53		 push	 ebx

; 1777 :       }
; 1778 :    }
; 1779 :    Socket myFd = openPort(port,interfaceIp,verbose);

  00034	8b 5d 10	 mov	 ebx, DWORD PTR _verbose$[ebp]
  00037	53		 push	 ebx
  00038	51		 push	 ecx
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?openPort@@YAIGI_N@Z	; openPort

; 1780 : 	
; 1781 :    StunAtrString username;
; 1782 :    StunAtrString password;
; 1783 : 	
; 1784 :    username.sizeValue = 0;

  0003f	33 c9		 xor	 ecx, ecx

; 1785 :    password.sizeValue = 0;
; 1786 : 	
; 1787 : #ifdef USE_TLS
; 1788 :    stunGetUserNameAndPassword( dest, username, password );
; 1789 : #endif
; 1790 : 	
; 1791 :    stunSendTest( myFd, dest, username, password, testNum, verbose );

  00041	53		 push	 ebx
  00042	ff 75 0c	 push	 DWORD PTR _testNum$[ebp]
  00045	66 89 8d 4c f2
	ff ff		 mov	 WORD PTR _username$[ebp+256], cx
  0004c	66 89 8d f8 f7
	ff ff		 mov	 WORD PTR _password$[ebp+256], cx
  00053	8d 8d 4c f1 ff
	ff		 lea	 ecx, DWORD PTR _username$[ebp]
  00059	51		 push	 ecx
  0005a	50		 push	 eax
  0005b	8d 95 f8 f6 ff
	ff		 lea	 edx, DWORD PTR _password$[ebp]
  00061	8b ce		 mov	 ecx, esi
  00063	89 85 5c f2 ff
	ff		 mov	 DWORD PTR _myFd$[ebp], eax
  00069	e8 00 00 00 00	 call	 ?stunSendTest@@YAXIAAUStunAddress4@@ABUStunAtrString@@1H_N@Z ; stunSendTest

; 1792 :     
; 1793 :    char msg[STUN_MAX_MESSAGE_SIZE];
; 1794 :    int msgLen = STUN_MAX_MESSAGE_SIZE;
; 1795 : 	
; 1796 :    StunAddress4 from;
; 1797 :    getMessage( myFd,
; 1798 :                msg,
; 1799 :                &msgLen,
; 1800 :                &from.addr,
; 1801 :                &from.port,verbose );

  0006e	53		 push	 ebx
  0006f	8d 85 50 f2 ff
	ff		 lea	 eax, DWORD PTR _from$[ebp]
  00075	50		 push	 eax
  00076	8d 85 52 f2 ff
	ff		 lea	 eax, DWORD PTR _from$[ebp+2]
  0007c	50		 push	 eax
  0007d	8d 85 60 f2 ff
	ff		 lea	 eax, DWORD PTR _msgLen$[ebp]
  00083	50		 push	 eax
  00084	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  0008a	50		 push	 eax
  0008b	ff b5 5c f2 ff
	ff		 push	 DWORD PTR _myFd$[ebp]
  00091	c7 85 60 f2 ff
	ff 00 08 00 00	 mov	 DWORD PTR _msgLen$[ebp], 2048 ; 00000800H
  0009b	e8 00 00 00 00	 call	 ?getMessage@@YA_NIPADPAHPAIPAG_N@Z ; getMessage

; 1802 : 	
; 1803 :    StunMessage resp;
; 1804 :    memset(&resp, 0, sizeof(StunMessage));

  000a0	68 91 04 00 00	 push	 1169			; 00000491H
  000a5	8d 85 64 f2 ff
	ff		 lea	 eax, DWORD PTR _resp$[ebp]
  000ab	6a 00		 push	 0
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 _memset
  000b3	83 c4 40	 add	 esp, 64			; 00000040H

; 1805 : 	
; 1806 :    if ( verbose ) clog << "Got a response" << endl;

  000b6	be 00 00 00 00	 mov	 esi, OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  000bb	84 db		 test	 bl, bl
  000bd	74 14		 je	 SHORT $LN8@stunTest
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BLOJPNO@Got?5a?5response?$AA@
  000c4	56		 push	 esi
  000c5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@stunTest:

; 1807 :    bool ok = stunParseMessage( msg,msgLen, resp,verbose );

  000d3	53		 push	 ebx
  000d4	8d 85 64 f2 ff
	ff		 lea	 eax, DWORD PTR _resp$[ebp]
  000da	50		 push	 eax
  000db	ff b5 60 f2 ff
	ff		 push	 DWORD PTR _msgLen$[ebp]
  000e1	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ?stunParseMessage@@YA_NPADIAAUStunMessage@@_N@Z ; stunParseMessage
  000ed	83 c4 10	 add	 esp, 16			; 00000010H

; 1808 : 	
; 1809 :    if ( verbose )

  000f0	84 db		 test	 bl, bl
  000f2	88 85 58 f2 ff
	ff		 mov	 BYTE PTR _ok$[ebp], al
  000f8	5b		 pop	 ebx
  000f9	0f 84 9a 00 00
	00		 je	 $LN20@stunTest

; 1810 :    {
; 1811 :       clog << "\t ok=" << ok << endl;

  000ff	ff b5 58 f2 ff
	ff		 push	 DWORD PTR _ok$[ebp]
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_05OFNMKLLK@?7?5ok?$DN?$AA@
  0010a	56		 push	 esi
  0010b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00110	59		 pop	 ecx
  00111	59		 pop	 ecx
  00112	8b c8		 mov	 ecx, eax
  00114	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0011f	59		 pop	 ecx

; 1812 :       clog << "\t id=" << resp.msgHdr.id << endl;

  00120	8d 85 68 f2 ff
	ff		 lea	 eax, DWORD PTR _resp$[ebp+4]
  00126	50		 push	 eax
  00127	68 00 00 00 00	 push	 OFFSET ??_C@_05MLOLLDFL@?7?5id?$DN?$AA@
  0012c	56		 push	 esi
  0012d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00132	59		 pop	 ecx
  00133	59		 pop	 ecx
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUUInt128@@@Z ; operator<<
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00140	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1813 :       clog << "\t mappedAddr=" << resp.mappedAddress.ipv4 << endl;

  00143	8d 85 7b f2 ff
	ff		 lea	 eax, DWORD PTR _resp$[ebp+23]
  00149	50		 push	 eax
  0014a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NELMAKGH@?7?5mappedAddr?$DN?$AA@
  0014f	56		 push	 esi
  00150	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00155	59		 pop	 ecx
  00156	59		 pop	 ecx
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00163	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1814 :       clog << "\t changedAddr=" << resp.changedAddress.ipv4 << endl;

  00166	8d 85 9b f2 ff
	ff		 lea	 eax, DWORD PTR _resp$[ebp+55]
  0016c	50		 push	 eax
  0016d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KOLGPECG@?7?5changedAddr?$DN?$AA@
  00172	56		 push	 esi
  00173	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00178	59		 pop	 ecx
  00179	59		 pop	 ecx
  0017a	50		 push	 eax
  0017b	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00186	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1815 :       clog << endl;

  00189	6a 0a		 push	 10			; 0000000aH
  0018b	8b ce		 mov	 ecx, esi
  0018d	e8 00 00 00 00	 call	 ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z ; std::basic_ostream<char,std::char_traits<char> >::put
  00192	8b ce		 mov	 ecx, esi
  00194	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN20@stunTest:

; 1816 :    }
; 1817 : 	
; 1818 :    if (sAddr)

  00199	85 ff		 test	 edi, edi
  0019b	74 13		 je	 SHORT $LN1@stunTest

; 1819 :    {
; 1820 :       sAddr->port = resp.mappedAddress.ipv4.port;

  0019d	66 8b 85 7b f2
	ff ff		 mov	 ax, WORD PTR _resp$[ebp+23]
  001a4	66 89 07	 mov	 WORD PTR [edi], ax

; 1821 :       sAddr->addr = resp.mappedAddress.ipv4.addr;

  001a7	8b 85 7d f2 ff
	ff		 mov	 eax, DWORD PTR _resp$[ebp+25]
  001ad	89 47 02	 mov	 DWORD PTR [edi+2], eax
$LN1@stunTest:

; 1822 :    }
; 1823 :    closesocket(myFd);

  001b0	ff b5 5c f2 ff
	ff		 push	 DWORD PTR _myFd$[ebp]
  001b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 1824 : }

  001bc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bf	5f		 pop	 edi
  001c0	33 cd		 xor	 ecx, ebp
  001c2	5e		 pop	 esi
  001c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c8	c9		 leave
  001c9	c3		 ret	 0
?stunTest@@YAXAAUStunAddress4@@H_NPAU1@@Z ENDP		; stunTest
_TEXT	ENDS
PUBLIC	??_C@_0CP@HDIKEJCE@Some?5problem?5opening?5port?1interf@ ; `string'
PUBLIC	??_C@_0BC@BKLLKDMA@mapped?5IP?5same?5?$DN?5?$AA@ ; `string'
PUBLIC	??_C@_0L@IALJDCMC@is?5nat?5?5?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0N@HGECJPHF@test?5I?$CI2?$CJ?5?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0M@HOIANLBM@test?5III?5?$DN?5?$AA@	; `string'
PUBLIC	??_C@_0L@KHHFGFHD@test?5II?5?$DN?5?$AA@		; `string'
PUBLIC	??_C@_09IEJBNGJK@test?5I?5?$DN?5?$AA@		; `string'
PUBLIC	??_C@_06BAOMBKPD@Error?5?$AA@			; `string'
PUBLIC	??_C@_0L@IGIANGLH@?5in?5select?$AA@		; `string'
PUBLIC	??_C@_0BK@EHLOOKHD@Received?5message?5of?5type?5?$AA@ ; `string'
PUBLIC	??_C@_05OLEIOHKF@?5?5id?$DN?$AA@		; `string'
PUBLIC	_sAddr$GSCopy$
PUBLIC	_hairpin$GSCopy$
PUBLIC	_preservePort$GSCopy$
PUBLIC	_dest$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?stunNatType@@YA?AW4NatType@@AAUStunAddress4@@_NPA_N2HPAU2@@Z ; stunNatType
EXTRN	?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE ; std::cerr
;	COMDAT ??_C@_0CP@HDIKEJCE@Some?5problem?5opening?5port?1interf@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
CONST	SEGMENT
??_C@_0CP@HDIKEJCE@Some?5problem?5opening?5port?1interf@ DB 'Some problem'
	DB	' opening port/interface to send on', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BKLLKDMA@mapped?5IP?5same?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0BC@BKLLKDMA@mapped?5IP?5same?5?$DN?5?$AA@ DB 'mapped IP same = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IALJDCMC@is?5nat?5?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0L@IALJDCMC@is?5nat?5?5?$DN?5?$AA@ DB 'is nat  = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HGECJPHF@test?5I?$CI2?$CJ?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0N@HGECJPHF@test?5I?$CI2?$CJ?5?$DN?5?$AA@ DB 'test I(2) = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HOIANLBM@test?5III?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0M@HOIANLBM@test?5III?5?$DN?5?$AA@ DB 'test III = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KHHFGFHD@test?5II?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0L@KHHFGFHD@test?5II?5?$DN?5?$AA@ DB 'test II = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09IEJBNGJK@test?5I?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_09IEJBNGJK@test?5I?5?$DN?5?$AA@ DB 'test I = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAOMBKPD@Error?5?$AA@
CONST	SEGMENT
??_C@_06BAOMBKPD@Error?5?$AA@ DB 'Error ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IGIANGLH@?5in?5select?$AA@
CONST	SEGMENT
??_C@_0L@IGIANGLH@?5in?5select?$AA@ DB ' in select', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EHLOOKHD@Received?5message?5of?5type?5?$AA@
CONST	SEGMENT
??_C@_0BK@EHLOOKHD@Received?5message?5of?5type?5?$AA@ DB 'Received messag'
	DB	'e of type ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05OLEIOHKF@?5?5id?$DN?$AA@
CONST	SEGMENT
??_C@_05OLEIOHKF@?5?5id?$DN?$AA@ DB '  id=', 00H	; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\stun.cpp
CONST	ENDS
;	COMDAT ?stunNatType@@YA?AW4NatType@@AAUStunAddress4@@_NPA_N2HPAU2@@Z
_TEXT	SEGMENT
_username$ = -4096					; size = 258
_from$88475 = -3836					; size = 6
_hairpin$GSCopy$ = -3828				; size = 4
_tv$88405 = -3824					; size = 8
_sAddr$GSCopy$ = -3816					; size = 4
_preservePort$GSCopy$ = -3812				; size = 4
_msgLen$88474 = -3808					; size = 4
_testI2dest$ = -3804					; size = 6
_mappedIpSame$ = -3796					; size = 1
_dest$GSCopy$ = -3792					; size = 4
_respTestIII$ = -3788					; size = 1
_respTestI2$ = -3784					; size = 1
_count$ = -3780						; size = 4
_respTestII$ = -3776					; size = 1
_myFd1$ = -3772						; size = 4
_testImappedAddr$ = -3768				; size = 6
_respTestI$ = -3760					; size = 1
_myFd2$ = -3756						; size = 4
_isNat$ = -3752						; size = 1
_i$88461 = -3752					; size = 4
_respTestHairpin$ = -3745				; size = 1
_req$98663 = -3744					; size = 1169
_req$98634 = -3744					; size = 1169
_req$98605 = -3744					; size = 1169
_req$98576 = -3744					; size = 1169
_resp$88476 = -3744					; size = 1169
_password$ = -2572					; size = 258
_fdSet$88406 = -2312					; size = 260
_buf$98664 = -2052					; size = 2048
_buf$98635 = -2052					; size = 2048
_buf$98606 = -2052					; size = 2048
_buf$98577 = -2052					; size = 2048
_msg$88473 = -2052					; size = 2048
__$ArrayPad$ = -4					; size = 4
_dest$ = 8						; size = 4
_verbose$ = 12						; size = 1
_preservePort$ = 16					; size = 4
_hairpin$ = 20						; size = 4
_port$ = 24						; size = 4
_sAddr$ = 28						; size = 4
?stunNatType@@YA?AW4NatType@@AAUStunAddress4@@_NPA_N2HPAU2@@Z PROC ; stunNatType, COMDAT

; 1835 : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1851 :    Socket myFd2 = openPort(port+1,interfaceIp,verbose);

  00017	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  0001a	53		 push	 ebx
  0001b	89 85 30 f1 ff
	ff		 mov	 DWORD PTR _dest$GSCopy$[ebp], eax
  00021	8b 45 10	 mov	 eax, DWORD PTR _preservePort$[ebp]
  00024	56		 push	 esi

; 1910 :       {
; 1911 :          // error occured
; 1912 :          cerr << "Error " << e << " " << strerror(e) << " in select" << endl;

  00025	89 85 1c f1 ff
	ff		 mov	 DWORD PTR _preservePort$GSCopy$[ebp], eax
  0002b	8b 45 14	 mov	 eax, DWORD PTR _hairpin$[ebp]
  0002e	57		 push	 edi
  0002f	8b 7d 1c	 mov	 edi, DWORD PTR _sAddr$[ebp]
  00032	33 f6		 xor	 esi, esi
  00034	89 85 0c f1 ff
	ff		 mov	 DWORD PTR _hairpin$GSCopy$[ebp], eax
  0003a	89 bd 18 f1 ff
	ff		 mov	 DWORD PTR _sAddr$GSCopy$[ebp], edi
  00040	3b c6		 cmp	 eax, esi
  00042	74 03		 je	 SHORT $LN75@stunNatTyp

; 1836 :    if ( hairpin ) 
; 1837 :    {
; 1838 :       *hairpin = false;

  00044	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN75@stunNatTyp:

; 1839 :    }
; 1840 : 	
; 1841 :    if ( port == 0 )

  00047	39 75 18	 cmp	 DWORD PTR _port$[ebp], esi
  0004a	75 08		 jne	 SHORT $LN74@stunNatTyp

; 1842 :    {
; 1843 :       port = randomPort();

  0004c	e8 00 00 00 00	 call	 ?randomPort@@YAHXZ	; randomPort
  00051	89 45 18	 mov	 DWORD PTR _port$[ebp], eax
$LN74@stunNatTyp:

; 1844 :    }
; 1845 :    UInt32 interfaceIp=0;
; 1846 :    if (sAddr)

  00054	3b fe		 cmp	 edi, esi
  00056	74 03		 je	 SHORT $LN73@stunNatTyp

; 1847 :    {
; 1848 :       interfaceIp = sAddr->addr;

  00058	8b 77 02	 mov	 esi, DWORD PTR [edi+2]
$LN73@stunNatTyp:

; 1849 :    }
; 1850 :    Socket myFd1 = openPort(port,interfaceIp,verbose);

  0005b	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  0005e	8b 5d 18	 mov	 ebx, DWORD PTR _port$[ebp]
  00061	56		 push	 esi
  00062	53		 push	 ebx
  00063	e8 00 00 00 00	 call	 ?openPort@@YAIGI_N@Z	; openPort

; 1851 :    Socket myFd2 = openPort(port+1,interfaceIp,verbose);

  00068	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  0006b	8b f8		 mov	 edi, eax
  0006d	56		 push	 esi
  0006e	43		 inc	 ebx
  0006f	53		 push	 ebx
  00070	89 bd 44 f1 ff
	ff		 mov	 DWORD PTR _myFd1$[ebp], edi
  00076	e8 00 00 00 00	 call	 ?openPort@@YAIGI_N@Z	; openPort

; 1852 : 
; 1853 :    if ( ( myFd1 == INVALID_SOCKET) || ( myFd2 == INVALID_SOCKET) )

  0007b	83 cb ff	 or	 ebx, -1
  0007e	83 c4 18	 add	 esp, 24			; 00000018H
  00081	89 85 54 f1 ff
	ff		 mov	 DWORD PTR _myFd2$[ebp], eax
  00087	3b fb		 cmp	 edi, ebx
  00089	0f 84 8e 08 00
	00		 je	 $LN71@stunNatTyp
  0008f	3b c3		 cmp	 eax, ebx
  00091	0f 84 86 08 00
	00		 je	 $LN71@stunNatTyp

; 1861 :    }
; 1862 : 
; 1863 :     
; 1864 :    bool respTestI=false;
; 1865 :    bool isNat=true;
; 1866 :    StunAddress4 testIchangedAddr;
; 1867 :    StunAddress4 testImappedAddr;
; 1868 :    bool respTestI2=false; 
; 1869 :    bool mappedIpSame = true;
; 1870 :    StunAddress4 testI2mappedAddr;
; 1871 :    StunAddress4 testI2dest=dest;

  00097	8b b5 30 f1 ff
	ff		 mov	 esi, DWORD PTR _dest$GSCopy$[ebp]
  0009d	8d bd 24 f1 ff
	ff		 lea	 edi, DWORD PTR _testI2dest$[ebp]
  000a3	a5		 movsd

; 1872 :    bool respTestII=false;
; 1873 :    bool respTestIII=false;
; 1874 : 
; 1875 :    bool respTestHairpin=false;
; 1876 : 	
; 1877 :    memset(&testImappedAddr,0,sizeof(testImappedAddr));

  000a4	6a 06		 push	 6
  000a6	8d 85 48 f1 ff
	ff		 lea	 eax, DWORD PTR _testImappedAddr$[ebp]
  000ac	6a 00		 push	 0
  000ae	50		 push	 eax
  000af	c6 85 50 f1 ff
	ff 00		 mov	 BYTE PTR _respTestI$[ebp], 0
  000b6	c6 85 38 f1 ff
	ff 00		 mov	 BYTE PTR _respTestI2$[ebp], 0
  000bd	c6 85 2c f1 ff
	ff 01		 mov	 BYTE PTR _mappedIpSame$[ebp], 1
  000c4	66 a5		 movsw
  000c6	c6 85 40 f1 ff
	ff 00		 mov	 BYTE PTR _respTestII$[ebp], 0
  000cd	c6 85 34 f1 ff
	ff 00		 mov	 BYTE PTR _respTestIII$[ebp], 0
  000d4	c6 85 5f f1 ff
	ff 00		 mov	 BYTE PTR _respTestHairpin$[ebp], 0
  000db	e8 00 00 00 00	 call	 _memset

; 1878 : 	
; 1879 :    StunAtrString username;
; 1880 :    StunAtrString password;
; 1881 : 	
; 1882 :    username.sizeValue = 0;

  000e0	33 c0		 xor	 eax, eax
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1883 :    password.sizeValue = 0;
; 1884 : 	
; 1885 : #ifdef USE_TLS 
; 1886 :    stunGetUserNameAndPassword( dest, username, password );
; 1887 : #endif
; 1888 : 	
; 1889 :    //stunSendTest( myFd1, dest, username, password, 1, verbose );
; 1890 :    int count=0;

  000e5	21 85 3c f1 ff
	ff		 and	 DWORD PTR _count$[ebp], eax
  000eb	66 89 85 00 f1
	ff ff		 mov	 WORD PTR _username$[ebp+256], ax
  000f2	66 89 85 f4 f6
	ff ff		 mov	 WORD PTR _password$[ebp+256], ax
  000f9	be 00 00 00 00	 mov	 esi, OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
$LL68@stunNatTyp:

; 1892 :    {
; 1893 :       struct timeval tv;
; 1894 :       fd_set fdSet; 
; 1895 : #ifdef WIN32
; 1896 :       unsigned int fdSetSize;
; 1897 : #else
; 1898 :       int fdSetSize;
; 1899 : #endif
; 1900 :       FD_ZERO(&fdSet); fdSetSize=0;
; 1901 :       FD_SET(myFd1,&fdSet); fdSetSize = (myFd1+1>fdSetSize) ? myFd1+1 : fdSetSize;

  000fe	8b 85 44 f1 ff
	ff		 mov	 eax, DWORD PTR _myFd1$[ebp]
  00104	33 d2		 xor	 edx, edx
  00106	42		 inc	 edx
  00107	33 db		 xor	 ebx, ebx
  00109	33 ff		 xor	 edi, edi
  0010b	89 85 fc f6 ff
	ff		 mov	 DWORD PTR _fdSet$88406[ebp+4], eax
  00111	40		 inc	 eax
  00112	89 95 f8 f6 ff
	ff		 mov	 DWORD PTR _fdSet$88406[ebp], edx
  00118	3b c3		 cmp	 eax, ebx
  0011a	76 02		 jbe	 SHORT $LN78@stunNatTyp
  0011c	8b f8		 mov	 edi, eax
$LN78@stunNatTyp:

; 1902 :       FD_SET(myFd2,&fdSet); fdSetSize = (myFd2+1>fdSetSize) ? myFd2+1 : fdSetSize;

  0011e	8b 8d 54 f1 ff
	ff		 mov	 ecx, DWORD PTR _myFd2$[ebp]
  00124	33 c0		 xor	 eax, eax
$LL54@stunNatTyp:
  00126	39 8c 85 fc f6
	ff ff		 cmp	 DWORD PTR _fdSet$88406[ebp+eax*4+4], ecx
  0012d	74 05		 je	 SHORT $LN171@stunNatTyp
  0012f	40		 inc	 eax
  00130	3b c2		 cmp	 eax, edx
  00132	72 f2		 jb	 SHORT $LL54@stunNatTyp
$LN171@stunNatTyp:
  00134	3b c2		 cmp	 eax, edx
  00136	75 10		 jne	 SHORT $LN56@stunNatTyp
  00138	89 8d 00 f7 ff
	ff		 mov	 DWORD PTR _fdSet$88406[ebp+8], ecx
  0013e	c7 85 f8 f6 ff
	ff 02 00 00 00	 mov	 DWORD PTR _fdSet$88406[ebp], 2
$LN56@stunNatTyp:
  00148	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0014b	3b c7		 cmp	 eax, edi
  0014d	76 02		 jbe	 SHORT $LN80@stunNatTyp
  0014f	8b f8		 mov	 edi, eax
$LN80@stunNatTyp:

; 1903 :       tv.tv_sec=0;

  00151	89 9d 10 f1 ff
	ff		 mov	 DWORD PTR _tv$88405[ebp], ebx

; 1904 :       tv.tv_usec=300*1000; // 150 ms 

  00157	c7 85 14 f1 ff
	ff e0 93 04 00	 mov	 DWORD PTR _tv$88405[ebp+4], 300000 ; 000493e0H

; 1905 :       if ( count == 0 ) tv.tv_usec=0;

  00161	39 9d 3c f1 ff
	ff		 cmp	 DWORD PTR _count$[ebp], ebx
  00167	75 06		 jne	 SHORT $LN48@stunNatTyp
  00169	89 9d 14 f1 ff
	ff		 mov	 DWORD PTR _tv$88405[ebp+4], ebx
$LN48@stunNatTyp:

; 1906 : 		
; 1907 :       int  err = select(fdSetSize, &fdSet, NULL, NULL, &tv);

  0016f	8d 85 10 f1 ff
	ff		 lea	 eax, DWORD PTR _tv$88405[ebp]
  00175	50		 push	 eax
  00176	6a 00		 push	 0
  00178	6a 00		 push	 0
  0017a	8d 85 f8 f6 ff
	ff		 lea	 eax, DWORD PTR _fdSet$88406[ebp]
  00180	50		 push	 eax
  00181	57		 push	 edi
  00182	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__select@20
  00188	8b f8		 mov	 edi, eax

; 1908 :       int e = getErrno();

  0018a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00190	8b d8		 mov	 ebx, eax

; 1909 :       if ( err == SOCKET_ERROR )

  00192	83 ff ff	 cmp	 edi, -1
  00195	0f 84 d9 05 00
	00		 je	 $LN172@stunNatTyp

; 1916 :      }
; 1917 :       else if ( err == 0 )

  0019b	33 db		 xor	 ebx, ebx
  0019d	3b fb		 cmp	 edi, ebx
  0019f	0f 85 c7 03 00
	00		 jne	 $LN45@stunNatTyp

; 1918 :       {
; 1919 :          // timeout occured 
; 1920 :          count++;

  001a5	ff 85 3c f1 ff
	ff		 inc	 DWORD PTR _count$[ebp]

; 1921 : 			
; 1922 :          if ( !respTestI ) 

  001ab	38 9d 50 f1 ff
	ff		 cmp	 BYTE PTR _respTestI$[ebp], bl
  001b1	0f 85 c0 00 00
	00		 jne	 $LN189@stunNatTyp

; 1923 :          {
; 1924 :             stunSendTest( myFd1, dest, username, password, 1 ,verbose );

  001b7	68 91 04 00 00	 push	 1169			; 00000491H
  001bc	8d 85 60 f1 ff
	ff		 lea	 eax, DWORD PTR _req$98576[ebp]
  001c2	53		 push	 ebx
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 _memset
  001c9	6a 01		 push	 1
  001cb	53		 push	 ebx
  001cc	53		 push	 ebx
  001cd	8d 85 00 f0 ff
	ff		 lea	 eax, DWORD PTR _username$[ebp]
  001d3	50		 push	 eax
  001d4	8d 85 60 f1 ff
	ff		 lea	 eax, DWORD PTR _req$98576[ebp]
  001da	50		 push	 eax
  001db	e8 00 00 00 00	 call	 ?stunBuildReqSimple@@YAXPAUStunMessage@@ABUStunAtrString@@_N2I@Z ; stunBuildReqSimple
  001e0	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  001e3	8d 85 f4 f5 ff
	ff		 lea	 eax, DWORD PTR _password$[ebp]
  001e9	50		 push	 eax
  001ea	68 00 08 00 00	 push	 2048			; 00000800H
  001ef	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$98577[ebp]
  001f5	50		 push	 eax
  001f6	8d 85 60 f1 ff
	ff		 lea	 eax, DWORD PTR _req$98576[ebp]
  001fc	50		 push	 eax
  001fd	e8 00 00 00 00	 call	 ?stunEncodeMessage@@YAIABUStunMessage@@PADIABUStunAtrString@@_N@Z ; stunEncodeMessage
  00202	83 c4 34	 add	 esp, 52			; 00000034H
  00205	38 5d 0c	 cmp	 BYTE PTR _verbose$[ebp], bl
  00208	8b 9d 30 f1 ff
	ff		 mov	 ebx, DWORD PTR _dest$GSCopy$[ebp]
  0020e	8b f8		 mov	 edi, eax
  00210	74 32		 je	 SHORT $LN101@stunNatTyp
  00212	53		 push	 ebx
  00213	68 00 00 00 00	 push	 OFFSET ??_C@_04MKEOLIJC@?5to?5?$AA@
  00218	57		 push	 edi
  00219	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@GGJMGLBI@About?5to?5send?5msg?5of?5len?5?$AA@
  0021e	56		 push	 esi
  0021f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00224	59		 pop	 ecx
  00225	59		 pop	 ecx
  00226	8b c8		 mov	 ecx, eax
  00228	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00233	59		 pop	 ecx
  00234	59		 pop	 ecx
  00235	50		 push	 eax
  00236	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  0023b	50		 push	 eax
  0023c	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00241	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN101@stunNatTyp:
  00244	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  00247	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0024a	50		 push	 eax
  0024b	ff 73 02	 push	 DWORD PTR [ebx+2]
  0024e	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$98577[ebp]
  00254	57		 push	 edi
  00255	50		 push	 eax
  00256	ff b5 44 f1 ff
	ff		 push	 DWORD PTR _myFd1$[ebp]
  0025c	e8 00 00 00 00	 call	 ?sendMessage@@YA_NIPADHIG_N@Z ; sendMessage
  00261	83 c4 18	 add	 esp, 24			; 00000018H
  00264	e8 00 00 00 00	 call	 _clock
  00269	8d 78 0a	 lea	 edi, DWORD PTR [eax+10]
$LL89@stunNatTyp:
  0026c	e8 00 00 00 00	 call	 _clock
  00271	3b c7		 cmp	 eax, edi
  00273	7e f7		 jle	 SHORT $LL89@stunNatTyp
  00275	eb 06		 jmp	 SHORT $LN88@stunNatTyp
$LN189@stunNatTyp:
  00277	8b 9d 30 f1 ff
	ff		 mov	 ebx, DWORD PTR _dest$GSCopy$[ebp]
$LN88@stunNatTyp:

; 1925 :          }         
; 1926 : 			
; 1927 :          if ( (!respTestI2) && respTestI ) 

  0027d	80 bd 38 f1 ff
	ff 00		 cmp	 BYTE PTR _respTestI2$[ebp], 0
  00284	0f 85 ee 00 00
	00		 jne	 $LN192@stunNatTyp
  0028a	80 bd 50 f1 ff
	ff 00		 cmp	 BYTE PTR _respTestI$[ebp], 0
  00291	0f 84 e1 00 00
	00		 je	 $LN192@stunNatTyp

; 1928 :          {
; 1929 :             // check the address to send to if valid 
; 1930 :             if (  ( testI2dest.addr != 0 ) &&
; 1931 :                   ( testI2dest.port != 0 ) )

  00297	83 bd 26 f1 ff
	ff 00		 cmp	 DWORD PTR _testI2dest$[ebp+2], 0
  0029e	0f 84 d4 00 00
	00		 je	 $LN192@stunNatTyp
  002a4	66 83 bd 24 f1
	ff ff 00	 cmp	 WORD PTR _testI2dest$[ebp], 0
  002ac	0f 84 c6 00 00
	00		 je	 $LN192@stunNatTyp

; 1932 :             {
; 1933 :                stunSendTest( myFd1, testI2dest, username, password, 10  ,verbose);

  002b2	68 91 04 00 00	 push	 1169			; 00000491H
  002b7	33 ff		 xor	 edi, edi
  002b9	8d 85 60 f1 ff
	ff		 lea	 eax, DWORD PTR _req$98605[ebp]
  002bf	57		 push	 edi
  002c0	50		 push	 eax
  002c1	e8 00 00 00 00	 call	 _memset
  002c6	6a 0a		 push	 10			; 0000000aH
  002c8	57		 push	 edi
  002c9	57		 push	 edi
  002ca	8d 85 00 f0 ff
	ff		 lea	 eax, DWORD PTR _username$[ebp]
  002d0	50		 push	 eax
  002d1	8d 85 60 f1 ff
	ff		 lea	 eax, DWORD PTR _req$98605[ebp]
  002d7	50		 push	 eax
  002d8	e8 00 00 00 00	 call	 ?stunBuildReqSimple@@YAXPAUStunMessage@@ABUStunAtrString@@_N2I@Z ; stunBuildReqSimple
  002dd	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  002e0	8d 85 f4 f5 ff
	ff		 lea	 eax, DWORD PTR _password$[ebp]
  002e6	50		 push	 eax
  002e7	68 00 08 00 00	 push	 2048			; 00000800H
  002ec	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$98606[ebp]
  002f2	50		 push	 eax
  002f3	8d 85 60 f1 ff
	ff		 lea	 eax, DWORD PTR _req$98605[ebp]
  002f9	50		 push	 eax
  002fa	e8 00 00 00 00	 call	 ?stunEncodeMessage@@YAIABUStunMessage@@PADIABUStunAtrString@@_N@Z ; stunEncodeMessage
  002ff	83 c4 34	 add	 esp, 52			; 00000034H
  00302	80 7d 0c 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00306	8b f8		 mov	 edi, eax
  00308	74 38		 je	 SHORT $LN116@stunNatTyp
  0030a	8d 85 24 f1 ff
	ff		 lea	 eax, DWORD PTR _testI2dest$[ebp]
  00310	50		 push	 eax
  00311	68 00 00 00 00	 push	 OFFSET ??_C@_04MKEOLIJC@?5to?5?$AA@
  00316	57		 push	 edi
  00317	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@GGJMGLBI@About?5to?5send?5msg?5of?5len?5?$AA@
  0031c	56		 push	 esi
  0031d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00322	59		 pop	 ecx
  00323	59		 pop	 ecx
  00324	8b c8		 mov	 ecx, eax
  00326	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0032b	50		 push	 eax
  0032c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00331	59		 pop	 ecx
  00332	59		 pop	 ecx
  00333	50		 push	 eax
  00334	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  00339	50		 push	 eax
  0033a	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0033f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN116@stunNatTyp:
  00342	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  00345	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$98606[ebp]
  0034b	ff b5 24 f1 ff
	ff		 push	 DWORD PTR _testI2dest$[ebp]
  00351	ff b5 26 f1 ff
	ff		 push	 DWORD PTR _testI2dest$[ebp+2]
  00357	57		 push	 edi
  00358	50		 push	 eax
  00359	ff b5 44 f1 ff
	ff		 push	 DWORD PTR _myFd1$[ebp]
  0035f	e8 00 00 00 00	 call	 ?sendMessage@@YA_NIPADHIG_N@Z ; sendMessage
  00364	83 c4 18	 add	 esp, 24			; 00000018H
  00367	e8 00 00 00 00	 call	 _clock
  0036c	8d 78 0a	 lea	 edi, DWORD PTR [eax+10]
$LL104@stunNatTyp:
  0036f	e8 00 00 00 00	 call	 _clock
  00374	3b c7		 cmp	 eax, edi
  00376	7e f7		 jle	 SHORT $LL104@stunNatTyp
$LN192@stunNatTyp:

; 1934 :             }
; 1935 :          }
; 1936 : 			
; 1937 :          if ( !respTestII )

  00378	80 bd 40 f1 ff
	ff 00		 cmp	 BYTE PTR _respTestII$[ebp], 0
  0037f	0f 85 bc 00 00
	00		 jne	 $LN190@stunNatTyp

; 1938 :          {
; 1939 :             stunSendTest( myFd2, dest, username, password, 2 ,verbose );

  00385	68 91 04 00 00	 push	 1169			; 00000491H
  0038a	8d 85 60 f1 ff
	ff		 lea	 eax, DWORD PTR _req$98634[ebp]
  00390	6a 00		 push	 0
  00392	50		 push	 eax
  00393	e8 00 00 00 00	 call	 _memset
  00398	6a 02		 push	 2
  0039a	6a 01		 push	 1
  0039c	6a 00		 push	 0
  0039e	8d 85 00 f0 ff
	ff		 lea	 eax, DWORD PTR _username$[ebp]
  003a4	50		 push	 eax
  003a5	8d 85 60 f1 ff
	ff		 lea	 eax, DWORD PTR _req$98634[ebp]
  003ab	50		 push	 eax
  003ac	e8 00 00 00 00	 call	 ?stunBuildReqSimple@@YAXPAUStunMessage@@ABUStunAtrString@@_N2I@Z ; stunBuildReqSimple
  003b1	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  003b4	8d 85 f4 f5 ff
	ff		 lea	 eax, DWORD PTR _password$[ebp]
  003ba	50		 push	 eax
  003bb	68 00 08 00 00	 push	 2048			; 00000800H
  003c0	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$98635[ebp]
  003c6	50		 push	 eax
  003c7	8d 85 60 f1 ff
	ff		 lea	 eax, DWORD PTR _req$98634[ebp]
  003cd	50		 push	 eax
  003ce	e8 00 00 00 00	 call	 ?stunEncodeMessage@@YAIABUStunMessage@@PADIABUStunAtrString@@_N@Z ; stunEncodeMessage
  003d3	83 c4 34	 add	 esp, 52			; 00000034H
  003d6	80 7d 0c 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  003da	8b f8		 mov	 edi, eax
  003dc	74 32		 je	 SHORT $LN131@stunNatTyp
  003de	53		 push	 ebx
  003df	68 00 00 00 00	 push	 OFFSET ??_C@_04MKEOLIJC@?5to?5?$AA@
  003e4	57		 push	 edi
  003e5	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@GGJMGLBI@About?5to?5send?5msg?5of?5len?5?$AA@
  003ea	56		 push	 esi
  003eb	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003f0	59		 pop	 ecx
  003f1	59		 pop	 ecx
  003f2	8b c8		 mov	 ecx, eax
  003f4	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  003f9	50		 push	 eax
  003fa	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003ff	59		 pop	 ecx
  00400	59		 pop	 ecx
  00401	50		 push	 eax
  00402	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  00407	50		 push	 eax
  00408	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0040d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN131@stunNatTyp:
  00410	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  00413	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00416	50		 push	 eax
  00417	ff 73 02	 push	 DWORD PTR [ebx+2]
  0041a	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$98635[ebp]
  00420	57		 push	 edi
  00421	50		 push	 eax
  00422	ff b5 54 f1 ff
	ff		 push	 DWORD PTR _myFd2$[ebp]
  00428	e8 00 00 00 00	 call	 ?sendMessage@@YA_NIPADHIG_N@Z ; sendMessage
  0042d	83 c4 18	 add	 esp, 24			; 00000018H
  00430	e8 00 00 00 00	 call	 _clock
  00435	8d 78 0a	 lea	 edi, DWORD PTR [eax+10]
$LL119@stunNatTyp:
  00438	e8 00 00 00 00	 call	 _clock
  0043d	3b c7		 cmp	 eax, edi
  0043f	7e f7		 jle	 SHORT $LL119@stunNatTyp
$LN190@stunNatTyp:

; 1940 :          }
; 1941 : 			
; 1942 :          if ( !respTestIII )

  00441	80 bd 34 f1 ff
	ff 00		 cmp	 BYTE PTR _respTestIII$[ebp], 0
  00448	75 22		 jne	 SHORT $LN40@stunNatTyp

; 1943 :          {
; 1944 :             stunSendTest( myFd2, dest, username, password, 3 ,verbose );

  0044a	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  0044d	8d 85 00 f0 ff
	ff		 lea	 eax, DWORD PTR _username$[ebp]
  00453	6a 03		 push	 3
  00455	50		 push	 eax
  00456	ff b5 54 f1 ff
	ff		 push	 DWORD PTR _myFd2$[ebp]
  0045c	8d 95 f4 f5 ff
	ff		 lea	 edx, DWORD PTR _password$[ebp]
  00462	8b cb		 mov	 ecx, ebx
  00464	e8 00 00 00 00	 call	 ?stunSendTest@@YAXIAAUStunAddress4@@ABUStunAtrString@@1H_N@Z ; stunSendTest
  00469	83 c4 10	 add	 esp, 16			; 00000010H
$LN40@stunNatTyp:

; 1945 :          }
; 1946 : 			
; 1947 :          if ( respTestI && (!respTestHairpin) )

  0046c	80 bd 50 f1 ff
	ff 00		 cmp	 BYTE PTR _respTestI$[ebp], 0
  00473	0f 84 c7 02 00
	00		 je	 $LN187@stunNatTyp
  00479	80 bd 5f f1 ff
	ff 00		 cmp	 BYTE PTR _respTestHairpin$[ebp], 0
  00480	0f 85 ba 02 00
	00		 jne	 $LN187@stunNatTyp

; 1948 :          {
; 1949 :             if (  ( testImappedAddr.addr != 0 ) &&
; 1950 :                   ( testImappedAddr.port != 0 ) )

  00486	83 bd 4a f1 ff
	ff 00		 cmp	 DWORD PTR _testImappedAddr$[ebp+2], 0
  0048d	0f 84 ad 02 00
	00		 je	 $LN187@stunNatTyp
  00493	66 83 bd 48 f1
	ff ff 00	 cmp	 WORD PTR _testImappedAddr$[ebp], 0
  0049b	0f 84 9f 02 00
	00		 je	 $LN187@stunNatTyp

; 1951 :             {
; 1952 :                stunSendTest( myFd1, testImappedAddr, username, password, 11 ,verbose );

  004a1	68 91 04 00 00	 push	 1169			; 00000491H
  004a6	33 ff		 xor	 edi, edi
  004a8	8d 85 60 f1 ff
	ff		 lea	 eax, DWORD PTR _req$98663[ebp]
  004ae	57		 push	 edi
  004af	50		 push	 eax
  004b0	e8 00 00 00 00	 call	 _memset
  004b5	6a 0b		 push	 11			; 0000000bH
  004b7	57		 push	 edi
  004b8	57		 push	 edi
  004b9	8d 85 00 f0 ff
	ff		 lea	 eax, DWORD PTR _username$[ebp]
  004bf	50		 push	 eax
  004c0	8d 85 60 f1 ff
	ff		 lea	 eax, DWORD PTR _req$98663[ebp]
  004c6	50		 push	 eax
  004c7	e8 00 00 00 00	 call	 ?stunBuildReqSimple@@YAXPAUStunMessage@@ABUStunAtrString@@_N2I@Z ; stunBuildReqSimple
  004cc	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  004cf	8d 85 f4 f5 ff
	ff		 lea	 eax, DWORD PTR _password$[ebp]
  004d5	50		 push	 eax
  004d6	68 00 08 00 00	 push	 2048			; 00000800H
  004db	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$98664[ebp]
  004e1	50		 push	 eax
  004e2	8d 85 60 f1 ff
	ff		 lea	 eax, DWORD PTR _req$98663[ebp]
  004e8	50		 push	 eax
  004e9	e8 00 00 00 00	 call	 ?stunEncodeMessage@@YAIABUStunMessage@@PADIABUStunAtrString@@_N@Z ; stunEncodeMessage
  004ee	83 c4 34	 add	 esp, 52			; 00000034H
  004f1	80 7d 0c 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  004f5	8b f8		 mov	 edi, eax
  004f7	74 38		 je	 SHORT $LN146@stunNatTyp
  004f9	8d 85 48 f1 ff
	ff		 lea	 eax, DWORD PTR _testImappedAddr$[ebp]
  004ff	50		 push	 eax
  00500	68 00 00 00 00	 push	 OFFSET ??_C@_04MKEOLIJC@?5to?5?$AA@
  00505	57		 push	 edi
  00506	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@GGJMGLBI@About?5to?5send?5msg?5of?5len?5?$AA@
  0050b	56		 push	 esi
  0050c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00511	59		 pop	 ecx
  00512	59		 pop	 ecx
  00513	8b c8		 mov	 ecx, eax
  00515	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0051a	50		 push	 eax
  0051b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00520	59		 pop	 ecx
  00521	59		 pop	 ecx
  00522	50		 push	 eax
  00523	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  00528	50		 push	 eax
  00529	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0052e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN146@stunNatTyp:
  00531	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  00534	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$98664[ebp]
  0053a	ff b5 48 f1 ff
	ff		 push	 DWORD PTR _testImappedAddr$[ebp]
  00540	ff b5 4a f1 ff
	ff		 push	 DWORD PTR _testImappedAddr$[ebp+2]
  00546	57		 push	 edi
  00547	50		 push	 eax
  00548	ff b5 44 f1 ff
	ff		 push	 DWORD PTR _myFd1$[ebp]
  0054e	e8 00 00 00 00	 call	 ?sendMessage@@YA_NIPADHIG_N@Z ; sendMessage
  00553	83 c4 18	 add	 esp, 24			; 00000018H
  00556	e8 00 00 00 00	 call	 _clock
  0055b	8d 78 0a	 lea	 edi, DWORD PTR [eax+10]
$LL134@stunNatTyp:
  0055e	e8 00 00 00 00	 call	 _clock
  00563	3b c7		 cmp	 eax, edi
  00565	7e f7		 jle	 SHORT $LL134@stunNatTyp

; 1953 :             }
; 1954 :          }
; 1955 :       }
; 1956 :       else

  00567	e9 d4 01 00 00	 jmp	 $LN187@stunNatTyp
$LN45@stunNatTyp:

; 1957 :       {
; 1958 :          //if (verbose) clog << "-----------------------------------------" << endl;
; 1959 :          // data is avialbe on some fd 
; 1960 : 			
; 1961 :          for ( int i=0; i<2; i++)

  0056c	89 9d 58 f1 ff
	ff		 mov	 DWORD PTR _i$88461[ebp], ebx
$LL36@stunNatTyp:

; 1962 :          {
; 1963 :             Socket myFd;
; 1964 :             if ( i==0 ) 
; 1965 :             {
; 1966 :                myFd=myFd1;

  00572	8b bd 44 f1 ff
	ff		 mov	 edi, DWORD PTR _myFd1$[ebp]
  00578	39 9d 58 f1 ff
	ff		 cmp	 DWORD PTR _i$88461[ebp], ebx
  0057e	74 06		 je	 SHORT $LN32@stunNatTyp

; 1967 :             }
; 1968 :             else
; 1969 :             {
; 1970 :                myFd=myFd2;

  00580	8b bd 54 f1 ff
	ff		 mov	 edi, DWORD PTR _myFd2$[ebp]
$LN32@stunNatTyp:

; 1971 :             }
; 1972 : 				
; 1973 :             if ( myFd!=INVALID_SOCKET ) 

  00586	83 ff ff	 cmp	 edi, -1
  00589	0f 84 9e 01 00
	00		 je	 $LN35@stunNatTyp

; 1974 :             {					
; 1975 :                if ( FD_ISSET(myFd,&fdSet) )

  0058f	8d 85 f8 f6 ff
	ff		 lea	 eax, DWORD PTR _fdSet$88406[ebp]
  00595	50		 push	 eax
  00596	57		 push	 edi
  00597	e8 00 00 00 00	 call	 ___WSAFDIsSet@8
  0059c	85 c0		 test	 eax, eax
  0059e	0f 84 89 01 00
	00		 je	 $LN35@stunNatTyp

; 1976 :                {
; 1977 :                   char msg[STUN_MAX_MESSAGE_SIZE];
; 1978 :                   int msgLen = sizeof(msg);
; 1979 :                   						
; 1980 :                   StunAddress4 from;
; 1981 : 						
; 1982 :                   getMessage( myFd,
; 1983 :                               msg,
; 1984 :                               &msgLen,
; 1985 :                               &from.addr,
; 1986 :                               &from.port,verbose );

  005a4	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  005a7	8d 85 04 f1 ff
	ff		 lea	 eax, DWORD PTR _from$88475[ebp]
  005ad	50		 push	 eax
  005ae	8d 85 06 f1 ff
	ff		 lea	 eax, DWORD PTR _from$88475[ebp+2]
  005b4	50		 push	 eax
  005b5	8d 85 20 f1 ff
	ff		 lea	 eax, DWORD PTR _msgLen$88474[ebp]
  005bb	50		 push	 eax
  005bc	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _msg$88473[ebp]
  005c2	50		 push	 eax
  005c3	57		 push	 edi
  005c4	c7 85 20 f1 ff
	ff 00 08 00 00	 mov	 DWORD PTR _msgLen$88474[ebp], 2048 ; 00000800H
  005ce	e8 00 00 00 00	 call	 ?getMessage@@YA_NIPADPAHPAIPAG_N@Z ; getMessage

; 1987 : 						
; 1988 :                   StunMessage resp;
; 1989 :                   memset(&resp, 0, sizeof(StunMessage));

  005d3	68 91 04 00 00	 push	 1169			; 00000491H
  005d8	8d 85 60 f1 ff
	ff		 lea	 eax, DWORD PTR _resp$88476[ebp]
  005de	53		 push	 ebx
  005df	50		 push	 eax
  005e0	e8 00 00 00 00	 call	 _memset

; 1990 : 						
; 1991 :                   stunParseMessage( msg,msgLen, resp,verbose );

  005e5	ff 75 0c	 push	 DWORD PTR _verbose$[ebp]
  005e8	8d 85 60 f1 ff
	ff		 lea	 eax, DWORD PTR _resp$88476[ebp]
  005ee	50		 push	 eax
  005ef	ff b5 20 f1 ff
	ff		 push	 DWORD PTR _msgLen$88474[ebp]
  005f5	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _msg$88473[ebp]
  005fb	50		 push	 eax
  005fc	e8 00 00 00 00	 call	 ?stunParseMessage@@YA_NPADIAAUStunMessage@@_N@Z ; stunParseMessage
  00601	83 c4 34	 add	 esp, 52			; 00000034H

; 1992 : 						
; 1993 :                   if ( verbose )

  00604	38 5d 0c	 cmp	 BYTE PTR _verbose$[ebp], bl
  00607	74 3d		 je	 SHORT $LN148@stunNatTyp

; 1994 :                   {
; 1995 :                      clog << "Received message of type " << resp.msgHdr.msgType 
; 1996 :                           << "  id=" << (int)(resp.msgHdr.id.octet[0]) << endl;

  00609	0f b6 85 64 f1
	ff ff		 movzx	 eax, BYTE PTR _resp$88476[ebp+4]
  00610	50		 push	 eax
  00611	68 00 00 00 00	 push	 OFFSET ??_C@_05OLEIOHKF@?5?5id?$DN?$AA@
  00616	ff b5 60 f1 ff
	ff		 push	 DWORD PTR _resp$88476[ebp]
  0061c	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EHLOOKHD@Received?5message?5of?5type?5?$AA@
  00621	56		 push	 esi
  00622	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00627	59		 pop	 ecx
  00628	59		 pop	 ecx
  00629	8b c8		 mov	 ecx, eax
  0062b	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00630	50		 push	 eax
  00631	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00636	59		 pop	 ecx
  00637	59		 pop	 ecx
  00638	8b c8		 mov	 ecx, eax
  0063a	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0063f	50		 push	 eax
  00640	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00645	59		 pop	 ecx
$LN148@stunNatTyp:

; 1997 :                   }
; 1998 : 						
; 1999 :                   switch( resp.msgHdr.id.octet[0] )

  00646	0f b6 85 64 f1
	ff ff		 movzx	 eax, BYTE PTR _resp$88476[ebp+4]
  0064d	48		 dec	 eax
  0064e	74 79		 je	 SHORT $LN26@stunNatTyp
  00650	48		 dec	 eax
  00651	74 6d		 je	 SHORT $LN22@stunNatTyp
  00653	48		 dec	 eax
  00654	74 61		 je	 SHORT $LN21@stunNatTyp
  00656	83 e8 07	 sub	 eax, 7
  00659	74 20		 je	 SHORT $LN20@stunNatTyp
  0065b	48		 dec	 eax
  0065c	0f 85 cb 00 00
	00		 jne	 $LN35@stunNatTyp

; 2058 :                      case 11:
; 2059 :                      {
; 2060 : 							
; 2061 :                         if ( hairpin ) 

  00662	8b 85 0c f1 ff
	ff		 mov	 eax, DWORD PTR _hairpin$GSCopy$[ebp]
  00668	3b c3		 cmp	 eax, ebx
  0066a	74 03		 je	 SHORT $LN16@stunNatTyp

; 2062 :                         {
; 2063 :                            *hairpin = true;

  0066c	c6 00 01	 mov	 BYTE PTR [eax], 1
$LN16@stunNatTyp:

; 2064 :                         }
; 2065 :                         respTestHairpin = true;

  0066f	c6 85 5f f1 ff
	ff 01		 mov	 BYTE PTR _respTestHairpin$[ebp], 1

; 2066 :                      }
; 2067 :                      break;

  00676	e9 b2 00 00 00	 jmp	 $LN35@stunNatTyp
$LN20@stunNatTyp:

; 2039 :                      case 10:
; 2040 :                      {
; 2041 :                         if ( !respTestI2 )

  0067b	38 9d 38 f1 ff
	ff		 cmp	 BYTE PTR _respTestI2$[ebp], bl
  00681	75 2b		 jne	 SHORT $LN18@stunNatTyp

; 2042 :                         {
; 2043 :                            testI2mappedAddr.addr = resp.mappedAddress.ipv4.addr;
; 2044 :                            testI2mappedAddr.port = resp.mappedAddress.ipv4.port;
; 2045 : 								
; 2046 :                            mappedIpSame = false;
; 2047 :                            if ( (testI2mappedAddr.addr  == testImappedAddr.addr ) &&
; 2048 :                                 (testI2mappedAddr.port == testImappedAddr.port ))

  00683	8b 85 4a f1 ff
	ff		 mov	 eax, DWORD PTR _testImappedAddr$[ebp+2]
  00689	88 9d 2c f1 ff
	ff		 mov	 BYTE PTR _mappedIpSame$[ebp], bl
  0068f	39 85 79 f1 ff
	ff		 cmp	 DWORD PTR _resp$88476[ebp+25], eax
  00695	75 17		 jne	 SHORT $LN18@stunNatTyp
  00697	66 8b 85 77 f1
	ff ff		 mov	 ax, WORD PTR _resp$88476[ebp+23]
  0069e	66 3b 85 48 f1
	ff ff		 cmp	 ax, WORD PTR _testImappedAddr$[ebp]
  006a5	75 07		 jne	 SHORT $LN18@stunNatTyp

; 2049 :                            { 
; 2050 :                               mappedIpSame = true;

  006a7	c6 85 2c f1 ff
	ff 01		 mov	 BYTE PTR _mappedIpSame$[ebp], 1
$LN18@stunNatTyp:

; 2051 :                            }
; 2052 : 								
; 2053 : 							
; 2054 :                         }
; 2055 :                         respTestI2=true;

  006ae	c6 85 38 f1 ff
	ff 01		 mov	 BYTE PTR _respTestI2$[ebp], 1

; 2056 :                      }
; 2057 :                      break;

  006b5	eb 76		 jmp	 SHORT $LN35@stunNatTyp
$LN21@stunNatTyp:

; 2034 :                      case 3:
; 2035 :                      {
; 2036 :                         respTestIII=true;

  006b7	c6 85 34 f1 ff
	ff 01		 mov	 BYTE PTR _respTestIII$[ebp], 1

; 2037 :                      }
; 2038 :                      break;

  006be	eb 6d		 jmp	 SHORT $LN35@stunNatTyp
$LN22@stunNatTyp:

; 2027 :                      }
; 2028 :                      break;
; 2029 :                      case 2:
; 2030 :                      {  
; 2031 :                         respTestII=true;

  006c0	c6 85 40 f1 ff
	ff 01		 mov	 BYTE PTR _respTestII$[ebp], 1

; 2032 :                      }
; 2033 :                      break;

  006c7	eb 64		 jmp	 SHORT $LN35@stunNatTyp
$LN26@stunNatTyp:

; 2000 :                   {
; 2001 :                      case 1:
; 2002 :                      {
; 2003 :                         if ( !respTestI )

  006c9	38 9d 50 f1 ff
	ff		 cmp	 BYTE PTR _respTestI$[ebp], bl
  006cf	75 55		 jne	 SHORT $LN185@stunNatTyp

; 2004 :                         {
; 2005 : 									
; 2006 :                            testIchangedAddr.addr = resp.changedAddress.ipv4.addr;
; 2007 :                            testIchangedAddr.port = resp.changedAddress.ipv4.port;
; 2008 :                            testImappedAddr.addr = resp.mappedAddress.ipv4.addr;

  006d1	8b 8d 79 f1 ff
	ff		 mov	 ecx, DWORD PTR _resp$88476[ebp+25]

; 2009 :                            testImappedAddr.port = resp.mappedAddress.ipv4.port;

  006d7	66 8b 85 77 f1
	ff ff		 mov	 ax, WORD PTR _resp$88476[ebp+23]
  006de	89 8d 4a f1 ff
	ff		 mov	 DWORD PTR _testImappedAddr$[ebp+2], ecx
  006e4	66 89 85 48 f1
	ff ff		 mov	 WORD PTR _testImappedAddr$[ebp], ax

; 2010 : 									
; 2011 :                            if ( preservePort )

  006eb	39 9d 1c f1 ff
	ff		 cmp	 DWORD PTR _preservePort$GSCopy$[ebp], ebx
  006f1	74 11		 je	 SHORT $LN24@stunNatTyp

; 2012 :                            {
; 2013 :                               *preservePort = ( testImappedAddr.port == port );

  006f3	8b bd 1c f1 ff
	ff		 mov	 edi, DWORD PTR _preservePort$GSCopy$[ebp]
  006f9	0f b7 d0	 movzx	 edx, ax
  006fc	3b 55 18	 cmp	 edx, DWORD PTR _port$[ebp]
  006ff	0f 94 c2	 sete	 dl
  00702	88 17		 mov	 BYTE PTR [edi], dl
$LN24@stunNatTyp:

; 2014 :                            }								
; 2015 : 									
; 2016 :                            testI2dest.addr = resp.changedAddress.ipv4.addr;

  00704	8b 95 99 f1 ff
	ff		 mov	 edx, DWORD PTR _resp$88476[ebp+57]
  0070a	89 95 26 f1 ff
	ff		 mov	 DWORD PTR _testI2dest$[ebp+2], edx

; 2017 : 									
; 2018 :                            if (sAddr)

  00710	8b 95 18 f1 ff
	ff		 mov	 edx, DWORD PTR _sAddr$GSCopy$[ebp]
  00716	3b d3		 cmp	 edx, ebx
  00718	74 06		 je	 SHORT $LN23@stunNatTyp

; 2019 :                            {
; 2020 :                               sAddr->port = testImappedAddr.port;

  0071a	66 89 02	 mov	 WORD PTR [edx], ax

; 2021 :                               sAddr->addr = testImappedAddr.addr;

  0071d	89 4a 02	 mov	 DWORD PTR [edx+2], ecx
$LN23@stunNatTyp:

; 2022 :                            }
; 2023 : 									
; 2024 :                            count = 0;

  00720	89 9d 3c f1 ff
	ff		 mov	 DWORD PTR _count$[ebp], ebx
$LN185@stunNatTyp:

; 2025 :                         }		
; 2026 :                         respTestI=true;

  00726	c6 85 50 f1 ff
	ff 01		 mov	 BYTE PTR _respTestI$[ebp], 1
$LN35@stunNatTyp:

; 1957 :       {
; 1958 :          //if (verbose) clog << "-----------------------------------------" << endl;
; 1959 :          // data is avialbe on some fd 
; 1960 : 			
; 1961 :          for ( int i=0; i<2; i++)

  0072d	ff 85 58 f1 ff
	ff		 inc	 DWORD PTR _i$88461[ebp]
  00733	83 bd 58 f1 ff
	ff 02		 cmp	 DWORD PTR _i$88461[ebp], 2
  0073a	0f 8c 32 fe ff
	ff		 jl	 $LL36@stunNatTyp
$LN187@stunNatTyp:

; 1891 :    while ( count < 7 )

  00740	83 bd 3c f1 ff
	ff 07		 cmp	 DWORD PTR _count$[ebp], 7
  00747	0f 8c b1 f9 ff
	ff		 jl	 $LL68@stunNatTyp

; 2068 :                   }
; 2069 :                }
; 2070 :             }
; 2071 :          }
; 2072 :       }
; 2073 :    }
; 2074 : 	
; 2075 :    // see if we can bind to this address 
; 2076 :    //cerr << "try binding to " << testImappedAddr << endl;
; 2077 :    Socket s = openPort( 0/*use ephemeral*/, testImappedAddr.addr, false );

  0074d	6a 00		 push	 0
  0074f	ff b5 4a f1 ff
	ff		 push	 DWORD PTR _testImappedAddr$[ebp+2]
  00755	6a 00		 push	 0
  00757	e8 00 00 00 00	 call	 ?openPort@@YAIGI_N@Z	; openPort
  0075c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2078 :    if ( s != INVALID_SOCKET )

  0075f	83 f8 ff	 cmp	 eax, -1
  00762	74 7a		 je	 SHORT $LN15@stunNatTyp

; 2079 :    {
; 2080 :       closesocket(s);

  00764	50		 push	 eax
  00765	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 2081 :       isNat = false;

  0076b	c6 85 58 f1 ff
	ff 00		 mov	 BYTE PTR _isNat$[ebp], 0

; 2082 :       //cerr << "binding worked" << endl;
; 2083 :    }
; 2084 :    else

  00772	eb 71		 jmp	 SHORT $LN14@stunNatTyp
$LN172@stunNatTyp:

; 1910 :       {
; 1911 :          // error occured
; 1912 :          cerr << "Error " << e << " " << strerror(e) << " in select" << endl;

  00774	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGIANGLH@?5in?5select?$AA@
  00779	53		 push	 ebx
  0077a	e8 00 00 00 00	 call	 _strerror
  0077f	59		 pop	 ecx
  00780	50		 push	 eax
  00781	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  00786	53		 push	 ebx
  00787	68 00 00 00 00	 push	 OFFSET ??_C@_06BAOMBKPD@Error?5?$AA@
  0078c	68 00 00 00 00	 push	 OFFSET ?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cerr
  00791	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00796	59		 pop	 ecx
  00797	59		 pop	 ecx
  00798	8b c8		 mov	 ecx, eax
  0079a	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0079f	50		 push	 eax
  007a0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  007a5	59		 pop	 ecx
  007a6	59		 pop	 ecx
  007a7	50		 push	 eax
  007a8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  007ad	59		 pop	 ecx
  007ae	59		 pop	 ecx
  007af	50		 push	 eax
  007b0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  007b5	50		 push	 eax
  007b6	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  007bb	83 c4 0c	 add	 esp, 12			; 0000000cH
  007be	6a 08		 push	 8
$LN193@stunNatTyp:
  007c0	5e		 pop	 esi
$LN178@stunNatTyp:

; 1913 :  		 closesocket(myFd1);

  007c1	ff b5 44 f1 ff
	ff		 push	 DWORD PTR _myFd1$[ebp]
  007c7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__closesocket@4
  007cd	ff d7		 call	 edi

; 1914 : 	     closesocket(myFd2);

  007cf	ff b5 54 f1 ff
	ff		 push	 DWORD PTR _myFd2$[ebp]
  007d5	ff d7		 call	 edi

; 1915 :          return StunTypeFailure; 

  007d7	8b c6		 mov	 eax, esi
  007d9	e9 77 01 00 00	 jmp	 $LN76@stunNatTyp
$LN15@stunNatTyp:

; 2085 :    {
; 2086 :       isNat = true;

  007de	c6 85 58 f1 ff
	ff 01		 mov	 BYTE PTR _isNat$[ebp], 1
$LN14@stunNatTyp:

; 2087 :       //cerr << "binding failed" << endl;
; 2088 :    }
; 2089 : 	
; 2090 :    if (verbose)

  007e5	80 7d 0c 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  007e9	0f 84 c6 00 00
	00		 je	 $LN160@stunNatTyp

; 2091 :    {
; 2092 :       clog << "test I = " << respTestI << endl;

  007ef	ff b5 50 f1 ff
	ff		 push	 DWORD PTR _respTestI$[ebp]
  007f5	68 00 00 00 00	 push	 OFFSET ??_C@_09IEJBNGJK@test?5I?5?$DN?5?$AA@
  007fa	56		 push	 esi
  007fb	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00800	59		 pop	 ecx
  00801	59		 pop	 ecx
  00802	8b c8		 mov	 ecx, eax
  00804	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00809	50		 push	 eax
  0080a	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  0080f	59		 pop	 ecx

; 2093 :       clog << "test II = " << respTestII << endl;

  00810	ff b5 40 f1 ff
	ff		 push	 DWORD PTR _respTestII$[ebp]
  00816	68 00 00 00 00	 push	 OFFSET ??_C@_0L@KHHFGFHD@test?5II?5?$DN?5?$AA@
  0081b	56		 push	 esi
  0081c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00821	59		 pop	 ecx
  00822	59		 pop	 ecx
  00823	8b c8		 mov	 ecx, eax
  00825	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0082a	50		 push	 eax
  0082b	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00830	59		 pop	 ecx

; 2094 :       clog << "test III = " << respTestIII << endl;

  00831	ff b5 34 f1 ff
	ff		 push	 DWORD PTR _respTestIII$[ebp]
  00837	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HOIANLBM@test?5III?5?$DN?5?$AA@
  0083c	56		 push	 esi
  0083d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00842	59		 pop	 ecx
  00843	59		 pop	 ecx
  00844	8b c8		 mov	 ecx, eax
  00846	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0084b	50		 push	 eax
  0084c	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00851	59		 pop	 ecx

; 2095 :       clog << "test I(2) = " << respTestI2 << endl;

  00852	ff b5 38 f1 ff
	ff		 push	 DWORD PTR _respTestI2$[ebp]
  00858	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HGECJPHF@test?5I?$CI2?$CJ?5?$DN?5?$AA@
  0085d	56		 push	 esi
  0085e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00863	59		 pop	 ecx
  00864	59		 pop	 ecx
  00865	8b c8		 mov	 ecx, eax
  00867	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0086c	50		 push	 eax
  0086d	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00872	59		 pop	 ecx

; 2096 :       clog << "is nat  = " << isNat <<endl;

  00873	ff b5 58 f1 ff
	ff		 push	 DWORD PTR _isNat$[ebp]
  00879	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IALJDCMC@is?5nat?5?5?$DN?5?$AA@
  0087e	56		 push	 esi
  0087f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00884	59		 pop	 ecx
  00885	59		 pop	 ecx
  00886	8b c8		 mov	 ecx, eax
  00888	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0088d	50		 push	 eax
  0088e	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00893	59		 pop	 ecx

; 2097 :       clog << "mapped IP same = " << mappedIpSame << endl;

  00894	ff b5 2c f1 ff
	ff		 push	 DWORD PTR _mappedIpSame$[ebp]
  0089a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BKLLKDMA@mapped?5IP?5same?5?$DN?5?$AA@
  0089f	56		 push	 esi
  008a0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  008a5	59		 pop	 ecx
  008a6	59		 pop	 ecx
  008a7	8b c8		 mov	 ecx, eax
  008a9	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  008ae	50		 push	 eax
  008af	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  008b4	59		 pop	 ecx
$LN160@stunNatTyp:

; 2098 :    }
; 2099 : 	
; 2100 :    // implement logic flow chart from draft RFC
; 2101 :    if ( respTestI )

  008b5	80 bd 50 f1 ff
	ff 00		 cmp	 BYTE PTR _respTestI$[ebp], 0
  008bc	74 58		 je	 SHORT $LN12@stunNatTyp

; 2102 :    {
; 2103 :       if ( isNat )

  008be	80 bd 58 f1 ff
	ff 00		 cmp	 BYTE PTR _isNat$[ebp], 0
  008c5	74 37		 je	 SHORT $LN11@stunNatTyp

; 2104 :       {
; 2105 :          if (respTestII)

  008c7	80 bd 40 f1 ff
	ff 00		 cmp	 BYTE PTR _respTestII$[ebp], 0
  008ce	74 07		 je	 SHORT $LN10@stunNatTyp
  008d0	6a 02		 push	 2
  008d2	e9 e9 fe ff ff	 jmp	 $LN193@stunNatTyp
$LN10@stunNatTyp:

; 2106 :          {
; 2107 :  			closesocket(myFd1);
; 2108 : 			closesocket(myFd2);
; 2109 :            return StunTypeConeNat;
; 2110 :          }
; 2111 :          else
; 2112 :          {
; 2113 :             if ( mappedIpSame )

  008d7	80 bd 2c f1 ff
	ff 00		 cmp	 BYTE PTR _mappedIpSame$[ebp], 0
  008de	74 17		 je	 SHORT $LN8@stunNatTyp

; 2114 :             {
; 2115 :                if ( respTestIII )

  008e0	80 bd 34 f1 ff
	ff 00		 cmp	 BYTE PTR _respTestIII$[ebp], 0
  008e7	74 07		 je	 SHORT $LN7@stunNatTyp
  008e9	6a 03		 push	 3
  008eb	e9 d0 fe ff ff	 jmp	 $LN193@stunNatTyp
$LN7@stunNatTyp:
  008f0	6a 04		 push	 4
  008f2	e9 c9 fe ff ff	 jmp	 $LN193@stunNatTyp
$LN8@stunNatTyp:
  008f7	6a 05		 push	 5
  008f9	e9 c2 fe ff ff	 jmp	 $LN193@stunNatTyp
$LN11@stunNatTyp:

; 2116 :                {
; 2117 :        				closesocket(myFd1);
; 2118 : 					closesocket(myFd2);
; 2119 : 			      return StunTypeRestrictedNat;
; 2120 :                }
; 2121 :                else
; 2122 :                {
; 2123 :    					closesocket(myFd1);
; 2124 : 					closesocket(myFd2);
; 2125 :                   return StunTypePortRestrictedNat;
; 2126 :                }
; 2127 :             }
; 2128 :             else
; 2129 :             {
; 2130 :    				closesocket(myFd1);
; 2131 : 				closesocket(myFd2);
; 2132 :                return StunTypeSymNat;
; 2133 :             }
; 2134 :          }
; 2135 :       }
; 2136 :       else
; 2137 :       {
; 2138 :          if (respTestII)

  008fe	80 bd 40 f1 ff
	ff 00		 cmp	 BYTE PTR _respTestII$[ebp], 0
  00905	74 08		 je	 SHORT $LN3@stunNatTyp
  00907	33 f6		 xor	 esi, esi
  00909	46		 inc	 esi
  0090a	e9 b2 fe ff ff	 jmp	 $LN178@stunNatTyp
$LN3@stunNatTyp:
  0090f	6a 06		 push	 6
  00911	e9 aa fe ff ff	 jmp	 $LN193@stunNatTyp
$LN12@stunNatTyp:
  00916	6a 07		 push	 7
  00918	e9 a3 fe ff ff	 jmp	 $LN193@stunNatTyp
$LN71@stunNatTyp:

; 1854 :    {
; 1855 :         cerr << "Some problem opening port/interface to send on" << endl;

  0091d	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@HDIKEJCE@Some?5problem?5opening?5port?1interf@
  00922	68 00 00 00 00	 push	 OFFSET ?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cerr
  00927	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0092c	50		 push	 eax
  0092d	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl

; 1856 : 		if(myFd1 != INVALID_SOCKET)

  00932	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__closesocket@4
  00938	83 c4 0c	 add	 esp, 12			; 0000000cH
  0093b	3b fb		 cmp	 edi, ebx
  0093d	74 03		 je	 SHORT $LN70@stunNatTyp

; 1857 : 			closesocket(myFd1);

  0093f	57		 push	 edi
  00940	ff d6		 call	 esi
$LN70@stunNatTyp:

; 1858 : 		if(myFd2 != INVALID_SOCKET)

  00942	39 9d 54 f1 ff
	ff		 cmp	 DWORD PTR _myFd2$[ebp], ebx
  00948	74 08		 je	 SHORT $LN69@stunNatTyp

; 1859 : 			closesocket(myFd2);

  0094a	ff b5 54 f1 ff
	ff		 push	 DWORD PTR _myFd2$[ebp]
  00950	ff d6		 call	 esi
$LN69@stunNatTyp:

; 1860 :        return StunTypeFailure; 

  00952	6a 08		 push	 8
  00954	58		 pop	 eax
$LN76@stunNatTyp:

; 2139 :          {
; 2140 : 			closesocket(myFd1);
; 2141 : 			closesocket(myFd2);
; 2142 :             return StunTypeOpen;
; 2143 :          }
; 2144 :          else
; 2145 :          {
; 2146 : 			closesocket(myFd1);
; 2147 : 			closesocket(myFd2);
; 2148 :            return StunTypeSymFirewall;
; 2149 :          }
; 2150 :       }
; 2151 :    }
; 2152 :    else
; 2153 :    {
; 2154 : 		closesocket(myFd1);
; 2155 : 		closesocket(myFd2);
; 2156 :       return StunTypeBlocked;
; 2157 :    }
; 2158 : 	
; 2159 : 	closesocket(myFd1);
; 2160 : 	closesocket(myFd2);
; 2161 :    return StunTypeUnknown;
; 2162 : }

  00955	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00958	5f		 pop	 edi
  00959	5e		 pop	 esi
  0095a	33 cd		 xor	 ecx, ebp
  0095c	5b		 pop	 ebx
  0095d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00962	c9		 leave
  00963	c3		 ret	 0
?stunNatType@@YA?AW4NatType@@AAUStunAddress4@@_NPA_N2HPAU2@@Z ENDP ; stunNatType
_TEXT	ENDS
PUBLIC	_mapAddr$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?stunOpenSocket@@YAHAAUStunAddress4@@PAU1@H1_N@Z ; stunOpenSocket
; Function compile flags: /Ogsp
;	COMDAT ?stunOpenSocket@@YAHAAUStunAddress4@@PAU1@H1_N@Z
_TEXT	SEGMENT
_username$ = -6984					; size = 258
_from$ = -6724						; size = 6
_mapAddr$GSCopy$ = -6716				; size = 4
_msgLen$ = -6712					; size = 4
_myFd$ = -6708						; size = 4
_resp$ = -6704						; size = 1169
_req$98759 = -5532					; size = 1169
_password$ = -4360					; size = 258
_msg$ = -4100						; size = 2048
_buf$98760 = -2052					; size = 2048
__$ArrayPad$ = -4					; size = 4
_dest$ = 8						; size = 4
_mapAddr$ = 12						; size = 4
_port$ = 16						; size = 4
_srcAddr$ = 20						; size = 4
_verbose$ = 24						; size = 1
?stunOpenSocket@@YAHAAUStunAddress4@@PAU1@H1_N@Z PROC	; stunOpenSocket, COMDAT

; 2169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 48 1b 00 00	 mov	 eax, 6984		; 00001b48H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2170 :    
; 2171 :    if ( port == 0 )

  00017	83 7d 10 00	 cmp	 DWORD PTR _port$[ebp], 0
  0001b	8b 45 0c	 mov	 eax, DWORD PTR _mapAddr$[ebp]
  0001e	56		 push	 esi
  0001f	8b 75 14	 mov	 esi, DWORD PTR _srcAddr$[ebp]
  00022	57		 push	 edi
  00023	8b 7d 08	 mov	 edi, DWORD PTR _dest$[ebp]

; 2201 : 	
; 2202 :    StunAddress4 from;
; 2203 : 	
; 2204 :    getMessage( myFd, msg, &msgLen, &from.addr, &from.port,verbose );

  00026	89 85 c4 e5 ff
	ff		 mov	 DWORD PTR _mapAddr$GSCopy$[ebp], eax
  0002c	75 08		 jne	 SHORT $LN4@stunOpenSo

; 2172 :    {
; 2173 :       port = randomPort();

  0002e	e8 00 00 00 00	 call	 ?randomPort@@YAHXZ	; randomPort
  00033	89 45 10	 mov	 DWORD PTR _port$[ebp], eax
$LN4@stunOpenSo:

; 2174 :    }
; 2175 :    unsigned int interfaceIp = 0;

  00036	33 c0		 xor	 eax, eax

; 2176 :    if ( srcAddr )

  00038	85 f6		 test	 esi, esi
  0003a	74 03		 je	 SHORT $LN3@stunOpenSo

; 2177 :    {
; 2178 :       interfaceIp = srcAddr->addr;

  0003c	8b 46 02	 mov	 eax, DWORD PTR [esi+2]
$LN3@stunOpenSo:

; 2179 :    }
; 2180 :    
; 2181 :    Socket myFd = openPort(port,interfaceIp,verbose);

  0003f	ff 75 18	 push	 DWORD PTR _verbose$[ebp]
  00042	50		 push	 eax
  00043	ff 75 10	 push	 DWORD PTR _port$[ebp]
  00046	e8 00 00 00 00	 call	 ?openPort@@YAIGI_N@Z	; openPort
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	89 85 cc e5 ff
	ff		 mov	 DWORD PTR _myFd$[ebp], eax

; 2182 :    if (myFd == INVALID_SOCKET)

  00054	83 f8 ff	 cmp	 eax, -1
  00057	75 08		 jne	 SHORT $LN2@stunOpenSo
$LN23@stunOpenSo:

; 2183 :    {
; 2184 :       return myFd;

  00059	83 c8 ff	 or	 eax, -1
  0005c	e9 18 01 00 00	 jmp	 $LN5@stunOpenSo
$LN2@stunOpenSo:
  00061	53		 push	 ebx

; 2185 :    }
; 2186 :    
; 2187 :    char msg[STUN_MAX_MESSAGE_SIZE];
; 2188 :    int msgLen = sizeof(msg);
; 2189 : 	
; 2190 :    StunAtrString username;
; 2191 :    StunAtrString password;
; 2192 : 	
; 2193 :    username.sizeValue = 0;

  00062	33 c0		 xor	 eax, eax

; 2194 :    password.sizeValue = 0;
; 2195 : 	
; 2196 : #ifdef USE_TLS
; 2197 :    stunGetUserNameAndPassword( dest, username, password );
; 2198 : #endif
; 2199 : 	
; 2200 :    stunSendTest(myFd, dest, username, password, 1, 0/*false*/ );

  00064	bb 91 04 00 00	 mov	 ebx, 1169		; 00000491H
  00069	53		 push	 ebx
  0006a	50		 push	 eax
  0006b	66 89 85 b8 e5
	ff ff		 mov	 WORD PTR _username$[ebp+256], ax
  00072	66 89 85 f8 ef
	ff ff		 mov	 WORD PTR _password$[ebp+256], ax
  00079	8d 85 64 ea ff
	ff		 lea	 eax, DWORD PTR _req$98759[ebp]
  0007f	be 00 08 00 00	 mov	 esi, 2048		; 00000800H
  00084	50		 push	 eax
  00085	89 b5 c8 e5 ff
	ff		 mov	 DWORD PTR _msgLen$[ebp], esi
  0008b	e8 00 00 00 00	 call	 _memset
  00090	6a 01		 push	 1
  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	8d 85 b8 e4 ff
	ff		 lea	 eax, DWORD PTR _username$[ebp]
  0009c	50		 push	 eax
  0009d	8d 85 64 ea ff
	ff		 lea	 eax, DWORD PTR _req$98759[ebp]
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?stunBuildReqSimple@@YAXPAUStunMessage@@ABUStunAtrString@@_N2I@Z ; stunBuildReqSimple
  000a9	6a 00		 push	 0
  000ab	8d 85 f8 ee ff
	ff		 lea	 eax, DWORD PTR _password$[ebp]
  000b1	50		 push	 eax
  000b2	56		 push	 esi
  000b3	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$98760[ebp]
  000b9	50		 push	 eax
  000ba	8d 85 64 ea ff
	ff		 lea	 eax, DWORD PTR _req$98759[ebp]
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 ?stunEncodeMessage@@YAIABUStunMessage@@PADIABUStunAtrString@@_N@Z ; stunEncodeMessage
  000c6	0f b7 0f	 movzx	 ecx, WORD PTR [edi]
  000c9	6a 00		 push	 0
  000cb	51		 push	 ecx
  000cc	ff 77 02	 push	 DWORD PTR [edi+2]
  000cf	50		 push	 eax
  000d0	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$98760[ebp]
  000d6	50		 push	 eax
  000d7	ff b5 cc e5 ff
	ff		 push	 DWORD PTR _myFd$[ebp]
  000dd	e8 00 00 00 00	 call	 ?sendMessage@@YA_NIPADHIG_N@Z ; sendMessage
  000e2	83 c4 4c	 add	 esp, 76			; 0000004cH
  000e5	e8 00 00 00 00	 call	 _clock
  000ea	8d 70 0a	 lea	 esi, DWORD PTR [eax+10]
$LL8@stunOpenSo:
  000ed	e8 00 00 00 00	 call	 _clock
  000f2	3b c6		 cmp	 eax, esi
  000f4	7e f7		 jle	 SHORT $LL8@stunOpenSo

; 2201 : 	
; 2202 :    StunAddress4 from;
; 2203 : 	
; 2204 :    getMessage( myFd, msg, &msgLen, &from.addr, &from.port,verbose );

  000f6	ff 75 18	 push	 DWORD PTR _verbose$[ebp]
  000f9	8d 85 bc e5 ff
	ff		 lea	 eax, DWORD PTR _from$[ebp]
  000ff	50		 push	 eax
  00100	8d 85 be e5 ff
	ff		 lea	 eax, DWORD PTR _from$[ebp+2]
  00106	50		 push	 eax
  00107	8d 85 c8 e5 ff
	ff		 lea	 eax, DWORD PTR _msgLen$[ebp]
  0010d	50		 push	 eax
  0010e	8d 85 fc ef ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00114	50		 push	 eax
  00115	ff b5 cc e5 ff
	ff		 push	 DWORD PTR _myFd$[ebp]
  0011b	e8 00 00 00 00	 call	 ?getMessage@@YA_NIPADPAHPAIPAG_N@Z ; getMessage

; 2205 : 	
; 2206 :    StunMessage resp;
; 2207 :    memset(&resp, 0, sizeof(StunMessage));

  00120	53		 push	 ebx
  00121	8d 85 d0 e5 ff
	ff		 lea	 eax, DWORD PTR _resp$[ebp]
  00127	6a 00		 push	 0
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 _memset

; 2208 : 	
; 2209 :    bool ok = stunParseMessage( msg, msgLen, resp,verbose );

  0012f	ff 75 18	 push	 DWORD PTR _verbose$[ebp]
  00132	8d 85 d0 e5 ff
	ff		 lea	 eax, DWORD PTR _resp$[ebp]
  00138	50		 push	 eax
  00139	ff b5 c8 e5 ff
	ff		 push	 DWORD PTR _msgLen$[ebp]
  0013f	8d 85 fc ef ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 ?stunParseMessage@@YA_NPADIAAUStunMessage@@_N@Z ; stunParseMessage
  0014b	83 c4 34	 add	 esp, 52			; 00000034H
  0014e	5b		 pop	 ebx

; 2210 :    if (!ok)

  0014f	84 c0		 test	 al, al
  00151	75 11		 jne	 SHORT $LN1@stunOpenSo

; 2211 :    {
; 2212 :  	 closesocket(myFd);

  00153	ff b5 cc e5 ff
	ff		 push	 DWORD PTR _myFd$[ebp]
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 2213 :      return -1;

  0015f	e9 f5 fe ff ff	 jmp	 $LN23@stunOpenSo
$LN1@stunOpenSo:

; 2214 :    }
; 2215 : 	
; 2216 :    StunAddress4 mappedAddr = resp.mappedAddress.ipv4;
; 2217 : 
; 2218 :    *mapAddr = mappedAddr;

  00164	8b bd c4 e5 ff
	ff		 mov	 edi, DWORD PTR _mapAddr$GSCopy$[ebp]

; 2219 : 	
; 2220 :    return myFd;

  0016a	8b 85 cc e5 ff
	ff		 mov	 eax, DWORD PTR _myFd$[ebp]
  00170	8d b5 e7 e5 ff
	ff		 lea	 esi, DWORD PTR _resp$[ebp+23]
  00176	a5		 movsd
  00177	66 a5		 movsw
$LN5@stunOpenSo:

; 2221 : }

  00179	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017c	5f		 pop	 edi
  0017d	33 cd		 xor	 ecx, ebp
  0017f	5e		 pop	 esi
  00180	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00185	c9		 leave
  00186	c3		 ret	 0
?stunOpenSocket@@YAHAAUStunAddress4@@PAU1@H1_N@Z ENDP	; stunOpenSocket
_TEXT	ENDS
PUBLIC	??_C@_0BM@ODCOCING@?9?9?9?5stunOpenSocketPair?5?9?9?9?5?$AA@ ; `string'
PUBLIC	_fd2$GSCopy$
PUBLIC	_fd1$GSCopy$
PUBLIC	_mapAddr$GSCopy$
PUBLIC	_dest$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?stunOpenSocketPair@@YA_NAAUStunAddress4@@PAU1@PAH2H1_N@Z ; stunOpenSocketPair
;	COMDAT ??_C@_0BM@ODCOCING@?9?9?9?5stunOpenSocketPair?5?9?9?9?5?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
CONST	SEGMENT
??_C@_0BM@ODCOCING@?9?9?9?5stunOpenSocketPair?5?9?9?9?5?$AA@ DB '--- stun'
	DB	'OpenSocketPair --- ', 00H			; `string'
; Function compile flags: /Ogsp
; File f:\projects\git\yfnet\trunk\src\qvodbase\stun.cpp
CONST	ENDS
;	COMDAT ?stunOpenSocketPair@@YA_NAAUStunAddress4@@PAU1@PAH2H1_N@Z
_TEXT	SEGMENT
_username$ = -5860					; size = 258
_from$ = -5600						; size = 6
_len$98798 = -5592					; size = 4
_mapAddr$GSCopy$ = -5588				; size = 4
_fd1$GSCopy$ = -5584					; size = 4
_fd2$GSCopy$ = -5580					; size = 4
_msgLen$ = -5576					; size = 4
tv490 = -5572						; size = 4
_dest$GSCopy$ = -5572					; size = 4
_i$ = -5568						; size = 4
_req$98796 = -5564					; size = 1169
_resp$88605 = -5564					; size = 1169
_password$ = -4392					; size = 258
_mappedAddr$ = -4132					; size = 18
_fd$ = -4112						; size = 12
_buf$98797 = -4100					; size = 2048
_msg$ = -2052						; size = 2048
__$ArrayPad$ = -4					; size = 4
_dest$ = 8						; size = 4
_mapAddr$ = 12						; size = 4
_fd1$ = 16						; size = 4
_fd2$ = 20						; size = 4
_port$ = 24						; size = 4
_srcAddr$ = 28						; size = 4
_verbose$ = 32						; size = 1
?stunOpenSocketPair@@YA_NAAUStunAddress4@@PAU1@PAH2H1_N@Z PROC ; stunOpenSocketPair, COMDAT

; 2229 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 e4 16 00 00	 mov	 eax, 5860		; 000016e4H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2230 :    
; 2231 :    const int NUM=3;
; 2232 : 	
; 2233 :    if ( port == 0 )

  00017	83 7d 18 00	 cmp	 DWORD PTR _port$[ebp], 0
  0001b	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  0001e	53		 push	 ebx
  0001f	8b 5d 10	 mov	 ebx, DWORD PTR _fd1$[ebp]
  00022	56		 push	 esi
  00023	8b 75 1c	 mov	 esi, DWORD PTR _srcAddr$[ebp]
  00026	57		 push	 edi
  00027	8b 7d 14	 mov	 edi, DWORD PTR _fd2$[ebp]

; 2236 :    }
; 2237 : 	
; 2238 :    *fd1=-1;

  0002a	89 85 3c ea ff
	ff		 mov	 DWORD PTR _dest$GSCopy$[ebp], eax
  00030	8b 45 0c	 mov	 eax, DWORD PTR _mapAddr$[ebp]

; 2304 :       }
; 2305 : 		
; 2306 :       mappedAddr[i] = resp.mappedAddress.ipv4;

  00033	89 85 2c ea ff
	ff		 mov	 DWORD PTR _mapAddr$GSCopy$[ebp], eax
  00039	89 9d 30 ea ff
	ff		 mov	 DWORD PTR _fd1$GSCopy$[ebp], ebx
  0003f	89 bd 34 ea ff
	ff		 mov	 DWORD PTR _fd2$GSCopy$[ebp], edi
  00045	75 08		 jne	 SHORT $LN29@stunOpenSo@2

; 2234 :    {
; 2235 :       port = randomPort();

  00047	e8 00 00 00 00	 call	 ?randomPort@@YAHXZ	; randomPort
  0004c	89 45 18	 mov	 DWORD PTR _port$[ebp], eax
$LN29@stunOpenSo@2:

; 2236 :    }
; 2237 : 	
; 2238 :    *fd1=-1;

  0004f	83 0b ff	 or	 DWORD PTR [ebx], -1

; 2239 :    *fd2=-1;

  00052	83 0f ff	 or	 DWORD PTR [edi], -1

; 2240 : 	
; 2241 :    char msg[STUN_MAX_MESSAGE_SIZE];
; 2242 :    int msgLen =sizeof(msg);
; 2243 : 	
; 2244 :    StunAddress4 from;
; 2245 :    int fd[NUM];
; 2246 :    int i;
; 2247 : 	
; 2248 :    unsigned int interfaceIp = 0;

  00055	33 ff		 xor	 edi, edi
  00057	c7 85 38 ea ff
	ff 00 08 00 00	 mov	 DWORD PTR _msgLen$[ebp], 2048 ; 00000800H

; 2249 :    if ( srcAddr )

  00061	85 f6		 test	 esi, esi
  00063	74 03		 je	 SHORT $LN28@stunOpenSo@2

; 2250 :    {
; 2251 :       interfaceIp = srcAddr->addr;

  00065	8b 7e 02	 mov	 edi, DWORD PTR [esi+2]
$LN28@stunOpenSo@2:

; 2252 :    }
; 2253 : 
; 2254 :    for( i=0; i<NUM; i++)

  00068	33 f6		 xor	 esi, esi
$LL69@stunOpenSo@2:

; 2255 :    {
; 2256 :       fd[i] = openPort( (port == 0) ? 0 : (port + i), 
; 2257 :                         interfaceIp, verbose);

  0006a	8b 45 18	 mov	 eax, DWORD PTR _port$[ebp]
  0006d	ff 75 20	 push	 DWORD PTR _verbose$[ebp]
  00070	8b c8		 mov	 ecx, eax
  00072	03 c6		 add	 eax, esi
  00074	f7 d9		 neg	 ecx
  00076	1b c9		 sbb	 ecx, ecx
  00078	23 c8		 and	 ecx, eax
  0007a	57		 push	 edi
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 ?openPort@@YAIGI_N@Z	; openPort
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH
  00084	89 84 b5 f0 ef
	ff ff		 mov	 DWORD PTR _fd$[ebp+esi*4], eax

; 2258 :       if (fd[i] < 0) 

  0008b	85 c0		 test	 eax, eax
  0008d	0f 88 73 02 00
	00		 js	 $LN74@stunOpenSo@2

; 2252 :    }
; 2253 : 
; 2254 :    for( i=0; i<NUM; i++)

  00093	46		 inc	 esi
  00094	83 fe 03	 cmp	 esi, 3
  00097	7c d1		 jl	 SHORT $LL69@stunOpenSo@2

; 2265 :       }
; 2266 :    }
; 2267 : 	
; 2268 :    StunAtrString username;
; 2269 :    StunAtrString password;
; 2270 : 	
; 2271 :    username.sizeValue = 0;

  00099	33 c0		 xor	 eax, eax

; 2272 :    password.sizeValue = 0;
; 2273 : 	
; 2274 : #ifdef USE_TLS
; 2275 :    stunGetUserNameAndPassword( dest, username, password );
; 2276 : #endif
; 2277 : 	
; 2278 :    for( i=0; i<NUM; i++)

  0009b	21 85 40 ea ff
	ff		 and	 DWORD PTR _i$[ebp], eax
  000a1	66 89 85 1c ea
	ff ff		 mov	 WORD PTR _username$[ebp+256], ax
  000a8	66 89 85 d8 ef
	ff ff		 mov	 WORD PTR _password$[ebp+256], ax
  000af	bb 91 04 00 00	 mov	 ebx, 1169		; 00000491H
$LL71@stunOpenSo@2:

; 2279 :    {
; 2280 :       stunSendTest(fd[i], dest, username, password, 1/*testNum*/, verbose );

  000b4	8b 85 40 ea ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  000ba	8b bc 85 f0 ef
	ff ff		 mov	 edi, DWORD PTR _fd$[ebp+eax*4]
  000c1	53		 push	 ebx
  000c2	33 f6		 xor	 esi, esi
  000c4	8d 85 44 ea ff
	ff		 lea	 eax, DWORD PTR _req$98796[ebp]
  000ca	56		 push	 esi
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 _memset
  000d1	6a 01		 push	 1
  000d3	56		 push	 esi
  000d4	56		 push	 esi
  000d5	8d 85 1c e9 ff
	ff		 lea	 eax, DWORD PTR _username$[ebp]
  000db	50		 push	 eax
  000dc	8d 85 44 ea ff
	ff		 lea	 eax, DWORD PTR _req$98796[ebp]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ?stunBuildReqSimple@@YAXPAUStunMessage@@ABUStunAtrString@@_N2I@Z ; stunBuildReqSimple
  000e8	ff 75 20	 push	 DWORD PTR _verbose$[ebp]
  000eb	8d 85 d8 ee ff
	ff		 lea	 eax, DWORD PTR _password$[ebp]
  000f1	50		 push	 eax
  000f2	68 00 08 00 00	 push	 2048			; 00000800H
  000f7	8d 85 fc ef ff
	ff		 lea	 eax, DWORD PTR _buf$98797[ebp]
  000fd	50		 push	 eax
  000fe	8d 85 44 ea ff
	ff		 lea	 eax, DWORD PTR _req$98796[ebp]
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ?stunEncodeMessage@@YAIABUStunMessage@@PADIABUStunAtrString@@_N@Z ; stunEncodeMessage
  0010a	8b b5 3c ea ff
	ff		 mov	 esi, DWORD PTR _dest$GSCopy$[ebp]
  00110	83 c4 34	 add	 esp, 52			; 00000034H
  00113	80 7d 20 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  00117	89 85 28 ea ff
	ff		 mov	 DWORD PTR _len$98798[ebp], eax
  0011d	74 36		 je	 SHORT $LN45@stunOpenSo@2
  0011f	56		 push	 esi
  00120	68 00 00 00 00	 push	 OFFSET ??_C@_04MKEOLIJC@?5to?5?$AA@
  00125	50		 push	 eax
  00126	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@GGJMGLBI@About?5to?5send?5msg?5of?5len?5?$AA@
  0012b	68 00 00 00 00	 push	 OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00130	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00135	59		 pop	 ecx
  00136	59		 pop	 ecx
  00137	8b c8		 mov	 ecx, eax
  00139	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0013e	50		 push	 eax
  0013f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00144	59		 pop	 ecx
  00145	59		 pop	 ecx
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00152	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN45@stunOpenSo@2:
  00155	ff 75 20	 push	 DWORD PTR _verbose$[ebp]
  00158	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0015b	50		 push	 eax
  0015c	ff 76 02	 push	 DWORD PTR [esi+2]
  0015f	8d 85 fc ef ff
	ff		 lea	 eax, DWORD PTR _buf$98797[ebp]
  00165	ff b5 28 ea ff
	ff		 push	 DWORD PTR _len$98798[ebp]
  0016b	50		 push	 eax
  0016c	57		 push	 edi
  0016d	e8 00 00 00 00	 call	 ?sendMessage@@YA_NIPADHIG_N@Z ; sendMessage
  00172	83 c4 18	 add	 esp, 24			; 00000018H
  00175	e8 00 00 00 00	 call	 _clock
  0017a	8d 70 0a	 lea	 esi, DWORD PTR [eax+10]
$LL33@stunOpenSo@2:
  0017d	e8 00 00 00 00	 call	 _clock
  00182	3b c6		 cmp	 eax, esi
  00184	7e f7		 jle	 SHORT $LL33@stunOpenSo@2

; 2272 :    password.sizeValue = 0;
; 2273 : 	
; 2274 : #ifdef USE_TLS
; 2275 :    stunGetUserNameAndPassword( dest, username, password );
; 2276 : #endif
; 2277 : 	
; 2278 :    for( i=0; i<NUM; i++)

  00186	ff 85 40 ea ff
	ff		 inc	 DWORD PTR _i$[ebp]
  0018c	83 bd 40 ea ff
	ff 03		 cmp	 DWORD PTR _i$[ebp], 3
  00193	0f 8c 1b ff ff
	ff		 jl	 $LL71@stunOpenSo@2

; 2281 :    }
; 2282 : 	
; 2283 :    StunAddress4 mappedAddr[NUM];
; 2284 :    for( i=0; i<NUM; i++)

  00199	83 a5 40 ea ff
	ff 00		 and	 DWORD PTR _i$[ebp], 0
  001a0	8d 85 dc ef ff
	ff		 lea	 eax, DWORD PTR _mappedAddr$[ebp]
  001a6	89 85 3c ea ff
	ff		 mov	 DWORD PTR tv490[ebp], eax
$LL67@stunOpenSo@2:

; 2285 :    {
; 2286 :       msgLen = sizeof(msg)/sizeof(*msg);
; 2287 :       getMessage( fd[i],
; 2288 :                   msg,
; 2289 :                   &msgLen,
; 2290 :                   &from.addr,
; 2291 :                   &from.port ,verbose);

  001ac	ff 75 20	 push	 DWORD PTR _verbose$[ebp]
  001af	8d 85 20 ea ff
	ff		 lea	 eax, DWORD PTR _from$[ebp]
  001b5	50		 push	 eax
  001b6	8d 85 22 ea ff
	ff		 lea	 eax, DWORD PTR _from$[ebp+2]
  001bc	50		 push	 eax
  001bd	8d 85 38 ea ff
	ff		 lea	 eax, DWORD PTR _msgLen$[ebp]
  001c3	50		 push	 eax
  001c4	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  001ca	50		 push	 eax
  001cb	8b 85 40 ea ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  001d1	ff b4 85 f0 ef
	ff ff		 push	 DWORD PTR _fd$[ebp+eax*4]
  001d8	c7 85 38 ea ff
	ff 00 08 00 00	 mov	 DWORD PTR _msgLen$[ebp], 2048 ; 00000800H
  001e2	e8 00 00 00 00	 call	 ?getMessage@@YA_NIPADPAHPAIPAG_N@Z ; getMessage

; 2292 : 		
; 2293 :       StunMessage resp;
; 2294 :       memset(&resp, 0, sizeof(StunMessage));

  001e7	53		 push	 ebx
  001e8	33 f6		 xor	 esi, esi
  001ea	8d 85 44 ea ff
	ff		 lea	 eax, DWORD PTR _resp$88605[ebp]
  001f0	56		 push	 esi
  001f1	50		 push	 eax
  001f2	e8 00 00 00 00	 call	 _memset

; 2295 : 		
; 2296 :       bool ok = stunParseMessage( msg, msgLen, resp, verbose );

  001f7	ff 75 20	 push	 DWORD PTR _verbose$[ebp]
  001fa	8d 85 44 ea ff
	ff		 lea	 eax, DWORD PTR _resp$88605[ebp]
  00200	50		 push	 eax
  00201	ff b5 38 ea ff
	ff		 push	 DWORD PTR _msgLen$[ebp]
  00207	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  0020d	50		 push	 eax
  0020e	e8 00 00 00 00	 call	 ?stunParseMessage@@YA_NPADIAAUStunMessage@@_N@Z ; stunParseMessage
  00213	83 c4 34	 add	 esp, 52			; 00000034H

; 2297 :       if (!ok) 

  00216	84 c0		 test	 al, al
  00218	0f 84 ee 00 00
	00		 je	 $LL59@stunOpenSo@2

; 2304 :       }
; 2305 : 		
; 2306 :       mappedAddr[i] = resp.mappedAddress.ipv4;

  0021e	8b bd 3c ea ff
	ff		 mov	 edi, DWORD PTR tv490[ebp]
  00224	ff 85 40 ea ff
	ff		 inc	 DWORD PTR _i$[ebp]
  0022a	83 85 3c ea ff
	ff 06		 add	 DWORD PTR tv490[ebp], 6
  00231	83 bd 40 ea ff
	ff 03		 cmp	 DWORD PTR _i$[ebp], 3
  00238	8d b5 5b ea ff
	ff		 lea	 esi, DWORD PTR _resp$88605[ebp+23]
  0023e	a5		 movsd
  0023f	66 a5		 movsw
  00241	0f 8c 65 ff ff
	ff		 jl	 $LL67@stunOpenSo@2

; 2307 :    }
; 2308 : 	
; 2309 :    if (verbose)

  00247	80 7d 20 00	 cmp	 BYTE PTR _verbose$[ebp], 0
  0024b	74 45		 je	 SHORT $LN68@stunOpenSo@2

; 2310 :    {               
; 2311 :       clog << "--- stunOpenSocketPair --- " << endl;

  0024d	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@ODCOCING@?9?9?9?5stunOpenSocketPair?5?9?9?9?5?$AA@
  00252	be 00 00 00 00	 mov	 esi, OFFSET ?clog@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::clog
  00257	56		 push	 esi
  00258	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0025d	50		 push	 eax
  0025e	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00263	83 c4 0c	 add	 esp, 12			; 0000000cH
  00266	6a 03		 push	 3
  00268	8d bd dc ef ff
	ff		 lea	 edi, DWORD PTR _mappedAddr$[ebp]
  0026e	5b		 pop	 ebx
$LL10@stunOpenSo@2:

; 2312 :       for( i=0; i<NUM; i++)
; 2313 :       {
; 2314 :          clog << "\t mappedAddr=" << mappedAddr[i] << endl;

  0026f	57		 push	 edi
  00270	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NELMAKGH@?7?5mappedAddr?$DN?$AA@
  00275	56		 push	 esi
  00276	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0027b	59		 pop	 ecx
  0027c	59		 pop	 ecx
  0027d	50		 push	 eax
  0027e	e8 00 00 00 00	 call	 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABUStunAddress4@@@Z ; operator<<
  00283	50		 push	 eax
  00284	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00289	83 c4 0c	 add	 esp, 12			; 0000000cH
  0028c	83 c7 06	 add	 edi, 6
  0028f	4b		 dec	 ebx
  00290	75 dd		 jne	 SHORT $LL10@stunOpenSo@2
$LN68@stunOpenSo@2:

; 2315 :       }
; 2316 :    }
; 2317 : 	
; 2318 :    if ( mappedAddr[0].port %2 == 0 )

  00292	0f b7 85 dc ef
	ff ff		 movzx	 eax, WORD PTR _mappedAddr$[ebp]
  00299	8b c8		 mov	 ecx, eax
  0029b	81 e1 01 00 00
	80		 and	 ecx, -2147483647	; 80000001H
  002a1	79 05		 jns	 SHORT $LN72@stunOpenSo@2
  002a3	49		 dec	 ecx
  002a4	83 c9 fe	 or	 ecx, -2			; fffffffeH
  002a7	41		 inc	 ecx
$LN72@stunOpenSo@2:
  002a8	75 77		 jne	 SHORT $LN7@stunOpenSo@2

; 2319 :    {
; 2320 :       if (  mappedAddr[0].port+1 ==  mappedAddr[1].port )

  002aa	0f b7 8d e2 ef
	ff ff		 movzx	 ecx, WORD PTR _mappedAddr$[ebp+6]
  002b1	40		 inc	 eax
  002b2	3b c1		 cmp	 eax, ecx
  002b4	0f 85 b9 00 00
	00		 jne	 $LN4@stunOpenSo@2

; 2321 :       {
; 2322 :          *mapAddr = mappedAddr[0];

  002ba	8b bd 2c ea ff
	ff		 mov	 edi, DWORD PTR _mapAddr$GSCopy$[ebp]

; 2323 :          *fd1 = fd[0];

  002c0	8b 85 f0 ef ff
	ff		 mov	 eax, DWORD PTR _fd$[ebp]
  002c6	8b 8d 30 ea ff
	ff		 mov	 ecx, DWORD PTR _fd1$GSCopy$[ebp]

; 2325 :          closesocket( fd[2] );

  002cc	ff b5 f8 ef ff
	ff		 push	 DWORD PTR _fd$[ebp+8]
  002d2	8d b5 dc ef ff
	ff		 lea	 esi, DWORD PTR _mappedAddr$[ebp]
  002d8	a5		 movsd
  002d9	66 a5		 movsw
  002db	89 01		 mov	 DWORD PTR [ecx], eax
  002dd	8b 85 f4 ef ff
	ff		 mov	 eax, DWORD PTR _fd$[ebp+4]
$LN77@stunOpenSo@2:

; 2324 :          *fd2 = fd[1];

  002e3	8b 8d 34 ea ff
	ff		 mov	 ecx, DWORD PTR _fd2$GSCopy$[ebp]
  002e9	89 01		 mov	 DWORD PTR [ecx], eax

; 2325 :          closesocket( fd[2] );

  002eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 2326 :          return true;

  002f1	b0 01		 mov	 al, 1
  002f3	e9 92 00 00 00	 jmp	 $LN30@stunOpenSo@2
$LL23@stunOpenSo@2:

; 2261 :          {
; 2262 :             closesocket(fd[--i]);

  002f8	ff b4 b5 ec ef
	ff ff		 push	 DWORD PTR _fd$[ebp+esi*4-4]
  002ff	4e		 dec	 esi
  00300	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
$LN74@stunOpenSo@2:

; 2259 :       {
; 2260 :          while (i > 0)

  00306	85 f6		 test	 esi, esi
  00308	7f ee		 jg	 SHORT $LL23@stunOpenSo@2

; 2263 :          }
; 2264 :          return false;

  0030a	eb 7c		 jmp	 SHORT $LN75@stunOpenSo@2
$LL59@stunOpenSo@2:

; 2298 :       {
; 2299 : 		   for( i=0; i<NUM; i++)
; 2300 : 		   {
; 2301 : 			  closesocket( fd[i] );

  0030c	ff b4 b5 f0 ef
	ff ff		 push	 DWORD PTR _fd$[ebp+esi*4]
  00313	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
  00319	46		 inc	 esi
  0031a	83 fe 03	 cmp	 esi, 3
  0031d	7c ed		 jl	 SHORT $LL59@stunOpenSo@2

; 2302 : 		   }
; 2303 :          return false;

  0031f	eb 67		 jmp	 SHORT $LN75@stunOpenSo@2
$LN7@stunOpenSo@2:

; 2327 :       }
; 2328 :    }
; 2329 :    else
; 2330 :    {
; 2331 :       if (( mappedAddr[1].port %2 == 0 )
; 2332 :           && (  mappedAddr[1].port+1 ==  mappedAddr[2].port ))

  00321	0f b7 85 e2 ef
	ff ff		 movzx	 eax, WORD PTR _mappedAddr$[ebp+6]
  00328	8b c8		 mov	 ecx, eax
  0032a	81 e1 01 00 00
	80		 and	 ecx, -2147483647	; 80000001H
  00330	79 05		 jns	 SHORT $LN73@stunOpenSo@2
  00332	49		 dec	 ecx
  00333	83 c9 fe	 or	 ecx, -2			; fffffffeH
  00336	41		 inc	 ecx
$LN73@stunOpenSo@2:
  00337	75 3a		 jne	 SHORT $LN4@stunOpenSo@2
  00339	0f b7 8d e8 ef
	ff ff		 movzx	 ecx, WORD PTR _mappedAddr$[ebp+12]
  00340	40		 inc	 eax
  00341	3b c1		 cmp	 eax, ecx
  00343	75 2e		 jne	 SHORT $LN4@stunOpenSo@2

; 2333 :       {
; 2334 :          *mapAddr = mappedAddr[1];

  00345	8b bd 2c ea ff
	ff		 mov	 edi, DWORD PTR _mapAddr$GSCopy$[ebp]

; 2335 :          *fd1 = fd[1];

  0034b	8b 85 f4 ef ff
	ff		 mov	 eax, DWORD PTR _fd$[ebp+4]
  00351	8b 8d 30 ea ff
	ff		 mov	 ecx, DWORD PTR _fd1$GSCopy$[ebp]

; 2336 :          *fd2 = fd[2];
; 2337 :          closesocket( fd[0] );

  00357	ff b5 f0 ef ff
	ff		 push	 DWORD PTR _fd$[ebp]
  0035d	8d b5 e2 ef ff
	ff		 lea	 esi, DWORD PTR _mappedAddr$[ebp+6]
  00363	a5		 movsd
  00364	66 a5		 movsw
  00366	89 01		 mov	 DWORD PTR [ecx], eax
  00368	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR _fd$[ebp+8]

; 2338 :          return true;

  0036e	e9 70 ff ff ff	 jmp	 $LN77@stunOpenSo@2
$LN4@stunOpenSo@2:

; 2339 :       }
; 2340 :    }
; 2341 : 
; 2342 :    // something failed, close all and return error
; 2343 :    for( i=0; i<NUM; i++)

  00373	33 f6		 xor	 esi, esi
$LL3@stunOpenSo@2:

; 2344 :    {
; 2345 :       closesocket( fd[i] );

  00375	ff b4 b5 f0 ef
	ff ff		 push	 DWORD PTR _fd$[ebp+esi*4]
  0037c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
  00382	46		 inc	 esi
  00383	83 fe 03	 cmp	 esi, 3
  00386	7c ed		 jl	 SHORT $LL3@stunOpenSo@2
$LN75@stunOpenSo@2:

; 2346 :    }
; 2347 : 	
; 2348 :    return false;

  00388	32 c0		 xor	 al, al
$LN30@stunOpenSo@2:

; 2349 : }

  0038a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0038d	5f		 pop	 edi
  0038e	5e		 pop	 esi
  0038f	33 cd		 xor	 ecx, ebp
  00391	5b		 pop	 ebx
  00392	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00397	c9		 leave
  00398	c3		 ret	 0
?stunOpenSocketPair@@YA_NAAUStunAddress4@@PAU1@PAH2H1_N@Z ENDP ; stunOpenSocketPair
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 592  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 593  : 		_Tidy();
; 594  : 		assign(_Ptr);

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	e8 00 00 00 00	 call	 _strlen
  0001c	59		 pop	 ecx
  0001d	50		 push	 eax
  0001e	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 595  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 713  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 714  : 		if (this == &_Right)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	3b fe		 cmp	 edi, esi
  0000c	74 41		 je	 SHORT $LN43@assign@3

; 715  : 			;
; 716  : 		else if (get_allocator() != _Right.get_allocator()
; 717  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 718  : 			*this = _Right;
; 719  : 		else
; 720  : 			{	// not same, clear this and steal from _Right
; 721  : 			_Tidy(true);

  0000e	6a 00		 push	 0
  00010	6a 01		 push	 1
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 722  : 			if (_Right._Myres < this->_BUF_SIZE)

  00017	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0001b	73 11		 jae	 SHORT $LN2@assign@3

; 723  : 				_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 724  : 					_Right._Mysize + 1);

  0001d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00020	40		 inc	 eax
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	e8 00 00 00 00	 call	 _memmove
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 725  : 			else

  0002c	eb 07		 jmp	 SHORT $LN1@assign@3
$LN2@assign@3:

; 726  : 				{	// copy pointer
; 727  : 				this->_Bx._Ptr = _Right._Bx._Ptr;

  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	89 07		 mov	 DWORD PTR [edi], eax

; 728  : 				_Right._Bx._Ptr = 0;

  00032	83 26 00	 and	 DWORD PTR [esi], 0
$LN1@assign@3:

; 729  : 				}
; 730  : 			this->_Mysize = _Right._Mysize;

  00035	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00038	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 731  : 			this->_Myres = _Right._Myres;

  0003b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003e	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 732  : 
; 733  : 			_Right._Tidy();

  00041	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  00045	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0004c	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN43@assign@3:

; 734  : 			}
; 735  : 		return (*this);

  0004f	8b c7		 mov	 eax, edi
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi

; 736  : 		}

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	__Fill$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	_this$GSCopy$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$3
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
_TEXT	SEGMENT
$T99017 = -100						; size = 8
$T99014 = -96						; size = 4
$T99018 = -92						; size = 8
__Punct_fac$90019 = -88					; size = 4
___$ReturnUdt$GSCopy$ = -84				; size = 4
__Fill$GSCopy$ = -80					; size = 1
_this$GSCopy$ = -76					; size = 4
$T90085 = -72						; size = 28
$T90083 = -72						; size = 28
__Str$90026 = -44					; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 1
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1143 : 		{	// put formatted bool to _Dest

  00000	6a 58		 push	 88			; 00000058H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]

; 1144 : 		_DEBUG_POINTER(_Dest);
; 1145 : 		if (!(_Iosbase.flags() & ios_base::boolalpha))

  0000f	f7 46 14 00 40
	00 00		 test	 DWORD PTR [esi+20], 16384 ; 00004000H
  00016	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00019	8a 45 18	 mov	 al, BYTE PTR __Fill$[ebp]

; 1164 : 				}
; 1165 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  0001c	89 4d b4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001f	89 7d ac	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], edi
  00022	88 45 b0	 mov	 BYTE PTR __Fill$GSCopy$[ebp], al
  00025	75 1c		 jne	 SHORT $LN5@do_put@3

; 1146 : 			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));

  00027	0f b6 55 1c	 movzx	 edx, BYTE PTR __Val$[ebp]
  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	52		 push	 edx
  0002e	ff 75 b0	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00031	56		 push	 esi
  00032	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00035	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00038	57		 push	 edi
  00039	ff 50 1c	 call	 DWORD PTR [eax+28]
  0003c	8b c7		 mov	 eax, edi
  0003e	e9 10 01 00 00	 jmp	 $LN4@do_put@3
$LN5@do_put@3:

; 1147 : 		else
; 1148 : 			{	// put "false" or "true"
; 1149 : 			const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  00043	8d 45 a0	 lea	 eax, DWORD PTR $T99014[ebp]
  00046	50		 push	 eax
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  0004e	33 db		 xor	 ebx, ebx
  00050	50		 push	 eax
  00051	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00054	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  00059	59		 pop	 ecx
  0005a	8d 4d a0	 lea	 ecx, DWORD PTR $T99014[ebp]
  0005d	89 45 a8	 mov	 DWORD PTR __Punct_fac$90019[ebp], eax
  00060	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 1150 : 			_Mystr _Str;

  00065	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR __Str$90026[ebp+20], 15 ; 0000000fH
  0006c	89 5d e4	 mov	 DWORD PTR __Str$90026[ebp+16], ebx
  0006f	88 5d d4	 mov	 BYTE PTR __Str$90026[ebp], bl

; 1151 : 			if (_Val)
; 1152 : 				_Str.assign(_Punct_fac.truename());

  00072	8b 4d a8	 mov	 ecx, DWORD PTR __Punct_fac$90019[ebp]
  00075	33 ff		 xor	 edi, edi
  00077	47		 inc	 edi
  00078	8d 45 b8	 lea	 eax, DWORD PTR $T90083[ebp]
  0007b	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  0007e	50		 push	 eax
  0007f	38 5d 1c	 cmp	 BYTE PTR __Val$[ebp], bl
  00082	74 0b		 je	 SHORT $LN3@do_put@3
  00084	e8 00 00 00 00	 call	 ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
  00089	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 1153 : 			else

  0008d	eb 09		 jmp	 SHORT $LN79@do_put@3
$LN3@do_put@3:

; 1154 : 				_Str.assign(_Punct_fac.falsename());

  0008f	e8 00 00 00 00	 call	 ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
  00094	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
$LN79@do_put@3:
  00098	50		 push	 eax
  00099	8d 4d d4	 lea	 ecx, DWORD PTR __Str$90026[ebp]
  0009c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000a1	53		 push	 ebx
  000a2	57		 push	 edi
  000a3	8d 4d b8	 lea	 ecx, DWORD PTR $T90085[ebp]
  000a6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000aa	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1155 : 
; 1156 : 			size_t _Fillcount = _Iosbase.width() <= 0
; 1157 : 				|| (size_t)_Iosbase.width() <= _Str.size()
; 1158 : 					? 0 : (size_t)_Iosbase.width() - _Str.size();

  000af	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000b2	39 5e 24	 cmp	 DWORD PTR [esi+36], ebx
  000b5	7c 12		 jl	 SHORT $LN8@do_put@3
  000b7	7f 04		 jg	 SHORT $LN76@do_put@3
  000b9	3b c3		 cmp	 eax, ebx
  000bb	76 0c		 jbe	 SHORT $LN8@do_put@3
$LN76@do_put@3:
  000bd	3b 45 e4	 cmp	 eax, DWORD PTR __Str$90026[ebp+16]
  000c0	76 07		 jbe	 SHORT $LN8@do_put@3
  000c2	2b 45 e4	 sub	 eax, DWORD PTR __Str$90026[ebp+16]
  000c5	8b f8		 mov	 edi, eax
  000c7	eb 02		 jmp	 SHORT $LN9@do_put@3
$LN8@do_put@3:
  000c9	33 ff		 xor	 edi, edi
$LN9@do_put@3:

; 1159 : 
; 1160 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

  000cb	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000ce	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000d3	83 f8 40	 cmp	 eax, 64			; 00000040H
  000d6	74 26		 je	 SHORT $LN1@do_put@3

; 1161 : 				{	// put leading fill
; 1162 : 				_Dest = _Rep(_Dest, _Fill, _Fillcount);

  000d8	57		 push	 edi
  000d9	ff 75 b0	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  000dc	8d 45 9c	 lea	 eax, DWORD PTR $T99017[ebp]
  000df	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  000e2	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  000e5	50		 push	 eax
  000e6	ff 75 b4	 push	 DWORD PTR _this$GSCopy$[ebp]
  000e9	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  000ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f0	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  000f3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f6	83 c4 18	 add	 esp, 24			; 00000018H
  000f9	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax

; 1163 : 				_Fillcount = 0;

  000fc	33 ff		 xor	 edi, edi
$LN1@do_put@3:

; 1164 : 				}
; 1165 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  000fe	83 7d e8 10	 cmp	 DWORD PTR __Str$90026[ebp+20], 16 ; 00000010H
  00102	8b 45 d4	 mov	 eax, DWORD PTR __Str$90026[ebp]
  00105	73 03		 jae	 SHORT $LN69@do_put@3
  00107	8d 45 d4	 lea	 eax, DWORD PTR __Str$90026[ebp]
$LN69@do_put@3:
  0010a	ff 75 e4	 push	 DWORD PTR __Str$90026[ebp+16]
  0010d	50		 push	 eax
  0010e	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00111	8d 45 a4	 lea	 eax, DWORD PTR $T99018[ebp]
  00114	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00117	50		 push	 eax
  00118	ff 75 b4	 push	 DWORD PTR _this$GSCopy$[ebp]
  0011b	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00120	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1166 : 			_Iosbase.width(0);
; 1167 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00122	57		 push	 edi
  00123	ff 75 b0	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00126	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  00129	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0012c	50		 push	 eax
  0012d	51		 push	 ecx
  0012e	ff 75 ac	 push	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00131	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00134	ff 75 b4	 push	 DWORD PTR _this$GSCopy$[ebp]
  00137	89 5e 20	 mov	 DWORD PTR [esi+32], ebx
  0013a	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  0013d	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00142	83 c4 30	 add	 esp, 48			; 00000030H
  00145	53		 push	 ebx
  00146	6a 01		 push	 1
  00148	8d 4d d4	 lea	 ecx, DWORD PTR __Str$90026[ebp]
  0014b	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00150	8b 45 ac	 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
$LN4@do_put@3:

; 1168 : 			}
; 1169 : 		}

  00153	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00158	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0:
  00000	8d 4d a0	 lea	 ecx, DWORD PTR $T99014[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Str$90026[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$2:
  00010	8d 4d b8	 lea	 ecx, DWORD PTR $T90083[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$3:
  00018	8d 4d b8	 lea	 ecx, DWORD PTR $T90085[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogsp
;	COMDAT ?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T99206 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_grouping, COMDAT
; _this$ = ecx

; 173  : 		{	// return grouping string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 174  : 		return (string(_Grouping));

  00004	ff 71 08	 push	 DWORD PTR [ecx+8]
  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	83 65 fc 00	 and	 DWORD PTR $T99206[ebp], 0
  0000e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 175  : 		}

  00016	c9		 leave
  00017	c2 04 00	 ret	 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_grouping
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T99211 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_falsename, COMDAT
; _this$ = ecx

; 178  : 		{	// return name for false

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 179  : 		return (string_type(_Falsename));

  00004	ff 71 10	 push	 DWORD PTR [ecx+16]
  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	83 65 fc 00	 and	 DWORD PTR $T99211[ebp], 0
  0000e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 180  : 		}

  00016	c9		 leave
  00017	c2 04 00	 ret	 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_falsename
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T99216 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_truename, COMDAT
; _this$ = ecx

; 183  : 		{	// return name for true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 184  : 		return (string_type(_Truename));

  00004	ff 71 14	 push	 DWORD PTR [ecx+20]
  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	83 65 fc 00	 and	 DWORD PTR $T99216[ebp], 0
  0000e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 185  : 		}

  00016	c9		 leave
  00017	c2 04 00	 ret	 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_truename
_TEXT	ENDS
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
END
